// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

namespace AsmArm64;

/// <summary>
/// A list of all ARM64 instruction ids.
/// </summary>
public enum Arm64InstructionId
{
    /// <summary>
    /// This instruction is invalid / undefined.
    /// </summary>
    Invalid,
    /// <summary>
    /// Instruction ABS - Absolute value.
    /// </summary>
    ABS_32_dp_1src,
    /// <summary>
    /// Instruction ABS - Absolute value.
    /// </summary>
    ABS_64_dp_1src,
    /// <summary>
    /// Instruction ABS - Absolute value (vector).
    /// </summary>
    ABS_asimdmisc_r,
    /// <summary>
    /// Instruction ABS - Absolute value (vector).
    /// </summary>
    ABS_asisdmisc_r,
    /// <summary>
    /// Instruction ABS - Absolute value (predicated).
    /// </summary>
    ABS_z_p_z_m,
    /// <summary>
    /// Instruction ABS - Absolute value (predicated).
    /// </summary>
    ABS_z_p_z_z,
    /// <summary>
    /// Instruction ADCLB - Add with carry long (bottom).
    /// </summary>
    ADCLB_z_zzz,
    /// <summary>
    /// Instruction ADCLT - Add with carry long (top).
    /// </summary>
    ADCLT_z_zzz,
    /// <summary>
    /// Instruction ADCS - Add with carry, setting flags.
    /// </summary>
    ADCS_32_addsub_carry,
    /// <summary>
    /// Instruction ADCS - Add with carry, setting flags.
    /// </summary>
    ADCS_64_addsub_carry,
    /// <summary>
    /// Instruction ADC - Add with carry.
    /// </summary>
    ADC_32_addsub_carry,
    /// <summary>
    /// Instruction ADC - Add with carry.
    /// </summary>
    ADC_64_addsub_carry,
    /// <summary>
    /// Instruction ADDG - Add with tag.
    /// </summary>
    ADDG_64_addsub_immtags,
    /// <summary>
    /// Instruction ADDHA - Add horizontally vector elements to ZA tile.
    /// </summary>
    ADDHA_za_pp_z_32,
    /// <summary>
    /// Instruction ADDHA - Add horizontally vector elements to ZA tile.
    /// </summary>
    ADDHA_za_pp_z_64,
    /// <summary>
    /// Instruction ADDHNB - Add narrow high part (bottom).
    /// </summary>
    ADDHNB_z_zz,
    /// <summary>
    /// Instruction ADDHNT - Add narrow high part (top).
    /// </summary>
    ADDHNT_z_zz,
    /// <summary>
    /// Instruction ADDHN - Add returning high narrow.
    /// </summary>
    ADDHN_asimddiff_n,
    /// <summary>
    /// Instruction ADDPL - Add multiple of predicate register size to scalar register.
    /// </summary>
    ADDPL_r_ri,
    /// <summary>
    /// Instruction ADDPT - Add checked pointer.
    /// </summary>
    ADDPT_64_addsub_pt,
    /// <summary>
    /// Instruction ADDPT - Add checked pointer vectors (predicated).
    /// </summary>
    ADDPT_z_p_zz,
    /// <summary>
    /// Instruction ADDPT - Add checked pointer vectors (unpredicated).
    /// </summary>
    ADDPT_z_zz,
    /// <summary>
    /// Instruction ADDP - Add pairwise (vector).
    /// </summary>
    ADDP_asimdsame_only,
    /// <summary>
    /// Instruction ADDP - Add pair of elements (scalar).
    /// </summary>
    ADDP_asisdpair_only,
    /// <summary>
    /// Instruction ADDP - Add pairwise.
    /// </summary>
    ADDP_z_p_zz,
    /// <summary>
    /// Instruction ADDQV - Unsigned add reduction of quadword vector segments.
    /// </summary>
    ADDQV_z_p_z,
    /// <summary>
    /// Instruction ADDSPL - Add multiple of Streaming SVE predicate register size to scalar register.
    /// </summary>
    ADDSPL_r_ri,
    /// <summary>
    /// Instruction ADDSVL - Add multiple of Streaming SVE vector register size to scalar register.
    /// </summary>
    ADDSVL_r_ri,
    /// <summary>
    /// Instruction ADDS - Add optionally-shifted register, setting flags.
    /// </summary>
    ADDS_32_addsub_shift,
    /// <summary>
    /// Instruction ADDS - Add extended and scaled register, setting flags.
    /// </summary>
    ADDS_32s_addsub_ext,
    /// <summary>
    /// Instruction ADDS - Add immediate value, setting flags.
    /// </summary>
    ADDS_32s_addsub_imm,
    /// <summary>
    /// Instruction ADDS - Add optionally-shifted register, setting flags.
    /// </summary>
    ADDS_64_addsub_shift,
    /// <summary>
    /// Instruction ADDS - Add extended and scaled register, setting flags.
    /// </summary>
    ADDS_64s_addsub_ext,
    /// <summary>
    /// Instruction ADDS - Add immediate value, setting flags.
    /// </summary>
    ADDS_64s_addsub_imm,
    /// <summary>
    /// Instruction ADDVA - Add vertically vector elements to ZA tile.
    /// </summary>
    ADDVA_za_pp_z_32,
    /// <summary>
    /// Instruction ADDVA - Add vertically vector elements to ZA tile.
    /// </summary>
    ADDVA_za_pp_z_64,
    /// <summary>
    /// Instruction ADDVL - Add multiple of vector register size to scalar register.
    /// </summary>
    ADDVL_r_ri,
    /// <summary>
    /// Instruction ADDV - Add across vector.
    /// </summary>
    ADDV_asimdall_only,
    /// <summary>
    /// Instruction ADD - Add extended and scaled register.
    /// </summary>
    ADD_32_addsub_ext,
    /// <summary>
    /// Instruction ADD - Add immediate value.
    /// </summary>
    ADD_32_addsub_imm,
    /// <summary>
    /// Instruction ADD - Add optionally-shifted register.
    /// </summary>
    ADD_32_addsub_shift,
    /// <summary>
    /// Instruction ADD - Add extended and scaled register.
    /// </summary>
    ADD_64_addsub_ext,
    /// <summary>
    /// Instruction ADD - Add immediate value.
    /// </summary>
    ADD_64_addsub_imm,
    /// <summary>
    /// Instruction ADD - Add optionally-shifted register.
    /// </summary>
    ADD_64_addsub_shift,
    /// <summary>
    /// Instruction ADD - Add (vector).
    /// </summary>
    ADD_asimdsame_only,
    /// <summary>
    /// Instruction ADD - Add (vector).
    /// </summary>
    ADD_asisdsame_only,
    /// <summary>
    /// Instruction ADD - Add replicated single vector to multi-vector with multi-vector result.
    /// </summary>
    ADD_mz_zzv_2x1,
    /// <summary>
    /// Instruction ADD - Add replicated single vector to multi-vector with multi-vector result.
    /// </summary>
    ADD_mz_zzv_4x1,
    /// <summary>
    /// Instruction ADD - Add vectors (predicated).
    /// </summary>
    ADD_z_p_zz,
    /// <summary>
    /// Instruction ADD - Add immediate (unpredicated).
    /// </summary>
    ADD_z_zi,
    /// <summary>
    /// Instruction ADD - Add vectors (unpredicated).
    /// </summary>
    ADD_z_zz,
    /// <summary>
    /// Instruction ADD - Add multi-vector to ZA array vector accumulators.
    /// </summary>
    ADD_za_zw_2x2,
    /// <summary>
    /// Instruction ADD - Add multi-vector to ZA array vector accumulators.
    /// </summary>
    ADD_za_zw_4x4,
    /// <summary>
    /// Instruction ADD - Add replicated single vector to multi-vector with ZA array vector results.
    /// </summary>
    ADD_za_zzv_2x1,
    /// <summary>
    /// Instruction ADD - Add replicated single vector to multi-vector with ZA array vector results.
    /// </summary>
    ADD_za_zzv_4x1,
    /// <summary>
    /// Instruction ADD - Add multi-vector to multi-vector with ZA array vector results.
    /// </summary>
    ADD_za_zzw_2x2,
    /// <summary>
    /// Instruction ADD - Add multi-vector to multi-vector with ZA array vector results.
    /// </summary>
    ADD_za_zzw_4x4,
    /// <summary>
    /// Instruction ADRP - Form PC-relative address to 4KB page.
    /// </summary>
    ADRP_only_pcreladdr,
    /// <summary>
    /// Instruction ADR - Form PC-relative address.
    /// </summary>
    ADR_only_pcreladdr,
    /// <summary>
    /// Instruction ADR - Compute vector address.
    /// </summary>
    ADR_z_az_d_s32_scaled,
    /// <summary>
    /// Instruction ADR - Compute vector address.
    /// </summary>
    ADR_z_az_d_u32_scaled,
    /// <summary>
    /// Instruction ADR - Compute vector address.
    /// </summary>
    ADR_z_az_sd_same_scaled,
    /// <summary>
    /// Instruction AESDIMC - Multi-vector AES single round decryption and inverse mix columns.
    /// </summary>
    AESDIMC_mz_zzi_2x1,
    /// <summary>
    /// Instruction AESDIMC - Multi-vector AES single round decryption and inverse mix columns.
    /// </summary>
    AESDIMC_mz_zzi_4x1,
    /// <summary>
    /// Instruction AESD - AES single round decryption.
    /// </summary>
    AESD_b_cryptoaes,
    /// <summary>
    /// Instruction AESD - Multi-vector AES single round decryption.
    /// </summary>
    AESD_mz_zzi_2x1,
    /// <summary>
    /// Instruction AESD - Multi-vector AES single round decryption.
    /// </summary>
    AESD_mz_zzi_4x1,
    /// <summary>
    /// Instruction AESD - AES single round decryption.
    /// </summary>
    AESD_z_zz,
    /// <summary>
    /// Instruction AESEMC - Multi-vector AES single round encryption and mix columns.
    /// </summary>
    AESEMC_mz_zzi_2x1,
    /// <summary>
    /// Instruction AESEMC - Multi-vector AES single round encryption and mix columns.
    /// </summary>
    AESEMC_mz_zzi_4x1,
    /// <summary>
    /// Instruction AESE - AES single round encryption.
    /// </summary>
    AESE_b_cryptoaes,
    /// <summary>
    /// Instruction AESE - Multi-vector AES single round encryption.
    /// </summary>
    AESE_mz_zzi_2x1,
    /// <summary>
    /// Instruction AESE - Multi-vector AES single round encryption.
    /// </summary>
    AESE_mz_zzi_4x1,
    /// <summary>
    /// Instruction AESE - AES single round encryption.
    /// </summary>
    AESE_z_zz,
    /// <summary>
    /// Instruction AESIMC - AES inverse mix columns.
    /// </summary>
    AESIMC_b_cryptoaes,
    /// <summary>
    /// Instruction AESIMC - AES inverse mix columns.
    /// </summary>
    AESIMC_z_z,
    /// <summary>
    /// Instruction AESMC - AES mix columns.
    /// </summary>
    AESMC_b_cryptoaes,
    /// <summary>
    /// Instruction AESMC - AES mix columns.
    /// </summary>
    AESMC_z_z,
    /// <summary>
    /// Instruction ANDQV - Bitwise AND reduction of quadword vector segments.
    /// </summary>
    ANDQV_z_p_z,
    /// <summary>
    /// Instruction ANDS - Bitwise AND (shifted register), setting flags.
    /// </summary>
    ANDS_32_log_shift,
    /// <summary>
    /// Instruction ANDS - Bitwise AND (immediate), setting flags.
    /// </summary>
    ANDS_32s_log_imm,
    /// <summary>
    /// Instruction ANDS - Bitwise AND (shifted register), setting flags.
    /// </summary>
    ANDS_64_log_shift,
    /// <summary>
    /// Instruction ANDS - Bitwise AND (immediate), setting flags.
    /// </summary>
    ANDS_64s_log_imm,
    /// <summary>
    /// Instruction ANDS - Bitwise AND predicates, setting the condition flags.
    /// </summary>
    ANDS_p_p_pp_z,
    /// <summary>
    /// Instruction ANDV - Bitwise AND reduction to scalar.
    /// </summary>
    ANDV_r_p_z,
    /// <summary>
    /// Instruction AND - Bitwise AND (immediate).
    /// </summary>
    AND_32_log_imm,
    /// <summary>
    /// Instruction AND - Bitwise AND (shifted register).
    /// </summary>
    AND_32_log_shift,
    /// <summary>
    /// Instruction AND - Bitwise AND (immediate).
    /// </summary>
    AND_64_log_imm,
    /// <summary>
    /// Instruction AND - Bitwise AND (shifted register).
    /// </summary>
    AND_64_log_shift,
    /// <summary>
    /// Instruction AND - Bitwise AND (vector).
    /// </summary>
    AND_asimdsame_only,
    /// <summary>
    /// Instruction AND - Bitwise AND predicates.
    /// </summary>
    AND_p_p_pp_z,
    /// <summary>
    /// Instruction AND - Bitwise AND vectors (predicated).
    /// </summary>
    AND_z_p_zz,
    /// <summary>
    /// Instruction AND - Bitwise AND with immediate (unpredicated).
    /// </summary>
    AND_z_zi,
    /// <summary>
    /// Instruction AND - Bitwise AND vectors (unpredicated).
    /// </summary>
    AND_z_zz,
    /// <summary>
    /// Instruction ASRD - Arithmetic shift right for divide by immediate (predicated).
    /// </summary>
    ASRD_z_p_zi,
    /// <summary>
    /// Instruction ASRR - Reversed arithmetic shift right by vector (predicated).
    /// </summary>
    ASRR_z_p_zz,
    /// <summary>
    /// Instruction ASRV - Arithmetic shift right variable.
    /// </summary>
    ASRV_32_dp_2src,
    /// <summary>
    /// Instruction ASRV - Arithmetic shift right variable.
    /// </summary>
    ASRV_64_dp_2src,
    /// <summary>
    /// Instruction ASR - Arithmetic shift right by immediate (predicated).
    /// </summary>
    ASR_z_p_zi,
    /// <summary>
    /// Instruction ASR - Arithmetic shift right by 64-bit wide elements (predicated).
    /// </summary>
    ASR_z_p_zw,
    /// <summary>
    /// Instruction ASR - Arithmetic shift right by vector (predicated).
    /// </summary>
    ASR_z_p_zz,
    /// <summary>
    /// Instruction ASR - Arithmetic shift right by immediate (unpredicated).
    /// </summary>
    ASR_z_zi,
    /// <summary>
    /// Instruction ASR - Arithmetic shift right by 64-bit wide elements (unpredicated).
    /// </summary>
    ASR_z_zw,
    /// <summary>
    /// Instruction AUTDA - Authenticate data address, using key A.
    /// </summary>
    AUTDA_64p_dp_1src,
    /// <summary>
    /// Instruction AUTDB - Authenticate data address, using key B.
    /// </summary>
    AUTDB_64p_dp_1src,
    /// <summary>
    /// Instruction AUTDZA - Authenticate data address, using key A.
    /// </summary>
    AUTDZA_64z_dp_1src,
    /// <summary>
    /// Instruction AUTDZB - Authenticate data address, using key B.
    /// </summary>
    AUTDZB_64z_dp_1src,
    /// <summary>
    /// Instruction AUTIA171615 - Authenticate instruction address, using key A.
    /// </summary>
    AUTIA171615_64lr_dp_1src,
    /// <summary>
    /// Instruction AUTIA1716 - Authenticate instruction address, using key A.
    /// </summary>
    AUTIA1716_hi_hints,
    /// <summary>
    /// Instruction AUTIASPPCR - Authenticate return address using key A, using a register.
    /// </summary>
    AUTIASPPCR_64lrr_dp_1src,
    /// <summary>
    /// Instruction AUTIASPPC - Authenticate return address using key A, using an immediate offset.
    /// </summary>
    AUTIASPPC_only_dp_1src_imm,
    /// <summary>
    /// Instruction AUTIASP - Authenticate instruction address, using key A.
    /// </summary>
    AUTIASP_hi_hints,
    /// <summary>
    /// Instruction AUTIAZ - Authenticate instruction address, using key A.
    /// </summary>
    AUTIAZ_hi_hints,
    /// <summary>
    /// Instruction AUTIA - Authenticate instruction address, using key A.
    /// </summary>
    AUTIA_64p_dp_1src,
    /// <summary>
    /// Instruction AUTIB171615 - Authenticate instruction address, using key B.
    /// </summary>
    AUTIB171615_64lr_dp_1src,
    /// <summary>
    /// Instruction AUTIB1716 - Authenticate instruction address, using key B.
    /// </summary>
    AUTIB1716_hi_hints,
    /// <summary>
    /// Instruction AUTIBSPPCR - Authenticate return address using key B, using a register.
    /// </summary>
    AUTIBSPPCR_64lrr_dp_1src,
    /// <summary>
    /// Instruction AUTIBSPPC - Authenticate return address using key B, using an immediate offset.
    /// </summary>
    AUTIBSPPC_only_dp_1src_imm,
    /// <summary>
    /// Instruction AUTIBSP - Authenticate instruction address, using key B.
    /// </summary>
    AUTIBSP_hi_hints,
    /// <summary>
    /// Instruction AUTIBZ - Authenticate instruction address, using key B.
    /// </summary>
    AUTIBZ_hi_hints,
    /// <summary>
    /// Instruction AUTIB - Authenticate instruction address, using key B.
    /// </summary>
    AUTIB_64p_dp_1src,
    /// <summary>
    /// Instruction AUTIZA - Authenticate instruction address, using key A.
    /// </summary>
    AUTIZA_64z_dp_1src,
    /// <summary>
    /// Instruction AUTIZB - Authenticate instruction address, using key B.
    /// </summary>
    AUTIZB_64z_dp_1src,
    /// <summary>
    /// Instruction AXFLAG - Convert floating-point condition flags from Arm to external format.
    /// </summary>
    AXFLAG_m_pstate,
    /// <summary>
    /// Instruction BCAX - Bit clear and exclusive-OR.
    /// </summary>
    BCAX_vvv16_crypto4,
    /// <summary>
    /// Instruction BCAX - Bitwise clear and exclusive-OR.
    /// </summary>
    BCAX_z_zzz,
    /// <summary>
    /// Instruction BC - Branch consistent conditionally.
    /// </summary>
    BC_only_condbranch,
    /// <summary>
    /// Instruction BDEP - Scatter lower bits into positions selected by bitmask.
    /// </summary>
    BDEP_z_zz,
    /// <summary>
    /// Instruction BEXT - Gather lower bits from positions selected by bitmask.
    /// </summary>
    BEXT_z_zz,
    /// <summary>
    /// Instruction BF1CVTLT - 8-bit floating-point convert to BFloat16 (top).
    /// </summary>
    BF1CVTLT_z_z8_b2bf,
    /// <summary>
    /// Instruction BF1CVTL - 8-bit floating-point convert to BFloat16 (vector).
    /// </summary>
    BF1CVTL_asimdmisc_v,
    /// <summary>
    /// Instruction BF1CVTL - Multi-vector floating-point convert from 8-bit floating-point to deinterleaved BFloat16.
    /// </summary>
    BF1CVTL_mz2_z8,
    /// <summary>
    /// Instruction BF1CVT - Multi-vector floating-point convert from 8-bit floating-point to BFloat16 (in-order).
    /// </summary>
    BF1CVT_mz2_z8,
    /// <summary>
    /// Instruction BF1CVT - 8-bit floating-point convert to BFloat16.
    /// </summary>
    BF1CVT_z_z8_b2bf,
    /// <summary>
    /// Instruction BF2CVTLT - 8-bit floating-point convert to BFloat16 (top).
    /// </summary>
    BF2CVTLT_z_z8_b2bf,
    /// <summary>
    /// Instruction BF2CVTL - 8-bit floating-point convert to BFloat16 (vector).
    /// </summary>
    BF2CVTL_asimdmisc_v,
    /// <summary>
    /// Instruction BF2CVTL - Multi-vector floating-point convert from 8-bit floating-point to deinterleaved BFloat16.
    /// </summary>
    BF2CVTL_mz2_z8,
    /// <summary>
    /// Instruction BF2CVT - Multi-vector floating-point convert from 8-bit floating-point to BFloat16 (in-order).
    /// </summary>
    BF2CVT_mz2_z8,
    /// <summary>
    /// Instruction BF2CVT - 8-bit floating-point convert to BFloat16.
    /// </summary>
    BF2CVT_z_z8_b2bf,
    /// <summary>
    /// Instruction BFADD - BFloat16 floating-point add vectors (predicated).
    /// </summary>
    BFADD_z_p_zz,
    /// <summary>
    /// Instruction BFADD - BFloat16 floating-point add vectors (unpredicated).
    /// </summary>
    BFADD_z_zz,
    /// <summary>
    /// Instruction BFADD - BFloat16 floating-point add multi-vector to ZA array vector accumulators.
    /// </summary>
    BFADD_za_zw_2x2_16,
    /// <summary>
    /// Instruction BFADD - BFloat16 floating-point add multi-vector to ZA array vector accumulators.
    /// </summary>
    BFADD_za_zw_4x4_16,
    /// <summary>
    /// Instruction BFCLAMP - Multi-vector BFloat16 floating-point clamp to minimum/maximum number.
    /// </summary>
    BFCLAMP_mz_zz_2,
    /// <summary>
    /// Instruction BFCLAMP - Multi-vector BFloat16 floating-point clamp to minimum/maximum number.
    /// </summary>
    BFCLAMP_mz_zz_4,
    /// <summary>
    /// Instruction BFCLAMP - BFloat16 floating-point clamp to minimum/maximum number.
    /// </summary>
    BFCLAMP_z_zz,
    /// <summary>
    /// Instruction BFCVTNT - Floating-point down convert and narrow to BFloat16 (top, predicated).
    /// </summary>
    BFCVTNT_z_p_z_s2bf,
    /// <summary>
    /// Instruction BFCVTNT - Floating-point down convert and narrow to BFloat16 (top, predicated).
    /// </summary>
    BFCVTNT_z_p_z_s2bfz,
    /// <summary>
    /// Instruction BFCVTN - Floating-point convert from single-precision to BFloat16 format (vector).
    /// </summary>
    BFCVTN_asimdmisc_4s,
    /// <summary>
    /// Instruction BFCVTN - BFloat16 convert, narrow and interleave to 8-bit floating-point.
    /// </summary>
    BFCVTN_z8_mz2_bf2b,
    /// <summary>
    /// Instruction BFCVTN - Multi-vector floating-point convert from single-precision to interleaved BFloat16 format.
    /// </summary>
    BFCVTN_z_mz2,
    /// <summary>
    /// Instruction BFCVT - Floating-point convert from single-precision to BFloat16 format (scalar).
    /// </summary>
    BFCVT_bs_floatdp1,
    /// <summary>
    /// Instruction BFCVT - Multi-vector floating-point convert from BFloat16 to packed 8-bit floating-point format.
    /// </summary>
    BFCVT_z8_mz2,
    /// <summary>
    /// Instruction BFCVT - Multi-vector floating-point convert from single-precision to packed BFloat16 format.
    /// </summary>
    BFCVT_z_mz2,
    /// <summary>
    /// Instruction BFCVT - Floating-point down convert to BFloat16 format (predicated).
    /// </summary>
    BFCVT_z_p_z_s2bf,
    /// <summary>
    /// Instruction BFCVT - Floating-point down convert to BFloat16 format (predicated).
    /// </summary>
    BFCVT_z_p_z_s2bfz,
    /// <summary>
    /// Instruction BFDOT - BFloat16 floating-point dot product (vector, by element).
    /// </summary>
    BFDOT_asimdelem_e,
    /// <summary>
    /// Instruction BFDOT - BFloat16 floating-point dot product (vector).
    /// </summary>
    BFDOT_asimdsame2_d,
    /// <summary>
    /// Instruction BFDOT - BFloat16 floating-point dot product.
    /// </summary>
    BFDOT_z_zzz,
    /// <summary>
    /// Instruction BFDOT - BFloat16 floating-point indexed dot product.
    /// </summary>
    BFDOT_z_zzzi,
    /// <summary>
    /// Instruction BFDOT - Multi-vector BFloat16 floating-point dot-product by indexed element.
    /// </summary>
    BFDOT_za_zzi_2xi,
    /// <summary>
    /// Instruction BFDOT - Multi-vector BFloat16 floating-point dot-product by indexed element.
    /// </summary>
    BFDOT_za_zzi_4xi,
    /// <summary>
    /// Instruction BFDOT - Multi-vector BFloat16 floating-point dot-product by vector.
    /// </summary>
    BFDOT_za_zzv_2x1,
    /// <summary>
    /// Instruction BFDOT - Multi-vector BFloat16 floating-point dot-product by vector.
    /// </summary>
    BFDOT_za_zzv_4x1,
    /// <summary>
    /// Instruction BFDOT - Multi-vector BFloat16 floating-point dot-product.
    /// </summary>
    BFDOT_za_zzw_2x2,
    /// <summary>
    /// Instruction BFDOT - Multi-vector BFloat16 floating-point dot-product.
    /// </summary>
    BFDOT_za_zzw_4x4,
    /// <summary>
    /// Instruction BFMAXNM - Multi-vector BFloat16 floating-point maximum number by vector.
    /// </summary>
    BFMAXNM_mz_zzv_2x1,
    /// <summary>
    /// Instruction BFMAXNM - Multi-vector BFloat16 floating-point maximum number by vector.
    /// </summary>
    BFMAXNM_mz_zzv_4x1,
    /// <summary>
    /// Instruction BFMAXNM - Multi-vector BFloat16 floating-point maximum number.
    /// </summary>
    BFMAXNM_mz_zzw_2x2,
    /// <summary>
    /// Instruction BFMAXNM - Multi-vector BFloat16 floating-point maximum number.
    /// </summary>
    BFMAXNM_mz_zzw_4x4,
    /// <summary>
    /// Instruction BFMAXNM - BFloat16 floating-point maximum number (predicated).
    /// </summary>
    BFMAXNM_z_p_zz,
    /// <summary>
    /// Instruction BFMAX - Multi-vector BFloat16 floating-point maximum by vector.
    /// </summary>
    BFMAX_mz_zzv_2x1,
    /// <summary>
    /// Instruction BFMAX - Multi-vector BFloat16 floating-point maximum by vector.
    /// </summary>
    BFMAX_mz_zzv_4x1,
    /// <summary>
    /// Instruction BFMAX - Multi-vector BFloat16 floating-point maximum.
    /// </summary>
    BFMAX_mz_zzw_2x2,
    /// <summary>
    /// Instruction BFMAX - Multi-vector BFloat16 floating-point maximum.
    /// </summary>
    BFMAX_mz_zzw_4x4,
    /// <summary>
    /// Instruction BFMAX - BFloat16 floating-point maximum (predicated).
    /// </summary>
    BFMAX_z_p_zz,
    /// <summary>
    /// Instruction BFMINNM - Multi-vector BFloat16 floating-point minimum number by vector.
    /// </summary>
    BFMINNM_mz_zzv_2x1,
    /// <summary>
    /// Instruction BFMINNM - Multi-vector BFloat16 floating-point minimum number by vector.
    /// </summary>
    BFMINNM_mz_zzv_4x1,
    /// <summary>
    /// Instruction BFMINNM - Multi-vector BFloat16 floating-point minimum number.
    /// </summary>
    BFMINNM_mz_zzw_2x2,
    /// <summary>
    /// Instruction BFMINNM - Multi-vector BFloat16 floating-point minimum number.
    /// </summary>
    BFMINNM_mz_zzw_4x4,
    /// <summary>
    /// Instruction BFMINNM - BFloat16 floating-point minimum number (predicated).
    /// </summary>
    BFMINNM_z_p_zz,
    /// <summary>
    /// Instruction BFMIN - Multi-vector BFloat16 floating-point minimum by vector.
    /// </summary>
    BFMIN_mz_zzv_2x1,
    /// <summary>
    /// Instruction BFMIN - Multi-vector BFloat16 floating-point minimum by vector.
    /// </summary>
    BFMIN_mz_zzv_4x1,
    /// <summary>
    /// Instruction BFMIN - Multi-vector BFloat16 floating-point minimum.
    /// </summary>
    BFMIN_mz_zzw_2x2,
    /// <summary>
    /// Instruction BFMIN - Multi-vector BFloat16 floating-point minimum.
    /// </summary>
    BFMIN_mz_zzw_4x4,
    /// <summary>
    /// Instruction BFMIN - BFloat16 floating-point minimum (predicated).
    /// </summary>
    BFMIN_z_p_zz,
    /// <summary>
    /// Instruction BFMLALB - BFloat16 floating-point multiply-add long to single-precision (bottom).
    /// </summary>
    BFMLALB_z_zzz,
    /// <summary>
    /// Instruction BFMLALB - BFloat16 floating-point multiply-add long to single-precision (bottom, indexed).
    /// </summary>
    BFMLALB_z_zzzi,
    /// <summary>
    /// Instruction BFMLALT - BFloat16 floating-point multiply-add long to single-precision (top).
    /// </summary>
    BFMLALT_z_zzz,
    /// <summary>
    /// Instruction BFMLALT - BFloat16 floating-point multiply-add long to single-precision (top, indexed).
    /// </summary>
    BFMLALT_z_zzzi,
    /// <summary>
    /// Instruction BFMLAL - BFloat16 floating-point widening multiply-add long (by element).
    /// </summary>
    BFMLAL_asimdelem_f,
    /// <summary>
    /// Instruction BFMLAL - BFloat16 floating-point widening multiply-add long (vector).
    /// </summary>
    BFMLAL_asimdsame2_f,
    /// <summary>
    /// Instruction BFMLAL - Multi-vector BFloat16 floating-point multiply-add long by indexed element.
    /// </summary>
    BFMLAL_za_zzi_1,
    /// <summary>
    /// Instruction BFMLAL - Multi-vector BFloat16 floating-point multiply-add long by indexed element.
    /// </summary>
    BFMLAL_za_zzi_2xi,
    /// <summary>
    /// Instruction BFMLAL - Multi-vector BFloat16 floating-point multiply-add long by indexed element.
    /// </summary>
    BFMLAL_za_zzi_4xi,
    /// <summary>
    /// Instruction BFMLAL - Multi-vector BFloat16 floating-point multiply-add long by vector.
    /// </summary>
    BFMLAL_za_zzv_1,
    /// <summary>
    /// Instruction BFMLAL - Multi-vector BFloat16 floating-point multiply-add long by vector.
    /// </summary>
    BFMLAL_za_zzv_2x1,
    /// <summary>
    /// Instruction BFMLAL - Multi-vector BFloat16 floating-point multiply-add long by vector.
    /// </summary>
    BFMLAL_za_zzv_4x1,
    /// <summary>
    /// Instruction BFMLAL - Multi-vector BFloat16 floating-point multiply-add long.
    /// </summary>
    BFMLAL_za_zzw_2x2,
    /// <summary>
    /// Instruction BFMLAL - Multi-vector BFloat16 floating-point multiply-add long.
    /// </summary>
    BFMLAL_za_zzw_4x4,
    /// <summary>
    /// Instruction BFMLA - BFloat16 floating-point fused multiply-add vectors.
    /// </summary>
    BFMLA_z_p_zzz,
    /// <summary>
    /// Instruction BFMLA - BFloat16 floating-point fused multiply-add vectors by indexed elements.
    /// </summary>
    BFMLA_z_zzzi_h,
    /// <summary>
    /// Instruction BFMLA - Multi-vector BFloat16 floating-point fused multiply-add by indexed element.
    /// </summary>
    BFMLA_za_zzi_h2xi,
    /// <summary>
    /// Instruction BFMLA - Multi-vector BFloat16 floating-point fused multiply-add by indexed element.
    /// </summary>
    BFMLA_za_zzi_h4xi,
    /// <summary>
    /// Instruction BFMLA - Multi-vector BFloat16 floating-point fused multiply-add by vector.
    /// </summary>
    BFMLA_za_zzv_2x1_16,
    /// <summary>
    /// Instruction BFMLA - Multi-vector BFloat16 floating-point fused multiply-add by vector.
    /// </summary>
    BFMLA_za_zzv_4x1_16,
    /// <summary>
    /// Instruction BFMLA - Multi-vector BFloat16 floating-point fused multiply-add.
    /// </summary>
    BFMLA_za_zzw_2x2_16,
    /// <summary>
    /// Instruction BFMLA - Multi-vector BFloat16 floating-point fused multiply-add.
    /// </summary>
    BFMLA_za_zzw_4x4_16,
    /// <summary>
    /// Instruction BFMLSLB - BFloat16 floating-point multiply-subtract long from single-precision (bottom).
    /// </summary>
    BFMLSLB_z_zzz,
    /// <summary>
    /// Instruction BFMLSLB - BFloat16 floating-point multiply-subtract long from single-precision (bottom, indexed).
    /// </summary>
    BFMLSLB_z_zzzi,
    /// <summary>
    /// Instruction BFMLSLT - BFloat16 floating-point multiply-subtract long from single-precision (top).
    /// </summary>
    BFMLSLT_z_zzz,
    /// <summary>
    /// Instruction BFMLSLT - BFloat16 floating-point multiply-subtract long from single-precision (top, indexed).
    /// </summary>
    BFMLSLT_z_zzzi,
    /// <summary>
    /// Instruction BFMLSL - Multi-vector BFloat16 floating-point multiply-subtract long by indexed element.
    /// </summary>
    BFMLSL_za_zzi_1,
    /// <summary>
    /// Instruction BFMLSL - Multi-vector BFloat16 floating-point multiply-subtract long by indexed element.
    /// </summary>
    BFMLSL_za_zzi_2xi,
    /// <summary>
    /// Instruction BFMLSL - Multi-vector BFloat16 floating-point multiply-subtract long by indexed element.
    /// </summary>
    BFMLSL_za_zzi_4xi,
    /// <summary>
    /// Instruction BFMLSL - Multi-vector BFloat16 floating-point multiply-subtract long by vector.
    /// </summary>
    BFMLSL_za_zzv_1,
    /// <summary>
    /// Instruction BFMLSL - Multi-vector BFloat16 floating-point multiply-subtract long by vector.
    /// </summary>
    BFMLSL_za_zzv_2x1,
    /// <summary>
    /// Instruction BFMLSL - Multi-vector BFloat16 floating-point multiply-subtract long by vector.
    /// </summary>
    BFMLSL_za_zzv_4x1,
    /// <summary>
    /// Instruction BFMLSL - Multi-vector BFloat16 floating-point multiply-subtract long.
    /// </summary>
    BFMLSL_za_zzw_2x2,
    /// <summary>
    /// Instruction BFMLSL - Multi-vector BFloat16 floating-point multiply-subtract long.
    /// </summary>
    BFMLSL_za_zzw_4x4,
    /// <summary>
    /// Instruction BFMLS - BFloat16 floating-point fused multiply-subtract vectors.
    /// </summary>
    BFMLS_z_p_zzz,
    /// <summary>
    /// Instruction BFMLS - BFloat16 floating-point fused multiply-subtract vectors by indexed elements.
    /// </summary>
    BFMLS_z_zzzi_h,
    /// <summary>
    /// Instruction BFMLS - Multi-vector BFloat16 floating-point fused multiply-subtract by indexed element.
    /// </summary>
    BFMLS_za_zzi_h2xi,
    /// <summary>
    /// Instruction BFMLS - Multi-vector BFloat16 floating-point fused multiply-subtract by indexed element.
    /// </summary>
    BFMLS_za_zzi_h4xi,
    /// <summary>
    /// Instruction BFMLS - Multi-vector BFloat16 floating-point fused multiply-subtract by vector.
    /// </summary>
    BFMLS_za_zzv_2x1_16,
    /// <summary>
    /// Instruction BFMLS - Multi-vector BFloat16 floating-point fused multiply-subtract by vector.
    /// </summary>
    BFMLS_za_zzv_4x1_16,
    /// <summary>
    /// Instruction BFMLS - Multi-vector BFloat16 floating-point fused multiply-subtract.
    /// </summary>
    BFMLS_za_zzw_2x2_16,
    /// <summary>
    /// Instruction BFMLS - Multi-vector BFloat16 floating-point fused multiply-subtract.
    /// </summary>
    BFMLS_za_zzw_4x4_16,
    /// <summary>
    /// Instruction BFMMLA - BFloat16 floating-point matrix multiply-accumulate into 2x2 matrix.
    /// </summary>
    BFMMLA_asimdsame2_e,
    /// <summary>
    /// Instruction BFMMLA - BFloat16 floating-point matrix multiply-accumulate into 2×2 matrices.
    /// </summary>
    BFMMLA_z_zzz,
    /// <summary>
    /// Instruction BFMOP4A - BFloat16 quarter-tile sums of two outer products, accumulating.
    /// </summary>
    BFMOP4A_za32_zz_h1x1,
    /// <summary>
    /// Instruction BFMOP4A - BFloat16 quarter-tile sums of two outer products, accumulating.
    /// </summary>
    BFMOP4A_za32_zz_h1x2,
    /// <summary>
    /// Instruction BFMOP4A - BFloat16 quarter-tile sums of two outer products, accumulating.
    /// </summary>
    BFMOP4A_za32_zz_h2x1,
    /// <summary>
    /// Instruction BFMOP4A - BFloat16 quarter-tile sums of two outer products, accumulating.
    /// </summary>
    BFMOP4A_za32_zz_h2x2,
    /// <summary>
    /// Instruction BFMOP4A - BFloat16 quarter-tile outer products, accumulating.
    /// </summary>
    BFMOP4A_za_zz_h1x1,
    /// <summary>
    /// Instruction BFMOP4A - BFloat16 quarter-tile outer products, accumulating.
    /// </summary>
    BFMOP4A_za_zz_h1x2,
    /// <summary>
    /// Instruction BFMOP4A - BFloat16 quarter-tile outer products, accumulating.
    /// </summary>
    BFMOP4A_za_zz_h2x1,
    /// <summary>
    /// Instruction BFMOP4A - BFloat16 quarter-tile outer products, accumulating.
    /// </summary>
    BFMOP4A_za_zz_h2x2,
    /// <summary>
    /// Instruction BFMOP4S - BFloat16 quarter-tile sums of two outer products, subtracting.
    /// </summary>
    BFMOP4S_za32_zz_h1x1,
    /// <summary>
    /// Instruction BFMOP4S - BFloat16 quarter-tile sums of two outer products, subtracting.
    /// </summary>
    BFMOP4S_za32_zz_h1x2,
    /// <summary>
    /// Instruction BFMOP4S - BFloat16 quarter-tile sums of two outer products, subtracting.
    /// </summary>
    BFMOP4S_za32_zz_h2x1,
    /// <summary>
    /// Instruction BFMOP4S - BFloat16 quarter-tile sums of two outer products, subtracting.
    /// </summary>
    BFMOP4S_za32_zz_h2x2,
    /// <summary>
    /// Instruction BFMOP4S - BFloat16 quarter-tile outer products, subtracting.
    /// </summary>
    BFMOP4S_za_zz_h1x1,
    /// <summary>
    /// Instruction BFMOP4S - BFloat16 quarter-tile outer products, subtracting.
    /// </summary>
    BFMOP4S_za_zz_h1x2,
    /// <summary>
    /// Instruction BFMOP4S - BFloat16 quarter-tile outer products, subtracting.
    /// </summary>
    BFMOP4S_za_zz_h2x1,
    /// <summary>
    /// Instruction BFMOP4S - BFloat16 quarter-tile outer products, subtracting.
    /// </summary>
    BFMOP4S_za_zz_h2x2,
    /// <summary>
    /// Instruction BFMOPA - BFloat16 sum of outer products and accumulate.
    /// </summary>
    BFMOPA_za32_pp_zz,
    /// <summary>
    /// Instruction BFMOPA - BFloat16 floating-point outer product and accumulate.
    /// </summary>
    BFMOPA_za_pp_zz_16,
    /// <summary>
    /// Instruction BFMOPS - BFloat16 sum of outer products and subtract.
    /// </summary>
    BFMOPS_za32_pp_zz,
    /// <summary>
    /// Instruction BFMOPS - BFloat16 floating-point outer product and subtract.
    /// </summary>
    BFMOPS_za_pp_zz_16,
    /// <summary>
    /// Instruction BFMUL - Multi-vector BFloat16 floating-point multiply by vector.
    /// </summary>
    BFMUL_mz_zzv_2x1,
    /// <summary>
    /// Instruction BFMUL - Multi-vector BFloat16 floating-point multiply by vector.
    /// </summary>
    BFMUL_mz_zzv_4x1,
    /// <summary>
    /// Instruction BFMUL - Multi-vector BFloat16 floating-point multiply.
    /// </summary>
    BFMUL_mz_zzw_2x2,
    /// <summary>
    /// Instruction BFMUL - Multi-vector BFloat16 floating-point multiply.
    /// </summary>
    BFMUL_mz_zzw_4x4,
    /// <summary>
    /// Instruction BFMUL - BFloat16 floating-point multiply vectors (predicated).
    /// </summary>
    BFMUL_z_p_zz,
    /// <summary>
    /// Instruction BFMUL - BFloat16 floating-point multiply vectors (unpredicated).
    /// </summary>
    BFMUL_z_zz,
    /// <summary>
    /// Instruction BFMUL - BFloat16 floating-point multiply vectors by indexed elements.
    /// </summary>
    BFMUL_z_zzi_h,
    /// <summary>
    /// Instruction BFM - Bitfield move.
    /// </summary>
    BFM_32m_bitfield,
    /// <summary>
    /// Instruction BFM - Bitfield move.
    /// </summary>
    BFM_64m_bitfield,
    /// <summary>
    /// Instruction BFSCALE - Multi-vector BFloat16 adjust exponent by vector.
    /// </summary>
    BFSCALE_mz_zzv_2x1,
    /// <summary>
    /// Instruction BFSCALE - Multi-vector BFloat16 adjust exponent by vector.
    /// </summary>
    BFSCALE_mz_zzv_4x1,
    /// <summary>
    /// Instruction BFSCALE - Multi-vector BFloat16 adjust exponent.
    /// </summary>
    BFSCALE_mz_zzw_2x2,
    /// <summary>
    /// Instruction BFSCALE - Multi-vector BFloat16 adjust exponent.
    /// </summary>
    BFSCALE_mz_zzw_4x4,
    /// <summary>
    /// Instruction BFSCALE - BFloat16 adjust exponent by vector (predicated).
    /// </summary>
    BFSCALE_z_p_zz,
    /// <summary>
    /// Instruction BFSUB - BFloat16 floating-point subtract vectors (predicated).
    /// </summary>
    BFSUB_z_p_zz,
    /// <summary>
    /// Instruction BFSUB - BFloat16 floating-point subtract vectors (unpredicated).
    /// </summary>
    BFSUB_z_zz,
    /// <summary>
    /// Instruction BFSUB - BFloat16 floating-point subtract multi-vector from ZA array vector accumulators.
    /// </summary>
    BFSUB_za_zw_2x2_16,
    /// <summary>
    /// Instruction BFSUB - BFloat16 floating-point subtract multi-vector from ZA array vector accumulators.
    /// </summary>
    BFSUB_za_zw_4x4_16,
    /// <summary>
    /// Instruction BFTMOPA - BFloat16 sparse sum of two outer products, accumulating.
    /// </summary>
    BFTMOPA_za32_zzzi_h2x1,
    /// <summary>
    /// Instruction BFTMOPA - BFloat16 sparse outer product, accumulating.
    /// </summary>
    BFTMOPA_za_zzzi_h2x1,
    /// <summary>
    /// Instruction BFVDOT - Multi-vector BFloat16 floating-point vertical dot-product by indexed element.
    /// </summary>
    BFVDOT_za_zzi_2xi,
    /// <summary>
    /// Instruction BGRP - Group bits to right or left as selected by bitmask.
    /// </summary>
    BGRP_z_zz,
    /// <summary>
    /// Instruction BICS - Bitwise bit clear (shifted register), setting flags.
    /// </summary>
    BICS_32_log_shift,
    /// <summary>
    /// Instruction BICS - Bitwise bit clear (shifted register), setting flags.
    /// </summary>
    BICS_64_log_shift,
    /// <summary>
    /// Instruction BICS - Bitwise clear predicates, setting the condition flags.
    /// </summary>
    BICS_p_p_pp_z,
    /// <summary>
    /// Instruction BIC - Bitwise bit clear (shifted register).
    /// </summary>
    BIC_32_log_shift,
    /// <summary>
    /// Instruction BIC - Bitwise bit clear (shifted register).
    /// </summary>
    BIC_64_log_shift,
    /// <summary>
    /// Instruction BIC - Bitwise bit clear (vector, immediate).
    /// </summary>
    BIC_asimdimm_l_hl,
    /// <summary>
    /// Instruction BIC - Bitwise bit clear (vector, immediate).
    /// </summary>
    BIC_asimdimm_l_sl,
    /// <summary>
    /// Instruction BIC - Bitwise bit clear (vector, register).
    /// </summary>
    BIC_asimdsame_only,
    /// <summary>
    /// Instruction BIC - Bitwise clear predicates.
    /// </summary>
    BIC_p_p_pp_z,
    /// <summary>
    /// Instruction BIC - Bitwise clear vectors (predicated).
    /// </summary>
    BIC_z_p_zz,
    /// <summary>
    /// Instruction BIC - Bitwise clear vectors (unpredicated).
    /// </summary>
    BIC_z_zz,
    /// <summary>
    /// Instruction BIF - Bitwise insert if false.
    /// </summary>
    BIF_asimdsame_only,
    /// <summary>
    /// Instruction BIT - Bitwise insert if true.
    /// </summary>
    BIT_asimdsame_only,
    /// <summary>
    /// Instruction BLRAAZ - Branch with link to register, with pointer authentication.
    /// </summary>
    BLRAAZ_64_branch_reg,
    /// <summary>
    /// Instruction BLRAA - Branch with link to register, with pointer authentication.
    /// </summary>
    BLRAA_64p_branch_reg,
    /// <summary>
    /// Instruction BLRABZ - Branch with link to register, with pointer authentication.
    /// </summary>
    BLRABZ_64_branch_reg,
    /// <summary>
    /// Instruction BLRAB - Branch with link to register, with pointer authentication.
    /// </summary>
    BLRAB_64p_branch_reg,
    /// <summary>
    /// Instruction BLR - Branch with link to register.
    /// </summary>
    BLR_64_branch_reg,
    /// <summary>
    /// Instruction BL - Branch with link.
    /// </summary>
    BL_only_branch_imm,
    /// <summary>
    /// Instruction BMOPA - Bitwise exclusive NOR population count outer product and accumulate.
    /// </summary>
    BMOPA_za_pp_zz_32,
    /// <summary>
    /// Instruction BMOPS - Bitwise exclusive NOR population count outer product and subtract.
    /// </summary>
    BMOPS_za_pp_zz_32,
    /// <summary>
    /// Instruction BRAAZ - Branch to register, with pointer authentication.
    /// </summary>
    BRAAZ_64_branch_reg,
    /// <summary>
    /// Instruction BRAA - Branch to register, with pointer authentication.
    /// </summary>
    BRAA_64p_branch_reg,
    /// <summary>
    /// Instruction BRABZ - Branch to register, with pointer authentication.
    /// </summary>
    BRABZ_64_branch_reg,
    /// <summary>
    /// Instruction BRAB - Branch to register, with pointer authentication.
    /// </summary>
    BRAB_64p_branch_reg,
    /// <summary>
    /// Instruction BRKAS - Break after first true condition, setting the condition flags.
    /// </summary>
    BRKAS_p_p_p_z,
    /// <summary>
    /// Instruction BRKA - Break after first true condition.
    /// </summary>
    BRKA_p_p_p,
    /// <summary>
    /// Instruction BRKBS - Break before first true condition, setting the condition flags.
    /// </summary>
    BRKBS_p_p_p_z,
    /// <summary>
    /// Instruction BRKB - Break before first true condition.
    /// </summary>
    BRKB_p_p_p,
    /// <summary>
    /// Instruction BRKNS - Propagate break to next partition, setting the condition flags.
    /// </summary>
    BRKNS_p_p_pp,
    /// <summary>
    /// Instruction BRKN - Propagate break to next partition.
    /// </summary>
    BRKN_p_p_pp,
    /// <summary>
    /// Instruction BRKPAS - Break after first true condition, propagating from previous partition and setting the condition flags.
    /// </summary>
    BRKPAS_p_p_pp,
    /// <summary>
    /// Instruction BRKPA - Break after first true condition, propagating from previous partition.
    /// </summary>
    BRKPA_p_p_pp,
    /// <summary>
    /// Instruction BRKPBS - Break before first true condition, propagating from previous partition and setting the condition flags.
    /// </summary>
    BRKPBS_p_p_pp,
    /// <summary>
    /// Instruction BRKPB - Break before first true condition, propagating from previous partition.
    /// </summary>
    BRKPB_p_p_pp,
    /// <summary>
    /// Instruction BRK - Breakpoint instruction.
    /// </summary>
    BRK_ex_exception,
    /// <summary>
    /// Instruction BR - Branch to register.
    /// </summary>
    BR_64_branch_reg,
    /// <summary>
    /// Instruction BSL1N - Bitwise select with first input inverted.
    /// </summary>
    BSL1N_z_zzz,
    /// <summary>
    /// Instruction BSL2N - Bitwise select with second input inverted.
    /// </summary>
    BSL2N_z_zzz,
    /// <summary>
    /// Instruction BSL - Bitwise select.
    /// </summary>
    BSL_asimdsame_only,
    /// <summary>
    /// Instruction BSL - Bitwise select.
    /// </summary>
    BSL_z_zzz,
    /// <summary>
    /// Instruction BTI - Branch target identification.
    /// </summary>
    BTI_hb_hints,
    /// <summary>
    /// Instruction B - Branch.
    /// </summary>
    B_only_branch_imm,
    /// <summary>
    /// Instruction B - Branch conditionally.
    /// </summary>
    B_only_condbranch,
    /// <summary>
    /// Instruction CADD - Complex integer add with rotate.
    /// </summary>
    CADD_z_zz,
    /// <summary>
    /// Instruction CASAB - Compare and swap byte in memory.
    /// </summary>
    CASAB_c32_comswap,
    /// <summary>
    /// Instruction CASAH - Compare and swap halfword in memory.
    /// </summary>
    CASAH_c32_comswap,
    /// <summary>
    /// Instruction CASALB - Compare and swap byte in memory.
    /// </summary>
    CASALB_c32_comswap,
    /// <summary>
    /// Instruction CASALH - Compare and swap halfword in memory.
    /// </summary>
    CASALH_c32_comswap,
    /// <summary>
    /// Instruction CASALT - Compare and swap unprivileged.
    /// </summary>
    CASALT_c64_comswap_unpriv,
    /// <summary>
    /// Instruction CASAL - Compare and swap word or doubleword in memory.
    /// </summary>
    CASAL_c32_comswap,
    /// <summary>
    /// Instruction CASAL - Compare and swap word or doubleword in memory.
    /// </summary>
    CASAL_c64_comswap,
    /// <summary>
    /// Instruction CASAT - Compare and swap unprivileged.
    /// </summary>
    CASAT_c64_comswap_unpriv,
    /// <summary>
    /// Instruction CASA - Compare and swap word or doubleword in memory.
    /// </summary>
    CASA_c32_comswap,
    /// <summary>
    /// Instruction CASA - Compare and swap word or doubleword in memory.
    /// </summary>
    CASA_c64_comswap,
    /// <summary>
    /// Instruction CASB - Compare and swap byte in memory.
    /// </summary>
    CASB_c32_comswap,
    /// <summary>
    /// Instruction CASH - Compare and swap halfword in memory.
    /// </summary>
    CASH_c32_comswap,
    /// <summary>
    /// Instruction CASLB - Compare and swap byte in memory.
    /// </summary>
    CASLB_c32_comswap,
    /// <summary>
    /// Instruction CASLH - Compare and swap halfword in memory.
    /// </summary>
    CASLH_c32_comswap,
    /// <summary>
    /// Instruction CASLT - Compare and swap unprivileged.
    /// </summary>
    CASLT_c64_comswap_unpriv,
    /// <summary>
    /// Instruction CASL - Compare and swap word or doubleword in memory.
    /// </summary>
    CASL_c32_comswap,
    /// <summary>
    /// Instruction CASL - Compare and swap word or doubleword in memory.
    /// </summary>
    CASL_c64_comswap,
    /// <summary>
    /// Instruction CASPALT - Compare and swap pair unprivileged.
    /// </summary>
    CASPALT_cp64_comswappr_unpriv,
    /// <summary>
    /// Instruction CASPAL - Compare and swap pair of words or doublewords in memory.
    /// </summary>
    CASPAL_cp32_comswappr,
    /// <summary>
    /// Instruction CASPAL - Compare and swap pair of words or doublewords in memory.
    /// </summary>
    CASPAL_cp64_comswappr,
    /// <summary>
    /// Instruction CASPAT - Compare and swap pair unprivileged.
    /// </summary>
    CASPAT_cp64_comswappr_unpriv,
    /// <summary>
    /// Instruction CASPA - Compare and swap pair of words or doublewords in memory.
    /// </summary>
    CASPA_cp32_comswappr,
    /// <summary>
    /// Instruction CASPA - Compare and swap pair of words or doublewords in memory.
    /// </summary>
    CASPA_cp64_comswappr,
    /// <summary>
    /// Instruction CASPLT - Compare and swap pair unprivileged.
    /// </summary>
    CASPLT_cp64_comswappr_unpriv,
    /// <summary>
    /// Instruction CASPL - Compare and swap pair of words or doublewords in memory.
    /// </summary>
    CASPL_cp32_comswappr,
    /// <summary>
    /// Instruction CASPL - Compare and swap pair of words or doublewords in memory.
    /// </summary>
    CASPL_cp64_comswappr,
    /// <summary>
    /// Instruction CASPT - Compare and swap pair unprivileged.
    /// </summary>
    CASPT_cp64_comswappr_unpriv,
    /// <summary>
    /// Instruction CASP - Compare and swap pair of words or doublewords in memory.
    /// </summary>
    CASP_cp32_comswappr,
    /// <summary>
    /// Instruction CASP - Compare and swap pair of words or doublewords in memory.
    /// </summary>
    CASP_cp64_comswappr,
    /// <summary>
    /// Instruction CAST - Compare and swap unprivileged.
    /// </summary>
    CAST_c64_comswap_unpriv,
    /// <summary>
    /// Instruction CAS - Compare and swap word or doubleword in memory.
    /// </summary>
    CAS_c32_comswap,
    /// <summary>
    /// Instruction CAS - Compare and swap word or doubleword in memory.
    /// </summary>
    CAS_c64_comswap,
    /// <summary>
    /// Instruction CBBEQ - Compare bytes and branch.
    /// </summary>
    CBBEQ_8_regs,
    /// <summary>
    /// Instruction CBBGE - Compare bytes and branch.
    /// </summary>
    CBBGE_8_regs,
    /// <summary>
    /// Instruction CBBGT - Compare bytes and branch.
    /// </summary>
    CBBGT_8_regs,
    /// <summary>
    /// Instruction CBBHI - Compare bytes and branch.
    /// </summary>
    CBBHI_8_regs,
    /// <summary>
    /// Instruction CBBHS - Compare bytes and branch.
    /// </summary>
    CBBHS_8_regs,
    /// <summary>
    /// Instruction CBBNE - Compare bytes and branch.
    /// </summary>
    CBBNE_8_regs,
    /// <summary>
    /// Instruction CBEQ - Compare register with immediate and branch.
    /// </summary>
    CBEQ_32_imm,
    /// <summary>
    /// Instruction CBEQ - Compare registers and branch.
    /// </summary>
    CBEQ_32_regs,
    /// <summary>
    /// Instruction CBEQ - Compare register with immediate and branch.
    /// </summary>
    CBEQ_64_imm,
    /// <summary>
    /// Instruction CBEQ - Compare registers and branch.
    /// </summary>
    CBEQ_64_regs,
    /// <summary>
    /// Instruction CBGE - Compare registers and branch.
    /// </summary>
    CBGE_32_regs,
    /// <summary>
    /// Instruction CBGE - Compare registers and branch.
    /// </summary>
    CBGE_64_regs,
    /// <summary>
    /// Instruction CBGT - Compare register with immediate and branch.
    /// </summary>
    CBGT_32_imm,
    /// <summary>
    /// Instruction CBGT - Compare registers and branch.
    /// </summary>
    CBGT_32_regs,
    /// <summary>
    /// Instruction CBGT - Compare register with immediate and branch.
    /// </summary>
    CBGT_64_imm,
    /// <summary>
    /// Instruction CBGT - Compare registers and branch.
    /// </summary>
    CBGT_64_regs,
    /// <summary>
    /// Instruction CBHEQ - Compare halfwords and branch.
    /// </summary>
    CBHEQ_16_regs,
    /// <summary>
    /// Instruction CBHGE - Compare halfwords and branch.
    /// </summary>
    CBHGE_16_regs,
    /// <summary>
    /// Instruction CBHGT - Compare halfwords and branch.
    /// </summary>
    CBHGT_16_regs,
    /// <summary>
    /// Instruction CBHHI - Compare halfwords and branch.
    /// </summary>
    CBHHI_16_regs,
    /// <summary>
    /// Instruction CBHHS - Compare halfwords and branch.
    /// </summary>
    CBHHS_16_regs,
    /// <summary>
    /// Instruction CBHI - Compare register with immediate and branch.
    /// </summary>
    CBHI_32_imm,
    /// <summary>
    /// Instruction CBHI - Compare registers and branch.
    /// </summary>
    CBHI_32_regs,
    /// <summary>
    /// Instruction CBHI - Compare register with immediate and branch.
    /// </summary>
    CBHI_64_imm,
    /// <summary>
    /// Instruction CBHI - Compare registers and branch.
    /// </summary>
    CBHI_64_regs,
    /// <summary>
    /// Instruction CBHNE - Compare halfwords and branch.
    /// </summary>
    CBHNE_16_regs,
    /// <summary>
    /// Instruction CBHS - Compare registers and branch.
    /// </summary>
    CBHS_32_regs,
    /// <summary>
    /// Instruction CBHS - Compare registers and branch.
    /// </summary>
    CBHS_64_regs,
    /// <summary>
    /// Instruction CBLO - Compare register with immediate and branch.
    /// </summary>
    CBLO_32_imm,
    /// <summary>
    /// Instruction CBLO - Compare register with immediate and branch.
    /// </summary>
    CBLO_64_imm,
    /// <summary>
    /// Instruction CBLT - Compare register with immediate and branch.
    /// </summary>
    CBLT_32_imm,
    /// <summary>
    /// Instruction CBLT - Compare register with immediate and branch.
    /// </summary>
    CBLT_64_imm,
    /// <summary>
    /// Instruction CBNE - Compare register with immediate and branch.
    /// </summary>
    CBNE_32_imm,
    /// <summary>
    /// Instruction CBNE - Compare registers and branch.
    /// </summary>
    CBNE_32_regs,
    /// <summary>
    /// Instruction CBNE - Compare register with immediate and branch.
    /// </summary>
    CBNE_64_imm,
    /// <summary>
    /// Instruction CBNE - Compare registers and branch.
    /// </summary>
    CBNE_64_regs,
    /// <summary>
    /// Instruction CBNZ - Compare and branch on nonzero.
    /// </summary>
    CBNZ_32_compbranch,
    /// <summary>
    /// Instruction CBNZ - Compare and branch on nonzero.
    /// </summary>
    CBNZ_64_compbranch,
    /// <summary>
    /// Instruction CBZ - Compare and branch on zero.
    /// </summary>
    CBZ_32_compbranch,
    /// <summary>
    /// Instruction CBZ - Compare and branch on zero.
    /// </summary>
    CBZ_64_compbranch,
    /// <summary>
    /// Instruction CCMN - Conditional compare negative (immediate).
    /// </summary>
    CCMN_32_condcmp_imm,
    /// <summary>
    /// Instruction CCMN - Conditional compare negative (register).
    /// </summary>
    CCMN_32_condcmp_reg,
    /// <summary>
    /// Instruction CCMN - Conditional compare negative (immediate).
    /// </summary>
    CCMN_64_condcmp_imm,
    /// <summary>
    /// Instruction CCMN - Conditional compare negative (register).
    /// </summary>
    CCMN_64_condcmp_reg,
    /// <summary>
    /// Instruction CCMP - Conditional compare (immediate).
    /// </summary>
    CCMP_32_condcmp_imm,
    /// <summary>
    /// Instruction CCMP - Conditional compare (register).
    /// </summary>
    CCMP_32_condcmp_reg,
    /// <summary>
    /// Instruction CCMP - Conditional compare (immediate).
    /// </summary>
    CCMP_64_condcmp_imm,
    /// <summary>
    /// Instruction CCMP - Conditional compare (register).
    /// </summary>
    CCMP_64_condcmp_reg,
    /// <summary>
    /// Instruction CDOT - Complex integer dot product.
    /// </summary>
    CDOT_z_zzz,
    /// <summary>
    /// Instruction CDOT - Complex integer dot product (indexed).
    /// </summary>
    CDOT_z_zzzi_d,
    /// <summary>
    /// Instruction CDOT - Complex integer dot product (indexed).
    /// </summary>
    CDOT_z_zzzi_s,
    /// <summary>
    /// Instruction CFINV - Invert carry flag.
    /// </summary>
    CFINV_m_pstate,
    /// <summary>
    /// Instruction CHKFEAT - Check feature status.
    /// </summary>
    CHKFEAT_hf_hints,
    /// <summary>
    /// Instruction CLASTA - Conditionally extract element after last to general-purpose register.
    /// </summary>
    CLASTA_r_p_z,
    /// <summary>
    /// Instruction CLASTA - Conditionally extract element after last to SIMD&FP scalar register.
    /// </summary>
    CLASTA_v_p_z,
    /// <summary>
    /// Instruction CLASTA - Conditionally extract element after last to vector register.
    /// </summary>
    CLASTA_z_p_zz,
    /// <summary>
    /// Instruction CLASTB - Conditionally extract last element to general-purpose register.
    /// </summary>
    CLASTB_r_p_z,
    /// <summary>
    /// Instruction CLASTB - Conditionally extract last element to SIMD&FP scalar register.
    /// </summary>
    CLASTB_v_p_z,
    /// <summary>
    /// Instruction CLASTB - Conditionally extract last element to vector register.
    /// </summary>
    CLASTB_z_p_zz,
    /// <summary>
    /// Instruction CLRBHB - Clear branch history.
    /// </summary>
    CLRBHB_hi_hints,
    /// <summary>
    /// Instruction CLREX - Clear exclusive.
    /// </summary>
    CLREX_bn_barriers,
    /// <summary>
    /// Instruction CLS - Count leading sign bits.
    /// </summary>
    CLS_32_dp_1src,
    /// <summary>
    /// Instruction CLS - Count leading sign bits.
    /// </summary>
    CLS_64_dp_1src,
    /// <summary>
    /// Instruction CLS - Count leading sign bits (vector).
    /// </summary>
    CLS_asimdmisc_r,
    /// <summary>
    /// Instruction CLS - Count leading sign bits (predicated).
    /// </summary>
    CLS_z_p_z_m,
    /// <summary>
    /// Instruction CLS - Count leading sign bits (predicated).
    /// </summary>
    CLS_z_p_z_z,
    /// <summary>
    /// Instruction CLZ - Count leading zeros.
    /// </summary>
    CLZ_32_dp_1src,
    /// <summary>
    /// Instruction CLZ - Count leading zeros.
    /// </summary>
    CLZ_64_dp_1src,
    /// <summary>
    /// Instruction CLZ - Count leading zero bits (vector).
    /// </summary>
    CLZ_asimdmisc_r,
    /// <summary>
    /// Instruction CLZ - Count leading zero bits (predicated).
    /// </summary>
    CLZ_z_p_z_m,
    /// <summary>
    /// Instruction CLZ - Count leading zero bits (predicated).
    /// </summary>
    CLZ_z_p_z_z,
    /// <summary>
    /// Instruction CMEQ - Compare bitwise equal to zero (vector).
    /// </summary>
    CMEQ_asimdmisc_z,
    /// <summary>
    /// Instruction CMEQ - Compare bitwise equal (vector).
    /// </summary>
    CMEQ_asimdsame_only,
    /// <summary>
    /// Instruction CMEQ - Compare bitwise equal to zero (vector).
    /// </summary>
    CMEQ_asisdmisc_z,
    /// <summary>
    /// Instruction CMEQ - Compare bitwise equal (vector).
    /// </summary>
    CMEQ_asisdsame_only,
    /// <summary>
    /// Instruction CMGE - Compare signed greater than or equal to zero (vector).
    /// </summary>
    CMGE_asimdmisc_z,
    /// <summary>
    /// Instruction CMGE - Compare signed greater than or equal (vector).
    /// </summary>
    CMGE_asimdsame_only,
    /// <summary>
    /// Instruction CMGE - Compare signed greater than or equal to zero (vector).
    /// </summary>
    CMGE_asisdmisc_z,
    /// <summary>
    /// Instruction CMGE - Compare signed greater than or equal (vector).
    /// </summary>
    CMGE_asisdsame_only,
    /// <summary>
    /// Instruction CMGT - Compare signed greater than zero (vector).
    /// </summary>
    CMGT_asimdmisc_z,
    /// <summary>
    /// Instruction CMGT - Compare signed greater than (vector).
    /// </summary>
    CMGT_asimdsame_only,
    /// <summary>
    /// Instruction CMGT - Compare signed greater than zero (vector).
    /// </summary>
    CMGT_asisdmisc_z,
    /// <summary>
    /// Instruction CMGT - Compare signed greater than (vector).
    /// </summary>
    CMGT_asisdsame_only,
    /// <summary>
    /// Instruction CMHI - Compare unsigned higher (vector).
    /// </summary>
    CMHI_asimdsame_only,
    /// <summary>
    /// Instruction CMHI - Compare unsigned higher (vector).
    /// </summary>
    CMHI_asisdsame_only,
    /// <summary>
    /// Instruction CMHS - Compare unsigned higher or same (vector).
    /// </summary>
    CMHS_asimdsame_only,
    /// <summary>
    /// Instruction CMHS - Compare unsigned higher or same (vector).
    /// </summary>
    CMHS_asisdsame_only,
    /// <summary>
    /// Instruction CMLA - Complex integer multiply-add with rotate.
    /// </summary>
    CMLA_z_zzz,
    /// <summary>
    /// Instruction CMLA - Complex integer multiply-add with rotate (indexed).
    /// </summary>
    CMLA_z_zzzi_h,
    /// <summary>
    /// Instruction CMLA - Complex integer multiply-add with rotate (indexed).
    /// </summary>
    CMLA_z_zzzi_s,
    /// <summary>
    /// Instruction CMLE - Compare signed less than or equal to zero (vector).
    /// </summary>
    CMLE_asimdmisc_z,
    /// <summary>
    /// Instruction CMLE - Compare signed less than or equal to zero (vector).
    /// </summary>
    CMLE_asisdmisc_z,
    /// <summary>
    /// Instruction CMLT - Compare signed less than zero (vector).
    /// </summary>
    CMLT_asimdmisc_z,
    /// <summary>
    /// Instruction CMLT - Compare signed less than zero (vector).
    /// </summary>
    CMLT_asisdmisc_z,
    /// <summary>
    /// Instruction CMPEQ - Compare vector to immediate.
    /// </summary>
    CMPEQ_p_p_zi,
    /// <summary>
    /// Instruction CMPEQ - Compare vector to 64-bit wide elements.
    /// </summary>
    CMPEQ_p_p_zw,
    /// <summary>
    /// Instruction CMPEQ - Compare vectors.
    /// </summary>
    CMPEQ_p_p_zz,
    /// <summary>
    /// Instruction CMPGE - Compare vector to immediate.
    /// </summary>
    CMPGE_p_p_zi,
    /// <summary>
    /// Instruction CMPGE - Compare vector to 64-bit wide elements.
    /// </summary>
    CMPGE_p_p_zw,
    /// <summary>
    /// Instruction CMPGE - Compare vectors.
    /// </summary>
    CMPGE_p_p_zz,
    /// <summary>
    /// Instruction CMPGT - Compare vector to immediate.
    /// </summary>
    CMPGT_p_p_zi,
    /// <summary>
    /// Instruction CMPGT - Compare vector to 64-bit wide elements.
    /// </summary>
    CMPGT_p_p_zw,
    /// <summary>
    /// Instruction CMPGT - Compare vectors.
    /// </summary>
    CMPGT_p_p_zz,
    /// <summary>
    /// Instruction CMPHI - Compare vector to immediate.
    /// </summary>
    CMPHI_p_p_zi,
    /// <summary>
    /// Instruction CMPHI - Compare vector to 64-bit wide elements.
    /// </summary>
    CMPHI_p_p_zw,
    /// <summary>
    /// Instruction CMPHI - Compare vectors.
    /// </summary>
    CMPHI_p_p_zz,
    /// <summary>
    /// Instruction CMPHS - Compare vector to immediate.
    /// </summary>
    CMPHS_p_p_zi,
    /// <summary>
    /// Instruction CMPHS - Compare vector to 64-bit wide elements.
    /// </summary>
    CMPHS_p_p_zw,
    /// <summary>
    /// Instruction CMPHS - Compare vectors.
    /// </summary>
    CMPHS_p_p_zz,
    /// <summary>
    /// Instruction CMPLE - Compare vector to immediate.
    /// </summary>
    CMPLE_p_p_zi,
    /// <summary>
    /// Instruction CMPLE - Compare vector to 64-bit wide elements.
    /// </summary>
    CMPLE_p_p_zw,
    /// <summary>
    /// Instruction CMPLO - Compare vector to immediate.
    /// </summary>
    CMPLO_p_p_zi,
    /// <summary>
    /// Instruction CMPLO - Compare vector to 64-bit wide elements.
    /// </summary>
    CMPLO_p_p_zw,
    /// <summary>
    /// Instruction CMPLS - Compare vector to immediate.
    /// </summary>
    CMPLS_p_p_zi,
    /// <summary>
    /// Instruction CMPLS - Compare vector to 64-bit wide elements.
    /// </summary>
    CMPLS_p_p_zw,
    /// <summary>
    /// Instruction CMPLT - Compare vector to immediate.
    /// </summary>
    CMPLT_p_p_zi,
    /// <summary>
    /// Instruction CMPLT - Compare vector to 64-bit wide elements.
    /// </summary>
    CMPLT_p_p_zw,
    /// <summary>
    /// Instruction CMPNE - Compare vector to immediate.
    /// </summary>
    CMPNE_p_p_zi,
    /// <summary>
    /// Instruction CMPNE - Compare vector to 64-bit wide elements.
    /// </summary>
    CMPNE_p_p_zw,
    /// <summary>
    /// Instruction CMPNE - Compare vectors.
    /// </summary>
    CMPNE_p_p_zz,
    /// <summary>
    /// Instruction CMTST - Compare bitwise test bits nonzero (vector).
    /// </summary>
    CMTST_asimdsame_only,
    /// <summary>
    /// Instruction CMTST - Compare bitwise test bits nonzero (vector).
    /// </summary>
    CMTST_asisdsame_only,
    /// <summary>
    /// Instruction CNOT - Logically invert boolean condition in vector (predicated).
    /// </summary>
    CNOT_z_p_z_m,
    /// <summary>
    /// Instruction CNOT - Logically invert boolean condition in vector (predicated).
    /// </summary>
    CNOT_z_p_z_z,
    /// <summary>
    /// Instruction CNTB - Set scalar to multiple of predicate constraint element count.
    /// </summary>
    CNTB_r_s,
    /// <summary>
    /// Instruction CNTD - Set scalar to multiple of predicate constraint element count.
    /// </summary>
    CNTD_r_s,
    /// <summary>
    /// Instruction CNTH - Set scalar to multiple of predicate constraint element count.
    /// </summary>
    CNTH_r_s,
    /// <summary>
    /// Instruction CNTP - Set scalar to count of true predicate elements.
    /// </summary>
    CNTP_r_p_p,
    /// <summary>
    /// Instruction CNTP - Set scalar to count from predicate-as-counter.
    /// </summary>
    CNTP_r_pn,
    /// <summary>
    /// Instruction CNTW - Set scalar to multiple of predicate constraint element count.
    /// </summary>
    CNTW_r_s,
    /// <summary>
    /// Instruction CNT - Count bits.
    /// </summary>
    CNT_32_dp_1src,
    /// <summary>
    /// Instruction CNT - Count bits.
    /// </summary>
    CNT_64_dp_1src,
    /// <summary>
    /// Instruction CNT - Population count per byte.
    /// </summary>
    CNT_asimdmisc_r,
    /// <summary>
    /// Instruction CNT - Count non-zero bits (predicated).
    /// </summary>
    CNT_z_p_z_m,
    /// <summary>
    /// Instruction CNT - Count non-zero bits (predicated).
    /// </summary>
    CNT_z_p_z_z,
    /// <summary>
    /// Instruction COMPACT - Copy active vector elements to lower-numbered elements.
    /// </summary>
    COMPACT_z_p_z,
    /// <summary>
    /// Instruction COMPACT - Copy active vector elements to lower-numbered elements.
    /// </summary>
    COMPACT_z_p_z_s,
    /// <summary>
    /// Instruction CPYEN - Memory copy, reads and writes non-temporal.
    /// </summary>
    CPYEN_cpy_memcms,
    /// <summary>
    /// Instruction CPYERN - Memory copy, reads non-temporal.
    /// </summary>
    CPYERN_cpy_memcms,
    /// <summary>
    /// Instruction CPYERTN - Memory copy, reads unprivileged, reads and writes non-temporal.
    /// </summary>
    CPYERTN_cpy_memcms,
    /// <summary>
    /// Instruction CPYERTRN - Memory copy, reads unprivileged and non-temporal.
    /// </summary>
    CPYERTRN_cpy_memcms,
    /// <summary>
    /// Instruction CPYERTWN - Memory copy, reads unprivileged, writes non-temporal.
    /// </summary>
    CPYERTWN_cpy_memcms,
    /// <summary>
    /// Instruction CPYERT - Memory copy, reads unprivileged.
    /// </summary>
    CPYERT_cpy_memcms,
    /// <summary>
    /// Instruction CPYETN - Memory copy, reads and writes unprivileged and non-temporal.
    /// </summary>
    CPYETN_cpy_memcms,
    /// <summary>
    /// Instruction CPYETRN - Memory copy, reads and writes unprivileged, reads non-temporal.
    /// </summary>
    CPYETRN_cpy_memcms,
    /// <summary>
    /// Instruction CPYETWN - Memory copy, reads and writes unprivileged, writes non-temporal.
    /// </summary>
    CPYETWN_cpy_memcms,
    /// <summary>
    /// Instruction CPYET - Memory copy, reads and writes unprivileged.
    /// </summary>
    CPYET_cpy_memcms,
    /// <summary>
    /// Instruction CPYEWN - Memory copy, writes non-temporal.
    /// </summary>
    CPYEWN_cpy_memcms,
    /// <summary>
    /// Instruction CPYEWTN - Memory copy, writes unprivileged, reads and writes non-temporal.
    /// </summary>
    CPYEWTN_cpy_memcms,
    /// <summary>
    /// Instruction CPYEWTRN - Memory copy, writes unprivileged, reads non-temporal.
    /// </summary>
    CPYEWTRN_cpy_memcms,
    /// <summary>
    /// Instruction CPYEWTWN - Memory copy, writes unprivileged and non-temporal.
    /// </summary>
    CPYEWTWN_cpy_memcms,
    /// <summary>
    /// Instruction CPYEWT - Memory copy, writes unprivileged.
    /// </summary>
    CPYEWT_cpy_memcms,
    /// <summary>
    /// Instruction CPYE - Memory copy.
    /// </summary>
    CPYE_cpy_memcms,
    /// <summary>
    /// Instruction CPYFEN - Memory copy forward-only, reads and writes non-temporal.
    /// </summary>
    CPYFEN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFERN - Memory copy forward-only, reads non-temporal.
    /// </summary>
    CPYFERN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFERTN - Memory copy forward-only, reads unprivileged, reads and writes non-temporal.
    /// </summary>
    CPYFERTN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFERTRN - Memory copy forward-only, reads unprivileged and non-temporal.
    /// </summary>
    CPYFERTRN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFERTWN - Memory copy forward-only, reads unprivileged, writes non-temporal.
    /// </summary>
    CPYFERTWN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFERT - Memory copy forward-only, reads unprivileged.
    /// </summary>
    CPYFERT_cpy_memcms,
    /// <summary>
    /// Instruction CPYFETN - Memory copy forward-only, reads and writes unprivileged and non-temporal.
    /// </summary>
    CPYFETN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFETRN - Memory copy forward-only, reads and writes unprivileged, reads non-temporal.
    /// </summary>
    CPYFETRN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFETWN - Memory copy forward-only, reads and writes unprivileged, writes non-temporal.
    /// </summary>
    CPYFETWN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFET - Memory copy forward-only, reads and writes unprivileged.
    /// </summary>
    CPYFET_cpy_memcms,
    /// <summary>
    /// Instruction CPYFEWN - Memory copy forward-only, writes non-temporal.
    /// </summary>
    CPYFEWN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFEWTN - Memory copy forward-only, writes unprivileged, reads and writes non-temporal.
    /// </summary>
    CPYFEWTN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFEWTRN - Memory copy forward-only, writes unprivileged, reads non-temporal.
    /// </summary>
    CPYFEWTRN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFEWTWN - Memory copy forward-only, writes unprivileged and non-temporal.
    /// </summary>
    CPYFEWTWN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFEWT - Memory copy forward-only, writes unprivileged.
    /// </summary>
    CPYFEWT_cpy_memcms,
    /// <summary>
    /// Instruction CPYFE - Memory copy forward-only.
    /// </summary>
    CPYFE_cpy_memcms,
    /// <summary>
    /// Instruction CPYFMN - Memory copy forward-only, reads and writes non-temporal.
    /// </summary>
    CPYFMN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFMRN - Memory copy forward-only, reads non-temporal.
    /// </summary>
    CPYFMRN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFMRTN - Memory copy forward-only, reads unprivileged, reads and writes non-temporal.
    /// </summary>
    CPYFMRTN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFMRTRN - Memory copy forward-only, reads unprivileged and non-temporal.
    /// </summary>
    CPYFMRTRN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFMRTWN - Memory copy forward-only, reads unprivileged, writes non-temporal.
    /// </summary>
    CPYFMRTWN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFMRT - Memory copy forward-only, reads unprivileged.
    /// </summary>
    CPYFMRT_cpy_memcms,
    /// <summary>
    /// Instruction CPYFMTN - Memory copy forward-only, reads and writes unprivileged and non-temporal.
    /// </summary>
    CPYFMTN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFMTRN - Memory copy forward-only, reads and writes unprivileged, reads non-temporal.
    /// </summary>
    CPYFMTRN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFMTWN - Memory copy forward-only, reads and writes unprivileged, writes non-temporal.
    /// </summary>
    CPYFMTWN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFMT - Memory copy forward-only, reads and writes unprivileged.
    /// </summary>
    CPYFMT_cpy_memcms,
    /// <summary>
    /// Instruction CPYFMWN - Memory copy forward-only, writes non-temporal.
    /// </summary>
    CPYFMWN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFMWTN - Memory copy forward-only, writes unprivileged, reads and writes non-temporal.
    /// </summary>
    CPYFMWTN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFMWTRN - Memory copy forward-only, writes unprivileged, reads non-temporal.
    /// </summary>
    CPYFMWTRN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFMWTWN - Memory copy forward-only, writes unprivileged and non-temporal.
    /// </summary>
    CPYFMWTWN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFMWT - Memory copy forward-only, writes unprivileged.
    /// </summary>
    CPYFMWT_cpy_memcms,
    /// <summary>
    /// Instruction CPYFM - Memory copy forward-only.
    /// </summary>
    CPYFM_cpy_memcms,
    /// <summary>
    /// Instruction CPYFPN - Memory copy forward-only, reads and writes non-temporal.
    /// </summary>
    CPYFPN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFPRN - Memory copy forward-only, reads non-temporal.
    /// </summary>
    CPYFPRN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFPRTN - Memory copy forward-only, reads unprivileged, reads and writes non-temporal.
    /// </summary>
    CPYFPRTN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFPRTRN - Memory copy forward-only, reads unprivileged and non-temporal.
    /// </summary>
    CPYFPRTRN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFPRTWN - Memory copy forward-only, reads unprivileged, writes non-temporal.
    /// </summary>
    CPYFPRTWN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFPRT - Memory copy forward-only, reads unprivileged.
    /// </summary>
    CPYFPRT_cpy_memcms,
    /// <summary>
    /// Instruction CPYFPTN - Memory copy forward-only, reads and writes unprivileged and non-temporal.
    /// </summary>
    CPYFPTN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFPTRN - Memory copy forward-only, reads and writes unprivileged, reads non-temporal.
    /// </summary>
    CPYFPTRN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFPTWN - Memory copy forward-only, reads and writes unprivileged, writes non-temporal.
    /// </summary>
    CPYFPTWN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFPT - Memory copy forward-only, reads and writes unprivileged.
    /// </summary>
    CPYFPT_cpy_memcms,
    /// <summary>
    /// Instruction CPYFPWN - Memory copy forward-only, writes non-temporal.
    /// </summary>
    CPYFPWN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFPWTN - Memory copy forward-only, writes unprivileged, reads and writes non-temporal.
    /// </summary>
    CPYFPWTN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFPWTRN - Memory copy forward-only, writes unprivileged, reads non-temporal.
    /// </summary>
    CPYFPWTRN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFPWTWN - Memory copy forward-only, writes unprivileged and non-temporal.
    /// </summary>
    CPYFPWTWN_cpy_memcms,
    /// <summary>
    /// Instruction CPYFPWT - Memory copy forward-only, writes unprivileged.
    /// </summary>
    CPYFPWT_cpy_memcms,
    /// <summary>
    /// Instruction CPYFP - Memory copy forward-only.
    /// </summary>
    CPYFP_cpy_memcms,
    /// <summary>
    /// Instruction CPYMN - Memory copy, reads and writes non-temporal.
    /// </summary>
    CPYMN_cpy_memcms,
    /// <summary>
    /// Instruction CPYMRN - Memory copy, reads non-temporal.
    /// </summary>
    CPYMRN_cpy_memcms,
    /// <summary>
    /// Instruction CPYMRTN - Memory copy, reads unprivileged, reads and writes non-temporal.
    /// </summary>
    CPYMRTN_cpy_memcms,
    /// <summary>
    /// Instruction CPYMRTRN - Memory copy, reads unprivileged and non-temporal.
    /// </summary>
    CPYMRTRN_cpy_memcms,
    /// <summary>
    /// Instruction CPYMRTWN - Memory copy, reads unprivileged, writes non-temporal.
    /// </summary>
    CPYMRTWN_cpy_memcms,
    /// <summary>
    /// Instruction CPYMRT - Memory copy, reads unprivileged.
    /// </summary>
    CPYMRT_cpy_memcms,
    /// <summary>
    /// Instruction CPYMTN - Memory copy, reads and writes unprivileged and non-temporal.
    /// </summary>
    CPYMTN_cpy_memcms,
    /// <summary>
    /// Instruction CPYMTRN - Memory copy, reads and writes unprivileged, reads non-temporal.
    /// </summary>
    CPYMTRN_cpy_memcms,
    /// <summary>
    /// Instruction CPYMTWN - Memory copy, reads and writes unprivileged, writes non-temporal.
    /// </summary>
    CPYMTWN_cpy_memcms,
    /// <summary>
    /// Instruction CPYMT - Memory copy, reads and writes unprivileged.
    /// </summary>
    CPYMT_cpy_memcms,
    /// <summary>
    /// Instruction CPYMWN - Memory copy, writes non-temporal.
    /// </summary>
    CPYMWN_cpy_memcms,
    /// <summary>
    /// Instruction CPYMWTN - Memory copy, writes unprivileged, reads and writes non-temporal.
    /// </summary>
    CPYMWTN_cpy_memcms,
    /// <summary>
    /// Instruction CPYMWTRN - Memory copy, writes unprivileged, reads non-temporal.
    /// </summary>
    CPYMWTRN_cpy_memcms,
    /// <summary>
    /// Instruction CPYMWTWN - Memory copy, writes unprivileged and non-temporal.
    /// </summary>
    CPYMWTWN_cpy_memcms,
    /// <summary>
    /// Instruction CPYMWT - Memory copy, writes unprivileged.
    /// </summary>
    CPYMWT_cpy_memcms,
    /// <summary>
    /// Instruction CPYM - Memory copy.
    /// </summary>
    CPYM_cpy_memcms,
    /// <summary>
    /// Instruction CPYPN - Memory copy, reads and writes non-temporal.
    /// </summary>
    CPYPN_cpy_memcms,
    /// <summary>
    /// Instruction CPYPRN - Memory copy, reads non-temporal.
    /// </summary>
    CPYPRN_cpy_memcms,
    /// <summary>
    /// Instruction CPYPRTN - Memory copy, reads unprivileged, reads and writes non-temporal.
    /// </summary>
    CPYPRTN_cpy_memcms,
    /// <summary>
    /// Instruction CPYPRTRN - Memory copy, reads unprivileged and non-temporal.
    /// </summary>
    CPYPRTRN_cpy_memcms,
    /// <summary>
    /// Instruction CPYPRTWN - Memory copy, reads unprivileged, writes non-temporal.
    /// </summary>
    CPYPRTWN_cpy_memcms,
    /// <summary>
    /// Instruction CPYPRT - Memory copy, reads unprivileged.
    /// </summary>
    CPYPRT_cpy_memcms,
    /// <summary>
    /// Instruction CPYPTN - Memory copy, reads and writes unprivileged and non-temporal.
    /// </summary>
    CPYPTN_cpy_memcms,
    /// <summary>
    /// Instruction CPYPTRN - Memory copy, reads and writes unprivileged, reads non-temporal.
    /// </summary>
    CPYPTRN_cpy_memcms,
    /// <summary>
    /// Instruction CPYPTWN - Memory copy, reads and writes unprivileged, writes non-temporal.
    /// </summary>
    CPYPTWN_cpy_memcms,
    /// <summary>
    /// Instruction CPYPT - Memory copy, reads and writes unprivileged.
    /// </summary>
    CPYPT_cpy_memcms,
    /// <summary>
    /// Instruction CPYPWN - Memory copy, writes non-temporal.
    /// </summary>
    CPYPWN_cpy_memcms,
    /// <summary>
    /// Instruction CPYPWTN - Memory copy, writes unprivileged, reads and writes non-temporal.
    /// </summary>
    CPYPWTN_cpy_memcms,
    /// <summary>
    /// Instruction CPYPWTRN - Memory copy, writes unprivileged, reads non-temporal.
    /// </summary>
    CPYPWTRN_cpy_memcms,
    /// <summary>
    /// Instruction CPYPWTWN - Memory copy, writes unprivileged and non-temporal.
    /// </summary>
    CPYPWTWN_cpy_memcms,
    /// <summary>
    /// Instruction CPYPWT - Memory copy, writes unprivileged.
    /// </summary>
    CPYPWT_cpy_memcms,
    /// <summary>
    /// Instruction CPYP - Memory copy.
    /// </summary>
    CPYP_cpy_memcms,
    /// <summary>
    /// Instruction CPY - Copy signed integer immediate to vector elements (zeroing).
    /// </summary>
    CPY_z_o_i,
    /// <summary>
    /// Instruction CPY - Copy signed integer immediate to vector elements (merging).
    /// </summary>
    CPY_z_p_i,
    /// <summary>
    /// Instruction CPY - Copy general-purpose register to vector elements (predicated).
    /// </summary>
    CPY_z_p_r,
    /// <summary>
    /// Instruction CPY - Copy SIMD&FP scalar register to vector elements (predicated).
    /// </summary>
    CPY_z_p_v,
    /// <summary>
    /// Instruction CRC32B - CRC32 checksum.
    /// </summary>
    CRC32B_32c_dp_2src,
    /// <summary>
    /// Instruction CRC32CB - CRC32C checksum.
    /// </summary>
    CRC32CB_32c_dp_2src,
    /// <summary>
    /// Instruction CRC32CH - CRC32C checksum.
    /// </summary>
    CRC32CH_32c_dp_2src,
    /// <summary>
    /// Instruction CRC32CW - CRC32C checksum.
    /// </summary>
    CRC32CW_32c_dp_2src,
    /// <summary>
    /// Instruction CRC32CX - CRC32C checksum.
    /// </summary>
    CRC32CX_64c_dp_2src,
    /// <summary>
    /// Instruction CRC32H - CRC32 checksum.
    /// </summary>
    CRC32H_32c_dp_2src,
    /// <summary>
    /// Instruction CRC32W - CRC32 checksum.
    /// </summary>
    CRC32W_32c_dp_2src,
    /// <summary>
    /// Instruction CRC32X - CRC32 checksum.
    /// </summary>
    CRC32X_64c_dp_2src,
    /// <summary>
    /// Instruction CSDB - Consumption of speculative data barrier.
    /// </summary>
    CSDB_hi_hints,
    /// <summary>
    /// Instruction CSEL - Conditional select.
    /// </summary>
    CSEL_32_condsel,
    /// <summary>
    /// Instruction CSEL - Conditional select.
    /// </summary>
    CSEL_64_condsel,
    /// <summary>
    /// Instruction CSINC - Conditional select increment.
    /// </summary>
    CSINC_32_condsel,
    /// <summary>
    /// Instruction CSINC - Conditional select increment.
    /// </summary>
    CSINC_64_condsel,
    /// <summary>
    /// Instruction CSINV - Conditional select invert.
    /// </summary>
    CSINV_32_condsel,
    /// <summary>
    /// Instruction CSINV - Conditional select invert.
    /// </summary>
    CSINV_64_condsel,
    /// <summary>
    /// Instruction CSNEG - Conditional select negation.
    /// </summary>
    CSNEG_32_condsel,
    /// <summary>
    /// Instruction CSNEG - Conditional select negation.
    /// </summary>
    CSNEG_64_condsel,
    /// <summary>
    /// Instruction CTERMEQ - Compare and terminate loop.
    /// </summary>
    CTERMEQ_rr,
    /// <summary>
    /// Instruction CTERMNE - Compare and terminate loop.
    /// </summary>
    CTERMNE_rr,
    /// <summary>
    /// Instruction CTZ - Count trailing zeros.
    /// </summary>
    CTZ_32_dp_1src,
    /// <summary>
    /// Instruction CTZ - Count trailing zeros.
    /// </summary>
    CTZ_64_dp_1src,
    /// <summary>
    /// Instruction DCPS1 - Debug change PE state to EL1.
    /// </summary>
    DCPS1_dc_exception,
    /// <summary>
    /// Instruction DCPS2 - Debug change PE state to EL2.
    /// </summary>
    DCPS2_dc_exception,
    /// <summary>
    /// Instruction DCPS3 - Debug change PE state to EL3.
    /// </summary>
    DCPS3_dc_exception,
    /// <summary>
    /// Instruction DECB - Decrement scalar by multiple of predicate constraint element count.
    /// </summary>
    DECB_r_rs,
    /// <summary>
    /// Instruction DECD - Decrement scalar by multiple of predicate constraint element count.
    /// </summary>
    DECD_r_rs,
    /// <summary>
    /// Instruction DECD - Decrement vector by multiple of predicate constraint element count.
    /// </summary>
    DECD_z_zs,
    /// <summary>
    /// Instruction DECH - Decrement scalar by multiple of predicate constraint element count.
    /// </summary>
    DECH_r_rs,
    /// <summary>
    /// Instruction DECH - Decrement vector by multiple of predicate constraint element count.
    /// </summary>
    DECH_z_zs,
    /// <summary>
    /// Instruction DECP - Decrement scalar by count of true predicate elements.
    /// </summary>
    DECP_r_p_r,
    /// <summary>
    /// Instruction DECP - Decrement vector by count of true predicate elements.
    /// </summary>
    DECP_z_p_z,
    /// <summary>
    /// Instruction DECW - Decrement scalar by multiple of predicate constraint element count.
    /// </summary>
    DECW_r_rs,
    /// <summary>
    /// Instruction DECW - Decrement vector by multiple of predicate constraint element count.
    /// </summary>
    DECW_z_zs,
    /// <summary>
    /// Instruction DGH - Data gathering hint.
    /// </summary>
    DGH_hi_hints,
    /// <summary>
    /// Instruction DMB - Data memory barrier.
    /// </summary>
    DMB_bo_barriers,
    /// <summary>
    /// Instruction DRPS - Debug restore PE state.
    /// </summary>
    DRPS_64e_branch_reg,
    /// <summary>
    /// Instruction DSB - Data synchronization barrier.
    /// </summary>
    DSB_bo_barriers,
    /// <summary>
    /// Instruction DSB - Data synchronization barrier.
    /// </summary>
    DSB_bon_barriers,
    /// <summary>
    /// Instruction DUPM - Broadcast logical bitmask immediate to vector (unpredicated).
    /// </summary>
    DUPM_z_i,
    /// <summary>
    /// Instruction DUPQ - Broadcast indexed element within each quadword vector segment (unpredicated).
    /// </summary>
    DUPQ_z_zi,
    /// <summary>
    /// Instruction DUP - Duplicate general-purpose register to vector.
    /// </summary>
    DUP_asimdins_dr_r,
    /// <summary>
    /// Instruction DUP - Duplicate vector element to vector or scalar.
    /// </summary>
    DUP_asimdins_dv_v,
    /// <summary>
    /// Instruction DUP - Duplicate vector element to vector or scalar.
    /// </summary>
    DUP_asisdone_only,
    /// <summary>
    /// Instruction DUP - Broadcast signed immediate to vector elements (unpredicated).
    /// </summary>
    DUP_z_i,
    /// <summary>
    /// Instruction DUP - Broadcast general-purpose register to vector elements (unpredicated).
    /// </summary>
    DUP_z_r,
    /// <summary>
    /// Instruction DUP - Broadcast indexed element to vector (unpredicated).
    /// </summary>
    DUP_z_zi,
    /// <summary>
    /// Instruction EON - Bitwise exclusive-OR NOT (shifted register).
    /// </summary>
    EON_32_log_shift,
    /// <summary>
    /// Instruction EON - Bitwise exclusive-OR NOT (shifted register).
    /// </summary>
    EON_64_log_shift,
    /// <summary>
    /// Instruction EOR3 - Three-way exclusive-OR.
    /// </summary>
    EOR3_vvv16_crypto4,
    /// <summary>
    /// Instruction EOR3 - Bitwise exclusive-OR of three vectors.
    /// </summary>
    EOR3_z_zzz,
    /// <summary>
    /// Instruction EORBT - Interleaving exclusive-OR (bottom, top).
    /// </summary>
    EORBT_z_zz,
    /// <summary>
    /// Instruction EORQV - Bitwise exclusive-OR reduction of quadword vector segments.
    /// </summary>
    EORQV_z_p_z,
    /// <summary>
    /// Instruction EORS - Bitwise exclusive-OR predicates, setting the condition flags.
    /// </summary>
    EORS_p_p_pp_z,
    /// <summary>
    /// Instruction EORTB - Interleaving exclusive-OR (top, bottom).
    /// </summary>
    EORTB_z_zz,
    /// <summary>
    /// Instruction EORV - Bitwise exclusive-OR reduction to scalar.
    /// </summary>
    EORV_r_p_z,
    /// <summary>
    /// Instruction EOR - Bitwise exclusive-OR (immediate).
    /// </summary>
    EOR_32_log_imm,
    /// <summary>
    /// Instruction EOR - Bitwise exclusive-OR (shifted register).
    /// </summary>
    EOR_32_log_shift,
    /// <summary>
    /// Instruction EOR - Bitwise exclusive-OR (immediate).
    /// </summary>
    EOR_64_log_imm,
    /// <summary>
    /// Instruction EOR - Bitwise exclusive-OR (shifted register).
    /// </summary>
    EOR_64_log_shift,
    /// <summary>
    /// Instruction EOR - Bitwise exclusive-OR (vector).
    /// </summary>
    EOR_asimdsame_only,
    /// <summary>
    /// Instruction EOR - Bitwise exclusive-OR predicates.
    /// </summary>
    EOR_p_p_pp_z,
    /// <summary>
    /// Instruction EOR - Bitwise exclusive-OR vectors (predicated).
    /// </summary>
    EOR_z_p_zz,
    /// <summary>
    /// Instruction EOR - Bitwise exclusive-OR with immediate (unpredicated).
    /// </summary>
    EOR_z_zi,
    /// <summary>
    /// Instruction EOR - Bitwise exclusive-OR vectors (unpredicated).
    /// </summary>
    EOR_z_zz,
    /// <summary>
    /// Instruction ERETAA - Exception return, with pointer authentication.
    /// </summary>
    ERETAA_64e_branch_reg,
    /// <summary>
    /// Instruction ERETAB - Exception return, with pointer authentication.
    /// </summary>
    ERETAB_64e_branch_reg,
    /// <summary>
    /// Instruction ERET - Exception return.
    /// </summary>
    ERET_64e_branch_reg,
    /// <summary>
    /// Instruction ESB - Error synchronization barrier.
    /// </summary>
    ESB_hi_hints,
    /// <summary>
    /// Instruction EXPAND - Copy lower-numbered vector elements to active elements.
    /// </summary>
    EXPAND_z_p_z,
    /// <summary>
    /// Instruction EXTQ - Extract vector segment from each pair of quadword vector segments.
    /// </summary>
    EXTQ_z_zi_des,
    /// <summary>
    /// Instruction EXTR - Extract register.
    /// </summary>
    EXTR_32_extract,
    /// <summary>
    /// Instruction EXTR - Extract register.
    /// </summary>
    EXTR_64_extract,
    /// <summary>
    /// Instruction EXT - Extract vector from pair of vectors.
    /// </summary>
    EXT_asimdext_only,
    /// <summary>
    /// Instruction EXT - Extract vector from pair of vectors.
    /// </summary>
    EXT_z_zi_con,
    /// <summary>
    /// Instruction EXT - Extract vector from pair of vectors.
    /// </summary>
    EXT_z_zi_des,
    /// <summary>
    /// Instruction F1CVTLT - 8-bit floating-point convert to half-precision (top).
    /// </summary>
    F1CVTLT_z_z8_b2h,
    /// <summary>
    /// Instruction F1CVTL - 8-bit floating-point convert to half-precision (vector).
    /// </summary>
    F1CVTL_asimdmisc_v,
    /// <summary>
    /// Instruction F1CVTL - Multi-vector floating-point convert from 8-bit floating-point to deinterleaved half-precision.
    /// </summary>
    F1CVTL_mz2_z8,
    /// <summary>
    /// Instruction F1CVT - Multi-vector floating-point convert from 8-bit floating-point to half-precision (in-order).
    /// </summary>
    F1CVT_mz2_z8,
    /// <summary>
    /// Instruction F1CVT - 8-bit floating-point convert to half-precision.
    /// </summary>
    F1CVT_z_z8_b2h,
    /// <summary>
    /// Instruction F2CVTLT - 8-bit floating-point convert to half-precision (top).
    /// </summary>
    F2CVTLT_z_z8_b2h,
    /// <summary>
    /// Instruction F2CVTL - 8-bit floating-point convert to half-precision (vector).
    /// </summary>
    F2CVTL_asimdmisc_v,
    /// <summary>
    /// Instruction F2CVTL - Multi-vector floating-point convert from 8-bit floating-point to deinterleaved half-precision.
    /// </summary>
    F2CVTL_mz2_z8,
    /// <summary>
    /// Instruction F2CVT - Multi-vector floating-point convert from 8-bit floating-point to half-precision (in-order).
    /// </summary>
    F2CVT_mz2_z8,
    /// <summary>
    /// Instruction F2CVT - 8-bit floating-point convert to half-precision.
    /// </summary>
    F2CVT_z_z8_b2h,
    /// <summary>
    /// Instruction FABD - Floating-point absolute difference (vector).
    /// </summary>
    FABD_asimdsame_only,
    /// <summary>
    /// Instruction FABD - Floating-point absolute difference (vector).
    /// </summary>
    FABD_asimdsamefp16_only,
    /// <summary>
    /// Instruction FABD - Floating-point absolute difference (vector).
    /// </summary>
    FABD_asisdsame_only,
    /// <summary>
    /// Instruction FABD - Floating-point absolute difference (vector).
    /// </summary>
    FABD_asisdsamefp16_only,
    /// <summary>
    /// Instruction FABD - Floating-point absolute difference (predicated).
    /// </summary>
    FABD_z_p_zz,
    /// <summary>
    /// Instruction FABS - Floating-point absolute value (vector).
    /// </summary>
    FABS_asimdmisc_r,
    /// <summary>
    /// Instruction FABS - Floating-point absolute value (vector).
    /// </summary>
    FABS_asimdmiscfp16_r,
    /// <summary>
    /// Instruction FABS - Floating-point absolute value (scalar).
    /// </summary>
    FABS_d_floatdp1,
    /// <summary>
    /// Instruction FABS - Floating-point absolute value (scalar).
    /// </summary>
    FABS_h_floatdp1,
    /// <summary>
    /// Instruction FABS - Floating-point absolute value (scalar).
    /// </summary>
    FABS_s_floatdp1,
    /// <summary>
    /// Instruction FABS - Floating-point absolute value (predicated).
    /// </summary>
    FABS_z_p_z_m,
    /// <summary>
    /// Instruction FABS - Floating-point absolute value (predicated).
    /// </summary>
    FABS_z_p_z_z,
    /// <summary>
    /// Instruction FACGE - Floating-point absolute compare greater than or equal (vector).
    /// </summary>
    FACGE_asimdsame_only,
    /// <summary>
    /// Instruction FACGE - Floating-point absolute compare greater than or equal (vector).
    /// </summary>
    FACGE_asimdsamefp16_only,
    /// <summary>
    /// Instruction FACGE - Floating-point absolute compare greater than or equal (vector).
    /// </summary>
    FACGE_asisdsame_only,
    /// <summary>
    /// Instruction FACGE - Floating-point absolute compare greater than or equal (vector).
    /// </summary>
    FACGE_asisdsamefp16_only,
    /// <summary>
    /// Instruction FACGE - Floating-point absolute compare vectors.
    /// </summary>
    FACGE_p_p_zz,
    /// <summary>
    /// Instruction FACGT - Floating-point absolute compare greater than (vector).
    /// </summary>
    FACGT_asimdsame_only,
    /// <summary>
    /// Instruction FACGT - Floating-point absolute compare greater than (vector).
    /// </summary>
    FACGT_asimdsamefp16_only,
    /// <summary>
    /// Instruction FACGT - Floating-point absolute compare greater than (vector).
    /// </summary>
    FACGT_asisdsame_only,
    /// <summary>
    /// Instruction FACGT - Floating-point absolute compare greater than (vector).
    /// </summary>
    FACGT_asisdsamefp16_only,
    /// <summary>
    /// Instruction FACGT - Floating-point absolute compare vectors.
    /// </summary>
    FACGT_p_p_zz,
    /// <summary>
    /// Instruction FADDA - Floating-point add strictly-ordered reduction, accumulating in scalar.
    /// </summary>
    FADDA_v_p_z,
    /// <summary>
    /// Instruction FADDP - Floating-point add pairwise (vector).
    /// </summary>
    FADDP_asimdsame_only,
    /// <summary>
    /// Instruction FADDP - Floating-point add pairwise (vector).
    /// </summary>
    FADDP_asimdsamefp16_only,
    /// <summary>
    /// Instruction FADDP - Floating-point add pair of elements (scalar).
    /// </summary>
    FADDP_asisdpair_only_h,
    /// <summary>
    /// Instruction FADDP - Floating-point add pair of elements (scalar).
    /// </summary>
    FADDP_asisdpair_only_sd,
    /// <summary>
    /// Instruction FADDP - Floating-point add pairwise.
    /// </summary>
    FADDP_z_p_zz,
    /// <summary>
    /// Instruction FADDQV - Floating-point add recursive reduction of quadword vector segments.
    /// </summary>
    FADDQV_z_p_z,
    /// <summary>
    /// Instruction FADDV - Floating-point add recursive reduction to scalar.
    /// </summary>
    FADDV_v_p_z,
    /// <summary>
    /// Instruction FADD - Floating-point add (vector).
    /// </summary>
    FADD_asimdsame_only,
    /// <summary>
    /// Instruction FADD - Floating-point add (vector).
    /// </summary>
    FADD_asimdsamefp16_only,
    /// <summary>
    /// Instruction FADD - Floating-point add (scalar).
    /// </summary>
    FADD_d_floatdp2,
    /// <summary>
    /// Instruction FADD - Floating-point add (scalar).
    /// </summary>
    FADD_h_floatdp2,
    /// <summary>
    /// Instruction FADD - Floating-point add (scalar).
    /// </summary>
    FADD_s_floatdp2,
    /// <summary>
    /// Instruction FADD - Floating-point add immediate (predicated).
    /// </summary>
    FADD_z_p_zs,
    /// <summary>
    /// Instruction FADD - Floating-point add vector (predicated).
    /// </summary>
    FADD_z_p_zz,
    /// <summary>
    /// Instruction FADD - Floating-point add vector (unpredicated).
    /// </summary>
    FADD_z_zz,
    /// <summary>
    /// Instruction FADD - Floating-point add multi-vector to ZA array vector accumulators.
    /// </summary>
    FADD_za_zw_2x2,
    /// <summary>
    /// Instruction FADD - Floating-point add multi-vector to ZA array vector accumulators.
    /// </summary>
    FADD_za_zw_2x2_16,
    /// <summary>
    /// Instruction FADD - Floating-point add multi-vector to ZA array vector accumulators.
    /// </summary>
    FADD_za_zw_4x4,
    /// <summary>
    /// Instruction FADD - Floating-point add multi-vector to ZA array vector accumulators.
    /// </summary>
    FADD_za_zw_4x4_16,
    /// <summary>
    /// Instruction FAMAX - Floating-point absolute maximum.
    /// </summary>
    FAMAX_asimdsame_only,
    /// <summary>
    /// Instruction FAMAX - Floating-point absolute maximum.
    /// </summary>
    FAMAX_asimdsamefp16_only,
    /// <summary>
    /// Instruction FAMAX - Multi-vector floating-point absolute maximum.
    /// </summary>
    FAMAX_mz_zzw_2x2,
    /// <summary>
    /// Instruction FAMAX - Multi-vector floating-point absolute maximum.
    /// </summary>
    FAMAX_mz_zzw_4x4,
    /// <summary>
    /// Instruction FAMAX - Floating-point absolute maximum (predicated).
    /// </summary>
    FAMAX_z_p_zz,
    /// <summary>
    /// Instruction FAMIN - Floating-point absolute minimum.
    /// </summary>
    FAMIN_asimdsame_only,
    /// <summary>
    /// Instruction FAMIN - Floating-point absolute minimum.
    /// </summary>
    FAMIN_asimdsamefp16_only,
    /// <summary>
    /// Instruction FAMIN - Multi-vector floating-point absolute minimum.
    /// </summary>
    FAMIN_mz_zzw_2x2,
    /// <summary>
    /// Instruction FAMIN - Multi-vector floating-point absolute minimum.
    /// </summary>
    FAMIN_mz_zzw_4x4,
    /// <summary>
    /// Instruction FAMIN - Floating-point absolute minimum (predicated).
    /// </summary>
    FAMIN_z_p_zz,
    /// <summary>
    /// Instruction FCADD - Floating-point complex add.
    /// </summary>
    FCADD_asimdsame2_c,
    /// <summary>
    /// Instruction FCADD - Floating-point complex add with rotate (predicated).
    /// </summary>
    FCADD_z_p_zz,
    /// <summary>
    /// Instruction FCCMPE - Floating-point conditional signaling compare (scalar).
    /// </summary>
    FCCMPE_d_floatccmp,
    /// <summary>
    /// Instruction FCCMPE - Floating-point conditional signaling compare (scalar).
    /// </summary>
    FCCMPE_h_floatccmp,
    /// <summary>
    /// Instruction FCCMPE - Floating-point conditional signaling compare (scalar).
    /// </summary>
    FCCMPE_s_floatccmp,
    /// <summary>
    /// Instruction FCCMP - Floating-point conditional quiet compare (scalar).
    /// </summary>
    FCCMP_d_floatccmp,
    /// <summary>
    /// Instruction FCCMP - Floating-point conditional quiet compare (scalar).
    /// </summary>
    FCCMP_h_floatccmp,
    /// <summary>
    /// Instruction FCCMP - Floating-point conditional quiet compare (scalar).
    /// </summary>
    FCCMP_s_floatccmp,
    /// <summary>
    /// Instruction FCLAMP - Multi-vector floating-point clamp to minimum/maximum number.
    /// </summary>
    FCLAMP_mz_zz_2,
    /// <summary>
    /// Instruction FCLAMP - Multi-vector floating-point clamp to minimum/maximum number.
    /// </summary>
    FCLAMP_mz_zz_4,
    /// <summary>
    /// Instruction FCLAMP - Floating-point clamp to minimum/maximum number.
    /// </summary>
    FCLAMP_z_zz,
    /// <summary>
    /// Instruction FCMEQ - Floating-point compare equal to zero (vector).
    /// </summary>
    FCMEQ_asimdmisc_fz,
    /// <summary>
    /// Instruction FCMEQ - Floating-point compare equal to zero (vector).
    /// </summary>
    FCMEQ_asimdmiscfp16_fz,
    /// <summary>
    /// Instruction FCMEQ - Floating-point compare equal (vector).
    /// </summary>
    FCMEQ_asimdsame_only,
    /// <summary>
    /// Instruction FCMEQ - Floating-point compare equal (vector).
    /// </summary>
    FCMEQ_asimdsamefp16_only,
    /// <summary>
    /// Instruction FCMEQ - Floating-point compare equal to zero (vector).
    /// </summary>
    FCMEQ_asisdmisc_fz,
    /// <summary>
    /// Instruction FCMEQ - Floating-point compare equal to zero (vector).
    /// </summary>
    FCMEQ_asisdmiscfp16_fz,
    /// <summary>
    /// Instruction FCMEQ - Floating-point compare equal (vector).
    /// </summary>
    FCMEQ_asisdsame_only,
    /// <summary>
    /// Instruction FCMEQ - Floating-point compare equal (vector).
    /// </summary>
    FCMEQ_asisdsamefp16_only,
    /// <summary>
    /// Instruction FCMEQ - Floating-point compare vector with zero.
    /// </summary>
    FCMEQ_p_p_z0,
    /// <summary>
    /// Instruction FCMEQ - Floating-point compare vectors.
    /// </summary>
    FCMEQ_p_p_zz,
    /// <summary>
    /// Instruction FCMGE - Floating-point compare greater than or equal to zero (vector).
    /// </summary>
    FCMGE_asimdmisc_fz,
    /// <summary>
    /// Instruction FCMGE - Floating-point compare greater than or equal to zero (vector).
    /// </summary>
    FCMGE_asimdmiscfp16_fz,
    /// <summary>
    /// Instruction FCMGE - Floating-point compare greater than or equal (vector).
    /// </summary>
    FCMGE_asimdsame_only,
    /// <summary>
    /// Instruction FCMGE - Floating-point compare greater than or equal (vector).
    /// </summary>
    FCMGE_asimdsamefp16_only,
    /// <summary>
    /// Instruction FCMGE - Floating-point compare greater than or equal to zero (vector).
    /// </summary>
    FCMGE_asisdmisc_fz,
    /// <summary>
    /// Instruction FCMGE - Floating-point compare greater than or equal to zero (vector).
    /// </summary>
    FCMGE_asisdmiscfp16_fz,
    /// <summary>
    /// Instruction FCMGE - Floating-point compare greater than or equal (vector).
    /// </summary>
    FCMGE_asisdsame_only,
    /// <summary>
    /// Instruction FCMGE - Floating-point compare greater than or equal (vector).
    /// </summary>
    FCMGE_asisdsamefp16_only,
    /// <summary>
    /// Instruction FCMGE - Floating-point compare vector with zero.
    /// </summary>
    FCMGE_p_p_z0,
    /// <summary>
    /// Instruction FCMGE - Floating-point compare vectors.
    /// </summary>
    FCMGE_p_p_zz,
    /// <summary>
    /// Instruction FCMGT - Floating-point compare greater than zero (vector).
    /// </summary>
    FCMGT_asimdmisc_fz,
    /// <summary>
    /// Instruction FCMGT - Floating-point compare greater than zero (vector).
    /// </summary>
    FCMGT_asimdmiscfp16_fz,
    /// <summary>
    /// Instruction FCMGT - Floating-point compare greater than (vector).
    /// </summary>
    FCMGT_asimdsame_only,
    /// <summary>
    /// Instruction FCMGT - Floating-point compare greater than (vector).
    /// </summary>
    FCMGT_asimdsamefp16_only,
    /// <summary>
    /// Instruction FCMGT - Floating-point compare greater than zero (vector).
    /// </summary>
    FCMGT_asisdmisc_fz,
    /// <summary>
    /// Instruction FCMGT - Floating-point compare greater than zero (vector).
    /// </summary>
    FCMGT_asisdmiscfp16_fz,
    /// <summary>
    /// Instruction FCMGT - Floating-point compare greater than (vector).
    /// </summary>
    FCMGT_asisdsame_only,
    /// <summary>
    /// Instruction FCMGT - Floating-point compare greater than (vector).
    /// </summary>
    FCMGT_asisdsamefp16_only,
    /// <summary>
    /// Instruction FCMGT - Floating-point compare vector with zero.
    /// </summary>
    FCMGT_p_p_z0,
    /// <summary>
    /// Instruction FCMGT - Floating-point compare vectors.
    /// </summary>
    FCMGT_p_p_zz,
    /// <summary>
    /// Instruction FCMLA - Floating-point complex multiply accumulate (by element).
    /// </summary>
    FCMLA_advsimd_elt,
    /// <summary>
    /// Instruction FCMLA - Floating-point complex multiply accumulate.
    /// </summary>
    FCMLA_asimdsame2_c,
    /// <summary>
    /// Instruction FCMLA - Floating-point complex multiply-add with rotate (predicated).
    /// </summary>
    FCMLA_z_p_zzz,
    /// <summary>
    /// Instruction FCMLA - Floating-point complex multiply-add by indexed values with rotate.
    /// </summary>
    FCMLA_z_zzzi_h,
    /// <summary>
    /// Instruction FCMLA - Floating-point complex multiply-add by indexed values with rotate.
    /// </summary>
    FCMLA_z_zzzi_s,
    /// <summary>
    /// Instruction FCMLE - Floating-point compare less than or equal to zero (vector).
    /// </summary>
    FCMLE_asimdmisc_fz,
    /// <summary>
    /// Instruction FCMLE - Floating-point compare less than or equal to zero (vector).
    /// </summary>
    FCMLE_asimdmiscfp16_fz,
    /// <summary>
    /// Instruction FCMLE - Floating-point compare less than or equal to zero (vector).
    /// </summary>
    FCMLE_asisdmisc_fz,
    /// <summary>
    /// Instruction FCMLE - Floating-point compare less than or equal to zero (vector).
    /// </summary>
    FCMLE_asisdmiscfp16_fz,
    /// <summary>
    /// Instruction FCMLE - Floating-point compare vector with zero.
    /// </summary>
    FCMLE_p_p_z0,
    /// <summary>
    /// Instruction FCMLT - Floating-point compare less than zero (vector).
    /// </summary>
    FCMLT_asimdmisc_fz,
    /// <summary>
    /// Instruction FCMLT - Floating-point compare less than zero (vector).
    /// </summary>
    FCMLT_asimdmiscfp16_fz,
    /// <summary>
    /// Instruction FCMLT - Floating-point compare less than zero (vector).
    /// </summary>
    FCMLT_asisdmisc_fz,
    /// <summary>
    /// Instruction FCMLT - Floating-point compare less than zero (vector).
    /// </summary>
    FCMLT_asisdmiscfp16_fz,
    /// <summary>
    /// Instruction FCMLT - Floating-point compare vector with zero.
    /// </summary>
    FCMLT_p_p_z0,
    /// <summary>
    /// Instruction FCMNE - Floating-point compare vector with zero.
    /// </summary>
    FCMNE_p_p_z0,
    /// <summary>
    /// Instruction FCMNE - Floating-point compare vectors.
    /// </summary>
    FCMNE_p_p_zz,
    /// <summary>
    /// Instruction FCMPE - Floating-point signaling compare (scalar).
    /// </summary>
    FCMPE_d_floatcmp,
    /// <summary>
    /// Instruction FCMPE - Floating-point signaling compare (scalar).
    /// </summary>
    FCMPE_dz_floatcmp,
    /// <summary>
    /// Instruction FCMPE - Floating-point signaling compare (scalar).
    /// </summary>
    FCMPE_h_floatcmp,
    /// <summary>
    /// Instruction FCMPE - Floating-point signaling compare (scalar).
    /// </summary>
    FCMPE_hz_floatcmp,
    /// <summary>
    /// Instruction FCMPE - Floating-point signaling compare (scalar).
    /// </summary>
    FCMPE_s_floatcmp,
    /// <summary>
    /// Instruction FCMPE - Floating-point signaling compare (scalar).
    /// </summary>
    FCMPE_sz_floatcmp,
    /// <summary>
    /// Instruction FCMP - Floating-point quiet compare (scalar).
    /// </summary>
    FCMP_d_floatcmp,
    /// <summary>
    /// Instruction FCMP - Floating-point quiet compare (scalar).
    /// </summary>
    FCMP_dz_floatcmp,
    /// <summary>
    /// Instruction FCMP - Floating-point quiet compare (scalar).
    /// </summary>
    FCMP_h_floatcmp,
    /// <summary>
    /// Instruction FCMP - Floating-point quiet compare (scalar).
    /// </summary>
    FCMP_hz_floatcmp,
    /// <summary>
    /// Instruction FCMP - Floating-point quiet compare (scalar).
    /// </summary>
    FCMP_s_floatcmp,
    /// <summary>
    /// Instruction FCMP - Floating-point quiet compare (scalar).
    /// </summary>
    FCMP_sz_floatcmp,
    /// <summary>
    /// Instruction FCMUO - Floating-point compare vectors.
    /// </summary>
    FCMUO_p_p_zz,
    /// <summary>
    /// Instruction FCPY - Copy 8-bit floating-point immediate to vector elements (predicated).
    /// </summary>
    FCPY_z_p_i,
    /// <summary>
    /// Instruction FCSEL - Floating-point conditional select (scalar).
    /// </summary>
    FCSEL_d_floatsel,
    /// <summary>
    /// Instruction FCSEL - Floating-point conditional select (scalar).
    /// </summary>
    FCSEL_h_floatsel,
    /// <summary>
    /// Instruction FCSEL - Floating-point conditional select (scalar).
    /// </summary>
    FCSEL_s_floatsel,
    /// <summary>
    /// Instruction FCVTAS - Floating-point convert to signed integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    FCVTAS_32d_float2int,
    /// <summary>
    /// Instruction FCVTAS - Floating-point convert to signed integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    FCVTAS_32h_float2int,
    /// <summary>
    /// Instruction FCVTAS - Floating-point convert to signed integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    FCVTAS_32s_float2int,
    /// <summary>
    /// Instruction FCVTAS - Floating-point convert to signed integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    FCVTAS_64d_float2int,
    /// <summary>
    /// Instruction FCVTAS - Floating-point convert to signed integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    FCVTAS_64h_float2int,
    /// <summary>
    /// Instruction FCVTAS - Floating-point convert to signed integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    FCVTAS_64s_float2int,
    /// <summary>
    /// Instruction FCVTAS - Floating-point convert to signed integer, rounding to nearest with ties to away (vector).
    /// </summary>
    FCVTAS_asimdmisc_r,
    /// <summary>
    /// Instruction FCVTAS - Floating-point convert to signed integer, rounding to nearest with ties to away (vector).
    /// </summary>
    FCVTAS_asimdmiscfp16_r,
    /// <summary>
    /// Instruction FCVTAS - Floating-point convert to signed integer, rounding to nearest with ties to away (vector).
    /// </summary>
    FCVTAS_asisdmisc_r,
    /// <summary>
    /// Instruction FCVTAS - Floating-point convert to signed integer, rounding to nearest with ties to away (vector).
    /// </summary>
    FCVTAS_asisdmiscfp16_r,
    /// <summary>
    /// Instruction FCVTAS - Floating-point convert to signed integer, rounding to nearest with ties to away (scalar SIMD&FP).
    /// </summary>
    FCVTAS_sisd_32d,
    /// <summary>
    /// Instruction FCVTAS - Floating-point convert to signed integer, rounding to nearest with ties to away (scalar SIMD&FP).
    /// </summary>
    FCVTAS_sisd_32h,
    /// <summary>
    /// Instruction FCVTAS - Floating-point convert to signed integer, rounding to nearest with ties to away (scalar SIMD&FP).
    /// </summary>
    FCVTAS_sisd_64h,
    /// <summary>
    /// Instruction FCVTAS - Floating-point convert to signed integer, rounding to nearest with ties to away (scalar SIMD&FP).
    /// </summary>
    FCVTAS_sisd_64s,
    /// <summary>
    /// Instruction FCVTAU - Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    FCVTAU_32d_float2int,
    /// <summary>
    /// Instruction FCVTAU - Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    FCVTAU_32h_float2int,
    /// <summary>
    /// Instruction FCVTAU - Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    FCVTAU_32s_float2int,
    /// <summary>
    /// Instruction FCVTAU - Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    FCVTAU_64d_float2int,
    /// <summary>
    /// Instruction FCVTAU - Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    FCVTAU_64h_float2int,
    /// <summary>
    /// Instruction FCVTAU - Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    FCVTAU_64s_float2int,
    /// <summary>
    /// Instruction FCVTAU - Floating-point convert to unsigned integer, rounding to nearest with ties to away (vector).
    /// </summary>
    FCVTAU_asimdmisc_r,
    /// <summary>
    /// Instruction FCVTAU - Floating-point convert to unsigned integer, rounding to nearest with ties to away (vector).
    /// </summary>
    FCVTAU_asimdmiscfp16_r,
    /// <summary>
    /// Instruction FCVTAU - Floating-point convert to unsigned integer, rounding to nearest with ties to away (vector).
    /// </summary>
    FCVTAU_asisdmisc_r,
    /// <summary>
    /// Instruction FCVTAU - Floating-point convert to unsigned integer, rounding to nearest with ties to away (vector).
    /// </summary>
    FCVTAU_asisdmiscfp16_r,
    /// <summary>
    /// Instruction FCVTAU - Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar SIMD&FP).
    /// </summary>
    FCVTAU_sisd_32d,
    /// <summary>
    /// Instruction FCVTAU - Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar SIMD&FP).
    /// </summary>
    FCVTAU_sisd_32h,
    /// <summary>
    /// Instruction FCVTAU - Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar SIMD&FP).
    /// </summary>
    FCVTAU_sisd_64h,
    /// <summary>
    /// Instruction FCVTAU - Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar SIMD&FP).
    /// </summary>
    FCVTAU_sisd_64s,
    /// <summary>
    /// Instruction FCVTLT - Floating-point up convert long (top, predicated).
    /// </summary>
    FCVTLT_z_p_z_h2s,
    /// <summary>
    /// Instruction FCVTLT - Floating-point up convert long (top, predicated).
    /// </summary>
    FCVTLT_z_p_z_h2sz,
    /// <summary>
    /// Instruction FCVTLT - Floating-point up convert long (top, predicated).
    /// </summary>
    FCVTLT_z_p_z_s2d,
    /// <summary>
    /// Instruction FCVTLT - Floating-point up convert long (top, predicated).
    /// </summary>
    FCVTLT_z_p_z_s2dz,
    /// <summary>
    /// Instruction FCVTL - Floating-point convert to higher precision long (vector).
    /// </summary>
    FCVTL_asimdmisc_l,
    /// <summary>
    /// Instruction FCVTL - Multi-vector floating-point convert from half-precision to deinterleaved single-precision.
    /// </summary>
    FCVTL_mz2_z,
    /// <summary>
    /// Instruction FCVTMS - Floating-point convert to signed integer, rounding toward minus infinity (scalar).
    /// </summary>
    FCVTMS_32d_float2int,
    /// <summary>
    /// Instruction FCVTMS - Floating-point convert to signed integer, rounding toward minus infinity (scalar).
    /// </summary>
    FCVTMS_32h_float2int,
    /// <summary>
    /// Instruction FCVTMS - Floating-point convert to signed integer, rounding toward minus infinity (scalar).
    /// </summary>
    FCVTMS_32s_float2int,
    /// <summary>
    /// Instruction FCVTMS - Floating-point convert to signed integer, rounding toward minus infinity (scalar).
    /// </summary>
    FCVTMS_64d_float2int,
    /// <summary>
    /// Instruction FCVTMS - Floating-point convert to signed integer, rounding toward minus infinity (scalar).
    /// </summary>
    FCVTMS_64h_float2int,
    /// <summary>
    /// Instruction FCVTMS - Floating-point convert to signed integer, rounding toward minus infinity (scalar).
    /// </summary>
    FCVTMS_64s_float2int,
    /// <summary>
    /// Instruction FCVTMS - Floating-point convert to signed integer, rounding toward minus infinity (vector).
    /// </summary>
    FCVTMS_asimdmisc_r,
    /// <summary>
    /// Instruction FCVTMS - Floating-point convert to signed integer, rounding toward minus infinity (vector).
    /// </summary>
    FCVTMS_asimdmiscfp16_r,
    /// <summary>
    /// Instruction FCVTMS - Floating-point convert to signed integer, rounding toward minus infinity (vector).
    /// </summary>
    FCVTMS_asisdmisc_r,
    /// <summary>
    /// Instruction FCVTMS - Floating-point convert to signed integer, rounding toward minus infinity (vector).
    /// </summary>
    FCVTMS_asisdmiscfp16_r,
    /// <summary>
    /// Instruction FCVTMS - Floating-point convert to signed integer, rounding toward minus infinity (scalar SIMD&FP).
    /// </summary>
    FCVTMS_sisd_32d,
    /// <summary>
    /// Instruction FCVTMS - Floating-point convert to signed integer, rounding toward minus infinity (scalar SIMD&FP).
    /// </summary>
    FCVTMS_sisd_32h,
    /// <summary>
    /// Instruction FCVTMS - Floating-point convert to signed integer, rounding toward minus infinity (scalar SIMD&FP).
    /// </summary>
    FCVTMS_sisd_64h,
    /// <summary>
    /// Instruction FCVTMS - Floating-point convert to signed integer, rounding toward minus infinity (scalar SIMD&FP).
    /// </summary>
    FCVTMS_sisd_64s,
    /// <summary>
    /// Instruction FCVTMU - Floating-point convert to unsigned integer, rounding toward minus infinity (scalar).
    /// </summary>
    FCVTMU_32d_float2int,
    /// <summary>
    /// Instruction FCVTMU - Floating-point convert to unsigned integer, rounding toward minus infinity (scalar).
    /// </summary>
    FCVTMU_32h_float2int,
    /// <summary>
    /// Instruction FCVTMU - Floating-point convert to unsigned integer, rounding toward minus infinity (scalar).
    /// </summary>
    FCVTMU_32s_float2int,
    /// <summary>
    /// Instruction FCVTMU - Floating-point convert to unsigned integer, rounding toward minus infinity (scalar).
    /// </summary>
    FCVTMU_64d_float2int,
    /// <summary>
    /// Instruction FCVTMU - Floating-point convert to unsigned integer, rounding toward minus infinity (scalar).
    /// </summary>
    FCVTMU_64h_float2int,
    /// <summary>
    /// Instruction FCVTMU - Floating-point convert to unsigned integer, rounding toward minus infinity (scalar).
    /// </summary>
    FCVTMU_64s_float2int,
    /// <summary>
    /// Instruction FCVTMU - Floating-point convert to unsigned integer, rounding toward minus infinity (vector).
    /// </summary>
    FCVTMU_asimdmisc_r,
    /// <summary>
    /// Instruction FCVTMU - Floating-point convert to unsigned integer, rounding toward minus infinity (vector).
    /// </summary>
    FCVTMU_asimdmiscfp16_r,
    /// <summary>
    /// Instruction FCVTMU - Floating-point convert to unsigned integer, rounding toward minus infinity (vector).
    /// </summary>
    FCVTMU_asisdmisc_r,
    /// <summary>
    /// Instruction FCVTMU - Floating-point convert to unsigned integer, rounding toward minus infinity (vector).
    /// </summary>
    FCVTMU_asisdmiscfp16_r,
    /// <summary>
    /// Instruction FCVTMU - Floating-point convert to unsigned integer, rounding toward minus infinity (scalar SIMD&FP).
    /// </summary>
    FCVTMU_sisd_32d,
    /// <summary>
    /// Instruction FCVTMU - Floating-point convert to unsigned integer, rounding toward minus infinity (scalar SIMD&FP).
    /// </summary>
    FCVTMU_sisd_32h,
    /// <summary>
    /// Instruction FCVTMU - Floating-point convert to unsigned integer, rounding toward minus infinity (scalar SIMD&FP).
    /// </summary>
    FCVTMU_sisd_64h,
    /// <summary>
    /// Instruction FCVTMU - Floating-point convert to unsigned integer, rounding toward minus infinity (scalar SIMD&FP).
    /// </summary>
    FCVTMU_sisd_64s,
    /// <summary>
    /// Instruction FCVTNB - Single-precision convert, narrow and interleave to 8-bit floating-point (bottom).
    /// </summary>
    FCVTNB_z8_mz2_s2b,
    /// <summary>
    /// Instruction FCVTNS - Floating-point convert to signed integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    FCVTNS_32d_float2int,
    /// <summary>
    /// Instruction FCVTNS - Floating-point convert to signed integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    FCVTNS_32h_float2int,
    /// <summary>
    /// Instruction FCVTNS - Floating-point convert to signed integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    FCVTNS_32s_float2int,
    /// <summary>
    /// Instruction FCVTNS - Floating-point convert to signed integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    FCVTNS_64d_float2int,
    /// <summary>
    /// Instruction FCVTNS - Floating-point convert to signed integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    FCVTNS_64h_float2int,
    /// <summary>
    /// Instruction FCVTNS - Floating-point convert to signed integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    FCVTNS_64s_float2int,
    /// <summary>
    /// Instruction FCVTNS - Floating-point convert to signed integer, rounding to nearest with ties to even (vector).
    /// </summary>
    FCVTNS_asimdmisc_r,
    /// <summary>
    /// Instruction FCVTNS - Floating-point convert to signed integer, rounding to nearest with ties to even (vector).
    /// </summary>
    FCVTNS_asimdmiscfp16_r,
    /// <summary>
    /// Instruction FCVTNS - Floating-point convert to signed integer, rounding to nearest with ties to even (vector).
    /// </summary>
    FCVTNS_asisdmisc_r,
    /// <summary>
    /// Instruction FCVTNS - Floating-point convert to signed integer, rounding to nearest with ties to even (vector).
    /// </summary>
    FCVTNS_asisdmiscfp16_r,
    /// <summary>
    /// Instruction FCVTNS - Floating-point convert to signed integer, rounding to nearest with ties to even (scalar SIMD&FP).
    /// </summary>
    FCVTNS_sisd_32d,
    /// <summary>
    /// Instruction FCVTNS - Floating-point convert to signed integer, rounding to nearest with ties to even (scalar SIMD&FP).
    /// </summary>
    FCVTNS_sisd_32h,
    /// <summary>
    /// Instruction FCVTNS - Floating-point convert to signed integer, rounding to nearest with ties to even (scalar SIMD&FP).
    /// </summary>
    FCVTNS_sisd_64h,
    /// <summary>
    /// Instruction FCVTNS - Floating-point convert to signed integer, rounding to nearest with ties to even (scalar SIMD&FP).
    /// </summary>
    FCVTNS_sisd_64s,
    /// <summary>
    /// Instruction FCVTNT - Single-precision convert, narrow and interleave to 8-bit floating-point (top).
    /// </summary>
    FCVTNT_z8_mz2_s2b,
    /// <summary>
    /// Instruction FCVTNT - Floating-point down convert and narrow (top, predicated).
    /// </summary>
    FCVTNT_z_p_z_d2s,
    /// <summary>
    /// Instruction FCVTNT - Floating-point down convert and narrow (top, predicated).
    /// </summary>
    FCVTNT_z_p_z_d2sz,
    /// <summary>
    /// Instruction FCVTNT - Floating-point down convert and narrow (top, predicated).
    /// </summary>
    FCVTNT_z_p_z_s2h,
    /// <summary>
    /// Instruction FCVTNT - Floating-point down convert and narrow (top, predicated).
    /// </summary>
    FCVTNT_z_p_z_s2hz,
    /// <summary>
    /// Instruction FCVTNU - Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    FCVTNU_32d_float2int,
    /// <summary>
    /// Instruction FCVTNU - Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    FCVTNU_32h_float2int,
    /// <summary>
    /// Instruction FCVTNU - Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    FCVTNU_32s_float2int,
    /// <summary>
    /// Instruction FCVTNU - Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    FCVTNU_64d_float2int,
    /// <summary>
    /// Instruction FCVTNU - Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    FCVTNU_64h_float2int,
    /// <summary>
    /// Instruction FCVTNU - Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    FCVTNU_64s_float2int,
    /// <summary>
    /// Instruction FCVTNU - Floating-point convert to unsigned integer, rounding to nearest with ties to even (vector).
    /// </summary>
    FCVTNU_asimdmisc_r,
    /// <summary>
    /// Instruction FCVTNU - Floating-point convert to unsigned integer, rounding to nearest with ties to even (vector).
    /// </summary>
    FCVTNU_asimdmiscfp16_r,
    /// <summary>
    /// Instruction FCVTNU - Floating-point convert to unsigned integer, rounding to nearest with ties to even (vector).
    /// </summary>
    FCVTNU_asisdmisc_r,
    /// <summary>
    /// Instruction FCVTNU - Floating-point convert to unsigned integer, rounding to nearest with ties to even (vector).
    /// </summary>
    FCVTNU_asisdmiscfp16_r,
    /// <summary>
    /// Instruction FCVTNU - Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar SIMD&FP).
    /// </summary>
    FCVTNU_sisd_32d,
    /// <summary>
    /// Instruction FCVTNU - Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar SIMD&FP).
    /// </summary>
    FCVTNU_sisd_32h,
    /// <summary>
    /// Instruction FCVTNU - Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar SIMD&FP).
    /// </summary>
    FCVTNU_sisd_64h,
    /// <summary>
    /// Instruction FCVTNU - Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar SIMD&FP).
    /// </summary>
    FCVTNU_sisd_64s,
    /// <summary>
    /// Instruction FCVTN - Floating-point convert to lower precision narrow (vector).
    /// </summary>
    FCVTN_asimdmisc_n,
    /// <summary>
    /// Instruction FCVTN - Half-precision to 8-bit floating-point convert and narrow (vector).
    /// </summary>
    FCVTN_asimdsame2_d,
    /// <summary>
    /// Instruction FCVTN - Single-precision to 8-bit floating-point convert and narrow (vector).
    /// </summary>
    FCVTN_asimdsame2_h,
    /// <summary>
    /// Instruction FCVTN - Half-precision convert, narrow and interleave to 8-bit floating-point.
    /// </summary>
    FCVTN_z8_mz2_h2b,
    /// <summary>
    /// Instruction FCVTN - Multi-vector floating-point convert from single-precision to interleaved 8-bit floating-point format.
    /// </summary>
    FCVTN_z8_mz4,
    /// <summary>
    /// Instruction FCVTN - Multi-vector floating-point convert from single-precision to interleaved half-precision.
    /// </summary>
    FCVTN_z_mz2,
    /// <summary>
    /// Instruction FCVTPS - Floating-point convert to signed integer, rounding toward plus infinity (scalar).
    /// </summary>
    FCVTPS_32d_float2int,
    /// <summary>
    /// Instruction FCVTPS - Floating-point convert to signed integer, rounding toward plus infinity (scalar).
    /// </summary>
    FCVTPS_32h_float2int,
    /// <summary>
    /// Instruction FCVTPS - Floating-point convert to signed integer, rounding toward plus infinity (scalar).
    /// </summary>
    FCVTPS_32s_float2int,
    /// <summary>
    /// Instruction FCVTPS - Floating-point convert to signed integer, rounding toward plus infinity (scalar).
    /// </summary>
    FCVTPS_64d_float2int,
    /// <summary>
    /// Instruction FCVTPS - Floating-point convert to signed integer, rounding toward plus infinity (scalar).
    /// </summary>
    FCVTPS_64h_float2int,
    /// <summary>
    /// Instruction FCVTPS - Floating-point convert to signed integer, rounding toward plus infinity (scalar).
    /// </summary>
    FCVTPS_64s_float2int,
    /// <summary>
    /// Instruction FCVTPS - Floating-point convert to signed integer, rounding toward plus infinity (vector).
    /// </summary>
    FCVTPS_asimdmisc_r,
    /// <summary>
    /// Instruction FCVTPS - Floating-point convert to signed integer, rounding toward plus infinity (vector).
    /// </summary>
    FCVTPS_asimdmiscfp16_r,
    /// <summary>
    /// Instruction FCVTPS - Floating-point convert to signed integer, rounding toward plus infinity (vector).
    /// </summary>
    FCVTPS_asisdmisc_r,
    /// <summary>
    /// Instruction FCVTPS - Floating-point convert to signed integer, rounding toward plus infinity (vector).
    /// </summary>
    FCVTPS_asisdmiscfp16_r,
    /// <summary>
    /// Instruction FCVTPS - Floating-point convert to signed integer, rounding toward plus infinity (scalar SIMD&FP).
    /// </summary>
    FCVTPS_sisd_32d,
    /// <summary>
    /// Instruction FCVTPS - Floating-point convert to signed integer, rounding toward plus infinity (scalar SIMD&FP).
    /// </summary>
    FCVTPS_sisd_32h,
    /// <summary>
    /// Instruction FCVTPS - Floating-point convert to signed integer, rounding toward plus infinity (scalar SIMD&FP).
    /// </summary>
    FCVTPS_sisd_64h,
    /// <summary>
    /// Instruction FCVTPS - Floating-point convert to signed integer, rounding toward plus infinity (scalar SIMD&FP).
    /// </summary>
    FCVTPS_sisd_64s,
    /// <summary>
    /// Instruction FCVTPU - Floating-point convert to unsigned integer, rounding toward plus infinity (scalar).
    /// </summary>
    FCVTPU_32d_float2int,
    /// <summary>
    /// Instruction FCVTPU - Floating-point convert to unsigned integer, rounding toward plus infinity (scalar).
    /// </summary>
    FCVTPU_32h_float2int,
    /// <summary>
    /// Instruction FCVTPU - Floating-point convert to unsigned integer, rounding toward plus infinity (scalar).
    /// </summary>
    FCVTPU_32s_float2int,
    /// <summary>
    /// Instruction FCVTPU - Floating-point convert to unsigned integer, rounding toward plus infinity (scalar).
    /// </summary>
    FCVTPU_64d_float2int,
    /// <summary>
    /// Instruction FCVTPU - Floating-point convert to unsigned integer, rounding toward plus infinity (scalar).
    /// </summary>
    FCVTPU_64h_float2int,
    /// <summary>
    /// Instruction FCVTPU - Floating-point convert to unsigned integer, rounding toward plus infinity (scalar).
    /// </summary>
    FCVTPU_64s_float2int,
    /// <summary>
    /// Instruction FCVTPU - Floating-point convert to unsigned integer, rounding toward plus infinity (vector).
    /// </summary>
    FCVTPU_asimdmisc_r,
    /// <summary>
    /// Instruction FCVTPU - Floating-point convert to unsigned integer, rounding toward plus infinity (vector).
    /// </summary>
    FCVTPU_asimdmiscfp16_r,
    /// <summary>
    /// Instruction FCVTPU - Floating-point convert to unsigned integer, rounding toward plus infinity (vector).
    /// </summary>
    FCVTPU_asisdmisc_r,
    /// <summary>
    /// Instruction FCVTPU - Floating-point convert to unsigned integer, rounding toward plus infinity (vector).
    /// </summary>
    FCVTPU_asisdmiscfp16_r,
    /// <summary>
    /// Instruction FCVTPU - Floating-point convert to unsigned integer, rounding toward plus infinity (scalar SIMD&FP).
    /// </summary>
    FCVTPU_sisd_32d,
    /// <summary>
    /// Instruction FCVTPU - Floating-point convert to unsigned integer, rounding toward plus infinity (scalar SIMD&FP).
    /// </summary>
    FCVTPU_sisd_32h,
    /// <summary>
    /// Instruction FCVTPU - Floating-point convert to unsigned integer, rounding toward plus infinity (scalar SIMD&FP).
    /// </summary>
    FCVTPU_sisd_64h,
    /// <summary>
    /// Instruction FCVTPU - Floating-point convert to unsigned integer, rounding toward plus infinity (scalar SIMD&FP).
    /// </summary>
    FCVTPU_sisd_64s,
    /// <summary>
    /// Instruction FCVTXNT - Floating-point down convert, rounding to odd (top, predicated).
    /// </summary>
    FCVTXNT_z_p_z_d2s,
    /// <summary>
    /// Instruction FCVTXNT - Floating-point down convert, rounding to odd (top, predicated).
    /// </summary>
    FCVTXNT_z_p_z_d2sz,
    /// <summary>
    /// Instruction FCVTXN - Floating-point convert to lower precision narrow, rounding to odd (vector).
    /// </summary>
    FCVTXN_asimdmisc_n,
    /// <summary>
    /// Instruction FCVTXN - Floating-point convert to lower precision narrow, rounding to odd (vector).
    /// </summary>
    FCVTXN_asisdmisc_n,
    /// <summary>
    /// Instruction FCVTX - Floating-point down convert, rounding to odd (predicated).
    /// </summary>
    FCVTX_z_p_z_d2s,
    /// <summary>
    /// Instruction FCVTX - Floating-point down convert, rounding to odd (predicated).
    /// </summary>
    FCVTX_z_p_z_d2sz,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed fixed-point, rounding toward zero (scalar).
    /// </summary>
    FCVTZS_32d_float2fix,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (scalar).
    /// </summary>
    FCVTZS_32d_float2int,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed fixed-point, rounding toward zero (scalar).
    /// </summary>
    FCVTZS_32h_float2fix,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (scalar).
    /// </summary>
    FCVTZS_32h_float2int,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed fixed-point, rounding toward zero (scalar).
    /// </summary>
    FCVTZS_32s_float2fix,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (scalar).
    /// </summary>
    FCVTZS_32s_float2int,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed fixed-point, rounding toward zero (scalar).
    /// </summary>
    FCVTZS_64d_float2fix,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (scalar).
    /// </summary>
    FCVTZS_64d_float2int,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed fixed-point, rounding toward zero (scalar).
    /// </summary>
    FCVTZS_64h_float2fix,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (scalar).
    /// </summary>
    FCVTZS_64h_float2int,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed fixed-point, rounding toward zero (scalar).
    /// </summary>
    FCVTZS_64s_float2fix,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (scalar).
    /// </summary>
    FCVTZS_64s_float2int,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (vector).
    /// </summary>
    FCVTZS_asimdmisc_r,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (vector).
    /// </summary>
    FCVTZS_asimdmiscfp16_r,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed fixed-point, rounding toward zero (vector).
    /// </summary>
    FCVTZS_asimdshf_c,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (vector).
    /// </summary>
    FCVTZS_asisdmisc_r,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (vector).
    /// </summary>
    FCVTZS_asisdmiscfp16_r,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed fixed-point, rounding toward zero (vector).
    /// </summary>
    FCVTZS_asisdshf_c,
    /// <summary>
    /// Instruction FCVTZS - Multi-vector floating-point convert to signed integer, rounding toward zero.
    /// </summary>
    FCVTZS_mz_z_2,
    /// <summary>
    /// Instruction FCVTZS - Multi-vector floating-point convert to signed integer, rounding toward zero.
    /// </summary>
    FCVTZS_mz_z_4,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (scalar SIMD&FP).
    /// </summary>
    FCVTZS_sisd_32d,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (scalar SIMD&FP).
    /// </summary>
    FCVTZS_sisd_32h,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (scalar SIMD&FP).
    /// </summary>
    FCVTZS_sisd_64h,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (scalar SIMD&FP).
    /// </summary>
    FCVTZS_sisd_64s,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZS_z_p_z_d2w,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZS_z_p_z_d2wz,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZS_z_p_z_d2x,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZS_z_p_z_d2xz,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZS_z_p_z_fp162h,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZS_z_p_z_fp162hz,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZS_z_p_z_fp162w,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZS_z_p_z_fp162wz,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZS_z_p_z_fp162x,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZS_z_p_z_fp162xz,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZS_z_p_z_s2w,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZS_z_p_z_s2wz,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZS_z_p_z_s2x,
    /// <summary>
    /// Instruction FCVTZS - Floating-point convert to signed integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZS_z_p_z_s2xz,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned fixed-point, rounding toward zero (scalar).
    /// </summary>
    FCVTZU_32d_float2fix,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (scalar).
    /// </summary>
    FCVTZU_32d_float2int,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned fixed-point, rounding toward zero (scalar).
    /// </summary>
    FCVTZU_32h_float2fix,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (scalar).
    /// </summary>
    FCVTZU_32h_float2int,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned fixed-point, rounding toward zero (scalar).
    /// </summary>
    FCVTZU_32s_float2fix,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (scalar).
    /// </summary>
    FCVTZU_32s_float2int,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned fixed-point, rounding toward zero (scalar).
    /// </summary>
    FCVTZU_64d_float2fix,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (scalar).
    /// </summary>
    FCVTZU_64d_float2int,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned fixed-point, rounding toward zero (scalar).
    /// </summary>
    FCVTZU_64h_float2fix,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (scalar).
    /// </summary>
    FCVTZU_64h_float2int,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned fixed-point, rounding toward zero (scalar).
    /// </summary>
    FCVTZU_64s_float2fix,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (scalar).
    /// </summary>
    FCVTZU_64s_float2int,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (vector).
    /// </summary>
    FCVTZU_asimdmisc_r,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (vector).
    /// </summary>
    FCVTZU_asimdmiscfp16_r,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned fixed-point, rounding toward zero (vector).
    /// </summary>
    FCVTZU_asimdshf_c,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (vector).
    /// </summary>
    FCVTZU_asisdmisc_r,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (vector).
    /// </summary>
    FCVTZU_asisdmiscfp16_r,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned fixed-point, rounding toward zero (vector).
    /// </summary>
    FCVTZU_asisdshf_c,
    /// <summary>
    /// Instruction FCVTZU - Multi-vector floating-point convert to unsigned integer, rounding toward zero.
    /// </summary>
    FCVTZU_mz_z_2,
    /// <summary>
    /// Instruction FCVTZU - Multi-vector floating-point convert to unsigned integer, rounding toward zero.
    /// </summary>
    FCVTZU_mz_z_4,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (scalar SIMD&FP).
    /// </summary>
    FCVTZU_sisd_32d,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (scalar SIMD&FP).
    /// </summary>
    FCVTZU_sisd_32h,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (scalar SIMD&FP).
    /// </summary>
    FCVTZU_sisd_64h,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (scalar SIMD&FP).
    /// </summary>
    FCVTZU_sisd_64s,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZU_z_p_z_d2w,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZU_z_p_z_d2wz,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZU_z_p_z_d2x,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZU_z_p_z_d2xz,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZU_z_p_z_fp162h,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZU_z_p_z_fp162hz,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZU_z_p_z_fp162w,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZU_z_p_z_fp162wz,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZU_z_p_z_fp162x,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZU_z_p_z_fp162xz,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZU_z_p_z_s2w,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZU_z_p_z_s2wz,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZU_z_p_z_s2x,
    /// <summary>
    /// Instruction FCVTZU - Floating-point convert to unsigned integer, rounding toward zero (predicated).
    /// </summary>
    FCVTZU_z_p_z_s2xz,
    /// <summary>
    /// Instruction FCVT - Floating-point convert precision (scalar).
    /// </summary>
    FCVT_dh_floatdp1,
    /// <summary>
    /// Instruction FCVT - Floating-point convert precision (scalar).
    /// </summary>
    FCVT_ds_floatdp1,
    /// <summary>
    /// Instruction FCVT - Floating-point convert precision (scalar).
    /// </summary>
    FCVT_hd_floatdp1,
    /// <summary>
    /// Instruction FCVT - Floating-point convert precision (scalar).
    /// </summary>
    FCVT_hs_floatdp1,
    /// <summary>
    /// Instruction FCVT - Multi-vector floating-point convert from half-precision to single-precision (in-order).
    /// </summary>
    FCVT_mz2_z,
    /// <summary>
    /// Instruction FCVT - Floating-point convert precision (scalar).
    /// </summary>
    FCVT_sd_floatdp1,
    /// <summary>
    /// Instruction FCVT - Floating-point convert precision (scalar).
    /// </summary>
    FCVT_sh_floatdp1,
    /// <summary>
    /// Instruction FCVT - Multi-vector floating-point convert from half-precision to packed 8-bit floating-point format.
    /// </summary>
    FCVT_z8_mz2,
    /// <summary>
    /// Instruction FCVT - Multi-vector floating-point convert from single-precision to packed 8-bit floating-point format.
    /// </summary>
    FCVT_z8_mz4,
    /// <summary>
    /// Instruction FCVT - Multi-vector floating-point convert from single-precision to packed half-precision.
    /// </summary>
    FCVT_z_mz2,
    /// <summary>
    /// Instruction FCVT - Floating-point convert precision (predicated).
    /// </summary>
    FCVT_z_p_z_d2h,
    /// <summary>
    /// Instruction FCVT - Floating-point convert precision (predicated).
    /// </summary>
    FCVT_z_p_z_d2hz,
    /// <summary>
    /// Instruction FCVT - Floating-point convert precision (predicated).
    /// </summary>
    FCVT_z_p_z_d2s,
    /// <summary>
    /// Instruction FCVT - Floating-point convert precision (predicated).
    /// </summary>
    FCVT_z_p_z_d2sz,
    /// <summary>
    /// Instruction FCVT - Floating-point convert precision (predicated).
    /// </summary>
    FCVT_z_p_z_h2d,
    /// <summary>
    /// Instruction FCVT - Floating-point convert precision (predicated).
    /// </summary>
    FCVT_z_p_z_h2dz,
    /// <summary>
    /// Instruction FCVT - Floating-point convert precision (predicated).
    /// </summary>
    FCVT_z_p_z_h2s,
    /// <summary>
    /// Instruction FCVT - Floating-point convert precision (predicated).
    /// </summary>
    FCVT_z_p_z_h2sz,
    /// <summary>
    /// Instruction FCVT - Floating-point convert precision (predicated).
    /// </summary>
    FCVT_z_p_z_s2d,
    /// <summary>
    /// Instruction FCVT - Floating-point convert precision (predicated).
    /// </summary>
    FCVT_z_p_z_s2dz,
    /// <summary>
    /// Instruction FCVT - Floating-point convert precision (predicated).
    /// </summary>
    FCVT_z_p_z_s2h,
    /// <summary>
    /// Instruction FCVT - Floating-point convert precision (predicated).
    /// </summary>
    FCVT_z_p_z_s2hz,
    /// <summary>
    /// Instruction FDIVR - Floating-point reversed divide by vector (predicated).
    /// </summary>
    FDIVR_z_p_zz,
    /// <summary>
    /// Instruction FDIV - Floating-point divide (vector).
    /// </summary>
    FDIV_asimdsame_only,
    /// <summary>
    /// Instruction FDIV - Floating-point divide (vector).
    /// </summary>
    FDIV_asimdsamefp16_only,
    /// <summary>
    /// Instruction FDIV - Floating-point divide (scalar).
    /// </summary>
    FDIV_d_floatdp2,
    /// <summary>
    /// Instruction FDIV - Floating-point divide (scalar).
    /// </summary>
    FDIV_h_floatdp2,
    /// <summary>
    /// Instruction FDIV - Floating-point divide (scalar).
    /// </summary>
    FDIV_s_floatdp2,
    /// <summary>
    /// Instruction FDIV - Floating-point divide by vector (predicated).
    /// </summary>
    FDIV_z_p_zz,
    /// <summary>
    /// Instruction FDOT - 8-bit floating-point dot product to single-precision (vector, by element).
    /// </summary>
    FDOT_asimdelem_d,
    /// <summary>
    /// Instruction FDOT - 8-bit floating-point dot product to half-precision (vector, by element).
    /// </summary>
    FDOT_asimdelem_g,
    /// <summary>
    /// Instruction FDOT - 8-bit floating-point dot product to half-precision (vector).
    /// </summary>
    FDOT_asimdsame2_d,
    /// <summary>
    /// Instruction FDOT - 8-bit floating-point dot product to single-precision (vector).
    /// </summary>
    FDOT_asimdsame2_dd,
    /// <summary>
    /// Instruction FDOT - 8-bit floating-point dot product to single-precision.
    /// </summary>
    FDOT_z32_zz8z8,
    /// <summary>
    /// Instruction FDOT - 8-bit floating-point indexed dot product to single-precision.
    /// </summary>
    FDOT_z32_zz8z8i,
    /// <summary>
    /// Instruction FDOT - 8-bit floating-point dot product to half-precision.
    /// </summary>
    FDOT_z_zz8z8,
    /// <summary>
    /// Instruction FDOT - 8-bit floating-point indexed dot product to half-precision.
    /// </summary>
    FDOT_z_zz8z8i,
    /// <summary>
    /// Instruction FDOT - Half-precision floating-point dot product.
    /// </summary>
    FDOT_z_zzz,
    /// <summary>
    /// Instruction FDOT - Half-precision floating-point indexed dot product.
    /// </summary>
    FDOT_z_zzzi,
    /// <summary>
    /// Instruction FDOT - Multi-vector 8-bit floating-point dot-product by indexed element to single-precision.
    /// </summary>
    FDOT_za32_z8z8i_2xi,
    /// <summary>
    /// Instruction FDOT - Multi-vector 8-bit floating-point dot-product by indexed element to single-precision.
    /// </summary>
    FDOT_za32_z8z8i_4xi,
    /// <summary>
    /// Instruction FDOT - Multi-vector 8-bit floating-point dot-product by vector to single-precision.
    /// </summary>
    FDOT_za32_z8z8v_2x1,
    /// <summary>
    /// Instruction FDOT - Multi-vector 8-bit floating-point dot-product by vector to single-precision.
    /// </summary>
    FDOT_za32_z8z8v_4x1,
    /// <summary>
    /// Instruction FDOT - Multi-vector 8-bit floating-point dot-product to single-precision.
    /// </summary>
    FDOT_za32_z8z8w_2x2,
    /// <summary>
    /// Instruction FDOT - Multi-vector 8-bit floating-point dot-product to single-precision.
    /// </summary>
    FDOT_za32_z8z8w_4x4,
    /// <summary>
    /// Instruction FDOT - Multi-vector 8-bit floating-point dot-product by indexed element to half-precision.
    /// </summary>
    FDOT_za_z8z8i_2xi,
    /// <summary>
    /// Instruction FDOT - Multi-vector 8-bit floating-point dot-product by indexed element to half-precision.
    /// </summary>
    FDOT_za_z8z8i_4xi,
    /// <summary>
    /// Instruction FDOT - Multi-vector 8-bit floating-point dot-product by vector to half-precision.
    /// </summary>
    FDOT_za_z8z8v_2x1,
    /// <summary>
    /// Instruction FDOT - Multi-vector 8-bit floating-point dot-product by vector to half-precision.
    /// </summary>
    FDOT_za_z8z8v_4x1,
    /// <summary>
    /// Instruction FDOT - Multi-vector 8-bit floating-point dot-product to half-precision.
    /// </summary>
    FDOT_za_z8z8w_2x2,
    /// <summary>
    /// Instruction FDOT - Multi-vector 8-bit floating-point dot-product to half-precision.
    /// </summary>
    FDOT_za_z8z8w_4x4,
    /// <summary>
    /// Instruction FDOT - Multi-vector half-precision floating-point dot-product by indexed element.
    /// </summary>
    FDOT_za_zzi_2xi,
    /// <summary>
    /// Instruction FDOT - Multi-vector half-precision floating-point dot-product by indexed element.
    /// </summary>
    FDOT_za_zzi_4xi,
    /// <summary>
    /// Instruction FDOT - Multi-vector half-precision floating-point dot-product by vector.
    /// </summary>
    FDOT_za_zzv_2x1,
    /// <summary>
    /// Instruction FDOT - Multi-vector half-precision floating-point dot-product by vector.
    /// </summary>
    FDOT_za_zzv_4x1,
    /// <summary>
    /// Instruction FDOT - Multi-vector half-precision floating-point dot-product.
    /// </summary>
    FDOT_za_zzw_2x2,
    /// <summary>
    /// Instruction FDOT - Multi-vector half-precision floating-point dot-product.
    /// </summary>
    FDOT_za_zzw_4x4,
    /// <summary>
    /// Instruction FDUP - Broadcast 8-bit floating-point immediate to vector elements (unpredicated).
    /// </summary>
    FDUP_z_i,
    /// <summary>
    /// Instruction FEXPA - Floating-point exponential accelerator.
    /// </summary>
    FEXPA_z_z,
    /// <summary>
    /// Instruction FIRSTP - Scalar index of first true predicate element (predicated).
    /// </summary>
    FIRSTP_r_p_p,
    /// <summary>
    /// Instruction FJCVTZS - Floating-point Javascript convert to signed fixed-point, rounding toward zero.
    /// </summary>
    FJCVTZS_32d_float2int,
    /// <summary>
    /// Instruction FLOGB - Floating-point base 2 logarithm as integer.
    /// </summary>
    FLOGB_z_p_z_m,
    /// <summary>
    /// Instruction FLOGB - Floating-point base 2 logarithm as integer.
    /// </summary>
    FLOGB_z_p_z_z,
    /// <summary>
    /// Instruction FMADD - Floating-point fused multiply-add (scalar).
    /// </summary>
    FMADD_d_floatdp3,
    /// <summary>
    /// Instruction FMADD - Floating-point fused multiply-add (scalar).
    /// </summary>
    FMADD_h_floatdp3,
    /// <summary>
    /// Instruction FMADD - Floating-point fused multiply-add (scalar).
    /// </summary>
    FMADD_s_floatdp3,
    /// <summary>
    /// Instruction FMAD - Floating-point fused multiply-add vectors (predicated), writing multiplicand [Zdn = Za + Zdn * Zm].
    /// </summary>
    FMAD_z_p_zzz,
    /// <summary>
    /// Instruction FMAXNMP - Floating-point maximum number pairwise (vector).
    /// </summary>
    FMAXNMP_asimdsame_only,
    /// <summary>
    /// Instruction FMAXNMP - Floating-point maximum number pairwise (vector).
    /// </summary>
    FMAXNMP_asimdsamefp16_only,
    /// <summary>
    /// Instruction FMAXNMP - Floating-point maximum number of pair of elements (scalar).
    /// </summary>
    FMAXNMP_asisdpair_only_h,
    /// <summary>
    /// Instruction FMAXNMP - Floating-point maximum number of pair of elements (scalar).
    /// </summary>
    FMAXNMP_asisdpair_only_sd,
    /// <summary>
    /// Instruction FMAXNMP - Floating-point maximum number pairwise.
    /// </summary>
    FMAXNMP_z_p_zz,
    /// <summary>
    /// Instruction FMAXNMQV - Floating-point maximum number recursive reduction of quadword vector segments.
    /// </summary>
    FMAXNMQV_z_p_z,
    /// <summary>
    /// Instruction FMAXNMV - Floating-point maximum number across vector.
    /// </summary>
    FMAXNMV_asimdall_only_h,
    /// <summary>
    /// Instruction FMAXNMV - Floating-point maximum number across vector.
    /// </summary>
    FMAXNMV_asimdall_only_sd,
    /// <summary>
    /// Instruction FMAXNMV - Floating-point maximum number recursive reduction to scalar.
    /// </summary>
    FMAXNMV_v_p_z,
    /// <summary>
    /// Instruction FMAXNM - Floating-point maximum number (vector).
    /// </summary>
    FMAXNM_asimdsame_only,
    /// <summary>
    /// Instruction FMAXNM - Floating-point maximum number (vector).
    /// </summary>
    FMAXNM_asimdsamefp16_only,
    /// <summary>
    /// Instruction FMAXNM - Floating-point maximum number (scalar).
    /// </summary>
    FMAXNM_d_floatdp2,
    /// <summary>
    /// Instruction FMAXNM - Floating-point maximum number (scalar).
    /// </summary>
    FMAXNM_h_floatdp2,
    /// <summary>
    /// Instruction FMAXNM - Multi-vector floating-point maximum number by vector.
    /// </summary>
    FMAXNM_mz_zzv_2x1,
    /// <summary>
    /// Instruction FMAXNM - Multi-vector floating-point maximum number by vector.
    /// </summary>
    FMAXNM_mz_zzv_4x1,
    /// <summary>
    /// Instruction FMAXNM - Multi-vector floating-point maximum number.
    /// </summary>
    FMAXNM_mz_zzw_2x2,
    /// <summary>
    /// Instruction FMAXNM - Multi-vector floating-point maximum number.
    /// </summary>
    FMAXNM_mz_zzw_4x4,
    /// <summary>
    /// Instruction FMAXNM - Floating-point maximum number (scalar).
    /// </summary>
    FMAXNM_s_floatdp2,
    /// <summary>
    /// Instruction FMAXNM - Floating-point maximum number with immediate (predicated).
    /// </summary>
    FMAXNM_z_p_zs,
    /// <summary>
    /// Instruction FMAXNM - Floating-point maximum number (predicated).
    /// </summary>
    FMAXNM_z_p_zz,
    /// <summary>
    /// Instruction FMAXP - Floating-point maximum pairwise (vector).
    /// </summary>
    FMAXP_asimdsame_only,
    /// <summary>
    /// Instruction FMAXP - Floating-point maximum pairwise (vector).
    /// </summary>
    FMAXP_asimdsamefp16_only,
    /// <summary>
    /// Instruction FMAXP - Floating-point maximum of pair of elements (scalar).
    /// </summary>
    FMAXP_asisdpair_only_h,
    /// <summary>
    /// Instruction FMAXP - Floating-point maximum of pair of elements (scalar).
    /// </summary>
    FMAXP_asisdpair_only_sd,
    /// <summary>
    /// Instruction FMAXP - Floating-point maximum pairwise.
    /// </summary>
    FMAXP_z_p_zz,
    /// <summary>
    /// Instruction FMAXQV - Floating-point maximum reduction of quadword vector segments.
    /// </summary>
    FMAXQV_z_p_z,
    /// <summary>
    /// Instruction FMAXV - Floating-point maximum across vector.
    /// </summary>
    FMAXV_asimdall_only_h,
    /// <summary>
    /// Instruction FMAXV - Floating-point maximum across vector.
    /// </summary>
    FMAXV_asimdall_only_sd,
    /// <summary>
    /// Instruction FMAXV - Floating-point maximum recursive reduction to scalar.
    /// </summary>
    FMAXV_v_p_z,
    /// <summary>
    /// Instruction FMAX - Floating-point maximum (vector).
    /// </summary>
    FMAX_asimdsame_only,
    /// <summary>
    /// Instruction FMAX - Floating-point maximum (vector).
    /// </summary>
    FMAX_asimdsamefp16_only,
    /// <summary>
    /// Instruction FMAX - Floating-point maximum (scalar).
    /// </summary>
    FMAX_d_floatdp2,
    /// <summary>
    /// Instruction FMAX - Floating-point maximum (scalar).
    /// </summary>
    FMAX_h_floatdp2,
    /// <summary>
    /// Instruction FMAX - Multi-vector floating-point maximum by vector.
    /// </summary>
    FMAX_mz_zzv_2x1,
    /// <summary>
    /// Instruction FMAX - Multi-vector floating-point maximum by vector.
    /// </summary>
    FMAX_mz_zzv_4x1,
    /// <summary>
    /// Instruction FMAX - Multi-vector floating-point maximum.
    /// </summary>
    FMAX_mz_zzw_2x2,
    /// <summary>
    /// Instruction FMAX - Multi-vector floating-point maximum.
    /// </summary>
    FMAX_mz_zzw_4x4,
    /// <summary>
    /// Instruction FMAX - Floating-point maximum (scalar).
    /// </summary>
    FMAX_s_floatdp2,
    /// <summary>
    /// Instruction FMAX - Floating-point maximum with immediate (predicated).
    /// </summary>
    FMAX_z_p_zs,
    /// <summary>
    /// Instruction FMAX - Floating-point maximum (predicated).
    /// </summary>
    FMAX_z_p_zz,
    /// <summary>
    /// Instruction FMINNMP - Floating-point minimum number pairwise (vector).
    /// </summary>
    FMINNMP_asimdsame_only,
    /// <summary>
    /// Instruction FMINNMP - Floating-point minimum number pairwise (vector).
    /// </summary>
    FMINNMP_asimdsamefp16_only,
    /// <summary>
    /// Instruction FMINNMP - Floating-point minimum number of pair of elements (scalar).
    /// </summary>
    FMINNMP_asisdpair_only_h,
    /// <summary>
    /// Instruction FMINNMP - Floating-point minimum number of pair of elements (scalar).
    /// </summary>
    FMINNMP_asisdpair_only_sd,
    /// <summary>
    /// Instruction FMINNMP - Floating-point minimum number pairwise.
    /// </summary>
    FMINNMP_z_p_zz,
    /// <summary>
    /// Instruction FMINNMQV - Floating-point minimum number recursive reduction of quadword vector segments.
    /// </summary>
    FMINNMQV_z_p_z,
    /// <summary>
    /// Instruction FMINNMV - Floating-point minimum number across vector.
    /// </summary>
    FMINNMV_asimdall_only_h,
    /// <summary>
    /// Instruction FMINNMV - Floating-point minimum number across vector.
    /// </summary>
    FMINNMV_asimdall_only_sd,
    /// <summary>
    /// Instruction FMINNMV - Floating-point minimum number recursive reduction to scalar.
    /// </summary>
    FMINNMV_v_p_z,
    /// <summary>
    /// Instruction FMINNM - Floating-point minimum number (vector).
    /// </summary>
    FMINNM_asimdsame_only,
    /// <summary>
    /// Instruction FMINNM - Floating-point minimum number (vector).
    /// </summary>
    FMINNM_asimdsamefp16_only,
    /// <summary>
    /// Instruction FMINNM - Floating-point minimum number (scalar).
    /// </summary>
    FMINNM_d_floatdp2,
    /// <summary>
    /// Instruction FMINNM - Floating-point minimum number (scalar).
    /// </summary>
    FMINNM_h_floatdp2,
    /// <summary>
    /// Instruction FMINNM - Multi-vector floating-point minimum number by vector.
    /// </summary>
    FMINNM_mz_zzv_2x1,
    /// <summary>
    /// Instruction FMINNM - Multi-vector floating-point minimum number by vector.
    /// </summary>
    FMINNM_mz_zzv_4x1,
    /// <summary>
    /// Instruction FMINNM - Multi-vector floating-point minimum number.
    /// </summary>
    FMINNM_mz_zzw_2x2,
    /// <summary>
    /// Instruction FMINNM - Multi-vector floating-point minimum number.
    /// </summary>
    FMINNM_mz_zzw_4x4,
    /// <summary>
    /// Instruction FMINNM - Floating-point minimum number (scalar).
    /// </summary>
    FMINNM_s_floatdp2,
    /// <summary>
    /// Instruction FMINNM - Floating-point minimum number with immediate (predicated).
    /// </summary>
    FMINNM_z_p_zs,
    /// <summary>
    /// Instruction FMINNM - Floating-point minimum number (predicated).
    /// </summary>
    FMINNM_z_p_zz,
    /// <summary>
    /// Instruction FMINP - Floating-point minimum pairwise (vector).
    /// </summary>
    FMINP_asimdsame_only,
    /// <summary>
    /// Instruction FMINP - Floating-point minimum pairwise (vector).
    /// </summary>
    FMINP_asimdsamefp16_only,
    /// <summary>
    /// Instruction FMINP - Floating-point minimum of pair of elements (scalar).
    /// </summary>
    FMINP_asisdpair_only_h,
    /// <summary>
    /// Instruction FMINP - Floating-point minimum of pair of elements (scalar).
    /// </summary>
    FMINP_asisdpair_only_sd,
    /// <summary>
    /// Instruction FMINP - Floating-point minimum pairwise.
    /// </summary>
    FMINP_z_p_zz,
    /// <summary>
    /// Instruction FMINQV - Floating-point minimum recursive reduction of quadword vector segments.
    /// </summary>
    FMINQV_z_p_z,
    /// <summary>
    /// Instruction FMINV - Floating-point minimum across vector.
    /// </summary>
    FMINV_asimdall_only_h,
    /// <summary>
    /// Instruction FMINV - Floating-point minimum across vector.
    /// </summary>
    FMINV_asimdall_only_sd,
    /// <summary>
    /// Instruction FMINV - Floating-point minimum recursive reduction to scalar.
    /// </summary>
    FMINV_v_p_z,
    /// <summary>
    /// Instruction FMIN - Floating-point minimum (vector).
    /// </summary>
    FMIN_asimdsame_only,
    /// <summary>
    /// Instruction FMIN - Floating-point minimum (vector).
    /// </summary>
    FMIN_asimdsamefp16_only,
    /// <summary>
    /// Instruction FMIN - Floating-point minimum (scalar).
    /// </summary>
    FMIN_d_floatdp2,
    /// <summary>
    /// Instruction FMIN - Floating-point minimum (scalar).
    /// </summary>
    FMIN_h_floatdp2,
    /// <summary>
    /// Instruction FMIN - Multi-vector floating-point minimum by vector.
    /// </summary>
    FMIN_mz_zzv_2x1,
    /// <summary>
    /// Instruction FMIN - Multi-vector floating-point minimum by vector.
    /// </summary>
    FMIN_mz_zzv_4x1,
    /// <summary>
    /// Instruction FMIN - Multi-vector floating-point minimum.
    /// </summary>
    FMIN_mz_zzw_2x2,
    /// <summary>
    /// Instruction FMIN - Multi-vector floating-point minimum.
    /// </summary>
    FMIN_mz_zzw_4x4,
    /// <summary>
    /// Instruction FMIN - Floating-point minimum (scalar).
    /// </summary>
    FMIN_s_floatdp2,
    /// <summary>
    /// Instruction FMIN - Floating-point minimum with immediate (predicated).
    /// </summary>
    FMIN_z_p_zs,
    /// <summary>
    /// Instruction FMIN - Floating-point minimum (predicated).
    /// </summary>
    FMIN_z_p_zz,
    /// <summary>
    /// Instruction FMLAL2 - Floating-point fused multiply-add long to accumulator (by element).
    /// </summary>
    FMLAL2_asimdelem_lh,
    /// <summary>
    /// Instruction FMLAL2 - Floating-point fused multiply-add long to accumulator (vector).
    /// </summary>
    FMLAL2_asimdsame_f,
    /// <summary>
    /// Instruction FMLALB - 8-bit floating-point multiply-add long to half-precision (vector, by element).
    /// </summary>
    FMLALB_asimdelem_h,
    /// <summary>
    /// Instruction FMLALB - 8-bit floating-point multiply-add long to half-precision (vector).
    /// </summary>
    FMLALB_asimdsame2_j,
    /// <summary>
    /// Instruction FMLALB - 8-bit floating-point multiply-add long to half-precision (bottom).
    /// </summary>
    FMLALB_z_z8z8z8,
    /// <summary>
    /// Instruction FMLALB - 8-bit floating-point multiply-add long to half-precision (bottom, indexed).
    /// </summary>
    FMLALB_z_z8z8z8i,
    /// <summary>
    /// Instruction FMLALB - Half-precision floating-point multiply-add long to single-precision (bottom).
    /// </summary>
    FMLALB_z_zzz,
    /// <summary>
    /// Instruction FMLALB - Half-precision floating-point multiply-add long to single-precision (bottom, indexed).
    /// </summary>
    FMLALB_z_zzzi_s,
    /// <summary>
    /// Instruction FMLALLBB - 8-bit floating-point multiply-add long-long to single-precision (vector, by element).
    /// </summary>
    FMLALLBB_asimdelem_j,
    /// <summary>
    /// Instruction FMLALLBB - 8-bit floating-point multiply-add long-long to single-precision (vector).
    /// </summary>
    FMLALLBB_asimdsame2_g,
    /// <summary>
    /// Instruction FMLALLBB - 8-bit floating-point multiply-add long long to single-precision (bottom bottom).
    /// </summary>
    FMLALLBB_z32_z8z8z8,
    /// <summary>
    /// Instruction FMLALLBB - 8-bit floating-point multiply-add long long to single-precision (bottom bottom, indexed).
    /// </summary>
    FMLALLBB_z32_z8z8z8i,
    /// <summary>
    /// Instruction FMLALLBT - 8-bit floating-point multiply-add long-long to single-precision (vector, by element).
    /// </summary>
    FMLALLBT_asimdelem_j,
    /// <summary>
    /// Instruction FMLALLBT - 8-bit floating-point multiply-add long-long to single-precision (vector).
    /// </summary>
    FMLALLBT_asimdsame2_g,
    /// <summary>
    /// Instruction FMLALLBT - 8-bit floating-point multiply-add long long to single-precision (bottom top).
    /// </summary>
    FMLALLBT_z32_z8z8z8,
    /// <summary>
    /// Instruction FMLALLBT - 8-bit floating-point multiply-add long long to single-precision (bottom top, indexed).
    /// </summary>
    FMLALLBT_z32_z8z8z8i,
    /// <summary>
    /// Instruction FMLALLTB - 8-bit floating-point multiply-add long-long to single-precision (vector, by element).
    /// </summary>
    FMLALLTB_asimdelem_j,
    /// <summary>
    /// Instruction FMLALLTB - 8-bit floating-point multiply-add long-long to single-precision (vector).
    /// </summary>
    FMLALLTB_asimdsame2_g,
    /// <summary>
    /// Instruction FMLALLTB - 8-bit floating-point multiply-add long long to single-precision (top bottom).
    /// </summary>
    FMLALLTB_z32_z8z8z8,
    /// <summary>
    /// Instruction FMLALLTB - 8-bit floating-point multiply-add long long to single-precision (top bottom, indexed).
    /// </summary>
    FMLALLTB_z32_z8z8z8i,
    /// <summary>
    /// Instruction FMLALLTT - 8-bit floating-point multiply-add long-long to single-precision (vector, by element).
    /// </summary>
    FMLALLTT_asimdelem_j,
    /// <summary>
    /// Instruction FMLALLTT - 8-bit floating-point multiply-add long-long to single-precision (vector).
    /// </summary>
    FMLALLTT_asimdsame2_g,
    /// <summary>
    /// Instruction FMLALLTT - 8-bit floating-point multiply-add long long to single-precision (top top).
    /// </summary>
    FMLALLTT_z32_z8z8z8,
    /// <summary>
    /// Instruction FMLALLTT - 8-bit floating-point multiply-add long long to single-precision (top top, indexed).
    /// </summary>
    FMLALLTT_z32_z8z8z8i,
    /// <summary>
    /// Instruction FMLALL - Multi-vector 8-bit floating-point multiply-add long-long by indexed element to single-precision.
    /// </summary>
    FMLALL_za32_z8z8i_1,
    /// <summary>
    /// Instruction FMLALL - Multi-vector 8-bit floating-point multiply-add long-long by indexed element to single-precision.
    /// </summary>
    FMLALL_za32_z8z8i_2xi,
    /// <summary>
    /// Instruction FMLALL - Multi-vector 8-bit floating-point multiply-add long-long by indexed element to single-precision.
    /// </summary>
    FMLALL_za32_z8z8i_4xi,
    /// <summary>
    /// Instruction FMLALL - Multi-vector 8-bit floating-point multiply-add long-long by vector to single-precision.
    /// </summary>
    FMLALL_za32_z8z8v_1,
    /// <summary>
    /// Instruction FMLALL - Multi-vector 8-bit floating-point multiply-add long-long by vector to single-precision.
    /// </summary>
    FMLALL_za32_z8z8v_2x1,
    /// <summary>
    /// Instruction FMLALL - Multi-vector 8-bit floating-point multiply-add long-long by vector to single-precision.
    /// </summary>
    FMLALL_za32_z8z8v_4x1,
    /// <summary>
    /// Instruction FMLALL - Multi-vector 8-bit floating-point multiply-add long-long to single-precision.
    /// </summary>
    FMLALL_za32_z8z8w_2x2,
    /// <summary>
    /// Instruction FMLALL - Multi-vector 8-bit floating-point multiply-add long-long to single-precision.
    /// </summary>
    FMLALL_za32_z8z8w_4x4,
    /// <summary>
    /// Instruction FMLALT - 8-bit floating-point multiply-add long to half-precision (vector, by element).
    /// </summary>
    FMLALT_asimdelem_h,
    /// <summary>
    /// Instruction FMLALT - 8-bit floating-point multiply-add long to half-precision (vector).
    /// </summary>
    FMLALT_asimdsame2_j,
    /// <summary>
    /// Instruction FMLALT - 8-bit floating-point multiply-add long to half-precision (top).
    /// </summary>
    FMLALT_z_z8z8z8,
    /// <summary>
    /// Instruction FMLALT - 8-bit floating-point multiply-add long to half-precision (top, indexed).
    /// </summary>
    FMLALT_z_z8z8z8i,
    /// <summary>
    /// Instruction FMLALT - Half-precision floating-point multiply-add long to single-precision (top).
    /// </summary>
    FMLALT_z_zzz,
    /// <summary>
    /// Instruction FMLALT - Half-precision floating-point multiply-add long to single-precision (top, indexed).
    /// </summary>
    FMLALT_z_zzzi_s,
    /// <summary>
    /// Instruction FMLAL - Floating-point fused multiply-add long to accumulator (by element).
    /// </summary>
    FMLAL_asimdelem_lh,
    /// <summary>
    /// Instruction FMLAL - Floating-point fused multiply-add long to accumulator (vector).
    /// </summary>
    FMLAL_asimdsame_f,
    /// <summary>
    /// Instruction FMLAL - Multi-vector 8-bit floating-point multiply-add long by indexed element to half-precision.
    /// </summary>
    FMLAL_za_z8z8i_1,
    /// <summary>
    /// Instruction FMLAL - Multi-vector 8-bit floating-point multiply-add long by indexed element to half-precision.
    /// </summary>
    FMLAL_za_z8z8i_2xi,
    /// <summary>
    /// Instruction FMLAL - Multi-vector 8-bit floating-point multiply-add long by indexed element to half-precision.
    /// </summary>
    FMLAL_za_z8z8i_4xi,
    /// <summary>
    /// Instruction FMLAL - Multi-vector 8-bit floating-point multiply-add long by vector to half-precision.
    /// </summary>
    FMLAL_za_z8z8v_1,
    /// <summary>
    /// Instruction FMLAL - Multi-vector 8-bit floating-point multiply-add long by vector to half-precision.
    /// </summary>
    FMLAL_za_z8z8v_2x1,
    /// <summary>
    /// Instruction FMLAL - Multi-vector 8-bit floating-point multiply-add long by vector to half-precision.
    /// </summary>
    FMLAL_za_z8z8v_4x1,
    /// <summary>
    /// Instruction FMLAL - Multi-vector 8-bit floating-point multiply-add long to half-precision.
    /// </summary>
    FMLAL_za_z8z8w_2x2,
    /// <summary>
    /// Instruction FMLAL - Multi-vector 8-bit floating-point multiply-add long to half-precision.
    /// </summary>
    FMLAL_za_z8z8w_4x4,
    /// <summary>
    /// Instruction FMLAL - Multi-vector floating-point multiply-add long by indexed element.
    /// </summary>
    FMLAL_za_zzi_1,
    /// <summary>
    /// Instruction FMLAL - Multi-vector floating-point multiply-add long by indexed element.
    /// </summary>
    FMLAL_za_zzi_2xi,
    /// <summary>
    /// Instruction FMLAL - Multi-vector floating-point multiply-add long by indexed element.
    /// </summary>
    FMLAL_za_zzi_4xi,
    /// <summary>
    /// Instruction FMLAL - Multi-vector floating-point multiply-add long by vector.
    /// </summary>
    FMLAL_za_zzv_1,
    /// <summary>
    /// Instruction FMLAL - Multi-vector floating-point multiply-add long by vector.
    /// </summary>
    FMLAL_za_zzv_2x1,
    /// <summary>
    /// Instruction FMLAL - Multi-vector floating-point multiply-add long by vector.
    /// </summary>
    FMLAL_za_zzv_4x1,
    /// <summary>
    /// Instruction FMLAL - Multi-vector floating-point multiply-add long.
    /// </summary>
    FMLAL_za_zzw_2x2,
    /// <summary>
    /// Instruction FMLAL - Multi-vector floating-point multiply-add long.
    /// </summary>
    FMLAL_za_zzw_4x4,
    /// <summary>
    /// Instruction FMLA - Floating-point fused multiply-add to accumulator (by element).
    /// </summary>
    FMLA_asimdelem_r_sd,
    /// <summary>
    /// Instruction FMLA - Floating-point fused multiply-add to accumulator (by element).
    /// </summary>
    FMLA_asimdelem_rh_h,
    /// <summary>
    /// Instruction FMLA - Floating-point fused multiply-add to accumulator (vector).
    /// </summary>
    FMLA_asimdsame_only,
    /// <summary>
    /// Instruction FMLA - Floating-point fused multiply-add to accumulator (vector).
    /// </summary>
    FMLA_asimdsamefp16_only,
    /// <summary>
    /// Instruction FMLA - Floating-point fused multiply-add to accumulator (by element).
    /// </summary>
    FMLA_asisdelem_r_sd,
    /// <summary>
    /// Instruction FMLA - Floating-point fused multiply-add to accumulator (by element).
    /// </summary>
    FMLA_asisdelem_rh_h,
    /// <summary>
    /// Instruction FMLA - Floating-point fused multiply-add vectors (predicated), writing addend [Zda = Zda + Zn * Zm].
    /// </summary>
    FMLA_z_p_zzz,
    /// <summary>
    /// Instruction FMLA - Floating-point fused multiply-add by indexed elements (Zda = Zda + Zn * Zm[indexed]).
    /// </summary>
    FMLA_z_zzzi_d,
    /// <summary>
    /// Instruction FMLA - Floating-point fused multiply-add by indexed elements (Zda = Zda + Zn * Zm[indexed]).
    /// </summary>
    FMLA_z_zzzi_h,
    /// <summary>
    /// Instruction FMLA - Floating-point fused multiply-add by indexed elements (Zda = Zda + Zn * Zm[indexed]).
    /// </summary>
    FMLA_z_zzzi_s,
    /// <summary>
    /// Instruction FMLA - Multi-vector floating-point fused multiply-add by indexed element.
    /// </summary>
    FMLA_za_zzi_d2xi,
    /// <summary>
    /// Instruction FMLA - Multi-vector floating-point fused multiply-add by indexed element.
    /// </summary>
    FMLA_za_zzi_d4xi,
    /// <summary>
    /// Instruction FMLA - Multi-vector floating-point fused multiply-add by indexed element.
    /// </summary>
    FMLA_za_zzi_h2xi,
    /// <summary>
    /// Instruction FMLA - Multi-vector floating-point fused multiply-add by indexed element.
    /// </summary>
    FMLA_za_zzi_h4xi,
    /// <summary>
    /// Instruction FMLA - Multi-vector floating-point fused multiply-add by indexed element.
    /// </summary>
    FMLA_za_zzi_s2xi,
    /// <summary>
    /// Instruction FMLA - Multi-vector floating-point fused multiply-add by indexed element.
    /// </summary>
    FMLA_za_zzi_s4xi,
    /// <summary>
    /// Instruction FMLA - Multi-vector floating-point fused multiply-add by vector.
    /// </summary>
    FMLA_za_zzv_2x1,
    /// <summary>
    /// Instruction FMLA - Multi-vector floating-point fused multiply-add by vector.
    /// </summary>
    FMLA_za_zzv_2x1_16,
    /// <summary>
    /// Instruction FMLA - Multi-vector floating-point fused multiply-add by vector.
    /// </summary>
    FMLA_za_zzv_4x1,
    /// <summary>
    /// Instruction FMLA - Multi-vector floating-point fused multiply-add by vector.
    /// </summary>
    FMLA_za_zzv_4x1_16,
    /// <summary>
    /// Instruction FMLA - Multi-vector floating-point fused multiply-add.
    /// </summary>
    FMLA_za_zzw_2x2,
    /// <summary>
    /// Instruction FMLA - Multi-vector floating-point fused multiply-add.
    /// </summary>
    FMLA_za_zzw_2x2_16,
    /// <summary>
    /// Instruction FMLA - Multi-vector floating-point fused multiply-add.
    /// </summary>
    FMLA_za_zzw_4x4,
    /// <summary>
    /// Instruction FMLA - Multi-vector floating-point fused multiply-add.
    /// </summary>
    FMLA_za_zzw_4x4_16,
    /// <summary>
    /// Instruction FMLSL2 - Floating-point fused multiply-subtract long from accumulator (by element).
    /// </summary>
    FMLSL2_asimdelem_lh,
    /// <summary>
    /// Instruction FMLSL2 - Floating-point fused multiply-subtract long from accumulator (vector).
    /// </summary>
    FMLSL2_asimdsame_f,
    /// <summary>
    /// Instruction FMLSLB - Half-precision floating-point multiply-subtract long from single-precision (bottom).
    /// </summary>
    FMLSLB_z_zzz,
    /// <summary>
    /// Instruction FMLSLB - Half-precision floating-point multiply-subtract long from single-precision (bottom, indexed).
    /// </summary>
    FMLSLB_z_zzzi_s,
    /// <summary>
    /// Instruction FMLSLT - Half-precision floating-point multiply-subtract long from single-precision (top).
    /// </summary>
    FMLSLT_z_zzz,
    /// <summary>
    /// Instruction FMLSLT - Half-precision floating-point multiply-subtract long from single-precision (top, indexed).
    /// </summary>
    FMLSLT_z_zzzi_s,
    /// <summary>
    /// Instruction FMLSL - Floating-point fused multiply-subtract long from accumulator (by element).
    /// </summary>
    FMLSL_asimdelem_lh,
    /// <summary>
    /// Instruction FMLSL - Floating-point fused multiply-subtract long from accumulator (vector).
    /// </summary>
    FMLSL_asimdsame_f,
    /// <summary>
    /// Instruction FMLSL - Multi-vector floating-point multiply-subtract long by indexed element.
    /// </summary>
    FMLSL_za_zzi_1,
    /// <summary>
    /// Instruction FMLSL - Multi-vector floating-point multiply-subtract long by indexed element.
    /// </summary>
    FMLSL_za_zzi_2xi,
    /// <summary>
    /// Instruction FMLSL - Multi-vector floating-point multiply-subtract long by indexed element.
    /// </summary>
    FMLSL_za_zzi_4xi,
    /// <summary>
    /// Instruction FMLSL - Multi-vector floating-point multiply-subtract long by vector.
    /// </summary>
    FMLSL_za_zzv_1,
    /// <summary>
    /// Instruction FMLSL - Multi-vector floating-point multiply-subtract long by vector.
    /// </summary>
    FMLSL_za_zzv_2x1,
    /// <summary>
    /// Instruction FMLSL - Multi-vector floating-point multiply-subtract long by vector.
    /// </summary>
    FMLSL_za_zzv_4x1,
    /// <summary>
    /// Instruction FMLSL - Multi-vector floating-point multiply-subtract long.
    /// </summary>
    FMLSL_za_zzw_2x2,
    /// <summary>
    /// Instruction FMLSL - Multi-vector floating-point multiply-subtract long.
    /// </summary>
    FMLSL_za_zzw_4x4,
    /// <summary>
    /// Instruction FMLS - Floating-point fused multiply-subtract from accumulator (by element).
    /// </summary>
    FMLS_asimdelem_r_sd,
    /// <summary>
    /// Instruction FMLS - Floating-point fused multiply-subtract from accumulator (by element).
    /// </summary>
    FMLS_asimdelem_rh_h,
    /// <summary>
    /// Instruction FMLS - Floating-point fused multiply-subtract from accumulator (vector).
    /// </summary>
    FMLS_asimdsame_only,
    /// <summary>
    /// Instruction FMLS - Floating-point fused multiply-subtract from accumulator (vector).
    /// </summary>
    FMLS_asimdsamefp16_only,
    /// <summary>
    /// Instruction FMLS - Floating-point fused multiply-subtract from accumulator (by element).
    /// </summary>
    FMLS_asisdelem_r_sd,
    /// <summary>
    /// Instruction FMLS - Floating-point fused multiply-subtract from accumulator (by element).
    /// </summary>
    FMLS_asisdelem_rh_h,
    /// <summary>
    /// Instruction FMLS - Floating-point fused multiply-subtract vectors (predicated), writing addend [Zda = Zda + -Zn * Zm].
    /// </summary>
    FMLS_z_p_zzz,
    /// <summary>
    /// Instruction FMLS - Floating-point fused multiply-subtract by indexed elements (Zda = Zda + -Zn * Zm[indexed]).
    /// </summary>
    FMLS_z_zzzi_d,
    /// <summary>
    /// Instruction FMLS - Floating-point fused multiply-subtract by indexed elements (Zda = Zda + -Zn * Zm[indexed]).
    /// </summary>
    FMLS_z_zzzi_h,
    /// <summary>
    /// Instruction FMLS - Floating-point fused multiply-subtract by indexed elements (Zda = Zda + -Zn * Zm[indexed]).
    /// </summary>
    FMLS_z_zzzi_s,
    /// <summary>
    /// Instruction FMLS - Multi-vector floating-point fused multiply-subtract by indexed element.
    /// </summary>
    FMLS_za_zzi_d2xi,
    /// <summary>
    /// Instruction FMLS - Multi-vector floating-point fused multiply-subtract by indexed element.
    /// </summary>
    FMLS_za_zzi_d4xi,
    /// <summary>
    /// Instruction FMLS - Multi-vector floating-point fused multiply-subtract by indexed element.
    /// </summary>
    FMLS_za_zzi_h2xi,
    /// <summary>
    /// Instruction FMLS - Multi-vector floating-point fused multiply-subtract by indexed element.
    /// </summary>
    FMLS_za_zzi_h4xi,
    /// <summary>
    /// Instruction FMLS - Multi-vector floating-point fused multiply-subtract by indexed element.
    /// </summary>
    FMLS_za_zzi_s2xi,
    /// <summary>
    /// Instruction FMLS - Multi-vector floating-point fused multiply-subtract by indexed element.
    /// </summary>
    FMLS_za_zzi_s4xi,
    /// <summary>
    /// Instruction FMLS - Multi-vector floating-point fused multiply-subtract by vector.
    /// </summary>
    FMLS_za_zzv_2x1,
    /// <summary>
    /// Instruction FMLS - Multi-vector floating-point fused multiply-subtract by vector.
    /// </summary>
    FMLS_za_zzv_2x1_16,
    /// <summary>
    /// Instruction FMLS - Multi-vector floating-point fused multiply-subtract by vector.
    /// </summary>
    FMLS_za_zzv_4x1,
    /// <summary>
    /// Instruction FMLS - Multi-vector floating-point fused multiply-subtract by vector.
    /// </summary>
    FMLS_za_zzv_4x1_16,
    /// <summary>
    /// Instruction FMLS - Multi-vector floating-point fused multiply-subtract.
    /// </summary>
    FMLS_za_zzw_2x2,
    /// <summary>
    /// Instruction FMLS - Multi-vector floating-point fused multiply-subtract.
    /// </summary>
    FMLS_za_zzw_2x2_16,
    /// <summary>
    /// Instruction FMLS - Multi-vector floating-point fused multiply-subtract.
    /// </summary>
    FMLS_za_zzw_4x4,
    /// <summary>
    /// Instruction FMLS - Multi-vector floating-point fused multiply-subtract.
    /// </summary>
    FMLS_za_zzw_4x4_16,
    /// <summary>
    /// Instruction FMMLA - 8-bit floating-point matrix multiply-accumulate into 2x2 half-precision matrix.
    /// </summary>
    FMMLA_asimd_fp8fp16,
    /// <summary>
    /// Instruction FMMLA - 8-bit floating-point matrix multiply-accumulate into 2x2 single-precision matrix.
    /// </summary>
    FMMLA_asimd_fp8fp32,
    /// <summary>
    /// Instruction FMMLA - 8-bit floating-point matrix multiply-accumulate to half-precision.
    /// </summary>
    FMMLA_z16_zz8z8,
    /// <summary>
    /// Instruction FMMLA - 8-bit floating-point matrix multiply-accumulate to single-precision.
    /// </summary>
    FMMLA_z32_zz8z8,
    /// <summary>
    /// Instruction FMMLA - Half-precision floating-point matrix multiply-accumulate to single-precision.
    /// </summary>
    FMMLA_z32_zzz_h,
    /// <summary>
    /// Instruction FMMLA - Floating-point matrix multiply-accumulate.
    /// </summary>
    FMMLA_z_zzz_d,
    /// <summary>
    /// Instruction FMMLA - Floating-point matrix multiply-accumulate.
    /// </summary>
    FMMLA_z_zzz_s,
    /// <summary>
    /// Instruction FMOP4A - 8-bit floating-point quarter-tile sums of two outer products, accumulating.
    /// </summary>
    FMOP4A_za16_z8z8_b1x1,
    /// <summary>
    /// Instruction FMOP4A - 8-bit floating-point quarter-tile sums of two outer products, accumulating.
    /// </summary>
    FMOP4A_za16_z8z8_b1x2,
    /// <summary>
    /// Instruction FMOP4A - 8-bit floating-point quarter-tile sums of two outer products, accumulating.
    /// </summary>
    FMOP4A_za16_z8z8_b2x1,
    /// <summary>
    /// Instruction FMOP4A - 8-bit floating-point quarter-tile sums of two outer products, accumulating.
    /// </summary>
    FMOP4A_za16_z8z8_b2x2,
    /// <summary>
    /// Instruction FMOP4A - 8-bit floating-point quarter-tile sums of four outer products, accumulating.
    /// </summary>
    FMOP4A_za32_z8z8_b1x1,
    /// <summary>
    /// Instruction FMOP4A - 8-bit floating-point quarter-tile sums of four outer products, accumulating.
    /// </summary>
    FMOP4A_za32_z8z8_b1x2,
    /// <summary>
    /// Instruction FMOP4A - 8-bit floating-point quarter-tile sums of four outer products, accumulating.
    /// </summary>
    FMOP4A_za32_z8z8_b2x1,
    /// <summary>
    /// Instruction FMOP4A - 8-bit floating-point quarter-tile sums of four outer products, accumulating.
    /// </summary>
    FMOP4A_za32_z8z8_b2x2,
    /// <summary>
    /// Instruction FMOP4A - Half-precision quarter-tile sums of two outer products, accumulating.
    /// </summary>
    FMOP4A_za32_zz_h1x1,
    /// <summary>
    /// Instruction FMOP4A - Half-precision quarter-tile sums of two outer products, accumulating.
    /// </summary>
    FMOP4A_za32_zz_h1x2,
    /// <summary>
    /// Instruction FMOP4A - Half-precision quarter-tile sums of two outer products, accumulating.
    /// </summary>
    FMOP4A_za32_zz_h2x1,
    /// <summary>
    /// Instruction FMOP4A - Half-precision quarter-tile sums of two outer products, accumulating.
    /// </summary>
    FMOP4A_za32_zz_h2x2,
    /// <summary>
    /// Instruction FMOP4A - Floating-point quarter-tile outer products, accumulating.
    /// </summary>
    FMOP4A_za_zz_d1x1,
    /// <summary>
    /// Instruction FMOP4A - Floating-point quarter-tile outer products, accumulating.
    /// </summary>
    FMOP4A_za_zz_d1x2,
    /// <summary>
    /// Instruction FMOP4A - Floating-point quarter-tile outer products, accumulating.
    /// </summary>
    FMOP4A_za_zz_d2x1,
    /// <summary>
    /// Instruction FMOP4A - Floating-point quarter-tile outer products, accumulating.
    /// </summary>
    FMOP4A_za_zz_d2x2,
    /// <summary>
    /// Instruction FMOP4A - Floating-point quarter-tile outer products, accumulating.
    /// </summary>
    FMOP4A_za_zz_h1x1,
    /// <summary>
    /// Instruction FMOP4A - Floating-point quarter-tile outer products, accumulating.
    /// </summary>
    FMOP4A_za_zz_h1x2,
    /// <summary>
    /// Instruction FMOP4A - Floating-point quarter-tile outer products, accumulating.
    /// </summary>
    FMOP4A_za_zz_h2x1,
    /// <summary>
    /// Instruction FMOP4A - Floating-point quarter-tile outer products, accumulating.
    /// </summary>
    FMOP4A_za_zz_h2x2,
    /// <summary>
    /// Instruction FMOP4A - Floating-point quarter-tile outer products, accumulating.
    /// </summary>
    FMOP4A_za_zz_s1x1,
    /// <summary>
    /// Instruction FMOP4A - Floating-point quarter-tile outer products, accumulating.
    /// </summary>
    FMOP4A_za_zz_s1x2,
    /// <summary>
    /// Instruction FMOP4A - Floating-point quarter-tile outer products, accumulating.
    /// </summary>
    FMOP4A_za_zz_s2x1,
    /// <summary>
    /// Instruction FMOP4A - Floating-point quarter-tile outer products, accumulating.
    /// </summary>
    FMOP4A_za_zz_s2x2,
    /// <summary>
    /// Instruction FMOP4S - Half-precision quarter-tile sums of two outer products, subtracting.
    /// </summary>
    FMOP4S_za32_zz_h1x1,
    /// <summary>
    /// Instruction FMOP4S - Half-precision quarter-tile sums of two outer products, subtracting.
    /// </summary>
    FMOP4S_za32_zz_h1x2,
    /// <summary>
    /// Instruction FMOP4S - Half-precision quarter-tile sums of two outer products, subtracting.
    /// </summary>
    FMOP4S_za32_zz_h2x1,
    /// <summary>
    /// Instruction FMOP4S - Half-precision quarter-tile sums of two outer products, subtracting.
    /// </summary>
    FMOP4S_za32_zz_h2x2,
    /// <summary>
    /// Instruction FMOP4S - Floating-point quarter-tile outer products, subtracting.
    /// </summary>
    FMOP4S_za_zz_d1x1,
    /// <summary>
    /// Instruction FMOP4S - Floating-point quarter-tile outer products, subtracting.
    /// </summary>
    FMOP4S_za_zz_d1x2,
    /// <summary>
    /// Instruction FMOP4S - Floating-point quarter-tile outer products, subtracting.
    /// </summary>
    FMOP4S_za_zz_d2x1,
    /// <summary>
    /// Instruction FMOP4S - Floating-point quarter-tile outer products, subtracting.
    /// </summary>
    FMOP4S_za_zz_d2x2,
    /// <summary>
    /// Instruction FMOP4S - Floating-point quarter-tile outer products, subtracting.
    /// </summary>
    FMOP4S_za_zz_h1x1,
    /// <summary>
    /// Instruction FMOP4S - Floating-point quarter-tile outer products, subtracting.
    /// </summary>
    FMOP4S_za_zz_h1x2,
    /// <summary>
    /// Instruction FMOP4S - Floating-point quarter-tile outer products, subtracting.
    /// </summary>
    FMOP4S_za_zz_h2x1,
    /// <summary>
    /// Instruction FMOP4S - Floating-point quarter-tile outer products, subtracting.
    /// </summary>
    FMOP4S_za_zz_h2x2,
    /// <summary>
    /// Instruction FMOP4S - Floating-point quarter-tile outer products, subtracting.
    /// </summary>
    FMOP4S_za_zz_s1x1,
    /// <summary>
    /// Instruction FMOP4S - Floating-point quarter-tile outer products, subtracting.
    /// </summary>
    FMOP4S_za_zz_s1x2,
    /// <summary>
    /// Instruction FMOP4S - Floating-point quarter-tile outer products, subtracting.
    /// </summary>
    FMOP4S_za_zz_s2x1,
    /// <summary>
    /// Instruction FMOP4S - Floating-point quarter-tile outer products, subtracting.
    /// </summary>
    FMOP4S_za_zz_s2x2,
    /// <summary>
    /// Instruction FMOPA - 8-bit floating-point sum of outer products and accumulate.
    /// </summary>
    FMOPA_za16_pp_z8z8_8,
    /// <summary>
    /// Instruction FMOPA - 8-bit floating-point sum of outer products and accumulate.
    /// </summary>
    FMOPA_za32_pp_z8z8_8,
    /// <summary>
    /// Instruction FMOPA - Half-precision floating-point sum of outer products and accumulate.
    /// </summary>
    FMOPA_za32_pp_zz_16,
    /// <summary>
    /// Instruction FMOPA - Floating-point outer product and accumulate.
    /// </summary>
    FMOPA_za_pp_zz_16,
    /// <summary>
    /// Instruction FMOPA - Floating-point outer product and accumulate.
    /// </summary>
    FMOPA_za_pp_zz_32,
    /// <summary>
    /// Instruction FMOPA - Floating-point outer product and accumulate.
    /// </summary>
    FMOPA_za_pp_zz_64,
    /// <summary>
    /// Instruction FMOPS - Half-precision floating-point sum of outer products and subtract.
    /// </summary>
    FMOPS_za32_pp_zz_16,
    /// <summary>
    /// Instruction FMOPS - Floating-point outer product and subtract.
    /// </summary>
    FMOPS_za_pp_zz_16,
    /// <summary>
    /// Instruction FMOPS - Floating-point outer product and subtract.
    /// </summary>
    FMOPS_za_pp_zz_32,
    /// <summary>
    /// Instruction FMOPS - Floating-point outer product and subtract.
    /// </summary>
    FMOPS_za_pp_zz_64,
    /// <summary>
    /// Instruction FMOV - Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    FMOV_32h_float2int,
    /// <summary>
    /// Instruction FMOV - Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    FMOV_32s_float2int,
    /// <summary>
    /// Instruction FMOV - Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    FMOV_64d_float2int,
    /// <summary>
    /// Instruction FMOV - Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    FMOV_64h_float2int,
    /// <summary>
    /// Instruction FMOV - Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    FMOV_64vx_float2int,
    /// <summary>
    /// Instruction FMOV - Floating-point move immediate (vector).
    /// </summary>
    FMOV_asimdimm_d2_d,
    /// <summary>
    /// Instruction FMOV - Floating-point move immediate (vector).
    /// </summary>
    FMOV_asimdimm_h_h,
    /// <summary>
    /// Instruction FMOV - Floating-point move immediate (vector).
    /// </summary>
    FMOV_asimdimm_s_s,
    /// <summary>
    /// Instruction FMOV - Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    FMOV_d64_float2int,
    /// <summary>
    /// Instruction FMOV - Floating-point move register without conversion.
    /// </summary>
    FMOV_d_floatdp1,
    /// <summary>
    /// Instruction FMOV - Floating-point move immediate (scalar).
    /// </summary>
    FMOV_d_floatimm,
    /// <summary>
    /// Instruction FMOV - Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    FMOV_h32_float2int,
    /// <summary>
    /// Instruction FMOV - Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    FMOV_h64_float2int,
    /// <summary>
    /// Instruction FMOV - Floating-point move register without conversion.
    /// </summary>
    FMOV_h_floatdp1,
    /// <summary>
    /// Instruction FMOV - Floating-point move immediate (scalar).
    /// </summary>
    FMOV_h_floatimm,
    /// <summary>
    /// Instruction FMOV - Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    FMOV_s32_float2int,
    /// <summary>
    /// Instruction FMOV - Floating-point move register without conversion.
    /// </summary>
    FMOV_s_floatdp1,
    /// <summary>
    /// Instruction FMOV - Floating-point move immediate (scalar).
    /// </summary>
    FMOV_s_floatimm,
    /// <summary>
    /// Instruction FMOV - Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    FMOV_v64i_float2int,
    /// <summary>
    /// Instruction FMSB - Floating-point fused multiply-subtract vectors (predicated), writing multiplicand [Zdn = Za + -Zdn * Zm].
    /// </summary>
    FMSB_z_p_zzz,
    /// <summary>
    /// Instruction FMSUB - Floating-point fused multiply-subtract (scalar).
    /// </summary>
    FMSUB_d_floatdp3,
    /// <summary>
    /// Instruction FMSUB - Floating-point fused multiply-subtract (scalar).
    /// </summary>
    FMSUB_h_floatdp3,
    /// <summary>
    /// Instruction FMSUB - Floating-point fused multiply-subtract (scalar).
    /// </summary>
    FMSUB_s_floatdp3,
    /// <summary>
    /// Instruction FMULX - Floating-point multiply extended (by element).
    /// </summary>
    FMULX_asimdelem_r_sd,
    /// <summary>
    /// Instruction FMULX - Floating-point multiply extended (by element).
    /// </summary>
    FMULX_asimdelem_rh_h,
    /// <summary>
    /// Instruction FMULX - Floating-point multiply extended.
    /// </summary>
    FMULX_asimdsame_only,
    /// <summary>
    /// Instruction FMULX - Floating-point multiply extended.
    /// </summary>
    FMULX_asimdsamefp16_only,
    /// <summary>
    /// Instruction FMULX - Floating-point multiply extended (by element).
    /// </summary>
    FMULX_asisdelem_r_sd,
    /// <summary>
    /// Instruction FMULX - Floating-point multiply extended (by element).
    /// </summary>
    FMULX_asisdelem_rh_h,
    /// <summary>
    /// Instruction FMULX - Floating-point multiply extended.
    /// </summary>
    FMULX_asisdsame_only,
    /// <summary>
    /// Instruction FMULX - Floating-point multiply extended.
    /// </summary>
    FMULX_asisdsamefp16_only,
    /// <summary>
    /// Instruction FMULX - Floating-point multiply-extended vectors (predicated).
    /// </summary>
    FMULX_z_p_zz,
    /// <summary>
    /// Instruction FMUL - Floating-point multiply (by element).
    /// </summary>
    FMUL_asimdelem_r_sd,
    /// <summary>
    /// Instruction FMUL - Floating-point multiply (by element).
    /// </summary>
    FMUL_asimdelem_rh_h,
    /// <summary>
    /// Instruction FMUL - Floating-point multiply (vector).
    /// </summary>
    FMUL_asimdsame_only,
    /// <summary>
    /// Instruction FMUL - Floating-point multiply (vector).
    /// </summary>
    FMUL_asimdsamefp16_only,
    /// <summary>
    /// Instruction FMUL - Floating-point multiply (by element).
    /// </summary>
    FMUL_asisdelem_r_sd,
    /// <summary>
    /// Instruction FMUL - Floating-point multiply (by element).
    /// </summary>
    FMUL_asisdelem_rh_h,
    /// <summary>
    /// Instruction FMUL - Floating-point multiply (scalar).
    /// </summary>
    FMUL_d_floatdp2,
    /// <summary>
    /// Instruction FMUL - Floating-point multiply (scalar).
    /// </summary>
    FMUL_h_floatdp2,
    /// <summary>
    /// Instruction FMUL - Multi-vector floating-point multiply by vector.
    /// </summary>
    FMUL_mz_zzv_2x1,
    /// <summary>
    /// Instruction FMUL - Multi-vector floating-point multiply by vector.
    /// </summary>
    FMUL_mz_zzv_4x1,
    /// <summary>
    /// Instruction FMUL - Multi-vector floating-point multiply.
    /// </summary>
    FMUL_mz_zzw_2x2,
    /// <summary>
    /// Instruction FMUL - Multi-vector floating-point multiply.
    /// </summary>
    FMUL_mz_zzw_4x4,
    /// <summary>
    /// Instruction FMUL - Floating-point multiply (scalar).
    /// </summary>
    FMUL_s_floatdp2,
    /// <summary>
    /// Instruction FMUL - Floating-point multiply by immediate (predicated).
    /// </summary>
    FMUL_z_p_zs,
    /// <summary>
    /// Instruction FMUL - Floating-point multiply vectors (predicated).
    /// </summary>
    FMUL_z_p_zz,
    /// <summary>
    /// Instruction FMUL - Floating-point multiply vectors (unpredicated).
    /// </summary>
    FMUL_z_zz,
    /// <summary>
    /// Instruction FMUL - Floating-point multiply by indexed elements.
    /// </summary>
    FMUL_z_zzi_d,
    /// <summary>
    /// Instruction FMUL - Floating-point multiply by indexed elements.
    /// </summary>
    FMUL_z_zzi_h,
    /// <summary>
    /// Instruction FMUL - Floating-point multiply by indexed elements.
    /// </summary>
    FMUL_z_zzi_s,
    /// <summary>
    /// Instruction FNEG - Floating-point negate (vector).
    /// </summary>
    FNEG_asimdmisc_r,
    /// <summary>
    /// Instruction FNEG - Floating-point negate (vector).
    /// </summary>
    FNEG_asimdmiscfp16_r,
    /// <summary>
    /// Instruction FNEG - Floating-point negate (scalar).
    /// </summary>
    FNEG_d_floatdp1,
    /// <summary>
    /// Instruction FNEG - Floating-point negate (scalar).
    /// </summary>
    FNEG_h_floatdp1,
    /// <summary>
    /// Instruction FNEG - Floating-point negate (scalar).
    /// </summary>
    FNEG_s_floatdp1,
    /// <summary>
    /// Instruction FNEG - Floating-point negate (predicated).
    /// </summary>
    FNEG_z_p_z_m,
    /// <summary>
    /// Instruction FNEG - Floating-point negate (predicated).
    /// </summary>
    FNEG_z_p_z_z,
    /// <summary>
    /// Instruction FNMADD - Floating-point negated fused multiply-add (scalar).
    /// </summary>
    FNMADD_d_floatdp3,
    /// <summary>
    /// Instruction FNMADD - Floating-point negated fused multiply-add (scalar).
    /// </summary>
    FNMADD_h_floatdp3,
    /// <summary>
    /// Instruction FNMADD - Floating-point negated fused multiply-add (scalar).
    /// </summary>
    FNMADD_s_floatdp3,
    /// <summary>
    /// Instruction FNMAD - Floating-point negated fused multiply-add vectors (predicated), writing multiplicand [Zdn = -Za + -Zdn * Zm].
    /// </summary>
    FNMAD_z_p_zzz,
    /// <summary>
    /// Instruction FNMLA - Floating-point negated fused multiply-add vectors (predicated), writing addend [Zda = -Zda + -Zn * Zm].
    /// </summary>
    FNMLA_z_p_zzz,
    /// <summary>
    /// Instruction FNMLS - Floating-point negated fused multiply-subtract vectors (predicated), writing addend [Zda = -Zda + Zn * Zm].
    /// </summary>
    FNMLS_z_p_zzz,
    /// <summary>
    /// Instruction FNMSB - Floating-point negated fused multiply-subtract vectors (predicated), writing multiplicand [Zdn = -Za + Zdn * Zm].
    /// </summary>
    FNMSB_z_p_zzz,
    /// <summary>
    /// Instruction FNMSUB - Floating-point negated fused multiply-subtract (scalar).
    /// </summary>
    FNMSUB_d_floatdp3,
    /// <summary>
    /// Instruction FNMSUB - Floating-point negated fused multiply-subtract (scalar).
    /// </summary>
    FNMSUB_h_floatdp3,
    /// <summary>
    /// Instruction FNMSUB - Floating-point negated fused multiply-subtract (scalar).
    /// </summary>
    FNMSUB_s_floatdp3,
    /// <summary>
    /// Instruction FNMUL - Floating-point multiply-negate (scalar).
    /// </summary>
    FNMUL_d_floatdp2,
    /// <summary>
    /// Instruction FNMUL - Floating-point multiply-negate (scalar).
    /// </summary>
    FNMUL_h_floatdp2,
    /// <summary>
    /// Instruction FNMUL - Floating-point multiply-negate (scalar).
    /// </summary>
    FNMUL_s_floatdp2,
    /// <summary>
    /// Instruction FRECPE - Floating-point reciprocal estimate.
    /// </summary>
    FRECPE_asimdmisc_r,
    /// <summary>
    /// Instruction FRECPE - Floating-point reciprocal estimate.
    /// </summary>
    FRECPE_asimdmiscfp16_r,
    /// <summary>
    /// Instruction FRECPE - Floating-point reciprocal estimate.
    /// </summary>
    FRECPE_asisdmisc_r,
    /// <summary>
    /// Instruction FRECPE - Floating-point reciprocal estimate.
    /// </summary>
    FRECPE_asisdmiscfp16_r,
    /// <summary>
    /// Instruction FRECPE - Floating-point reciprocal estimate (unpredicated).
    /// </summary>
    FRECPE_z_z,
    /// <summary>
    /// Instruction FRECPS - Floating-point reciprocal step.
    /// </summary>
    FRECPS_asimdsame_only,
    /// <summary>
    /// Instruction FRECPS - Floating-point reciprocal step.
    /// </summary>
    FRECPS_asimdsamefp16_only,
    /// <summary>
    /// Instruction FRECPS - Floating-point reciprocal step.
    /// </summary>
    FRECPS_asisdsame_only,
    /// <summary>
    /// Instruction FRECPS - Floating-point reciprocal step.
    /// </summary>
    FRECPS_asisdsamefp16_only,
    /// <summary>
    /// Instruction FRECPS - Floating-point reciprocal step (unpredicated).
    /// </summary>
    FRECPS_z_zz,
    /// <summary>
    /// Instruction FRECPX - Floating-point reciprocal exponent (scalar).
    /// </summary>
    FRECPX_asisdmisc_r,
    /// <summary>
    /// Instruction FRECPX - Floating-point reciprocal exponent (scalar).
    /// </summary>
    FRECPX_asisdmiscfp16_r,
    /// <summary>
    /// Instruction FRECPX - Floating-point reciprocal exponent (predicated).
    /// </summary>
    FRECPX_z_p_z_m,
    /// <summary>
    /// Instruction FRECPX - Floating-point reciprocal exponent (predicated).
    /// </summary>
    FRECPX_z_p_z_z,
    /// <summary>
    /// Instruction FRINT32X - Floating-point round to 32-bit integer, using current rounding mode (vector).
    /// </summary>
    FRINT32X_asimdmisc_r,
    /// <summary>
    /// Instruction FRINT32X - Floating-point round to 32-bit integer, using current rounding mode (scalar).
    /// </summary>
    FRINT32X_d_floatdp1,
    /// <summary>
    /// Instruction FRINT32X - Floating-point round to 32-bit integer, using current rounding mode (scalar).
    /// </summary>
    FRINT32X_s_floatdp1,
    /// <summary>
    /// Instruction FRINT32X - Floating-point round to 32-bit integer, using current rounding mode (predicated).
    /// </summary>
    FRINT32X_z_p_z_m,
    /// <summary>
    /// Instruction FRINT32X - Floating-point round to 32-bit integer, using current rounding mode (predicated).
    /// </summary>
    FRINT32X_z_p_z_z,
    /// <summary>
    /// Instruction FRINT32Z - Floating-point round to 32-bit integer toward zero (vector).
    /// </summary>
    FRINT32Z_asimdmisc_r,
    /// <summary>
    /// Instruction FRINT32Z - Floating-point round to 32-bit integer toward zero (scalar).
    /// </summary>
    FRINT32Z_d_floatdp1,
    /// <summary>
    /// Instruction FRINT32Z - Floating-point round to 32-bit integer toward zero (scalar).
    /// </summary>
    FRINT32Z_s_floatdp1,
    /// <summary>
    /// Instruction FRINT32Z - Floating-point round to 32-bit integer, toward zero (predicated).
    /// </summary>
    FRINT32Z_z_p_z_m,
    /// <summary>
    /// Instruction FRINT32Z - Floating-point round to 32-bit integer, toward zero (predicated).
    /// </summary>
    FRINT32Z_z_p_z_z,
    /// <summary>
    /// Instruction FRINT64X - Floating-point round to 64-bit integer, using current rounding mode (vector).
    /// </summary>
    FRINT64X_asimdmisc_r,
    /// <summary>
    /// Instruction FRINT64X - Floating-point round to 64-bit integer, using current rounding mode (scalar).
    /// </summary>
    FRINT64X_d_floatdp1,
    /// <summary>
    /// Instruction FRINT64X - Floating-point round to 64-bit integer, using current rounding mode (scalar).
    /// </summary>
    FRINT64X_s_floatdp1,
    /// <summary>
    /// Instruction FRINT64X - Floating-point round to 64-bit integer, using current rounding mode (predicated).
    /// </summary>
    FRINT64X_z_p_z_m,
    /// <summary>
    /// Instruction FRINT64X - Floating-point round to 64-bit integer, using current rounding mode (predicated).
    /// </summary>
    FRINT64X_z_p_z_z,
    /// <summary>
    /// Instruction FRINT64Z - Floating-point round to 64-bit integer toward zero (vector).
    /// </summary>
    FRINT64Z_asimdmisc_r,
    /// <summary>
    /// Instruction FRINT64Z - Floating-point round to 64-bit integer toward zero (scalar).
    /// </summary>
    FRINT64Z_d_floatdp1,
    /// <summary>
    /// Instruction FRINT64Z - Floating-point round to 64-bit integer toward zero (scalar).
    /// </summary>
    FRINT64Z_s_floatdp1,
    /// <summary>
    /// Instruction FRINT64Z - Floating-point round to 64-bit integer, toward zero (predicated).
    /// </summary>
    FRINT64Z_z_p_z_m,
    /// <summary>
    /// Instruction FRINT64Z - Floating-point round to 64-bit integer, toward zero (predicated).
    /// </summary>
    FRINT64Z_z_p_z_z,
    /// <summary>
    /// Instruction FRINTA - Floating-point round to integral, to nearest with ties to away (vector).
    /// </summary>
    FRINTA_asimdmisc_r,
    /// <summary>
    /// Instruction FRINTA - Floating-point round to integral, to nearest with ties to away (vector).
    /// </summary>
    FRINTA_asimdmiscfp16_r,
    /// <summary>
    /// Instruction FRINTA - Floating-point round to integral, to nearest with ties to away (scalar).
    /// </summary>
    FRINTA_d_floatdp1,
    /// <summary>
    /// Instruction FRINTA - Floating-point round to integral, to nearest with ties to away (scalar).
    /// </summary>
    FRINTA_h_floatdp1,
    /// <summary>
    /// Instruction FRINTA - Multi-vector floating-point round to integral value, to nearest with ties away from zero.
    /// </summary>
    FRINTA_mz_z_2,
    /// <summary>
    /// Instruction FRINTA - Multi-vector floating-point round to integral value, to nearest with ties away from zero.
    /// </summary>
    FRINTA_mz_z_4,
    /// <summary>
    /// Instruction FRINTA - Floating-point round to integral, to nearest with ties to away (scalar).
    /// </summary>
    FRINTA_s_floatdp1,
    /// <summary>
    /// Instruction FRINTA - Floating-point round to integral value (predicated).
    /// </summary>
    FRINTA_z_p_z_m,
    /// <summary>
    /// Instruction FRINTA - Floating-point round to integral value (predicated).
    /// </summary>
    FRINTA_z_p_z_z,
    /// <summary>
    /// Instruction FRINTI - Floating-point round to integral, using current rounding mode (vector).
    /// </summary>
    FRINTI_asimdmisc_r,
    /// <summary>
    /// Instruction FRINTI - Floating-point round to integral, using current rounding mode (vector).
    /// </summary>
    FRINTI_asimdmiscfp16_r,
    /// <summary>
    /// Instruction FRINTI - Floating-point round to integral, using current rounding mode (scalar).
    /// </summary>
    FRINTI_d_floatdp1,
    /// <summary>
    /// Instruction FRINTI - Floating-point round to integral, using current rounding mode (scalar).
    /// </summary>
    FRINTI_h_floatdp1,
    /// <summary>
    /// Instruction FRINTI - Floating-point round to integral, using current rounding mode (scalar).
    /// </summary>
    FRINTI_s_floatdp1,
    /// <summary>
    /// Instruction FRINTI - Floating-point round to integral value (predicated).
    /// </summary>
    FRINTI_z_p_z_m,
    /// <summary>
    /// Instruction FRINTI - Floating-point round to integral value (predicated).
    /// </summary>
    FRINTI_z_p_z_z,
    /// <summary>
    /// Instruction FRINTM - Floating-point round to integral, toward minus infinity (vector).
    /// </summary>
    FRINTM_asimdmisc_r,
    /// <summary>
    /// Instruction FRINTM - Floating-point round to integral, toward minus infinity (vector).
    /// </summary>
    FRINTM_asimdmiscfp16_r,
    /// <summary>
    /// Instruction FRINTM - Floating-point round to integral, toward minus infinity (scalar).
    /// </summary>
    FRINTM_d_floatdp1,
    /// <summary>
    /// Instruction FRINTM - Floating-point round to integral, toward minus infinity (scalar).
    /// </summary>
    FRINTM_h_floatdp1,
    /// <summary>
    /// Instruction FRINTM - Multi-vector floating-point round to integral value, toward minus Infinity.
    /// </summary>
    FRINTM_mz_z_2,
    /// <summary>
    /// Instruction FRINTM - Multi-vector floating-point round to integral value, toward minus Infinity.
    /// </summary>
    FRINTM_mz_z_4,
    /// <summary>
    /// Instruction FRINTM - Floating-point round to integral, toward minus infinity (scalar).
    /// </summary>
    FRINTM_s_floatdp1,
    /// <summary>
    /// Instruction FRINTM - Floating-point round to integral value (predicated).
    /// </summary>
    FRINTM_z_p_z_m,
    /// <summary>
    /// Instruction FRINTM - Floating-point round to integral value (predicated).
    /// </summary>
    FRINTM_z_p_z_z,
    /// <summary>
    /// Instruction FRINTN - Floating-point round to integral, to nearest with ties to even (vector).
    /// </summary>
    FRINTN_asimdmisc_r,
    /// <summary>
    /// Instruction FRINTN - Floating-point round to integral, to nearest with ties to even (vector).
    /// </summary>
    FRINTN_asimdmiscfp16_r,
    /// <summary>
    /// Instruction FRINTN - Floating-point round to integral, to nearest with ties to even (scalar).
    /// </summary>
    FRINTN_d_floatdp1,
    /// <summary>
    /// Instruction FRINTN - Floating-point round to integral, to nearest with ties to even (scalar).
    /// </summary>
    FRINTN_h_floatdp1,
    /// <summary>
    /// Instruction FRINTN - Multi-vector floating-point round to integral value, to nearest with ties to even.
    /// </summary>
    FRINTN_mz_z_2,
    /// <summary>
    /// Instruction FRINTN - Multi-vector floating-point round to integral value, to nearest with ties to even.
    /// </summary>
    FRINTN_mz_z_4,
    /// <summary>
    /// Instruction FRINTN - Floating-point round to integral, to nearest with ties to even (scalar).
    /// </summary>
    FRINTN_s_floatdp1,
    /// <summary>
    /// Instruction FRINTN - Floating-point round to integral value (predicated).
    /// </summary>
    FRINTN_z_p_z_m,
    /// <summary>
    /// Instruction FRINTN - Floating-point round to integral value (predicated).
    /// </summary>
    FRINTN_z_p_z_z,
    /// <summary>
    /// Instruction FRINTP - Floating-point round to integral, toward plus infinity (vector).
    /// </summary>
    FRINTP_asimdmisc_r,
    /// <summary>
    /// Instruction FRINTP - Floating-point round to integral, toward plus infinity (vector).
    /// </summary>
    FRINTP_asimdmiscfp16_r,
    /// <summary>
    /// Instruction FRINTP - Floating-point round to integral, toward plus infinity (scalar).
    /// </summary>
    FRINTP_d_floatdp1,
    /// <summary>
    /// Instruction FRINTP - Floating-point round to integral, toward plus infinity (scalar).
    /// </summary>
    FRINTP_h_floatdp1,
    /// <summary>
    /// Instruction FRINTP - Multi-vector floating-point round to integral value, toward plus Infinity.
    /// </summary>
    FRINTP_mz_z_2,
    /// <summary>
    /// Instruction FRINTP - Multi-vector floating-point round to integral value, toward plus Infinity.
    /// </summary>
    FRINTP_mz_z_4,
    /// <summary>
    /// Instruction FRINTP - Floating-point round to integral, toward plus infinity (scalar).
    /// </summary>
    FRINTP_s_floatdp1,
    /// <summary>
    /// Instruction FRINTP - Floating-point round to integral value (predicated).
    /// </summary>
    FRINTP_z_p_z_m,
    /// <summary>
    /// Instruction FRINTP - Floating-point round to integral value (predicated).
    /// </summary>
    FRINTP_z_p_z_z,
    /// <summary>
    /// Instruction FRINTX - Floating-point round to integral exact, using current rounding mode (vector).
    /// </summary>
    FRINTX_asimdmisc_r,
    /// <summary>
    /// Instruction FRINTX - Floating-point round to integral exact, using current rounding mode (vector).
    /// </summary>
    FRINTX_asimdmiscfp16_r,
    /// <summary>
    /// Instruction FRINTX - Floating-point round to integral exact, using current rounding mode (scalar).
    /// </summary>
    FRINTX_d_floatdp1,
    /// <summary>
    /// Instruction FRINTX - Floating-point round to integral exact, using current rounding mode (scalar).
    /// </summary>
    FRINTX_h_floatdp1,
    /// <summary>
    /// Instruction FRINTX - Floating-point round to integral exact, using current rounding mode (scalar).
    /// </summary>
    FRINTX_s_floatdp1,
    /// <summary>
    /// Instruction FRINTX - Floating-point round to integral value (predicated).
    /// </summary>
    FRINTX_z_p_z_m,
    /// <summary>
    /// Instruction FRINTX - Floating-point round to integral value (predicated).
    /// </summary>
    FRINTX_z_p_z_z,
    /// <summary>
    /// Instruction FRINTZ - Floating-point round to integral, toward zero (vector).
    /// </summary>
    FRINTZ_asimdmisc_r,
    /// <summary>
    /// Instruction FRINTZ - Floating-point round to integral, toward zero (vector).
    /// </summary>
    FRINTZ_asimdmiscfp16_r,
    /// <summary>
    /// Instruction FRINTZ - Floating-point round to integral, toward zero (scalar).
    /// </summary>
    FRINTZ_d_floatdp1,
    /// <summary>
    /// Instruction FRINTZ - Floating-point round to integral, toward zero (scalar).
    /// </summary>
    FRINTZ_h_floatdp1,
    /// <summary>
    /// Instruction FRINTZ - Floating-point round to integral, toward zero (scalar).
    /// </summary>
    FRINTZ_s_floatdp1,
    /// <summary>
    /// Instruction FRINTZ - Floating-point round to integral value (predicated).
    /// </summary>
    FRINTZ_z_p_z_m,
    /// <summary>
    /// Instruction FRINTZ - Floating-point round to integral value (predicated).
    /// </summary>
    FRINTZ_z_p_z_z,
    /// <summary>
    /// Instruction FRSQRTE - Floating-point reciprocal square root estimate.
    /// </summary>
    FRSQRTE_asimdmisc_r,
    /// <summary>
    /// Instruction FRSQRTE - Floating-point reciprocal square root estimate.
    /// </summary>
    FRSQRTE_asimdmiscfp16_r,
    /// <summary>
    /// Instruction FRSQRTE - Floating-point reciprocal square root estimate.
    /// </summary>
    FRSQRTE_asisdmisc_r,
    /// <summary>
    /// Instruction FRSQRTE - Floating-point reciprocal square root estimate.
    /// </summary>
    FRSQRTE_asisdmiscfp16_r,
    /// <summary>
    /// Instruction FRSQRTE - Floating-point reciprocal square root estimate (unpredicated).
    /// </summary>
    FRSQRTE_z_z,
    /// <summary>
    /// Instruction FRSQRTS - Floating-point reciprocal square root step.
    /// </summary>
    FRSQRTS_asimdsame_only,
    /// <summary>
    /// Instruction FRSQRTS - Floating-point reciprocal square root step.
    /// </summary>
    FRSQRTS_asimdsamefp16_only,
    /// <summary>
    /// Instruction FRSQRTS - Floating-point reciprocal square root step.
    /// </summary>
    FRSQRTS_asisdsame_only,
    /// <summary>
    /// Instruction FRSQRTS - Floating-point reciprocal square root step.
    /// </summary>
    FRSQRTS_asisdsamefp16_only,
    /// <summary>
    /// Instruction FRSQRTS - Floating-point reciprocal square root step (unpredicated).
    /// </summary>
    FRSQRTS_z_zz,
    /// <summary>
    /// Instruction FSCALE - Floating-point adjust exponent by vector.
    /// </summary>
    FSCALE_asimdsame_only,
    /// <summary>
    /// Instruction FSCALE - Floating-point adjust exponent by vector.
    /// </summary>
    FSCALE_asimdsamefp16_only,
    /// <summary>
    /// Instruction FSCALE - Multi-vector floating-point adjust exponent by vector.
    /// </summary>
    FSCALE_mz_zzv_2x1,
    /// <summary>
    /// Instruction FSCALE - Multi-vector floating-point adjust exponent by vector.
    /// </summary>
    FSCALE_mz_zzv_4x1,
    /// <summary>
    /// Instruction FSCALE - Multi-vector floating-point adjust exponent.
    /// </summary>
    FSCALE_mz_zzw_2x2,
    /// <summary>
    /// Instruction FSCALE - Multi-vector floating-point adjust exponent.
    /// </summary>
    FSCALE_mz_zzw_4x4,
    /// <summary>
    /// Instruction FSCALE - Floating-point adjust exponent by vector (predicated).
    /// </summary>
    FSCALE_z_p_zz,
    /// <summary>
    /// Instruction FSQRT - Floating-point square root (vector).
    /// </summary>
    FSQRT_asimdmisc_r,
    /// <summary>
    /// Instruction FSQRT - Floating-point square root (vector).
    /// </summary>
    FSQRT_asimdmiscfp16_r,
    /// <summary>
    /// Instruction FSQRT - Floating-point square root (scalar).
    /// </summary>
    FSQRT_d_floatdp1,
    /// <summary>
    /// Instruction FSQRT - Floating-point square root (scalar).
    /// </summary>
    FSQRT_h_floatdp1,
    /// <summary>
    /// Instruction FSQRT - Floating-point square root (scalar).
    /// </summary>
    FSQRT_s_floatdp1,
    /// <summary>
    /// Instruction FSQRT - Floating-point square root (predicated).
    /// </summary>
    FSQRT_z_p_z_m,
    /// <summary>
    /// Instruction FSQRT - Floating-point square root (predicated).
    /// </summary>
    FSQRT_z_p_z_z,
    /// <summary>
    /// Instruction FSUBR - Floating-point reversed subtract from immediate (predicated).
    /// </summary>
    FSUBR_z_p_zs,
    /// <summary>
    /// Instruction FSUBR - Floating-point reversed subtract vectors (predicated).
    /// </summary>
    FSUBR_z_p_zz,
    /// <summary>
    /// Instruction FSUB - Floating-point subtract (vector).
    /// </summary>
    FSUB_asimdsame_only,
    /// <summary>
    /// Instruction FSUB - Floating-point subtract (vector).
    /// </summary>
    FSUB_asimdsamefp16_only,
    /// <summary>
    /// Instruction FSUB - Floating-point subtract (scalar).
    /// </summary>
    FSUB_d_floatdp2,
    /// <summary>
    /// Instruction FSUB - Floating-point subtract (scalar).
    /// </summary>
    FSUB_h_floatdp2,
    /// <summary>
    /// Instruction FSUB - Floating-point subtract (scalar).
    /// </summary>
    FSUB_s_floatdp2,
    /// <summary>
    /// Instruction FSUB - Floating-point subtract immediate (predicated).
    /// </summary>
    FSUB_z_p_zs,
    /// <summary>
    /// Instruction FSUB - Floating-point subtract vectors (predicated).
    /// </summary>
    FSUB_z_p_zz,
    /// <summary>
    /// Instruction FSUB - Floating-point subtract vectors (unpredicated).
    /// </summary>
    FSUB_z_zz,
    /// <summary>
    /// Instruction FSUB - Floating-point subtract multi-vector from ZA array vector accumulators.
    /// </summary>
    FSUB_za_zw_2x2,
    /// <summary>
    /// Instruction FSUB - Floating-point subtract multi-vector from ZA array vector accumulators.
    /// </summary>
    FSUB_za_zw_2x2_16,
    /// <summary>
    /// Instruction FSUB - Floating-point subtract multi-vector from ZA array vector accumulators.
    /// </summary>
    FSUB_za_zw_4x4,
    /// <summary>
    /// Instruction FSUB - Floating-point subtract multi-vector from ZA array vector accumulators.
    /// </summary>
    FSUB_za_zw_4x4_16,
    /// <summary>
    /// Instruction FTMAD - Floating-point trigonometric multiply-add coefficient.
    /// </summary>
    FTMAD_z_zzi,
    /// <summary>
    /// Instruction FTMOPA - 8-bit floating-point sparse sum of two outer products, accumulating.
    /// </summary>
    FTMOPA_za16_z8z8zi_b2x1,
    /// <summary>
    /// Instruction FTMOPA - 8-bit floating-point sparse sum of four outer products, accumulating.
    /// </summary>
    FTMOPA_za32_z8z8zi_b2x1,
    /// <summary>
    /// Instruction FTMOPA - Half-precision sparse sum of two outer products, accumulating.
    /// </summary>
    FTMOPA_za32_zzzi_h2x1,
    /// <summary>
    /// Instruction FTMOPA - Floating-point sparse outer product, accumulating.
    /// </summary>
    FTMOPA_za_zzzi_h2x1,
    /// <summary>
    /// Instruction FTMOPA - Floating-point sparse outer product, accumulating.
    /// </summary>
    FTMOPA_za_zzzi_s2x1,
    /// <summary>
    /// Instruction FTSMUL - Floating-point trigonometric starting value.
    /// </summary>
    FTSMUL_z_zz,
    /// <summary>
    /// Instruction FTSSEL - Floating-point trigonometric select coefficient.
    /// </summary>
    FTSSEL_z_zz,
    /// <summary>
    /// Instruction FVDOTB - Multi-vector 8-bit floating-point vertical dot-product by indexed element to single-precision (bottom).
    /// </summary>
    FVDOTB_za32_z8z8i_2xi,
    /// <summary>
    /// Instruction FVDOTT - Multi-vector 8-bit floating-point vertical dot-product by indexed element to single-precision (top).
    /// </summary>
    FVDOTT_za32_z8z8i_2xi,
    /// <summary>
    /// Instruction FVDOT - Multi-vector 8-bit floating-point vertical dot-product by indexed element to half-precision.
    /// </summary>
    FVDOT_za_z8z8i_2xi,
    /// <summary>
    /// Instruction FVDOT - Multi-vector half-precision floating-point vertical dot-product by indexed element.
    /// </summary>
    FVDOT_za_zzi_2xi,
    /// <summary>
    /// Instruction GCSB - Guarded Control Stack barrier.
    /// </summary>
    GCSB_hd_hints,
    /// <summary>
    /// Instruction GCSSTR - Guarded Control Stack store register.
    /// </summary>
    GCSSTR_64_ldst_gcs,
    /// <summary>
    /// Instruction GCSSTTR - Guarded Control Stack store register (unprivileged).
    /// </summary>
    GCSSTTR_64_ldst_gcs,
    /// <summary>
    /// Instruction GMI - Tag mask insert.
    /// </summary>
    GMI_64g_dp_2src,
    /// <summary>
    /// Instruction HINT - Hint instruction.
    /// </summary>
    HINT_hm_hints,
    /// <summary>
    /// Instruction HISTCNT - Count matching elements in vector.
    /// </summary>
    HISTCNT_z_p_zz,
    /// <summary>
    /// Instruction HISTSEG - Count matching elements in vector segments.
    /// </summary>
    HISTSEG_z_zz,
    /// <summary>
    /// Instruction HLT - Halt instruction.
    /// </summary>
    HLT_ex_exception,
    /// <summary>
    /// Instruction HVC - Hypervisor call.
    /// </summary>
    HVC_ex_exception,
    /// <summary>
    /// Instruction INCB - Increment scalar by multiple of predicate constraint element count.
    /// </summary>
    INCB_r_rs,
    /// <summary>
    /// Instruction INCD - Increment scalar by multiple of predicate constraint element count.
    /// </summary>
    INCD_r_rs,
    /// <summary>
    /// Instruction INCD - Increment vector by multiple of predicate constraint element count.
    /// </summary>
    INCD_z_zs,
    /// <summary>
    /// Instruction INCH - Increment scalar by multiple of predicate constraint element count.
    /// </summary>
    INCH_r_rs,
    /// <summary>
    /// Instruction INCH - Increment vector by multiple of predicate constraint element count.
    /// </summary>
    INCH_z_zs,
    /// <summary>
    /// Instruction INCP - Increment scalar by count of true predicate elements.
    /// </summary>
    INCP_r_p_r,
    /// <summary>
    /// Instruction INCP - Increment vector by count of true predicate elements.
    /// </summary>
    INCP_z_p_z,
    /// <summary>
    /// Instruction INCW - Increment scalar by multiple of predicate constraint element count.
    /// </summary>
    INCW_r_rs,
    /// <summary>
    /// Instruction INCW - Increment vector by multiple of predicate constraint element count.
    /// </summary>
    INCW_z_zs,
    /// <summary>
    /// Instruction INDEX - Create index starting from and incremented by immediate.
    /// </summary>
    INDEX_z_ii,
    /// <summary>
    /// Instruction INDEX - Create index starting from immediate and incremented by general-purpose register.
    /// </summary>
    INDEX_z_ir,
    /// <summary>
    /// Instruction INDEX - Create index starting from general-purpose register and incremented by immediate.
    /// </summary>
    INDEX_z_ri,
    /// <summary>
    /// Instruction INDEX - Create index starting from and incremented by general-purpose register.
    /// </summary>
    INDEX_z_rr,
    /// <summary>
    /// Instruction INSR - Insert general-purpose register in shifted vector.
    /// </summary>
    INSR_z_r,
    /// <summary>
    /// Instruction INSR - Insert SIMD&FP scalar register in shifted vector.
    /// </summary>
    INSR_z_v,
    /// <summary>
    /// Instruction INS - Insert vector element from general-purpose register.
    /// </summary>
    INS_asimdins_ir_r,
    /// <summary>
    /// Instruction INS - Insert vector element from another vector element.
    /// </summary>
    INS_asimdins_iv_v,
    /// <summary>
    /// Instruction IRG - Insert random tag.
    /// </summary>
    IRG_64i_dp_2src,
    /// <summary>
    /// Instruction ISB - Instruction synchronization barrier.
    /// </summary>
    ISB_bi_barriers,
    /// <summary>
    /// Instruction LASTA - Extract element after last to general-purpose register.
    /// </summary>
    LASTA_r_p_z,
    /// <summary>
    /// Instruction LASTA - Extract element after last to SIMD&FP scalar register.
    /// </summary>
    LASTA_v_p_z,
    /// <summary>
    /// Instruction LASTB - Extract last element to general-purpose register.
    /// </summary>
    LASTB_r_p_z,
    /// <summary>
    /// Instruction LASTB - Extract last element to SIMD&FP scalar register.
    /// </summary>
    LASTB_v_p_z,
    /// <summary>
    /// Instruction LASTP - Scalar index of last true predicate element (predicated).
    /// </summary>
    LASTP_r_p_p,
    /// <summary>
    /// Instruction LD1B - Contiguous load of bytes to multiple consecutive vectors (immediate index).
    /// </summary>
    LD1B_mz_p_bi_2,
    /// <summary>
    /// Instruction LD1B - Contiguous load of bytes to multiple consecutive vectors (immediate index).
    /// </summary>
    LD1B_mz_p_bi_4,
    /// <summary>
    /// Instruction LD1B - Contiguous load of bytes to multiple consecutive vectors (scalar index).
    /// </summary>
    LD1B_mz_p_br_2,
    /// <summary>
    /// Instruction LD1B - Contiguous load of bytes to multiple consecutive vectors (scalar index).
    /// </summary>
    LD1B_mz_p_br_4,
    /// <summary>
    /// Instruction LD1B - Contiguous load of bytes to multiple strided vectors (immediate index).
    /// </summary>
    LD1B_mzx_p_bi_2x8,
    /// <summary>
    /// Instruction LD1B - Contiguous load of bytes to multiple strided vectors (immediate index).
    /// </summary>
    LD1B_mzx_p_bi_4x4,
    /// <summary>
    /// Instruction LD1B - Contiguous load of bytes to multiple strided vectors (scalar index).
    /// </summary>
    LD1B_mzx_p_br_2x8,
    /// <summary>
    /// Instruction LD1B - Contiguous load of bytes to multiple strided vectors (scalar index).
    /// </summary>
    LD1B_mzx_p_br_4x4,
    /// <summary>
    /// Instruction LD1B - Gather load unsigned bytes to vector (immediate index).
    /// </summary>
    LD1B_z_p_ai_d,
    /// <summary>
    /// Instruction LD1B - Gather load unsigned bytes to vector (immediate index).
    /// </summary>
    LD1B_z_p_ai_s,
    /// <summary>
    /// Instruction LD1B - Contiguous load unsigned bytes to vector (immediate index).
    /// </summary>
    LD1B_z_p_bi_u16,
    /// <summary>
    /// Instruction LD1B - Contiguous load unsigned bytes to vector (immediate index).
    /// </summary>
    LD1B_z_p_bi_u32,
    /// <summary>
    /// Instruction LD1B - Contiguous load unsigned bytes to vector (immediate index).
    /// </summary>
    LD1B_z_p_bi_u64,
    /// <summary>
    /// Instruction LD1B - Contiguous load unsigned bytes to vector (immediate index).
    /// </summary>
    LD1B_z_p_bi_u8,
    /// <summary>
    /// Instruction LD1B - Contiguous load unsigned bytes to vector (scalar index).
    /// </summary>
    LD1B_z_p_br_u16,
    /// <summary>
    /// Instruction LD1B - Contiguous load unsigned bytes to vector (scalar index).
    /// </summary>
    LD1B_z_p_br_u32,
    /// <summary>
    /// Instruction LD1B - Contiguous load unsigned bytes to vector (scalar index).
    /// </summary>
    LD1B_z_p_br_u64,
    /// <summary>
    /// Instruction LD1B - Contiguous load unsigned bytes to vector (scalar index).
    /// </summary>
    LD1B_z_p_br_u8,
    /// <summary>
    /// Instruction LD1B - Gather load unsigned bytes to vector (vector index).
    /// </summary>
    LD1B_z_p_bz_d_64_unscaled,
    /// <summary>
    /// Instruction LD1B - Gather load unsigned bytes to vector (vector index).
    /// </summary>
    LD1B_z_p_bz_d_x32_unscaled,
    /// <summary>
    /// Instruction LD1B - Gather load unsigned bytes to vector (vector index).
    /// </summary>
    LD1B_z_p_bz_s_x32_unscaled,
    /// <summary>
    /// Instruction LD1B - Contiguous load of bytes to 8-bit element ZA tile slice.
    /// </summary>
    LD1B_za_p_rrr,
    /// <summary>
    /// Instruction LD1D - Contiguous load of doublewords to multiple consecutive vectors (immediate index).
    /// </summary>
    LD1D_mz_p_bi_2,
    /// <summary>
    /// Instruction LD1D - Contiguous load of doublewords to multiple consecutive vectors (immediate index).
    /// </summary>
    LD1D_mz_p_bi_4,
    /// <summary>
    /// Instruction LD1D - Contiguous load of doublewords to multiple consecutive vectors (scalar index).
    /// </summary>
    LD1D_mz_p_br_2,
    /// <summary>
    /// Instruction LD1D - Contiguous load of doublewords to multiple consecutive vectors (scalar index).
    /// </summary>
    LD1D_mz_p_br_4,
    /// <summary>
    /// Instruction LD1D - Contiguous load of doublewords to multiple strided vectors (immediate index).
    /// </summary>
    LD1D_mzx_p_bi_2x8,
    /// <summary>
    /// Instruction LD1D - Contiguous load of doublewords to multiple strided vectors (immediate index).
    /// </summary>
    LD1D_mzx_p_bi_4x4,
    /// <summary>
    /// Instruction LD1D - Contiguous load of doublewords to multiple strided vectors (scalar index).
    /// </summary>
    LD1D_mzx_p_br_2x8,
    /// <summary>
    /// Instruction LD1D - Contiguous load of doublewords to multiple strided vectors (scalar index).
    /// </summary>
    LD1D_mzx_p_br_4x4,
    /// <summary>
    /// Instruction LD1D - Gather load doublewords to vector (immediate index).
    /// </summary>
    LD1D_z_p_ai_d,
    /// <summary>
    /// Instruction LD1D - Contiguous load unsigned doublewords to vector (immediate index).
    /// </summary>
    LD1D_z_p_bi_u128,
    /// <summary>
    /// Instruction LD1D - Contiguous load unsigned doublewords to vector (immediate index).
    /// </summary>
    LD1D_z_p_bi_u64,
    /// <summary>
    /// Instruction LD1D - Contiguous load unsigned doublewords to vector (scalar index).
    /// </summary>
    LD1D_z_p_br_u128,
    /// <summary>
    /// Instruction LD1D - Contiguous load unsigned doublewords to vector (scalar index).
    /// </summary>
    LD1D_z_p_br_u64,
    /// <summary>
    /// Instruction LD1D - Gather load doublewords to vector (vector index).
    /// </summary>
    LD1D_z_p_bz_d_64_scaled,
    /// <summary>
    /// Instruction LD1D - Gather load doublewords to vector (vector index).
    /// </summary>
    LD1D_z_p_bz_d_64_unscaled,
    /// <summary>
    /// Instruction LD1D - Gather load doublewords to vector (vector index).
    /// </summary>
    LD1D_z_p_bz_d_x32_scaled,
    /// <summary>
    /// Instruction LD1D - Gather load doublewords to vector (vector index).
    /// </summary>
    LD1D_z_p_bz_d_x32_unscaled,
    /// <summary>
    /// Instruction LD1D - Contiguous load of doublewords to 64-bit element ZA tile slice.
    /// </summary>
    LD1D_za_p_rrr,
    /// <summary>
    /// Instruction LD1H - Contiguous load of halfwords to multiple consecutive vectors (immediate index).
    /// </summary>
    LD1H_mz_p_bi_2,
    /// <summary>
    /// Instruction LD1H - Contiguous load of halfwords to multiple consecutive vectors (immediate index).
    /// </summary>
    LD1H_mz_p_bi_4,
    /// <summary>
    /// Instruction LD1H - Contiguous load of halfwords to multiple consecutive vectors (scalar index).
    /// </summary>
    LD1H_mz_p_br_2,
    /// <summary>
    /// Instruction LD1H - Contiguous load of halfwords to multiple consecutive vectors (scalar index).
    /// </summary>
    LD1H_mz_p_br_4,
    /// <summary>
    /// Instruction LD1H - Contiguous load of halfwords to multiple strided vectors (immediate index).
    /// </summary>
    LD1H_mzx_p_bi_2x8,
    /// <summary>
    /// Instruction LD1H - Contiguous load of halfwords to multiple strided vectors (immediate index).
    /// </summary>
    LD1H_mzx_p_bi_4x4,
    /// <summary>
    /// Instruction LD1H - Contiguous load of halfwords to multiple strided vectors (scalar index).
    /// </summary>
    LD1H_mzx_p_br_2x8,
    /// <summary>
    /// Instruction LD1H - Contiguous load of halfwords to multiple strided vectors (scalar index).
    /// </summary>
    LD1H_mzx_p_br_4x4,
    /// <summary>
    /// Instruction LD1H - Gather load unsigned halfwords to vector (immediate index).
    /// </summary>
    LD1H_z_p_ai_d,
    /// <summary>
    /// Instruction LD1H - Gather load unsigned halfwords to vector (immediate index).
    /// </summary>
    LD1H_z_p_ai_s,
    /// <summary>
    /// Instruction LD1H - Contiguous load unsigned halfwords to vector (immediate index).
    /// </summary>
    LD1H_z_p_bi_u16,
    /// <summary>
    /// Instruction LD1H - Contiguous load unsigned halfwords to vector (immediate index).
    /// </summary>
    LD1H_z_p_bi_u32,
    /// <summary>
    /// Instruction LD1H - Contiguous load unsigned halfwords to vector (immediate index).
    /// </summary>
    LD1H_z_p_bi_u64,
    /// <summary>
    /// Instruction LD1H - Contiguous load unsigned halfwords to vector (scalar index).
    /// </summary>
    LD1H_z_p_br_u16,
    /// <summary>
    /// Instruction LD1H - Contiguous load unsigned halfwords to vector (scalar index).
    /// </summary>
    LD1H_z_p_br_u32,
    /// <summary>
    /// Instruction LD1H - Contiguous load unsigned halfwords to vector (scalar index).
    /// </summary>
    LD1H_z_p_br_u64,
    /// <summary>
    /// Instruction LD1H - Gather load unsigned halfwords to vector (vector index).
    /// </summary>
    LD1H_z_p_bz_d_64_scaled,
    /// <summary>
    /// Instruction LD1H - Gather load unsigned halfwords to vector (vector index).
    /// </summary>
    LD1H_z_p_bz_d_64_unscaled,
    /// <summary>
    /// Instruction LD1H - Gather load unsigned halfwords to vector (vector index).
    /// </summary>
    LD1H_z_p_bz_d_x32_scaled,
    /// <summary>
    /// Instruction LD1H - Gather load unsigned halfwords to vector (vector index).
    /// </summary>
    LD1H_z_p_bz_d_x32_unscaled,
    /// <summary>
    /// Instruction LD1H - Gather load unsigned halfwords to vector (vector index).
    /// </summary>
    LD1H_z_p_bz_s_x32_scaled,
    /// <summary>
    /// Instruction LD1H - Gather load unsigned halfwords to vector (vector index).
    /// </summary>
    LD1H_z_p_bz_s_x32_unscaled,
    /// <summary>
    /// Instruction LD1H - Contiguous load of halfwords to 16-bit element ZA tile slice.
    /// </summary>
    LD1H_za_p_rrr,
    /// <summary>
    /// Instruction LD1Q - Gather load quadwords.
    /// </summary>
    LD1Q_z_p_ar_d_64_unscaled,
    /// <summary>
    /// Instruction LD1Q - Contiguous load of quadwords to 128-bit element ZA tile slice.
    /// </summary>
    LD1Q_za_p_rrr,
    /// <summary>
    /// Instruction LD1RB - Load and broadcast unsigned byte to vector.
    /// </summary>
    LD1RB_z_p_bi_u16,
    /// <summary>
    /// Instruction LD1RB - Load and broadcast unsigned byte to vector.
    /// </summary>
    LD1RB_z_p_bi_u32,
    /// <summary>
    /// Instruction LD1RB - Load and broadcast unsigned byte to vector.
    /// </summary>
    LD1RB_z_p_bi_u64,
    /// <summary>
    /// Instruction LD1RB - Load and broadcast unsigned byte to vector.
    /// </summary>
    LD1RB_z_p_bi_u8,
    /// <summary>
    /// Instruction LD1RD - Load and broadcast doubleword to vector.
    /// </summary>
    LD1RD_z_p_bi_u64,
    /// <summary>
    /// Instruction LD1RH - Load and broadcast unsigned halfword to vector.
    /// </summary>
    LD1RH_z_p_bi_u16,
    /// <summary>
    /// Instruction LD1RH - Load and broadcast unsigned halfword to vector.
    /// </summary>
    LD1RH_z_p_bi_u32,
    /// <summary>
    /// Instruction LD1RH - Load and broadcast unsigned halfword to vector.
    /// </summary>
    LD1RH_z_p_bi_u64,
    /// <summary>
    /// Instruction LD1ROB - Contiguous load and replicate thirty-two bytes (immediate index).
    /// </summary>
    LD1ROB_z_p_bi_u8,
    /// <summary>
    /// Instruction LD1ROB - Contiguous load and replicate thirty-two bytes (scalar index).
    /// </summary>
    LD1ROB_z_p_br_contiguous,
    /// <summary>
    /// Instruction LD1ROD - Contiguous load and replicate four doublewords (immediate index).
    /// </summary>
    LD1ROD_z_p_bi_u64,
    /// <summary>
    /// Instruction LD1ROD - Contiguous load and replicate four doublewords (scalar index).
    /// </summary>
    LD1ROD_z_p_br_contiguous,
    /// <summary>
    /// Instruction LD1ROH - Contiguous load and replicate sixteen halfwords (immediate index).
    /// </summary>
    LD1ROH_z_p_bi_u16,
    /// <summary>
    /// Instruction LD1ROH - Contiguous load and replicate sixteen halfwords (scalar index).
    /// </summary>
    LD1ROH_z_p_br_contiguous,
    /// <summary>
    /// Instruction LD1ROW - Contiguous load and replicate eight words (immediate index).
    /// </summary>
    LD1ROW_z_p_bi_u32,
    /// <summary>
    /// Instruction LD1ROW - Contiguous load and replicate eight words (scalar index).
    /// </summary>
    LD1ROW_z_p_br_contiguous,
    /// <summary>
    /// Instruction LD1RQB - Contiguous load and replicate sixteen bytes (immediate index).
    /// </summary>
    LD1RQB_z_p_bi_u8,
    /// <summary>
    /// Instruction LD1RQB - Contiguous load and replicate sixteen bytes (scalar index).
    /// </summary>
    LD1RQB_z_p_br_contiguous,
    /// <summary>
    /// Instruction LD1RQD - Contiguous load and replicate two doublewords (immediate index).
    /// </summary>
    LD1RQD_z_p_bi_u64,
    /// <summary>
    /// Instruction LD1RQD - Contiguous load and replicate two doublewords (scalar index).
    /// </summary>
    LD1RQD_z_p_br_contiguous,
    /// <summary>
    /// Instruction LD1RQH - Contiguous load and replicate eight halfwords (immediate index).
    /// </summary>
    LD1RQH_z_p_bi_u16,
    /// <summary>
    /// Instruction LD1RQH - Contiguous load and replicate eight halfwords (scalar index).
    /// </summary>
    LD1RQH_z_p_br_contiguous,
    /// <summary>
    /// Instruction LD1RQW - Contiguous load and replicate four words (immediate index).
    /// </summary>
    LD1RQW_z_p_bi_u32,
    /// <summary>
    /// Instruction LD1RQW - Contiguous load and replicate four words (scalar index).
    /// </summary>
    LD1RQW_z_p_br_contiguous,
    /// <summary>
    /// Instruction LD1RSB - Load and broadcast signed byte to vector.
    /// </summary>
    LD1RSB_z_p_bi_s16,
    /// <summary>
    /// Instruction LD1RSB - Load and broadcast signed byte to vector.
    /// </summary>
    LD1RSB_z_p_bi_s32,
    /// <summary>
    /// Instruction LD1RSB - Load and broadcast signed byte to vector.
    /// </summary>
    LD1RSB_z_p_bi_s64,
    /// <summary>
    /// Instruction LD1RSH - Load and broadcast signed halfword to vector.
    /// </summary>
    LD1RSH_z_p_bi_s32,
    /// <summary>
    /// Instruction LD1RSH - Load and broadcast signed halfword to vector.
    /// </summary>
    LD1RSH_z_p_bi_s64,
    /// <summary>
    /// Instruction LD1RSW - Load and broadcast signed word to vector.
    /// </summary>
    LD1RSW_z_p_bi_s64,
    /// <summary>
    /// Instruction LD1RW - Load and broadcast unsigned word to vector.
    /// </summary>
    LD1RW_z_p_bi_u32,
    /// <summary>
    /// Instruction LD1RW - Load and broadcast unsigned word to vector.
    /// </summary>
    LD1RW_z_p_bi_u64,
    /// <summary>
    /// Instruction LD1R - Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    LD1R_asisdlso_r1,
    /// <summary>
    /// Instruction LD1R - Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    LD1R_asisdlsop_r1_i,
    /// <summary>
    /// Instruction LD1R - Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    LD1R_asisdlsop_rx1_r,
    /// <summary>
    /// Instruction LD1SB - Gather load signed bytes to vector (immediate index).
    /// </summary>
    LD1SB_z_p_ai_d,
    /// <summary>
    /// Instruction LD1SB - Gather load signed bytes to vector (immediate index).
    /// </summary>
    LD1SB_z_p_ai_s,
    /// <summary>
    /// Instruction LD1SB - Contiguous load signed bytes to vector (immediate index).
    /// </summary>
    LD1SB_z_p_bi_s16,
    /// <summary>
    /// Instruction LD1SB - Contiguous load signed bytes to vector (immediate index).
    /// </summary>
    LD1SB_z_p_bi_s32,
    /// <summary>
    /// Instruction LD1SB - Contiguous load signed bytes to vector (immediate index).
    /// </summary>
    LD1SB_z_p_bi_s64,
    /// <summary>
    /// Instruction LD1SB - Contiguous load signed bytes to vector (scalar index).
    /// </summary>
    LD1SB_z_p_br_s16,
    /// <summary>
    /// Instruction LD1SB - Contiguous load signed bytes to vector (scalar index).
    /// </summary>
    LD1SB_z_p_br_s32,
    /// <summary>
    /// Instruction LD1SB - Contiguous load signed bytes to vector (scalar index).
    /// </summary>
    LD1SB_z_p_br_s64,
    /// <summary>
    /// Instruction LD1SB - Gather load signed bytes to vector (vector index).
    /// </summary>
    LD1SB_z_p_bz_d_64_unscaled,
    /// <summary>
    /// Instruction LD1SB - Gather load signed bytes to vector (vector index).
    /// </summary>
    LD1SB_z_p_bz_d_x32_unscaled,
    /// <summary>
    /// Instruction LD1SB - Gather load signed bytes to vector (vector index).
    /// </summary>
    LD1SB_z_p_bz_s_x32_unscaled,
    /// <summary>
    /// Instruction LD1SH - Gather load signed halfwords to vector (immediate index).
    /// </summary>
    LD1SH_z_p_ai_d,
    /// <summary>
    /// Instruction LD1SH - Gather load signed halfwords to vector (immediate index).
    /// </summary>
    LD1SH_z_p_ai_s,
    /// <summary>
    /// Instruction LD1SH - Contiguous load signed halfwords to vector (immediate index).
    /// </summary>
    LD1SH_z_p_bi_s32,
    /// <summary>
    /// Instruction LD1SH - Contiguous load signed halfwords to vector (immediate index).
    /// </summary>
    LD1SH_z_p_bi_s64,
    /// <summary>
    /// Instruction LD1SH - Contiguous load signed halfwords to vector (scalar index).
    /// </summary>
    LD1SH_z_p_br_s32,
    /// <summary>
    /// Instruction LD1SH - Contiguous load signed halfwords to vector (scalar index).
    /// </summary>
    LD1SH_z_p_br_s64,
    /// <summary>
    /// Instruction LD1SH - Gather load signed halfwords to vector (vector index).
    /// </summary>
    LD1SH_z_p_bz_d_64_scaled,
    /// <summary>
    /// Instruction LD1SH - Gather load signed halfwords to vector (vector index).
    /// </summary>
    LD1SH_z_p_bz_d_64_unscaled,
    /// <summary>
    /// Instruction LD1SH - Gather load signed halfwords to vector (vector index).
    /// </summary>
    LD1SH_z_p_bz_d_x32_scaled,
    /// <summary>
    /// Instruction LD1SH - Gather load signed halfwords to vector (vector index).
    /// </summary>
    LD1SH_z_p_bz_d_x32_unscaled,
    /// <summary>
    /// Instruction LD1SH - Gather load signed halfwords to vector (vector index).
    /// </summary>
    LD1SH_z_p_bz_s_x32_scaled,
    /// <summary>
    /// Instruction LD1SH - Gather load signed halfwords to vector (vector index).
    /// </summary>
    LD1SH_z_p_bz_s_x32_unscaled,
    /// <summary>
    /// Instruction LD1SW - Gather load signed words to vector (immediate index).
    /// </summary>
    LD1SW_z_p_ai_d,
    /// <summary>
    /// Instruction LD1SW - Contiguous load signed words to vector (immediate index).
    /// </summary>
    LD1SW_z_p_bi_s64,
    /// <summary>
    /// Instruction LD1SW - Contiguous load signed words to vector (scalar index).
    /// </summary>
    LD1SW_z_p_br_s64,
    /// <summary>
    /// Instruction LD1SW - Gather load signed words to vector (vector index).
    /// </summary>
    LD1SW_z_p_bz_d_64_scaled,
    /// <summary>
    /// Instruction LD1SW - Gather load signed words to vector (vector index).
    /// </summary>
    LD1SW_z_p_bz_d_64_unscaled,
    /// <summary>
    /// Instruction LD1SW - Gather load signed words to vector (vector index).
    /// </summary>
    LD1SW_z_p_bz_d_x32_scaled,
    /// <summary>
    /// Instruction LD1SW - Gather load signed words to vector (vector index).
    /// </summary>
    LD1SW_z_p_bz_d_x32_unscaled,
    /// <summary>
    /// Instruction LD1W - Contiguous load of words to multiple consecutive vectors (immediate index).
    /// </summary>
    LD1W_mz_p_bi_2,
    /// <summary>
    /// Instruction LD1W - Contiguous load of words to multiple consecutive vectors (immediate index).
    /// </summary>
    LD1W_mz_p_bi_4,
    /// <summary>
    /// Instruction LD1W - Contiguous load of words to multiple consecutive vectors (scalar index).
    /// </summary>
    LD1W_mz_p_br_2,
    /// <summary>
    /// Instruction LD1W - Contiguous load of words to multiple consecutive vectors (scalar index).
    /// </summary>
    LD1W_mz_p_br_4,
    /// <summary>
    /// Instruction LD1W - Contiguous load of words to multiple strided vectors (immediate index).
    /// </summary>
    LD1W_mzx_p_bi_2x8,
    /// <summary>
    /// Instruction LD1W - Contiguous load of words to multiple strided vectors (immediate index).
    /// </summary>
    LD1W_mzx_p_bi_4x4,
    /// <summary>
    /// Instruction LD1W - Contiguous load of words to multiple strided vectors (scalar index).
    /// </summary>
    LD1W_mzx_p_br_2x8,
    /// <summary>
    /// Instruction LD1W - Contiguous load of words to multiple strided vectors (scalar index).
    /// </summary>
    LD1W_mzx_p_br_4x4,
    /// <summary>
    /// Instruction LD1W - Gather load unsigned words to vector (immediate index).
    /// </summary>
    LD1W_z_p_ai_d,
    /// <summary>
    /// Instruction LD1W - Gather load unsigned words to vector (immediate index).
    /// </summary>
    LD1W_z_p_ai_s,
    /// <summary>
    /// Instruction LD1W - Contiguous load unsigned words to vector (immediate index).
    /// </summary>
    LD1W_z_p_bi_u128,
    /// <summary>
    /// Instruction LD1W - Contiguous load unsigned words to vector (immediate index).
    /// </summary>
    LD1W_z_p_bi_u32,
    /// <summary>
    /// Instruction LD1W - Contiguous load unsigned words to vector (immediate index).
    /// </summary>
    LD1W_z_p_bi_u64,
    /// <summary>
    /// Instruction LD1W - Contiguous load unsigned words to vector (scalar index).
    /// </summary>
    LD1W_z_p_br_u128,
    /// <summary>
    /// Instruction LD1W - Contiguous load unsigned words to vector (scalar index).
    /// </summary>
    LD1W_z_p_br_u32,
    /// <summary>
    /// Instruction LD1W - Contiguous load unsigned words to vector (scalar index).
    /// </summary>
    LD1W_z_p_br_u64,
    /// <summary>
    /// Instruction LD1W - Gather load unsigned words to vector (vector index).
    /// </summary>
    LD1W_z_p_bz_d_64_scaled,
    /// <summary>
    /// Instruction LD1W - Gather load unsigned words to vector (vector index).
    /// </summary>
    LD1W_z_p_bz_d_64_unscaled,
    /// <summary>
    /// Instruction LD1W - Gather load unsigned words to vector (vector index).
    /// </summary>
    LD1W_z_p_bz_d_x32_scaled,
    /// <summary>
    /// Instruction LD1W - Gather load unsigned words to vector (vector index).
    /// </summary>
    LD1W_z_p_bz_d_x32_unscaled,
    /// <summary>
    /// Instruction LD1W - Gather load unsigned words to vector (vector index).
    /// </summary>
    LD1W_z_p_bz_s_x32_scaled,
    /// <summary>
    /// Instruction LD1W - Gather load unsigned words to vector (vector index).
    /// </summary>
    LD1W_z_p_bz_s_x32_unscaled,
    /// <summary>
    /// Instruction LD1W - Contiguous load of words to 32-bit element ZA tile slice.
    /// </summary>
    LD1W_za_p_rrr,
    /// <summary>
    /// Instruction LD1 - Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    LD1_asisdlse_r1_1v,
    /// <summary>
    /// Instruction LD1 - Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    LD1_asisdlse_r2_2v,
    /// <summary>
    /// Instruction LD1 - Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    LD1_asisdlse_r3_3v,
    /// <summary>
    /// Instruction LD1 - Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    LD1_asisdlse_r4_4v,
    /// <summary>
    /// Instruction LD1 - Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    LD1_asisdlsep_i1_i1,
    /// <summary>
    /// Instruction LD1 - Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    LD1_asisdlsep_i2_i2,
    /// <summary>
    /// Instruction LD1 - Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    LD1_asisdlsep_i3_i3,
    /// <summary>
    /// Instruction LD1 - Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    LD1_asisdlsep_i4_i4,
    /// <summary>
    /// Instruction LD1 - Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    LD1_asisdlsep_r1_r1,
    /// <summary>
    /// Instruction LD1 - Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    LD1_asisdlsep_r2_r2,
    /// <summary>
    /// Instruction LD1 - Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    LD1_asisdlsep_r3_r3,
    /// <summary>
    /// Instruction LD1 - Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    LD1_asisdlsep_r4_r4,
    /// <summary>
    /// Instruction LD1 - Load one single-element structure to one lane of one register.
    /// </summary>
    LD1_asisdlso_b1_1b,
    /// <summary>
    /// Instruction LD1 - Load one single-element structure to one lane of one register.
    /// </summary>
    LD1_asisdlso_d1_1d,
    /// <summary>
    /// Instruction LD1 - Load one single-element structure to one lane of one register.
    /// </summary>
    LD1_asisdlso_h1_1h,
    /// <summary>
    /// Instruction LD1 - Load one single-element structure to one lane of one register.
    /// </summary>
    LD1_asisdlso_s1_1s,
    /// <summary>
    /// Instruction LD1 - Load one single-element structure to one lane of one register.
    /// </summary>
    LD1_asisdlsop_b1_i1b,
    /// <summary>
    /// Instruction LD1 - Load one single-element structure to one lane of one register.
    /// </summary>
    LD1_asisdlsop_bx1_r1b,
    /// <summary>
    /// Instruction LD1 - Load one single-element structure to one lane of one register.
    /// </summary>
    LD1_asisdlsop_d1_i1d,
    /// <summary>
    /// Instruction LD1 - Load one single-element structure to one lane of one register.
    /// </summary>
    LD1_asisdlsop_dx1_r1d,
    /// <summary>
    /// Instruction LD1 - Load one single-element structure to one lane of one register.
    /// </summary>
    LD1_asisdlsop_h1_i1h,
    /// <summary>
    /// Instruction LD1 - Load one single-element structure to one lane of one register.
    /// </summary>
    LD1_asisdlsop_hx1_r1h,
    /// <summary>
    /// Instruction LD1 - Load one single-element structure to one lane of one register.
    /// </summary>
    LD1_asisdlsop_s1_i1s,
    /// <summary>
    /// Instruction LD1 - Load one single-element structure to one lane of one register.
    /// </summary>
    LD1_asisdlsop_sx1_r1s,
    /// <summary>
    /// Instruction LD2B - Contiguous load two-byte structures to two vectors (immediate index).
    /// </summary>
    LD2B_z_p_bi_contiguous,
    /// <summary>
    /// Instruction LD2B - Contiguous load two-byte structures to two vectors (scalar index).
    /// </summary>
    LD2B_z_p_br_contiguous,
    /// <summary>
    /// Instruction LD2D - Contiguous load two-doubleword structures to two vectors (immediate index).
    /// </summary>
    LD2D_z_p_bi_contiguous,
    /// <summary>
    /// Instruction LD2D - Contiguous load two-doubleword structures to two vectors (scalar index).
    /// </summary>
    LD2D_z_p_br_contiguous,
    /// <summary>
    /// Instruction LD2H - Contiguous load two-halfword structures to two vectors (immediate index).
    /// </summary>
    LD2H_z_p_bi_contiguous,
    /// <summary>
    /// Instruction LD2H - Contiguous load two-halfword structures to two vectors (scalar index).
    /// </summary>
    LD2H_z_p_br_contiguous,
    /// <summary>
    /// Instruction LD2Q - Contiguous load two-quadword structures to two vectors (immediate index).
    /// </summary>
    LD2Q_z_p_bi_contiguous,
    /// <summary>
    /// Instruction LD2Q - Contiguous load two-quadword structures to two vectors (scalar index).
    /// </summary>
    LD2Q_z_p_br_contiguous,
    /// <summary>
    /// Instruction LD2R - Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    LD2R_asisdlso_r2,
    /// <summary>
    /// Instruction LD2R - Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    LD2R_asisdlsop_r2_i,
    /// <summary>
    /// Instruction LD2R - Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    LD2R_asisdlsop_rx2_r,
    /// <summary>
    /// Instruction LD2W - Contiguous load two-word structures to two vectors (immediate index).
    /// </summary>
    LD2W_z_p_bi_contiguous,
    /// <summary>
    /// Instruction LD2W - Contiguous load two-word structures to two vectors (scalar index).
    /// </summary>
    LD2W_z_p_br_contiguous,
    /// <summary>
    /// Instruction LD2 - Load multiple 2-element structures to two registers.
    /// </summary>
    LD2_asisdlse_r2,
    /// <summary>
    /// Instruction LD2 - Load multiple 2-element structures to two registers.
    /// </summary>
    LD2_asisdlsep_i2_i,
    /// <summary>
    /// Instruction LD2 - Load multiple 2-element structures to two registers.
    /// </summary>
    LD2_asisdlsep_r2_r,
    /// <summary>
    /// Instruction LD2 - Load single 2-element structure to one lane of two registers.
    /// </summary>
    LD2_asisdlso_b2_2b,
    /// <summary>
    /// Instruction LD2 - Load single 2-element structure to one lane of two registers.
    /// </summary>
    LD2_asisdlso_d2_2d,
    /// <summary>
    /// Instruction LD2 - Load single 2-element structure to one lane of two registers.
    /// </summary>
    LD2_asisdlso_h2_2h,
    /// <summary>
    /// Instruction LD2 - Load single 2-element structure to one lane of two registers.
    /// </summary>
    LD2_asisdlso_s2_2s,
    /// <summary>
    /// Instruction LD2 - Load single 2-element structure to one lane of two registers.
    /// </summary>
    LD2_asisdlsop_b2_i2b,
    /// <summary>
    /// Instruction LD2 - Load single 2-element structure to one lane of two registers.
    /// </summary>
    LD2_asisdlsop_bx2_r2b,
    /// <summary>
    /// Instruction LD2 - Load single 2-element structure to one lane of two registers.
    /// </summary>
    LD2_asisdlsop_d2_i2d,
    /// <summary>
    /// Instruction LD2 - Load single 2-element structure to one lane of two registers.
    /// </summary>
    LD2_asisdlsop_dx2_r2d,
    /// <summary>
    /// Instruction LD2 - Load single 2-element structure to one lane of two registers.
    /// </summary>
    LD2_asisdlsop_h2_i2h,
    /// <summary>
    /// Instruction LD2 - Load single 2-element structure to one lane of two registers.
    /// </summary>
    LD2_asisdlsop_hx2_r2h,
    /// <summary>
    /// Instruction LD2 - Load single 2-element structure to one lane of two registers.
    /// </summary>
    LD2_asisdlsop_s2_i2s,
    /// <summary>
    /// Instruction LD2 - Load single 2-element structure to one lane of two registers.
    /// </summary>
    LD2_asisdlsop_sx2_r2s,
    /// <summary>
    /// Instruction LD3B - Contiguous load three-byte structures to three vectors (immediate index).
    /// </summary>
    LD3B_z_p_bi_contiguous,
    /// <summary>
    /// Instruction LD3B - Contiguous load three-byte structures to three vectors (scalar index).
    /// </summary>
    LD3B_z_p_br_contiguous,
    /// <summary>
    /// Instruction LD3D - Contiguous load three-doubleword structures to three vectors (immediate index).
    /// </summary>
    LD3D_z_p_bi_contiguous,
    /// <summary>
    /// Instruction LD3D - Contiguous load three-doubleword structures to three vectors (scalar index).
    /// </summary>
    LD3D_z_p_br_contiguous,
    /// <summary>
    /// Instruction LD3H - Contiguous load three-halfword structures to three vectors (immediate index).
    /// </summary>
    LD3H_z_p_bi_contiguous,
    /// <summary>
    /// Instruction LD3H - Contiguous load three-halfword structures to three vectors (scalar index).
    /// </summary>
    LD3H_z_p_br_contiguous,
    /// <summary>
    /// Instruction LD3Q - Contiguous load three-quadword structures to three vectors (immediate index).
    /// </summary>
    LD3Q_z_p_bi_contiguous,
    /// <summary>
    /// Instruction LD3Q - Contiguous load three-quadword structures to three vectors (scalar index).
    /// </summary>
    LD3Q_z_p_br_contiguous,
    /// <summary>
    /// Instruction LD3R - Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    LD3R_asisdlso_r3,
    /// <summary>
    /// Instruction LD3R - Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    LD3R_asisdlsop_r3_i,
    /// <summary>
    /// Instruction LD3R - Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    LD3R_asisdlsop_rx3_r,
    /// <summary>
    /// Instruction LD3W - Contiguous load three-word structures to three vectors (immediate index).
    /// </summary>
    LD3W_z_p_bi_contiguous,
    /// <summary>
    /// Instruction LD3W - Contiguous load three-word structures to three vectors (scalar index).
    /// </summary>
    LD3W_z_p_br_contiguous,
    /// <summary>
    /// Instruction LD3 - Load multiple 3-element structures to three registers.
    /// </summary>
    LD3_asisdlse_r3,
    /// <summary>
    /// Instruction LD3 - Load multiple 3-element structures to three registers.
    /// </summary>
    LD3_asisdlsep_i3_i,
    /// <summary>
    /// Instruction LD3 - Load multiple 3-element structures to three registers.
    /// </summary>
    LD3_asisdlsep_r3_r,
    /// <summary>
    /// Instruction LD3 - Load single 3-element structure to one lane of three registers.
    /// </summary>
    LD3_asisdlso_b3_3b,
    /// <summary>
    /// Instruction LD3 - Load single 3-element structure to one lane of three registers.
    /// </summary>
    LD3_asisdlso_d3_3d,
    /// <summary>
    /// Instruction LD3 - Load single 3-element structure to one lane of three registers.
    /// </summary>
    LD3_asisdlso_h3_3h,
    /// <summary>
    /// Instruction LD3 - Load single 3-element structure to one lane of three registers.
    /// </summary>
    LD3_asisdlso_s3_3s,
    /// <summary>
    /// Instruction LD3 - Load single 3-element structure to one lane of three registers.
    /// </summary>
    LD3_asisdlsop_b3_i3b,
    /// <summary>
    /// Instruction LD3 - Load single 3-element structure to one lane of three registers.
    /// </summary>
    LD3_asisdlsop_bx3_r3b,
    /// <summary>
    /// Instruction LD3 - Load single 3-element structure to one lane of three registers.
    /// </summary>
    LD3_asisdlsop_d3_i3d,
    /// <summary>
    /// Instruction LD3 - Load single 3-element structure to one lane of three registers.
    /// </summary>
    LD3_asisdlsop_dx3_r3d,
    /// <summary>
    /// Instruction LD3 - Load single 3-element structure to one lane of three registers.
    /// </summary>
    LD3_asisdlsop_h3_i3h,
    /// <summary>
    /// Instruction LD3 - Load single 3-element structure to one lane of three registers.
    /// </summary>
    LD3_asisdlsop_hx3_r3h,
    /// <summary>
    /// Instruction LD3 - Load single 3-element structure to one lane of three registers.
    /// </summary>
    LD3_asisdlsop_s3_i3s,
    /// <summary>
    /// Instruction LD3 - Load single 3-element structure to one lane of three registers.
    /// </summary>
    LD3_asisdlsop_sx3_r3s,
    /// <summary>
    /// Instruction LD4B - Contiguous load four-byte structures to four vectors (immediate index).
    /// </summary>
    LD4B_z_p_bi_contiguous,
    /// <summary>
    /// Instruction LD4B - Contiguous load four-byte structures to four vectors (scalar index).
    /// </summary>
    LD4B_z_p_br_contiguous,
    /// <summary>
    /// Instruction LD4D - Contiguous load four-doubleword structures to four vectors (immediate index).
    /// </summary>
    LD4D_z_p_bi_contiguous,
    /// <summary>
    /// Instruction LD4D - Contiguous load four-doubleword structures to four vectors (scalar index).
    /// </summary>
    LD4D_z_p_br_contiguous,
    /// <summary>
    /// Instruction LD4H - Contiguous load four-halfword structures to four vectors (immediate index).
    /// </summary>
    LD4H_z_p_bi_contiguous,
    /// <summary>
    /// Instruction LD4H - Contiguous load four-halfword structures to four vectors (scalar index).
    /// </summary>
    LD4H_z_p_br_contiguous,
    /// <summary>
    /// Instruction LD4Q - Contiguous load four-quadword structures to four vectors (immediate index).
    /// </summary>
    LD4Q_z_p_bi_contiguous,
    /// <summary>
    /// Instruction LD4Q - Contiguous load four-quadword structures to four vectors (scalar index).
    /// </summary>
    LD4Q_z_p_br_contiguous,
    /// <summary>
    /// Instruction LD4R - Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    LD4R_asisdlso_r4,
    /// <summary>
    /// Instruction LD4R - Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    LD4R_asisdlsop_r4_i,
    /// <summary>
    /// Instruction LD4R - Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    LD4R_asisdlsop_rx4_r,
    /// <summary>
    /// Instruction LD4W - Contiguous load four-word structures to four vectors (immediate index).
    /// </summary>
    LD4W_z_p_bi_contiguous,
    /// <summary>
    /// Instruction LD4W - Contiguous load four-word structures to four vectors (scalar index).
    /// </summary>
    LD4W_z_p_br_contiguous,
    /// <summary>
    /// Instruction LD4 - Load multiple 4-element structures to four registers.
    /// </summary>
    LD4_asisdlse_r4,
    /// <summary>
    /// Instruction LD4 - Load multiple 4-element structures to four registers.
    /// </summary>
    LD4_asisdlsep_i4_i,
    /// <summary>
    /// Instruction LD4 - Load multiple 4-element structures to four registers.
    /// </summary>
    LD4_asisdlsep_r4_r,
    /// <summary>
    /// Instruction LD4 - Load single 4-element structure to one lane of four registers.
    /// </summary>
    LD4_asisdlso_b4_4b,
    /// <summary>
    /// Instruction LD4 - Load single 4-element structure to one lane of four registers.
    /// </summary>
    LD4_asisdlso_d4_4d,
    /// <summary>
    /// Instruction LD4 - Load single 4-element structure to one lane of four registers.
    /// </summary>
    LD4_asisdlso_h4_4h,
    /// <summary>
    /// Instruction LD4 - Load single 4-element structure to one lane of four registers.
    /// </summary>
    LD4_asisdlso_s4_4s,
    /// <summary>
    /// Instruction LD4 - Load single 4-element structure to one lane of four registers.
    /// </summary>
    LD4_asisdlsop_b4_i4b,
    /// <summary>
    /// Instruction LD4 - Load single 4-element structure to one lane of four registers.
    /// </summary>
    LD4_asisdlsop_bx4_r4b,
    /// <summary>
    /// Instruction LD4 - Load single 4-element structure to one lane of four registers.
    /// </summary>
    LD4_asisdlsop_d4_i4d,
    /// <summary>
    /// Instruction LD4 - Load single 4-element structure to one lane of four registers.
    /// </summary>
    LD4_asisdlsop_dx4_r4d,
    /// <summary>
    /// Instruction LD4 - Load single 4-element structure to one lane of four registers.
    /// </summary>
    LD4_asisdlsop_h4_i4h,
    /// <summary>
    /// Instruction LD4 - Load single 4-element structure to one lane of four registers.
    /// </summary>
    LD4_asisdlsop_hx4_r4h,
    /// <summary>
    /// Instruction LD4 - Load single 4-element structure to one lane of four registers.
    /// </summary>
    LD4_asisdlsop_s4_i4s,
    /// <summary>
    /// Instruction LD4 - Load single 4-element structure to one lane of four registers.
    /// </summary>
    LD4_asisdlsop_sx4_r4s,
    /// <summary>
    /// Instruction LD64B - Single-copy atomic 64-byte Load.
    /// </summary>
    LD64B_64l_memop,
    /// <summary>
    /// Instruction LDADDAB - Atomic add on byte in memory.
    /// </summary>
    LDADDAB_32_memop,
    /// <summary>
    /// Instruction LDADDAH - Atomic add on halfword in memory.
    /// </summary>
    LDADDAH_32_memop,
    /// <summary>
    /// Instruction LDADDALB - Atomic add on byte in memory.
    /// </summary>
    LDADDALB_32_memop,
    /// <summary>
    /// Instruction LDADDALH - Atomic add on halfword in memory.
    /// </summary>
    LDADDALH_32_memop,
    /// <summary>
    /// Instruction LDADDAL - Atomic add on word or doubleword in memory.
    /// </summary>
    LDADDAL_32_memop,
    /// <summary>
    /// Instruction LDADDAL - Atomic add on word or doubleword in memory.
    /// </summary>
    LDADDAL_64_memop,
    /// <summary>
    /// Instruction LDADDA - Atomic add on word or doubleword in memory.
    /// </summary>
    LDADDA_32_memop,
    /// <summary>
    /// Instruction LDADDA - Atomic add on word or doubleword in memory.
    /// </summary>
    LDADDA_64_memop,
    /// <summary>
    /// Instruction LDADDB - Atomic add on byte in memory.
    /// </summary>
    LDADDB_32_memop,
    /// <summary>
    /// Instruction LDADDH - Atomic add on halfword in memory.
    /// </summary>
    LDADDH_32_memop,
    /// <summary>
    /// Instruction LDADDLB - Atomic add on byte in memory.
    /// </summary>
    LDADDLB_32_memop,
    /// <summary>
    /// Instruction LDADDLH - Atomic add on halfword in memory.
    /// </summary>
    LDADDLH_32_memop,
    /// <summary>
    /// Instruction LDADDL - Atomic add on word or doubleword in memory.
    /// </summary>
    LDADDL_32_memop,
    /// <summary>
    /// Instruction LDADDL - Atomic add on word or doubleword in memory.
    /// </summary>
    LDADDL_64_memop,
    /// <summary>
    /// Instruction LDADD - Atomic add on word or doubleword in memory.
    /// </summary>
    LDADD_32_memop,
    /// <summary>
    /// Instruction LDADD - Atomic add on word or doubleword in memory.
    /// </summary>
    LDADD_64_memop,
    /// <summary>
    /// Instruction LDAP1 - Load-acquire RCpc one single-element structure to one lane of one register.
    /// </summary>
    LDAP1_asisdlso_d1,
    /// <summary>
    /// Instruction LDAPRB - Load-acquire RCpc register byte.
    /// </summary>
    LDAPRB_32l_memop,
    /// <summary>
    /// Instruction LDAPRH - Load-acquire RCpc register halfword.
    /// </summary>
    LDAPRH_32l_memop,
    /// <summary>
    /// Instruction LDAPR - Load-acquire RCpc register.
    /// </summary>
    LDAPR_32l_ldapstl_writeback,
    /// <summary>
    /// Instruction LDAPR - Load-acquire RCpc register.
    /// </summary>
    LDAPR_32l_memop,
    /// <summary>
    /// Instruction LDAPR - Load-acquire RCpc register.
    /// </summary>
    LDAPR_64l_ldapstl_writeback,
    /// <summary>
    /// Instruction LDAPR - Load-acquire RCpc register.
    /// </summary>
    LDAPR_64l_memop,
    /// <summary>
    /// Instruction LDAPURB - Load-acquire RCpc register byte (unscaled).
    /// </summary>
    LDAPURB_32_ldapstl_unscaled,
    /// <summary>
    /// Instruction LDAPURH - Load-acquire RCpc register halfword (unscaled).
    /// </summary>
    LDAPURH_32_ldapstl_unscaled,
    /// <summary>
    /// Instruction LDAPURSB - Load-acquire RCpc register signed byte (unscaled).
    /// </summary>
    LDAPURSB_32_ldapstl_unscaled,
    /// <summary>
    /// Instruction LDAPURSB - Load-acquire RCpc register signed byte (unscaled).
    /// </summary>
    LDAPURSB_64_ldapstl_unscaled,
    /// <summary>
    /// Instruction LDAPURSH - Load-acquire RCpc register signed halfword (unscaled).
    /// </summary>
    LDAPURSH_32_ldapstl_unscaled,
    /// <summary>
    /// Instruction LDAPURSH - Load-acquire RCpc register signed halfword (unscaled).
    /// </summary>
    LDAPURSH_64_ldapstl_unscaled,
    /// <summary>
    /// Instruction LDAPURSW - Load-acquire RCpc register signed word (unscaled).
    /// </summary>
    LDAPURSW_64_ldapstl_unscaled,
    /// <summary>
    /// Instruction LDAPUR - Load-acquire RCpc register (unscaled).
    /// </summary>
    LDAPUR_32_ldapstl_unscaled,
    /// <summary>
    /// Instruction LDAPUR - Load-acquire RCpc register (unscaled).
    /// </summary>
    LDAPUR_64_ldapstl_unscaled,
    /// <summary>
    /// Instruction LDAPUR - Load-acquire RCpc SIMD&FP register (unscaled offset).
    /// </summary>
    LDAPUR_b_ldapstl_simd,
    /// <summary>
    /// Instruction LDAPUR - Load-acquire RCpc SIMD&FP register (unscaled offset).
    /// </summary>
    LDAPUR_d_ldapstl_simd,
    /// <summary>
    /// Instruction LDAPUR - Load-acquire RCpc SIMD&FP register (unscaled offset).
    /// </summary>
    LDAPUR_h_ldapstl_simd,
    /// <summary>
    /// Instruction LDAPUR - Load-acquire RCpc SIMD&FP register (unscaled offset).
    /// </summary>
    LDAPUR_q_ldapstl_simd,
    /// <summary>
    /// Instruction LDAPUR - Load-acquire RCpc SIMD&FP register (unscaled offset).
    /// </summary>
    LDAPUR_s_ldapstl_simd,
    /// <summary>
    /// Instruction LDARB - Load-acquire register byte.
    /// </summary>
    LDARB_lr32_ldstord,
    /// <summary>
    /// Instruction LDARH - Load-acquire register halfword.
    /// </summary>
    LDARH_lr32_ldstord,
    /// <summary>
    /// Instruction LDAR - Load-acquire register.
    /// </summary>
    LDAR_lr32_ldstord,
    /// <summary>
    /// Instruction LDAR - Load-acquire register.
    /// </summary>
    LDAR_lr64_ldstord,
    /// <summary>
    /// Instruction LDATXR - Load-acquire unprivileged exclusive register.
    /// </summary>
    LDATXR_lr32_ldstexclr_unpriv,
    /// <summary>
    /// Instruction LDATXR - Load-acquire unprivileged exclusive register.
    /// </summary>
    LDATXR_lr64_ldstexclr_unpriv,
    /// <summary>
    /// Instruction LDAXP - Load-acquire exclusive pair of registers.
    /// </summary>
    LDAXP_lp32_ldstexclp,
    /// <summary>
    /// Instruction LDAXP - Load-acquire exclusive pair of registers.
    /// </summary>
    LDAXP_lp64_ldstexclp,
    /// <summary>
    /// Instruction LDAXRB - Load-acquire exclusive register byte.
    /// </summary>
    LDAXRB_lr32_ldstexclr,
    /// <summary>
    /// Instruction LDAXRH - Load-acquire exclusive register halfword.
    /// </summary>
    LDAXRH_lr32_ldstexclr,
    /// <summary>
    /// Instruction LDAXR - Load-acquire exclusive register.
    /// </summary>
    LDAXR_lr32_ldstexclr,
    /// <summary>
    /// Instruction LDAXR - Load-acquire exclusive register.
    /// </summary>
    LDAXR_lr64_ldstexclr,
    /// <summary>
    /// Instruction LDBFADDAL - BFloat16 floating-point add in memory.
    /// </summary>
    LDBFADDAL_16,
    /// <summary>
    /// Instruction LDBFADDA - BFloat16 floating-point add in memory.
    /// </summary>
    LDBFADDA_16,
    /// <summary>
    /// Instruction LDBFADDL - BFloat16 floating-point add in memory.
    /// </summary>
    LDBFADDL_16,
    /// <summary>
    /// Instruction LDBFADD - BFloat16 floating-point add in memory.
    /// </summary>
    LDBFADD_16,
    /// <summary>
    /// Instruction LDBFMAXAL - BFloat16 floating-point atomic maximum in memory.
    /// </summary>
    LDBFMAXAL_16,
    /// <summary>
    /// Instruction LDBFMAXA - BFloat16 floating-point atomic maximum in memory.
    /// </summary>
    LDBFMAXA_16,
    /// <summary>
    /// Instruction LDBFMAXL - BFloat16 floating-point atomic maximum in memory.
    /// </summary>
    LDBFMAXL_16,
    /// <summary>
    /// Instruction LDBFMAXNMAL - BFloat16 floating-point atomic maximum number in memory.
    /// </summary>
    LDBFMAXNMAL_16,
    /// <summary>
    /// Instruction LDBFMAXNMA - BFloat16 floating-point atomic maximum number in memory.
    /// </summary>
    LDBFMAXNMA_16,
    /// <summary>
    /// Instruction LDBFMAXNML - BFloat16 floating-point atomic maximum number in memory.
    /// </summary>
    LDBFMAXNML_16,
    /// <summary>
    /// Instruction LDBFMAXNM - BFloat16 floating-point atomic maximum number in memory.
    /// </summary>
    LDBFMAXNM_16,
    /// <summary>
    /// Instruction LDBFMAX - BFloat16 floating-point atomic maximum in memory.
    /// </summary>
    LDBFMAX_16,
    /// <summary>
    /// Instruction LDBFMINAL - BFloat16 floating-point atomic minimum in memory.
    /// </summary>
    LDBFMINAL_16,
    /// <summary>
    /// Instruction LDBFMINA - BFloat16 floating-point atomic minimum in memory.
    /// </summary>
    LDBFMINA_16,
    /// <summary>
    /// Instruction LDBFMINL - BFloat16 floating-point atomic minimum in memory.
    /// </summary>
    LDBFMINL_16,
    /// <summary>
    /// Instruction LDBFMINNMAL - BFloat16 floating-point atomic minimum number in memory.
    /// </summary>
    LDBFMINNMAL_16,
    /// <summary>
    /// Instruction LDBFMINNMA - BFloat16 floating-point atomic minimum number in memory.
    /// </summary>
    LDBFMINNMA_16,
    /// <summary>
    /// Instruction LDBFMINNML - BFloat16 floating-point atomic minimum number in memory.
    /// </summary>
    LDBFMINNML_16,
    /// <summary>
    /// Instruction LDBFMINNM - BFloat16 floating-point atomic minimum number in memory.
    /// </summary>
    LDBFMINNM_16,
    /// <summary>
    /// Instruction LDBFMIN - BFloat16 floating-point atomic minimum in memory.
    /// </summary>
    LDBFMIN_16,
    /// <summary>
    /// Instruction LDCLRAB - Atomic bit clear on byte in memory.
    /// </summary>
    LDCLRAB_32_memop,
    /// <summary>
    /// Instruction LDCLRAH - Atomic bit clear on halfword in memory.
    /// </summary>
    LDCLRAH_32_memop,
    /// <summary>
    /// Instruction LDCLRALB - Atomic bit clear on byte in memory.
    /// </summary>
    LDCLRALB_32_memop,
    /// <summary>
    /// Instruction LDCLRALH - Atomic bit clear on halfword in memory.
    /// </summary>
    LDCLRALH_32_memop,
    /// <summary>
    /// Instruction LDCLRAL - Atomic bit clear on word or doubleword in memory.
    /// </summary>
    LDCLRAL_32_memop,
    /// <summary>
    /// Instruction LDCLRAL - Atomic bit clear on word or doubleword in memory.
    /// </summary>
    LDCLRAL_64_memop,
    /// <summary>
    /// Instruction LDCLRA - Atomic bit clear on word or doubleword in memory.
    /// </summary>
    LDCLRA_32_memop,
    /// <summary>
    /// Instruction LDCLRA - Atomic bit clear on word or doubleword in memory.
    /// </summary>
    LDCLRA_64_memop,
    /// <summary>
    /// Instruction LDCLRB - Atomic bit clear on byte in memory.
    /// </summary>
    LDCLRB_32_memop,
    /// <summary>
    /// Instruction LDCLRH - Atomic bit clear on halfword in memory.
    /// </summary>
    LDCLRH_32_memop,
    /// <summary>
    /// Instruction LDCLRLB - Atomic bit clear on byte in memory.
    /// </summary>
    LDCLRLB_32_memop,
    /// <summary>
    /// Instruction LDCLRLH - Atomic bit clear on halfword in memory.
    /// </summary>
    LDCLRLH_32_memop,
    /// <summary>
    /// Instruction LDCLRL - Atomic bit clear on word or doubleword in memory.
    /// </summary>
    LDCLRL_32_memop,
    /// <summary>
    /// Instruction LDCLRL - Atomic bit clear on word or doubleword in memory.
    /// </summary>
    LDCLRL_64_memop,
    /// <summary>
    /// Instruction LDCLRPAL - Atomic bit clear on quadword in memory.
    /// </summary>
    LDCLRPAL_128_memop_128,
    /// <summary>
    /// Instruction LDCLRPA - Atomic bit clear on quadword in memory.
    /// </summary>
    LDCLRPA_128_memop_128,
    /// <summary>
    /// Instruction LDCLRPL - Atomic bit clear on quadword in memory.
    /// </summary>
    LDCLRPL_128_memop_128,
    /// <summary>
    /// Instruction LDCLRP - Atomic bit clear on quadword in memory.
    /// </summary>
    LDCLRP_128_memop_128,
    /// <summary>
    /// Instruction LDCLR - Atomic bit clear on word or doubleword in memory.
    /// </summary>
    LDCLR_32_memop,
    /// <summary>
    /// Instruction LDCLR - Atomic bit clear on word or doubleword in memory.
    /// </summary>
    LDCLR_64_memop,
    /// <summary>
    /// Instruction LDEORAB - Atomic exclusive-OR on byte in memory.
    /// </summary>
    LDEORAB_32_memop,
    /// <summary>
    /// Instruction LDEORAH - Atomic exclusive-OR on halfword in memory.
    /// </summary>
    LDEORAH_32_memop,
    /// <summary>
    /// Instruction LDEORALB - Atomic exclusive-OR on byte in memory.
    /// </summary>
    LDEORALB_32_memop,
    /// <summary>
    /// Instruction LDEORALH - Atomic exclusive-OR on halfword in memory.
    /// </summary>
    LDEORALH_32_memop,
    /// <summary>
    /// Instruction LDEORAL - Atomic exclusive-OR on word or doubleword in memory.
    /// </summary>
    LDEORAL_32_memop,
    /// <summary>
    /// Instruction LDEORAL - Atomic exclusive-OR on word or doubleword in memory.
    /// </summary>
    LDEORAL_64_memop,
    /// <summary>
    /// Instruction LDEORA - Atomic exclusive-OR on word or doubleword in memory.
    /// </summary>
    LDEORA_32_memop,
    /// <summary>
    /// Instruction LDEORA - Atomic exclusive-OR on word or doubleword in memory.
    /// </summary>
    LDEORA_64_memop,
    /// <summary>
    /// Instruction LDEORB - Atomic exclusive-OR on byte in memory.
    /// </summary>
    LDEORB_32_memop,
    /// <summary>
    /// Instruction LDEORH - Atomic exclusive-OR on halfword in memory.
    /// </summary>
    LDEORH_32_memop,
    /// <summary>
    /// Instruction LDEORLB - Atomic exclusive-OR on byte in memory.
    /// </summary>
    LDEORLB_32_memop,
    /// <summary>
    /// Instruction LDEORLH - Atomic exclusive-OR on halfword in memory.
    /// </summary>
    LDEORLH_32_memop,
    /// <summary>
    /// Instruction LDEORL - Atomic exclusive-OR on word or doubleword in memory.
    /// </summary>
    LDEORL_32_memop,
    /// <summary>
    /// Instruction LDEORL - Atomic exclusive-OR on word or doubleword in memory.
    /// </summary>
    LDEORL_64_memop,
    /// <summary>
    /// Instruction LDEOR - Atomic exclusive-OR on word or doubleword in memory.
    /// </summary>
    LDEOR_32_memop,
    /// <summary>
    /// Instruction LDEOR - Atomic exclusive-OR on word or doubleword in memory.
    /// </summary>
    LDEOR_64_memop,
    /// <summary>
    /// Instruction LDFADDAL - Floating-point atomic add in memory.
    /// </summary>
    LDFADDAL_16,
    /// <summary>
    /// Instruction LDFADDAL - Floating-point atomic add in memory.
    /// </summary>
    LDFADDAL_32,
    /// <summary>
    /// Instruction LDFADDAL - Floating-point atomic add in memory.
    /// </summary>
    LDFADDAL_64,
    /// <summary>
    /// Instruction LDFADDA - Floating-point atomic add in memory.
    /// </summary>
    LDFADDA_16,
    /// <summary>
    /// Instruction LDFADDA - Floating-point atomic add in memory.
    /// </summary>
    LDFADDA_32,
    /// <summary>
    /// Instruction LDFADDA - Floating-point atomic add in memory.
    /// </summary>
    LDFADDA_64,
    /// <summary>
    /// Instruction LDFADDL - Floating-point atomic add in memory.
    /// </summary>
    LDFADDL_16,
    /// <summary>
    /// Instruction LDFADDL - Floating-point atomic add in memory.
    /// </summary>
    LDFADDL_32,
    /// <summary>
    /// Instruction LDFADDL - Floating-point atomic add in memory.
    /// </summary>
    LDFADDL_64,
    /// <summary>
    /// Instruction LDFADD - Floating-point atomic add in memory.
    /// </summary>
    LDFADD_16,
    /// <summary>
    /// Instruction LDFADD - Floating-point atomic add in memory.
    /// </summary>
    LDFADD_32,
    /// <summary>
    /// Instruction LDFADD - Floating-point atomic add in memory.
    /// </summary>
    LDFADD_64,
    /// <summary>
    /// Instruction LDFF1B - Gather load first-fault unsigned bytes to vector (immediate index).
    /// </summary>
    LDFF1B_z_p_ai_d,
    /// <summary>
    /// Instruction LDFF1B - Gather load first-fault unsigned bytes to vector (immediate index).
    /// </summary>
    LDFF1B_z_p_ai_s,
    /// <summary>
    /// Instruction LDFF1B - Contiguous load first-fault unsigned bytes to vector (scalar index).
    /// </summary>
    LDFF1B_z_p_br_u16,
    /// <summary>
    /// Instruction LDFF1B - Contiguous load first-fault unsigned bytes to vector (scalar index).
    /// </summary>
    LDFF1B_z_p_br_u32,
    /// <summary>
    /// Instruction LDFF1B - Contiguous load first-fault unsigned bytes to vector (scalar index).
    /// </summary>
    LDFF1B_z_p_br_u64,
    /// <summary>
    /// Instruction LDFF1B - Contiguous load first-fault unsigned bytes to vector (scalar index).
    /// </summary>
    LDFF1B_z_p_br_u8,
    /// <summary>
    /// Instruction LDFF1B - Gather load first-fault unsigned bytes to vector (vector index).
    /// </summary>
    LDFF1B_z_p_bz_d_64_unscaled,
    /// <summary>
    /// Instruction LDFF1B - Gather load first-fault unsigned bytes to vector (vector index).
    /// </summary>
    LDFF1B_z_p_bz_d_x32_unscaled,
    /// <summary>
    /// Instruction LDFF1B - Gather load first-fault unsigned bytes to vector (vector index).
    /// </summary>
    LDFF1B_z_p_bz_s_x32_unscaled,
    /// <summary>
    /// Instruction LDFF1D - Gather load first-fault doublewords to vector (immediate index).
    /// </summary>
    LDFF1D_z_p_ai_d,
    /// <summary>
    /// Instruction LDFF1D - Contiguous load first-fault doublewords to vector (scalar index).
    /// </summary>
    LDFF1D_z_p_br_u64,
    /// <summary>
    /// Instruction LDFF1D - Gather load first-fault doublewords to vector (vector index).
    /// </summary>
    LDFF1D_z_p_bz_d_64_scaled,
    /// <summary>
    /// Instruction LDFF1D - Gather load first-fault doublewords to vector (vector index).
    /// </summary>
    LDFF1D_z_p_bz_d_64_unscaled,
    /// <summary>
    /// Instruction LDFF1D - Gather load first-fault doublewords to vector (vector index).
    /// </summary>
    LDFF1D_z_p_bz_d_x32_scaled,
    /// <summary>
    /// Instruction LDFF1D - Gather load first-fault doublewords to vector (vector index).
    /// </summary>
    LDFF1D_z_p_bz_d_x32_unscaled,
    /// <summary>
    /// Instruction LDFF1H - Gather load first-fault unsigned halfwords to vector (immediate index).
    /// </summary>
    LDFF1H_z_p_ai_d,
    /// <summary>
    /// Instruction LDFF1H - Gather load first-fault unsigned halfwords to vector (immediate index).
    /// </summary>
    LDFF1H_z_p_ai_s,
    /// <summary>
    /// Instruction LDFF1H - Contiguous load first-fault unsigned halfwords to vector (scalar index).
    /// </summary>
    LDFF1H_z_p_br_u16,
    /// <summary>
    /// Instruction LDFF1H - Contiguous load first-fault unsigned halfwords to vector (scalar index).
    /// </summary>
    LDFF1H_z_p_br_u32,
    /// <summary>
    /// Instruction LDFF1H - Contiguous load first-fault unsigned halfwords to vector (scalar index).
    /// </summary>
    LDFF1H_z_p_br_u64,
    /// <summary>
    /// Instruction LDFF1H - Gather load first-fault unsigned halfwords to vector (vector index).
    /// </summary>
    LDFF1H_z_p_bz_d_64_scaled,
    /// <summary>
    /// Instruction LDFF1H - Gather load first-fault unsigned halfwords to vector (vector index).
    /// </summary>
    LDFF1H_z_p_bz_d_64_unscaled,
    /// <summary>
    /// Instruction LDFF1H - Gather load first-fault unsigned halfwords to vector (vector index).
    /// </summary>
    LDFF1H_z_p_bz_d_x32_scaled,
    /// <summary>
    /// Instruction LDFF1H - Gather load first-fault unsigned halfwords to vector (vector index).
    /// </summary>
    LDFF1H_z_p_bz_d_x32_unscaled,
    /// <summary>
    /// Instruction LDFF1H - Gather load first-fault unsigned halfwords to vector (vector index).
    /// </summary>
    LDFF1H_z_p_bz_s_x32_scaled,
    /// <summary>
    /// Instruction LDFF1H - Gather load first-fault unsigned halfwords to vector (vector index).
    /// </summary>
    LDFF1H_z_p_bz_s_x32_unscaled,
    /// <summary>
    /// Instruction LDFF1SB - Gather load first-fault signed bytes to vector (immediate index).
    /// </summary>
    LDFF1SB_z_p_ai_d,
    /// <summary>
    /// Instruction LDFF1SB - Gather load first-fault signed bytes to vector (immediate index).
    /// </summary>
    LDFF1SB_z_p_ai_s,
    /// <summary>
    /// Instruction LDFF1SB - Contiguous load first-fault signed bytes to vector (scalar index).
    /// </summary>
    LDFF1SB_z_p_br_s16,
    /// <summary>
    /// Instruction LDFF1SB - Contiguous load first-fault signed bytes to vector (scalar index).
    /// </summary>
    LDFF1SB_z_p_br_s32,
    /// <summary>
    /// Instruction LDFF1SB - Contiguous load first-fault signed bytes to vector (scalar index).
    /// </summary>
    LDFF1SB_z_p_br_s64,
    /// <summary>
    /// Instruction LDFF1SB - Gather load first-fault signed bytes to vector (vector index).
    /// </summary>
    LDFF1SB_z_p_bz_d_64_unscaled,
    /// <summary>
    /// Instruction LDFF1SB - Gather load first-fault signed bytes to vector (vector index).
    /// </summary>
    LDFF1SB_z_p_bz_d_x32_unscaled,
    /// <summary>
    /// Instruction LDFF1SB - Gather load first-fault signed bytes to vector (vector index).
    /// </summary>
    LDFF1SB_z_p_bz_s_x32_unscaled,
    /// <summary>
    /// Instruction LDFF1SH - Gather load first-fault signed halfwords to vector (immediate index).
    /// </summary>
    LDFF1SH_z_p_ai_d,
    /// <summary>
    /// Instruction LDFF1SH - Gather load first-fault signed halfwords to vector (immediate index).
    /// </summary>
    LDFF1SH_z_p_ai_s,
    /// <summary>
    /// Instruction LDFF1SH - Contiguous load first-fault signed halfwords to vector (scalar index).
    /// </summary>
    LDFF1SH_z_p_br_s32,
    /// <summary>
    /// Instruction LDFF1SH - Contiguous load first-fault signed halfwords to vector (scalar index).
    /// </summary>
    LDFF1SH_z_p_br_s64,
    /// <summary>
    /// Instruction LDFF1SH - Gather load first-fault signed halfwords to vector (vector index).
    /// </summary>
    LDFF1SH_z_p_bz_d_64_scaled,
    /// <summary>
    /// Instruction LDFF1SH - Gather load first-fault signed halfwords to vector (vector index).
    /// </summary>
    LDFF1SH_z_p_bz_d_64_unscaled,
    /// <summary>
    /// Instruction LDFF1SH - Gather load first-fault signed halfwords to vector (vector index).
    /// </summary>
    LDFF1SH_z_p_bz_d_x32_scaled,
    /// <summary>
    /// Instruction LDFF1SH - Gather load first-fault signed halfwords to vector (vector index).
    /// </summary>
    LDFF1SH_z_p_bz_d_x32_unscaled,
    /// <summary>
    /// Instruction LDFF1SH - Gather load first-fault signed halfwords to vector (vector index).
    /// </summary>
    LDFF1SH_z_p_bz_s_x32_scaled,
    /// <summary>
    /// Instruction LDFF1SH - Gather load first-fault signed halfwords to vector (vector index).
    /// </summary>
    LDFF1SH_z_p_bz_s_x32_unscaled,
    /// <summary>
    /// Instruction LDFF1SW - Gather load first-fault signed words to vector (immediate index).
    /// </summary>
    LDFF1SW_z_p_ai_d,
    /// <summary>
    /// Instruction LDFF1SW - Contiguous load first-fault signed words to vector (scalar index).
    /// </summary>
    LDFF1SW_z_p_br_s64,
    /// <summary>
    /// Instruction LDFF1SW - Gather load first-fault signed words to vector (vector index).
    /// </summary>
    LDFF1SW_z_p_bz_d_64_scaled,
    /// <summary>
    /// Instruction LDFF1SW - Gather load first-fault signed words to vector (vector index).
    /// </summary>
    LDFF1SW_z_p_bz_d_64_unscaled,
    /// <summary>
    /// Instruction LDFF1SW - Gather load first-fault signed words to vector (vector index).
    /// </summary>
    LDFF1SW_z_p_bz_d_x32_scaled,
    /// <summary>
    /// Instruction LDFF1SW - Gather load first-fault signed words to vector (vector index).
    /// </summary>
    LDFF1SW_z_p_bz_d_x32_unscaled,
    /// <summary>
    /// Instruction LDFF1W - Gather load first-fault unsigned words to vector (immediate index).
    /// </summary>
    LDFF1W_z_p_ai_d,
    /// <summary>
    /// Instruction LDFF1W - Gather load first-fault unsigned words to vector (immediate index).
    /// </summary>
    LDFF1W_z_p_ai_s,
    /// <summary>
    /// Instruction LDFF1W - Contiguous load first-fault unsigned words to vector (scalar index).
    /// </summary>
    LDFF1W_z_p_br_u32,
    /// <summary>
    /// Instruction LDFF1W - Contiguous load first-fault unsigned words to vector (scalar index).
    /// </summary>
    LDFF1W_z_p_br_u64,
    /// <summary>
    /// Instruction LDFF1W - Gather load first-fault unsigned words to vector (vector index).
    /// </summary>
    LDFF1W_z_p_bz_d_64_scaled,
    /// <summary>
    /// Instruction LDFF1W - Gather load first-fault unsigned words to vector (vector index).
    /// </summary>
    LDFF1W_z_p_bz_d_64_unscaled,
    /// <summary>
    /// Instruction LDFF1W - Gather load first-fault unsigned words to vector (vector index).
    /// </summary>
    LDFF1W_z_p_bz_d_x32_scaled,
    /// <summary>
    /// Instruction LDFF1W - Gather load first-fault unsigned words to vector (vector index).
    /// </summary>
    LDFF1W_z_p_bz_d_x32_unscaled,
    /// <summary>
    /// Instruction LDFF1W - Gather load first-fault unsigned words to vector (vector index).
    /// </summary>
    LDFF1W_z_p_bz_s_x32_scaled,
    /// <summary>
    /// Instruction LDFF1W - Gather load first-fault unsigned words to vector (vector index).
    /// </summary>
    LDFF1W_z_p_bz_s_x32_unscaled,
    /// <summary>
    /// Instruction LDFMAXAL - Floating-point atomic maximum in memory.
    /// </summary>
    LDFMAXAL_16,
    /// <summary>
    /// Instruction LDFMAXAL - Floating-point atomic maximum in memory.
    /// </summary>
    LDFMAXAL_32,
    /// <summary>
    /// Instruction LDFMAXAL - Floating-point atomic maximum in memory.
    /// </summary>
    LDFMAXAL_64,
    /// <summary>
    /// Instruction LDFMAXA - Floating-point atomic maximum in memory.
    /// </summary>
    LDFMAXA_16,
    /// <summary>
    /// Instruction LDFMAXA - Floating-point atomic maximum in memory.
    /// </summary>
    LDFMAXA_32,
    /// <summary>
    /// Instruction LDFMAXA - Floating-point atomic maximum in memory.
    /// </summary>
    LDFMAXA_64,
    /// <summary>
    /// Instruction LDFMAXL - Floating-point atomic maximum in memory.
    /// </summary>
    LDFMAXL_16,
    /// <summary>
    /// Instruction LDFMAXL - Floating-point atomic maximum in memory.
    /// </summary>
    LDFMAXL_32,
    /// <summary>
    /// Instruction LDFMAXL - Floating-point atomic maximum in memory.
    /// </summary>
    LDFMAXL_64,
    /// <summary>
    /// Instruction LDFMAXNMAL - Floating-point atomic maximum number in memory.
    /// </summary>
    LDFMAXNMAL_16,
    /// <summary>
    /// Instruction LDFMAXNMAL - Floating-point atomic maximum number in memory.
    /// </summary>
    LDFMAXNMAL_32,
    /// <summary>
    /// Instruction LDFMAXNMAL - Floating-point atomic maximum number in memory.
    /// </summary>
    LDFMAXNMAL_64,
    /// <summary>
    /// Instruction LDFMAXNMA - Floating-point atomic maximum number in memory.
    /// </summary>
    LDFMAXNMA_16,
    /// <summary>
    /// Instruction LDFMAXNMA - Floating-point atomic maximum number in memory.
    /// </summary>
    LDFMAXNMA_32,
    /// <summary>
    /// Instruction LDFMAXNMA - Floating-point atomic maximum number in memory.
    /// </summary>
    LDFMAXNMA_64,
    /// <summary>
    /// Instruction LDFMAXNML - Floating-point atomic maximum number in memory.
    /// </summary>
    LDFMAXNML_16,
    /// <summary>
    /// Instruction LDFMAXNML - Floating-point atomic maximum number in memory.
    /// </summary>
    LDFMAXNML_32,
    /// <summary>
    /// Instruction LDFMAXNML - Floating-point atomic maximum number in memory.
    /// </summary>
    LDFMAXNML_64,
    /// <summary>
    /// Instruction LDFMAXNM - Floating-point atomic maximum number in memory.
    /// </summary>
    LDFMAXNM_16,
    /// <summary>
    /// Instruction LDFMAXNM - Floating-point atomic maximum number in memory.
    /// </summary>
    LDFMAXNM_32,
    /// <summary>
    /// Instruction LDFMAXNM - Floating-point atomic maximum number in memory.
    /// </summary>
    LDFMAXNM_64,
    /// <summary>
    /// Instruction LDFMAX - Floating-point atomic maximum in memory.
    /// </summary>
    LDFMAX_16,
    /// <summary>
    /// Instruction LDFMAX - Floating-point atomic maximum in memory.
    /// </summary>
    LDFMAX_32,
    /// <summary>
    /// Instruction LDFMAX - Floating-point atomic maximum in memory.
    /// </summary>
    LDFMAX_64,
    /// <summary>
    /// Instruction LDFMINAL - Floating-point atomic minimum in memory.
    /// </summary>
    LDFMINAL_16,
    /// <summary>
    /// Instruction LDFMINAL - Floating-point atomic minimum in memory.
    /// </summary>
    LDFMINAL_32,
    /// <summary>
    /// Instruction LDFMINAL - Floating-point atomic minimum in memory.
    /// </summary>
    LDFMINAL_64,
    /// <summary>
    /// Instruction LDFMINA - Floating-point atomic minimum in memory.
    /// </summary>
    LDFMINA_16,
    /// <summary>
    /// Instruction LDFMINA - Floating-point atomic minimum in memory.
    /// </summary>
    LDFMINA_32,
    /// <summary>
    /// Instruction LDFMINA - Floating-point atomic minimum in memory.
    /// </summary>
    LDFMINA_64,
    /// <summary>
    /// Instruction LDFMINL - Floating-point atomic minimum in memory.
    /// </summary>
    LDFMINL_16,
    /// <summary>
    /// Instruction LDFMINL - Floating-point atomic minimum in memory.
    /// </summary>
    LDFMINL_32,
    /// <summary>
    /// Instruction LDFMINL - Floating-point atomic minimum in memory.
    /// </summary>
    LDFMINL_64,
    /// <summary>
    /// Instruction LDFMINNMAL - Floating-point atomic minimum number in memory.
    /// </summary>
    LDFMINNMAL_16,
    /// <summary>
    /// Instruction LDFMINNMAL - Floating-point atomic minimum number in memory.
    /// </summary>
    LDFMINNMAL_32,
    /// <summary>
    /// Instruction LDFMINNMAL - Floating-point atomic minimum number in memory.
    /// </summary>
    LDFMINNMAL_64,
    /// <summary>
    /// Instruction LDFMINNMA - Floating-point atomic minimum number in memory.
    /// </summary>
    LDFMINNMA_16,
    /// <summary>
    /// Instruction LDFMINNMA - Floating-point atomic minimum number in memory.
    /// </summary>
    LDFMINNMA_32,
    /// <summary>
    /// Instruction LDFMINNMA - Floating-point atomic minimum number in memory.
    /// </summary>
    LDFMINNMA_64,
    /// <summary>
    /// Instruction LDFMINNML - Floating-point atomic minimum number in memory.
    /// </summary>
    LDFMINNML_16,
    /// <summary>
    /// Instruction LDFMINNML - Floating-point atomic minimum number in memory.
    /// </summary>
    LDFMINNML_32,
    /// <summary>
    /// Instruction LDFMINNML - Floating-point atomic minimum number in memory.
    /// </summary>
    LDFMINNML_64,
    /// <summary>
    /// Instruction LDFMINNM - Floating-point atomic minimum number in memory.
    /// </summary>
    LDFMINNM_16,
    /// <summary>
    /// Instruction LDFMINNM - Floating-point atomic minimum number in memory.
    /// </summary>
    LDFMINNM_32,
    /// <summary>
    /// Instruction LDFMINNM - Floating-point atomic minimum number in memory.
    /// </summary>
    LDFMINNM_64,
    /// <summary>
    /// Instruction LDFMIN - Floating-point atomic minimum in memory.
    /// </summary>
    LDFMIN_16,
    /// <summary>
    /// Instruction LDFMIN - Floating-point atomic minimum in memory.
    /// </summary>
    LDFMIN_32,
    /// <summary>
    /// Instruction LDFMIN - Floating-point atomic minimum in memory.
    /// </summary>
    LDFMIN_64,
    /// <summary>
    /// Instruction LDGM - Load tag multiple.
    /// </summary>
    LDGM_64bulk_ldsttags,
    /// <summary>
    /// Instruction LDG - Load Allocation Tag.
    /// </summary>
    LDG_64loffset_ldsttags,
    /// <summary>
    /// Instruction LDIAPP - Load-Acquire RCpc ordered pair of registers.
    /// </summary>
    LDIAPP_32l_ldiappstilp,
    /// <summary>
    /// Instruction LDIAPP - Load-Acquire RCpc ordered pair of registers.
    /// </summary>
    LDIAPP_32le_ldiappstilp,
    /// <summary>
    /// Instruction LDIAPP - Load-Acquire RCpc ordered pair of registers.
    /// </summary>
    LDIAPP_64l_ldiappstilp,
    /// <summary>
    /// Instruction LDIAPP - Load-Acquire RCpc ordered pair of registers.
    /// </summary>
    LDIAPP_64ls_ldiappstilp,
    /// <summary>
    /// Instruction LDLARB - Load LOAcquire register byte.
    /// </summary>
    LDLARB_lr32_ldstord,
    /// <summary>
    /// Instruction LDLARH - Load LOAcquire register halfword.
    /// </summary>
    LDLARH_lr32_ldstord,
    /// <summary>
    /// Instruction LDLAR - Load LOAcquire register.
    /// </summary>
    LDLAR_lr32_ldstord,
    /// <summary>
    /// Instruction LDLAR - Load LOAcquire register.
    /// </summary>
    LDLAR_lr64_ldstord,
    /// <summary>
    /// Instruction LDNF1B - Contiguous load non-fault unsigned bytes to vector (immediate index).
    /// </summary>
    LDNF1B_z_p_bi_u16,
    /// <summary>
    /// Instruction LDNF1B - Contiguous load non-fault unsigned bytes to vector (immediate index).
    /// </summary>
    LDNF1B_z_p_bi_u32,
    /// <summary>
    /// Instruction LDNF1B - Contiguous load non-fault unsigned bytes to vector (immediate index).
    /// </summary>
    LDNF1B_z_p_bi_u64,
    /// <summary>
    /// Instruction LDNF1B - Contiguous load non-fault unsigned bytes to vector (immediate index).
    /// </summary>
    LDNF1B_z_p_bi_u8,
    /// <summary>
    /// Instruction LDNF1D - Contiguous load non-fault doublewords to vector (immediate index).
    /// </summary>
    LDNF1D_z_p_bi_u64,
    /// <summary>
    /// Instruction LDNF1H - Contiguous load non-fault unsigned halfwords to vector (immediate index).
    /// </summary>
    LDNF1H_z_p_bi_u16,
    /// <summary>
    /// Instruction LDNF1H - Contiguous load non-fault unsigned halfwords to vector (immediate index).
    /// </summary>
    LDNF1H_z_p_bi_u32,
    /// <summary>
    /// Instruction LDNF1H - Contiguous load non-fault unsigned halfwords to vector (immediate index).
    /// </summary>
    LDNF1H_z_p_bi_u64,
    /// <summary>
    /// Instruction LDNF1SB - Contiguous load non-fault signed bytes to vector (immediate index).
    /// </summary>
    LDNF1SB_z_p_bi_s16,
    /// <summary>
    /// Instruction LDNF1SB - Contiguous load non-fault signed bytes to vector (immediate index).
    /// </summary>
    LDNF1SB_z_p_bi_s32,
    /// <summary>
    /// Instruction LDNF1SB - Contiguous load non-fault signed bytes to vector (immediate index).
    /// </summary>
    LDNF1SB_z_p_bi_s64,
    /// <summary>
    /// Instruction LDNF1SH - Contiguous load non-fault signed halfwords to vector (immediate index).
    /// </summary>
    LDNF1SH_z_p_bi_s32,
    /// <summary>
    /// Instruction LDNF1SH - Contiguous load non-fault signed halfwords to vector (immediate index).
    /// </summary>
    LDNF1SH_z_p_bi_s64,
    /// <summary>
    /// Instruction LDNF1SW - Contiguous load non-fault signed words to vector (immediate index).
    /// </summary>
    LDNF1SW_z_p_bi_s64,
    /// <summary>
    /// Instruction LDNF1W - Contiguous load non-fault unsigned words to vector (immediate index).
    /// </summary>
    LDNF1W_z_p_bi_u32,
    /// <summary>
    /// Instruction LDNF1W - Contiguous load non-fault unsigned words to vector (immediate index).
    /// </summary>
    LDNF1W_z_p_bi_u64,
    /// <summary>
    /// Instruction LDNP - Load pair of registers, with non-temporal hint.
    /// </summary>
    LDNP_32_ldstnapair_offs,
    /// <summary>
    /// Instruction LDNP - Load pair of registers, with non-temporal hint.
    /// </summary>
    LDNP_64_ldstnapair_offs,
    /// <summary>
    /// Instruction LDNP - Load pair of SIMD&FP registers, with non-temporal hint.
    /// </summary>
    LDNP_d_ldstnapair_offs,
    /// <summary>
    /// Instruction LDNP - Load pair of SIMD&FP registers, with non-temporal hint.
    /// </summary>
    LDNP_q_ldstnapair_offs,
    /// <summary>
    /// Instruction LDNP - Load pair of SIMD&FP registers, with non-temporal hint.
    /// </summary>
    LDNP_s_ldstnapair_offs,
    /// <summary>
    /// Instruction LDNT1B - Contiguous load non-temporal of bytes to multiple consecutive vectors (immediate index).
    /// </summary>
    LDNT1B_mz_p_bi_2,
    /// <summary>
    /// Instruction LDNT1B - Contiguous load non-temporal of bytes to multiple consecutive vectors (immediate index).
    /// </summary>
    LDNT1B_mz_p_bi_4,
    /// <summary>
    /// Instruction LDNT1B - Contiguous load non-temporal of bytes to multiple consecutive vectors (scalar index).
    /// </summary>
    LDNT1B_mz_p_br_2,
    /// <summary>
    /// Instruction LDNT1B - Contiguous load non-temporal of bytes to multiple consecutive vectors (scalar index).
    /// </summary>
    LDNT1B_mz_p_br_4,
    /// <summary>
    /// Instruction LDNT1B - Contiguous load non-temporal of bytes to multiple strided vectors (immediate index).
    /// </summary>
    LDNT1B_mzx_p_bi_2x8,
    /// <summary>
    /// Instruction LDNT1B - Contiguous load non-temporal of bytes to multiple strided vectors (immediate index).
    /// </summary>
    LDNT1B_mzx_p_bi_4x4,
    /// <summary>
    /// Instruction LDNT1B - Contiguous load non-temporal of bytes to multiple strided vectors (scalar index).
    /// </summary>
    LDNT1B_mzx_p_br_2x8,
    /// <summary>
    /// Instruction LDNT1B - Contiguous load non-temporal of bytes to multiple strided vectors (scalar index).
    /// </summary>
    LDNT1B_mzx_p_br_4x4,
    /// <summary>
    /// Instruction LDNT1B - Gather load non-temporal unsigned bytes.
    /// </summary>
    LDNT1B_z_p_ar_d_64_unscaled,
    /// <summary>
    /// Instruction LDNT1B - Gather load non-temporal unsigned bytes.
    /// </summary>
    LDNT1B_z_p_ar_s_x32_unscaled,
    /// <summary>
    /// Instruction LDNT1B - Contiguous load non-temporal bytes to vector (immediate index).
    /// </summary>
    LDNT1B_z_p_bi_contiguous,
    /// <summary>
    /// Instruction LDNT1B - Contiguous load non-temporal bytes to vector (scalar index).
    /// </summary>
    LDNT1B_z_p_br_contiguous,
    /// <summary>
    /// Instruction LDNT1D - Contiguous load non-temporal of doublewords to multiple consecutive vectors (immediate index).
    /// </summary>
    LDNT1D_mz_p_bi_2,
    /// <summary>
    /// Instruction LDNT1D - Contiguous load non-temporal of doublewords to multiple consecutive vectors (immediate index).
    /// </summary>
    LDNT1D_mz_p_bi_4,
    /// <summary>
    /// Instruction LDNT1D - Contiguous load non-temporal of doublewords to multiple consecutive vectors (scalar index).
    /// </summary>
    LDNT1D_mz_p_br_2,
    /// <summary>
    /// Instruction LDNT1D - Contiguous load non-temporal of doublewords to multiple consecutive vectors (scalar index).
    /// </summary>
    LDNT1D_mz_p_br_4,
    /// <summary>
    /// Instruction LDNT1D - Contiguous load non-temporal of doublewords to multiple strided vectors (immediate index).
    /// </summary>
    LDNT1D_mzx_p_bi_2x8,
    /// <summary>
    /// Instruction LDNT1D - Contiguous load non-temporal of doublewords to multiple strided vectors (immediate index).
    /// </summary>
    LDNT1D_mzx_p_bi_4x4,
    /// <summary>
    /// Instruction LDNT1D - Contiguous load non-temporal of doublewords to multiple strided vectors (scalar index).
    /// </summary>
    LDNT1D_mzx_p_br_2x8,
    /// <summary>
    /// Instruction LDNT1D - Contiguous load non-temporal of doublewords to multiple strided vectors (scalar index).
    /// </summary>
    LDNT1D_mzx_p_br_4x4,
    /// <summary>
    /// Instruction LDNT1D - Gather load non-temporal unsigned doublewords.
    /// </summary>
    LDNT1D_z_p_ar_d_64_unscaled,
    /// <summary>
    /// Instruction LDNT1D - Contiguous load non-temporal doublewords to vector (immediate index).
    /// </summary>
    LDNT1D_z_p_bi_contiguous,
    /// <summary>
    /// Instruction LDNT1D - Contiguous load non-temporal doublewords to vector (scalar index).
    /// </summary>
    LDNT1D_z_p_br_contiguous,
    /// <summary>
    /// Instruction LDNT1H - Contiguous load non-temporal of halfwords to multiple consecutive vectors (immediate index).
    /// </summary>
    LDNT1H_mz_p_bi_2,
    /// <summary>
    /// Instruction LDNT1H - Contiguous load non-temporal of halfwords to multiple consecutive vectors (immediate index).
    /// </summary>
    LDNT1H_mz_p_bi_4,
    /// <summary>
    /// Instruction LDNT1H - Contiguous load non-temporal of halfwords to multiple consecutive vectors (scalar index).
    /// </summary>
    LDNT1H_mz_p_br_2,
    /// <summary>
    /// Instruction LDNT1H - Contiguous load non-temporal of halfwords to multiple consecutive vectors (scalar index).
    /// </summary>
    LDNT1H_mz_p_br_4,
    /// <summary>
    /// Instruction LDNT1H - Contiguous load non-temporal of halfwords to multiple strided vectors (immediate index).
    /// </summary>
    LDNT1H_mzx_p_bi_2x8,
    /// <summary>
    /// Instruction LDNT1H - Contiguous load non-temporal of halfwords to multiple strided vectors (immediate index).
    /// </summary>
    LDNT1H_mzx_p_bi_4x4,
    /// <summary>
    /// Instruction LDNT1H - Contiguous load non-temporal of halfwords to multiple strided vectors (scalar index).
    /// </summary>
    LDNT1H_mzx_p_br_2x8,
    /// <summary>
    /// Instruction LDNT1H - Contiguous load non-temporal of halfwords to multiple strided vectors (scalar index).
    /// </summary>
    LDNT1H_mzx_p_br_4x4,
    /// <summary>
    /// Instruction LDNT1H - Gather load non-temporal unsigned halfwords.
    /// </summary>
    LDNT1H_z_p_ar_d_64_unscaled,
    /// <summary>
    /// Instruction LDNT1H - Gather load non-temporal unsigned halfwords.
    /// </summary>
    LDNT1H_z_p_ar_s_x32_unscaled,
    /// <summary>
    /// Instruction LDNT1H - Contiguous load non-temporal halfwords to vector (immediate index).
    /// </summary>
    LDNT1H_z_p_bi_contiguous,
    /// <summary>
    /// Instruction LDNT1H - Contiguous load non-temporal halfwords to vector (scalar index).
    /// </summary>
    LDNT1H_z_p_br_contiguous,
    /// <summary>
    /// Instruction LDNT1SB - Gather load non-temporal signed bytes.
    /// </summary>
    LDNT1SB_z_p_ar_d_64_unscaled,
    /// <summary>
    /// Instruction LDNT1SB - Gather load non-temporal signed bytes.
    /// </summary>
    LDNT1SB_z_p_ar_s_x32_unscaled,
    /// <summary>
    /// Instruction LDNT1SH - Gather load non-temporal signed halfwords.
    /// </summary>
    LDNT1SH_z_p_ar_d_64_unscaled,
    /// <summary>
    /// Instruction LDNT1SH - Gather load non-temporal signed halfwords.
    /// </summary>
    LDNT1SH_z_p_ar_s_x32_unscaled,
    /// <summary>
    /// Instruction LDNT1SW - Gather load non-temporal signed words.
    /// </summary>
    LDNT1SW_z_p_ar_d_64_unscaled,
    /// <summary>
    /// Instruction LDNT1W - Contiguous load non-temporal of words to multiple consecutive vectors (immediate index).
    /// </summary>
    LDNT1W_mz_p_bi_2,
    /// <summary>
    /// Instruction LDNT1W - Contiguous load non-temporal of words to multiple consecutive vectors (immediate index).
    /// </summary>
    LDNT1W_mz_p_bi_4,
    /// <summary>
    /// Instruction LDNT1W - Contiguous load non-temporal of words to multiple consecutive vectors (scalar index).
    /// </summary>
    LDNT1W_mz_p_br_2,
    /// <summary>
    /// Instruction LDNT1W - Contiguous load non-temporal of words to multiple consecutive vectors (scalar index).
    /// </summary>
    LDNT1W_mz_p_br_4,
    /// <summary>
    /// Instruction LDNT1W - Contiguous load non-temporal of words to multiple strided vectors (immediate index).
    /// </summary>
    LDNT1W_mzx_p_bi_2x8,
    /// <summary>
    /// Instruction LDNT1W - Contiguous load non-temporal of words to multiple strided vectors (immediate index).
    /// </summary>
    LDNT1W_mzx_p_bi_4x4,
    /// <summary>
    /// Instruction LDNT1W - Contiguous load non-temporal of words to multiple strided vectors (scalar index).
    /// </summary>
    LDNT1W_mzx_p_br_2x8,
    /// <summary>
    /// Instruction LDNT1W - Contiguous load non-temporal of words to multiple strided vectors (scalar index).
    /// </summary>
    LDNT1W_mzx_p_br_4x4,
    /// <summary>
    /// Instruction LDNT1W - Gather load non-temporal unsigned words.
    /// </summary>
    LDNT1W_z_p_ar_d_64_unscaled,
    /// <summary>
    /// Instruction LDNT1W - Gather load non-temporal unsigned words.
    /// </summary>
    LDNT1W_z_p_ar_s_x32_unscaled,
    /// <summary>
    /// Instruction LDNT1W - Contiguous load non-temporal words to vector (immediate index).
    /// </summary>
    LDNT1W_z_p_bi_contiguous,
    /// <summary>
    /// Instruction LDNT1W - Contiguous load non-temporal words to vector (scalar index).
    /// </summary>
    LDNT1W_z_p_br_contiguous,
    /// <summary>
    /// Instruction LDPSW - Load pair of registers signed word.
    /// </summary>
    LDPSW_64_ldstpair_off,
    /// <summary>
    /// Instruction LDPSW - Load pair of registers signed word.
    /// </summary>
    LDPSW_64_ldstpair_post,
    /// <summary>
    /// Instruction LDPSW - Load pair of registers signed word.
    /// </summary>
    LDPSW_64_ldstpair_pre,
    /// <summary>
    /// Instruction LDP - Load pair of registers.
    /// </summary>
    LDP_32_ldstpair_off,
    /// <summary>
    /// Instruction LDP - Load pair of registers.
    /// </summary>
    LDP_32_ldstpair_post,
    /// <summary>
    /// Instruction LDP - Load pair of registers.
    /// </summary>
    LDP_32_ldstpair_pre,
    /// <summary>
    /// Instruction LDP - Load pair of registers.
    /// </summary>
    LDP_64_ldstpair_off,
    /// <summary>
    /// Instruction LDP - Load pair of registers.
    /// </summary>
    LDP_64_ldstpair_post,
    /// <summary>
    /// Instruction LDP - Load pair of registers.
    /// </summary>
    LDP_64_ldstpair_pre,
    /// <summary>
    /// Instruction LDP - Load pair of SIMD&FP registers.
    /// </summary>
    LDP_d_ldstpair_off,
    /// <summary>
    /// Instruction LDP - Load pair of SIMD&FP registers.
    /// </summary>
    LDP_d_ldstpair_post,
    /// <summary>
    /// Instruction LDP - Load pair of SIMD&FP registers.
    /// </summary>
    LDP_d_ldstpair_pre,
    /// <summary>
    /// Instruction LDP - Load pair of SIMD&FP registers.
    /// </summary>
    LDP_q_ldstpair_off,
    /// <summary>
    /// Instruction LDP - Load pair of SIMD&FP registers.
    /// </summary>
    LDP_q_ldstpair_post,
    /// <summary>
    /// Instruction LDP - Load pair of SIMD&FP registers.
    /// </summary>
    LDP_q_ldstpair_pre,
    /// <summary>
    /// Instruction LDP - Load pair of SIMD&FP registers.
    /// </summary>
    LDP_s_ldstpair_off,
    /// <summary>
    /// Instruction LDP - Load pair of SIMD&FP registers.
    /// </summary>
    LDP_s_ldstpair_post,
    /// <summary>
    /// Instruction LDP - Load pair of SIMD&FP registers.
    /// </summary>
    LDP_s_ldstpair_pre,
    /// <summary>
    /// Instruction LDRAA - Load register, with pointer authentication.
    /// </summary>
    LDRAA_64_ldst_pac,
    /// <summary>
    /// Instruction LDRAA - Load register, with pointer authentication.
    /// </summary>
    LDRAA_64w_ldst_pac,
    /// <summary>
    /// Instruction LDRAB - Load register, with pointer authentication.
    /// </summary>
    LDRAB_64_ldst_pac,
    /// <summary>
    /// Instruction LDRAB - Load register, with pointer authentication.
    /// </summary>
    LDRAB_64w_ldst_pac,
    /// <summary>
    /// Instruction LDRB - Load register byte (immediate).
    /// </summary>
    LDRB_32_ldst_immpost,
    /// <summary>
    /// Instruction LDRB - Load register byte (immediate).
    /// </summary>
    LDRB_32_ldst_immpre,
    /// <summary>
    /// Instruction LDRB - Load register byte (immediate).
    /// </summary>
    LDRB_32_ldst_pos,
    /// <summary>
    /// Instruction LDRB - Load register byte (register).
    /// </summary>
    LDRB_32b_ldst_regoff,
    /// <summary>
    /// Instruction LDRB - Load register byte (register).
    /// </summary>
    LDRB_32bl_ldst_regoff,
    /// <summary>
    /// Instruction LDRH - Load register halfword (immediate).
    /// </summary>
    LDRH_32_ldst_immpost,
    /// <summary>
    /// Instruction LDRH - Load register halfword (immediate).
    /// </summary>
    LDRH_32_ldst_immpre,
    /// <summary>
    /// Instruction LDRH - Load register halfword (immediate).
    /// </summary>
    LDRH_32_ldst_pos,
    /// <summary>
    /// Instruction LDRH - Load register halfword (register).
    /// </summary>
    LDRH_32_ldst_regoff,
    /// <summary>
    /// Instruction LDRSB - Load register signed byte (immediate).
    /// </summary>
    LDRSB_32_ldst_immpost,
    /// <summary>
    /// Instruction LDRSB - Load register signed byte (immediate).
    /// </summary>
    LDRSB_32_ldst_immpre,
    /// <summary>
    /// Instruction LDRSB - Load register signed byte (immediate).
    /// </summary>
    LDRSB_32_ldst_pos,
    /// <summary>
    /// Instruction LDRSB - Load register signed byte (register).
    /// </summary>
    LDRSB_32b_ldst_regoff,
    /// <summary>
    /// Instruction LDRSB - Load register signed byte (register).
    /// </summary>
    LDRSB_32bl_ldst_regoff,
    /// <summary>
    /// Instruction LDRSB - Load register signed byte (immediate).
    /// </summary>
    LDRSB_64_ldst_immpost,
    /// <summary>
    /// Instruction LDRSB - Load register signed byte (immediate).
    /// </summary>
    LDRSB_64_ldst_immpre,
    /// <summary>
    /// Instruction LDRSB - Load register signed byte (immediate).
    /// </summary>
    LDRSB_64_ldst_pos,
    /// <summary>
    /// Instruction LDRSB - Load register signed byte (register).
    /// </summary>
    LDRSB_64b_ldst_regoff,
    /// <summary>
    /// Instruction LDRSB - Load register signed byte (register).
    /// </summary>
    LDRSB_64bl_ldst_regoff,
    /// <summary>
    /// Instruction LDRSH - Load register signed halfword (immediate).
    /// </summary>
    LDRSH_32_ldst_immpost,
    /// <summary>
    /// Instruction LDRSH - Load register signed halfword (immediate).
    /// </summary>
    LDRSH_32_ldst_immpre,
    /// <summary>
    /// Instruction LDRSH - Load register signed halfword (immediate).
    /// </summary>
    LDRSH_32_ldst_pos,
    /// <summary>
    /// Instruction LDRSH - Load register signed halfword (register).
    /// </summary>
    LDRSH_32_ldst_regoff,
    /// <summary>
    /// Instruction LDRSH - Load register signed halfword (immediate).
    /// </summary>
    LDRSH_64_ldst_immpost,
    /// <summary>
    /// Instruction LDRSH - Load register signed halfword (immediate).
    /// </summary>
    LDRSH_64_ldst_immpre,
    /// <summary>
    /// Instruction LDRSH - Load register signed halfword (immediate).
    /// </summary>
    LDRSH_64_ldst_pos,
    /// <summary>
    /// Instruction LDRSH - Load register signed halfword (register).
    /// </summary>
    LDRSH_64_ldst_regoff,
    /// <summary>
    /// Instruction LDRSW - Load register signed word (immediate).
    /// </summary>
    LDRSW_64_ldst_immpost,
    /// <summary>
    /// Instruction LDRSW - Load register signed word (immediate).
    /// </summary>
    LDRSW_64_ldst_immpre,
    /// <summary>
    /// Instruction LDRSW - Load register signed word (immediate).
    /// </summary>
    LDRSW_64_ldst_pos,
    /// <summary>
    /// Instruction LDRSW - Load register signed word (register).
    /// </summary>
    LDRSW_64_ldst_regoff,
    /// <summary>
    /// Instruction LDRSW - Load register signed word (literal).
    /// </summary>
    LDRSW_64_loadlit,
    /// <summary>
    /// Instruction LDR - Load register (immediate).
    /// </summary>
    LDR_32_ldst_immpost,
    /// <summary>
    /// Instruction LDR - Load register (immediate).
    /// </summary>
    LDR_32_ldst_immpre,
    /// <summary>
    /// Instruction LDR - Load register (immediate).
    /// </summary>
    LDR_32_ldst_pos,
    /// <summary>
    /// Instruction LDR - Load register (register).
    /// </summary>
    LDR_32_ldst_regoff,
    /// <summary>
    /// Instruction LDR - Load register (literal).
    /// </summary>
    LDR_32_loadlit,
    /// <summary>
    /// Instruction LDR - Load register (immediate).
    /// </summary>
    LDR_64_ldst_immpost,
    /// <summary>
    /// Instruction LDR - Load register (immediate).
    /// </summary>
    LDR_64_ldst_immpre,
    /// <summary>
    /// Instruction LDR - Load register (immediate).
    /// </summary>
    LDR_64_ldst_pos,
    /// <summary>
    /// Instruction LDR - Load register (register).
    /// </summary>
    LDR_64_ldst_regoff,
    /// <summary>
    /// Instruction LDR - Load register (literal).
    /// </summary>
    LDR_64_loadlit,
    /// <summary>
    /// Instruction LDR - Load SIMD&FP register (immediate offset).
    /// </summary>
    LDR_b_ldst_immpost,
    /// <summary>
    /// Instruction LDR - Load SIMD&FP register (immediate offset).
    /// </summary>
    LDR_b_ldst_immpre,
    /// <summary>
    /// Instruction LDR - Load SIMD&FP register (immediate offset).
    /// </summary>
    LDR_b_ldst_pos,
    /// <summary>
    /// Instruction LDR - Load SIMD&FP register (register offset).
    /// </summary>
    LDR_b_ldst_regoff,
    /// <summary>
    /// Instruction LDR - Load SIMD&FP register (register offset).
    /// </summary>
    LDR_bl_ldst_regoff,
    /// <summary>
    /// Instruction LDR - Load SIMD&FP register (immediate offset).
    /// </summary>
    LDR_d_ldst_immpost,
    /// <summary>
    /// Instruction LDR - Load SIMD&FP register (immediate offset).
    /// </summary>
    LDR_d_ldst_immpre,
    /// <summary>
    /// Instruction LDR - Load SIMD&FP register (immediate offset).
    /// </summary>
    LDR_d_ldst_pos,
    /// <summary>
    /// Instruction LDR - Load SIMD&FP register (register offset).
    /// </summary>
    LDR_d_ldst_regoff,
    /// <summary>
    /// Instruction LDR - Load SIMD&FP register (PC-relative literal).
    /// </summary>
    LDR_d_loadlit,
    /// <summary>
    /// Instruction LDR - Load SIMD&FP register (immediate offset).
    /// </summary>
    LDR_h_ldst_immpost,
    /// <summary>
    /// Instruction LDR - Load SIMD&FP register (immediate offset).
    /// </summary>
    LDR_h_ldst_immpre,
    /// <summary>
    /// Instruction LDR - Load SIMD&FP register (immediate offset).
    /// </summary>
    LDR_h_ldst_pos,
    /// <summary>
    /// Instruction LDR - Load SIMD&FP register (register offset).
    /// </summary>
    LDR_h_ldst_regoff,
    /// <summary>
    /// Instruction LDR - Load predicate register.
    /// </summary>
    LDR_p_bi,
    /// <summary>
    /// Instruction LDR - Load SIMD&FP register (immediate offset).
    /// </summary>
    LDR_q_ldst_immpost,
    /// <summary>
    /// Instruction LDR - Load SIMD&FP register (immediate offset).
    /// </summary>
    LDR_q_ldst_immpre,
    /// <summary>
    /// Instruction LDR - Load SIMD&FP register (immediate offset).
    /// </summary>
    LDR_q_ldst_pos,
    /// <summary>
    /// Instruction LDR - Load SIMD&FP register (register offset).
    /// </summary>
    LDR_q_ldst_regoff,
    /// <summary>
    /// Instruction LDR - Load SIMD&FP register (PC-relative literal).
    /// </summary>
    LDR_q_loadlit,
    /// <summary>
    /// Instruction LDR - Load SIMD&FP register (immediate offset).
    /// </summary>
    LDR_s_ldst_immpost,
    /// <summary>
    /// Instruction LDR - Load SIMD&FP register (immediate offset).
    /// </summary>
    LDR_s_ldst_immpre,
    /// <summary>
    /// Instruction LDR - Load SIMD&FP register (immediate offset).
    /// </summary>
    LDR_s_ldst_pos,
    /// <summary>
    /// Instruction LDR - Load SIMD&FP register (register offset).
    /// </summary>
    LDR_s_ldst_regoff,
    /// <summary>
    /// Instruction LDR - Load SIMD&FP register (PC-relative literal).
    /// </summary>
    LDR_s_loadlit,
    /// <summary>
    /// Instruction LDR - Load vector register.
    /// </summary>
    LDR_z_bi,
    /// <summary>
    /// Instruction LDR - Load ZA array vector.
    /// </summary>
    LDR_za_ri,
    /// <summary>
    /// Instruction LDR - Load ZT0 register.
    /// </summary>
    LDR_zt_br,
    /// <summary>
    /// Instruction LDSETAB - Atomic bit set on byte in memory.
    /// </summary>
    LDSETAB_32_memop,
    /// <summary>
    /// Instruction LDSETAH - Atomic bit set on halfword in memory.
    /// </summary>
    LDSETAH_32_memop,
    /// <summary>
    /// Instruction LDSETALB - Atomic bit set on byte in memory.
    /// </summary>
    LDSETALB_32_memop,
    /// <summary>
    /// Instruction LDSETALH - Atomic bit set on halfword in memory.
    /// </summary>
    LDSETALH_32_memop,
    /// <summary>
    /// Instruction LDSETAL - Atomic bit set on word or doubleword in memory.
    /// </summary>
    LDSETAL_32_memop,
    /// <summary>
    /// Instruction LDSETAL - Atomic bit set on word or doubleword in memory.
    /// </summary>
    LDSETAL_64_memop,
    /// <summary>
    /// Instruction LDSETA - Atomic bit set on word or doubleword in memory.
    /// </summary>
    LDSETA_32_memop,
    /// <summary>
    /// Instruction LDSETA - Atomic bit set on word or doubleword in memory.
    /// </summary>
    LDSETA_64_memop,
    /// <summary>
    /// Instruction LDSETB - Atomic bit set on byte in memory.
    /// </summary>
    LDSETB_32_memop,
    /// <summary>
    /// Instruction LDSETH - Atomic bit set on halfword in memory.
    /// </summary>
    LDSETH_32_memop,
    /// <summary>
    /// Instruction LDSETLB - Atomic bit set on byte in memory.
    /// </summary>
    LDSETLB_32_memop,
    /// <summary>
    /// Instruction LDSETLH - Atomic bit set on halfword in memory.
    /// </summary>
    LDSETLH_32_memop,
    /// <summary>
    /// Instruction LDSETL - Atomic bit set on word or doubleword in memory.
    /// </summary>
    LDSETL_32_memop,
    /// <summary>
    /// Instruction LDSETL - Atomic bit set on word or doubleword in memory.
    /// </summary>
    LDSETL_64_memop,
    /// <summary>
    /// Instruction LDSETPAL - Atomic bit set on quadword in memory.
    /// </summary>
    LDSETPAL_128_memop_128,
    /// <summary>
    /// Instruction LDSETPA - Atomic bit set on quadword in memory.
    /// </summary>
    LDSETPA_128_memop_128,
    /// <summary>
    /// Instruction LDSETPL - Atomic bit set on quadword in memory.
    /// </summary>
    LDSETPL_128_memop_128,
    /// <summary>
    /// Instruction LDSETP - Atomic bit set on quadword in memory.
    /// </summary>
    LDSETP_128_memop_128,
    /// <summary>
    /// Instruction LDSET - Atomic bit set on word or doubleword in memory.
    /// </summary>
    LDSET_32_memop,
    /// <summary>
    /// Instruction LDSET - Atomic bit set on word or doubleword in memory.
    /// </summary>
    LDSET_64_memop,
    /// <summary>
    /// Instruction LDSMAXAB - Atomic signed maximum on byte in memory.
    /// </summary>
    LDSMAXAB_32_memop,
    /// <summary>
    /// Instruction LDSMAXAH - Atomic signed maximum on halfword in memory.
    /// </summary>
    LDSMAXAH_32_memop,
    /// <summary>
    /// Instruction LDSMAXALB - Atomic signed maximum on byte in memory.
    /// </summary>
    LDSMAXALB_32_memop,
    /// <summary>
    /// Instruction LDSMAXALH - Atomic signed maximum on halfword in memory.
    /// </summary>
    LDSMAXALH_32_memop,
    /// <summary>
    /// Instruction LDSMAXAL - Atomic signed maximum on word or doubleword in memory.
    /// </summary>
    LDSMAXAL_32_memop,
    /// <summary>
    /// Instruction LDSMAXAL - Atomic signed maximum on word or doubleword in memory.
    /// </summary>
    LDSMAXAL_64_memop,
    /// <summary>
    /// Instruction LDSMAXA - Atomic signed maximum on word or doubleword in memory.
    /// </summary>
    LDSMAXA_32_memop,
    /// <summary>
    /// Instruction LDSMAXA - Atomic signed maximum on word or doubleword in memory.
    /// </summary>
    LDSMAXA_64_memop,
    /// <summary>
    /// Instruction LDSMAXB - Atomic signed maximum on byte in memory.
    /// </summary>
    LDSMAXB_32_memop,
    /// <summary>
    /// Instruction LDSMAXH - Atomic signed maximum on halfword in memory.
    /// </summary>
    LDSMAXH_32_memop,
    /// <summary>
    /// Instruction LDSMAXLB - Atomic signed maximum on byte in memory.
    /// </summary>
    LDSMAXLB_32_memop,
    /// <summary>
    /// Instruction LDSMAXLH - Atomic signed maximum on halfword in memory.
    /// </summary>
    LDSMAXLH_32_memop,
    /// <summary>
    /// Instruction LDSMAXL - Atomic signed maximum on word or doubleword in memory.
    /// </summary>
    LDSMAXL_32_memop,
    /// <summary>
    /// Instruction LDSMAXL - Atomic signed maximum on word or doubleword in memory.
    /// </summary>
    LDSMAXL_64_memop,
    /// <summary>
    /// Instruction LDSMAX - Atomic signed maximum on word or doubleword in memory.
    /// </summary>
    LDSMAX_32_memop,
    /// <summary>
    /// Instruction LDSMAX - Atomic signed maximum on word or doubleword in memory.
    /// </summary>
    LDSMAX_64_memop,
    /// <summary>
    /// Instruction LDSMINAB - Atomic signed minimum on byte in memory.
    /// </summary>
    LDSMINAB_32_memop,
    /// <summary>
    /// Instruction LDSMINAH - Atomic signed minimum on halfword in memory.
    /// </summary>
    LDSMINAH_32_memop,
    /// <summary>
    /// Instruction LDSMINALB - Atomic signed minimum on byte in memory.
    /// </summary>
    LDSMINALB_32_memop,
    /// <summary>
    /// Instruction LDSMINALH - Atomic signed minimum on halfword in memory.
    /// </summary>
    LDSMINALH_32_memop,
    /// <summary>
    /// Instruction LDSMINAL - Atomic signed minimum on word or doubleword in memory.
    /// </summary>
    LDSMINAL_32_memop,
    /// <summary>
    /// Instruction LDSMINAL - Atomic signed minimum on word or doubleword in memory.
    /// </summary>
    LDSMINAL_64_memop,
    /// <summary>
    /// Instruction LDSMINA - Atomic signed minimum on word or doubleword in memory.
    /// </summary>
    LDSMINA_32_memop,
    /// <summary>
    /// Instruction LDSMINA - Atomic signed minimum on word or doubleword in memory.
    /// </summary>
    LDSMINA_64_memop,
    /// <summary>
    /// Instruction LDSMINB - Atomic signed minimum on byte in memory.
    /// </summary>
    LDSMINB_32_memop,
    /// <summary>
    /// Instruction LDSMINH - Atomic signed minimum on halfword in memory.
    /// </summary>
    LDSMINH_32_memop,
    /// <summary>
    /// Instruction LDSMINLB - Atomic signed minimum on byte in memory.
    /// </summary>
    LDSMINLB_32_memop,
    /// <summary>
    /// Instruction LDSMINLH - Atomic signed minimum on halfword in memory.
    /// </summary>
    LDSMINLH_32_memop,
    /// <summary>
    /// Instruction LDSMINL - Atomic signed minimum on word or doubleword in memory.
    /// </summary>
    LDSMINL_32_memop,
    /// <summary>
    /// Instruction LDSMINL - Atomic signed minimum on word or doubleword in memory.
    /// </summary>
    LDSMINL_64_memop,
    /// <summary>
    /// Instruction LDSMIN - Atomic signed minimum on word or doubleword in memory.
    /// </summary>
    LDSMIN_32_memop,
    /// <summary>
    /// Instruction LDSMIN - Atomic signed minimum on word or doubleword in memory.
    /// </summary>
    LDSMIN_64_memop,
    /// <summary>
    /// Instruction LDTADDAL - Atomic add unprivileged.
    /// </summary>
    LDTADDAL_32_memop_unpriv,
    /// <summary>
    /// Instruction LDTADDAL - Atomic add unprivileged.
    /// </summary>
    LDTADDAL_64_memop_unpriv,
    /// <summary>
    /// Instruction LDTADDA - Atomic add unprivileged.
    /// </summary>
    LDTADDA_32_memop_unpriv,
    /// <summary>
    /// Instruction LDTADDA - Atomic add unprivileged.
    /// </summary>
    LDTADDA_64_memop_unpriv,
    /// <summary>
    /// Instruction LDTADDL - Atomic add unprivileged.
    /// </summary>
    LDTADDL_32_memop_unpriv,
    /// <summary>
    /// Instruction LDTADDL - Atomic add unprivileged.
    /// </summary>
    LDTADDL_64_memop_unpriv,
    /// <summary>
    /// Instruction LDTADD - Atomic add unprivileged.
    /// </summary>
    LDTADD_32_memop_unpriv,
    /// <summary>
    /// Instruction LDTADD - Atomic add unprivileged.
    /// </summary>
    LDTADD_64_memop_unpriv,
    /// <summary>
    /// Instruction LDTCLRAL - Atomic bit clear unprivileged.
    /// </summary>
    LDTCLRAL_32_memop_unpriv,
    /// <summary>
    /// Instruction LDTCLRAL - Atomic bit clear unprivileged.
    /// </summary>
    LDTCLRAL_64_memop_unpriv,
    /// <summary>
    /// Instruction LDTCLRA - Atomic bit clear unprivileged.
    /// </summary>
    LDTCLRA_32_memop_unpriv,
    /// <summary>
    /// Instruction LDTCLRA - Atomic bit clear unprivileged.
    /// </summary>
    LDTCLRA_64_memop_unpriv,
    /// <summary>
    /// Instruction LDTCLRL - Atomic bit clear unprivileged.
    /// </summary>
    LDTCLRL_32_memop_unpriv,
    /// <summary>
    /// Instruction LDTCLRL - Atomic bit clear unprivileged.
    /// </summary>
    LDTCLRL_64_memop_unpriv,
    /// <summary>
    /// Instruction LDTCLR - Atomic bit clear unprivileged.
    /// </summary>
    LDTCLR_32_memop_unpriv,
    /// <summary>
    /// Instruction LDTCLR - Atomic bit clear unprivileged.
    /// </summary>
    LDTCLR_64_memop_unpriv,
    /// <summary>
    /// Instruction LDTNP - Load unprivileged pair of registers, with non-temporal hint.
    /// </summary>
    LDTNP_64_ldstnapair_offs,
    /// <summary>
    /// Instruction LDTNP - Load unprivileged pair of SIMD&FP registers, with non-temporal hint.
    /// </summary>
    LDTNP_q_ldstnapair_offs,
    /// <summary>
    /// Instruction LDTP - Load unprivileged pair of registers.
    /// </summary>
    LDTP_64_ldstpair_off,
    /// <summary>
    /// Instruction LDTP - Load unprivileged pair of registers.
    /// </summary>
    LDTP_64_ldstpair_post,
    /// <summary>
    /// Instruction LDTP - Load unprivileged pair of registers.
    /// </summary>
    LDTP_64_ldstpair_pre,
    /// <summary>
    /// Instruction LDTP - Load unprivileged pair of SIMD&FP registers.
    /// </summary>
    LDTP_q_ldstpair_off,
    /// <summary>
    /// Instruction LDTP - Load unprivileged pair of SIMD&FP registers.
    /// </summary>
    LDTP_q_ldstpair_post,
    /// <summary>
    /// Instruction LDTP - Load unprivileged pair of SIMD&FP registers.
    /// </summary>
    LDTP_q_ldstpair_pre,
    /// <summary>
    /// Instruction LDTRB - Load register byte (unprivileged).
    /// </summary>
    LDTRB_32_ldst_unpriv,
    /// <summary>
    /// Instruction LDTRH - Load register halfword (unprivileged).
    /// </summary>
    LDTRH_32_ldst_unpriv,
    /// <summary>
    /// Instruction LDTRSB - Load register signed byte (unprivileged).
    /// </summary>
    LDTRSB_32_ldst_unpriv,
    /// <summary>
    /// Instruction LDTRSB - Load register signed byte (unprivileged).
    /// </summary>
    LDTRSB_64_ldst_unpriv,
    /// <summary>
    /// Instruction LDTRSH - Load register signed halfword (unprivileged).
    /// </summary>
    LDTRSH_32_ldst_unpriv,
    /// <summary>
    /// Instruction LDTRSH - Load register signed halfword (unprivileged).
    /// </summary>
    LDTRSH_64_ldst_unpriv,
    /// <summary>
    /// Instruction LDTRSW - Load register signed word (unprivileged).
    /// </summary>
    LDTRSW_64_ldst_unpriv,
    /// <summary>
    /// Instruction LDTR - Load register (unprivileged).
    /// </summary>
    LDTR_32_ldst_unpriv,
    /// <summary>
    /// Instruction LDTR - Load register (unprivileged).
    /// </summary>
    LDTR_64_ldst_unpriv,
    /// <summary>
    /// Instruction LDTSETAL - Atomic bit set unprivileged.
    /// </summary>
    LDTSETAL_32_memop_unpriv,
    /// <summary>
    /// Instruction LDTSETAL - Atomic bit set unprivileged.
    /// </summary>
    LDTSETAL_64_memop_unpriv,
    /// <summary>
    /// Instruction LDTSETA - Atomic bit set unprivileged.
    /// </summary>
    LDTSETA_32_memop_unpriv,
    /// <summary>
    /// Instruction LDTSETA - Atomic bit set unprivileged.
    /// </summary>
    LDTSETA_64_memop_unpriv,
    /// <summary>
    /// Instruction LDTSETL - Atomic bit set unprivileged.
    /// </summary>
    LDTSETL_32_memop_unpriv,
    /// <summary>
    /// Instruction LDTSETL - Atomic bit set unprivileged.
    /// </summary>
    LDTSETL_64_memop_unpriv,
    /// <summary>
    /// Instruction LDTSET - Atomic bit set unprivileged.
    /// </summary>
    LDTSET_32_memop_unpriv,
    /// <summary>
    /// Instruction LDTSET - Atomic bit set unprivileged.
    /// </summary>
    LDTSET_64_memop_unpriv,
    /// <summary>
    /// Instruction LDTXR - Load unprivileged exclusive register.
    /// </summary>
    LDTXR_lr32_ldstexclr_unpriv,
    /// <summary>
    /// Instruction LDTXR - Load unprivileged exclusive register.
    /// </summary>
    LDTXR_lr64_ldstexclr_unpriv,
    /// <summary>
    /// Instruction LDUMAXAB - Atomic unsigned maximum on byte in memory.
    /// </summary>
    LDUMAXAB_32_memop,
    /// <summary>
    /// Instruction LDUMAXAH - Atomic unsigned maximum on halfword in memory.
    /// </summary>
    LDUMAXAH_32_memop,
    /// <summary>
    /// Instruction LDUMAXALB - Atomic unsigned maximum on byte in memory.
    /// </summary>
    LDUMAXALB_32_memop,
    /// <summary>
    /// Instruction LDUMAXALH - Atomic unsigned maximum on halfword in memory.
    /// </summary>
    LDUMAXALH_32_memop,
    /// <summary>
    /// Instruction LDUMAXAL - Atomic unsigned maximum on word or doubleword in memory.
    /// </summary>
    LDUMAXAL_32_memop,
    /// <summary>
    /// Instruction LDUMAXAL - Atomic unsigned maximum on word or doubleword in memory.
    /// </summary>
    LDUMAXAL_64_memop,
    /// <summary>
    /// Instruction LDUMAXA - Atomic unsigned maximum on word or doubleword in memory.
    /// </summary>
    LDUMAXA_32_memop,
    /// <summary>
    /// Instruction LDUMAXA - Atomic unsigned maximum on word or doubleword in memory.
    /// </summary>
    LDUMAXA_64_memop,
    /// <summary>
    /// Instruction LDUMAXB - Atomic unsigned maximum on byte in memory.
    /// </summary>
    LDUMAXB_32_memop,
    /// <summary>
    /// Instruction LDUMAXH - Atomic unsigned maximum on halfword in memory.
    /// </summary>
    LDUMAXH_32_memop,
    /// <summary>
    /// Instruction LDUMAXLB - Atomic unsigned maximum on byte in memory.
    /// </summary>
    LDUMAXLB_32_memop,
    /// <summary>
    /// Instruction LDUMAXLH - Atomic unsigned maximum on halfword in memory.
    /// </summary>
    LDUMAXLH_32_memop,
    /// <summary>
    /// Instruction LDUMAXL - Atomic unsigned maximum on word or doubleword in memory.
    /// </summary>
    LDUMAXL_32_memop,
    /// <summary>
    /// Instruction LDUMAXL - Atomic unsigned maximum on word or doubleword in memory.
    /// </summary>
    LDUMAXL_64_memop,
    /// <summary>
    /// Instruction LDUMAX - Atomic unsigned maximum on word or doubleword in memory.
    /// </summary>
    LDUMAX_32_memop,
    /// <summary>
    /// Instruction LDUMAX - Atomic unsigned maximum on word or doubleword in memory.
    /// </summary>
    LDUMAX_64_memop,
    /// <summary>
    /// Instruction LDUMINAB - Atomic unsigned minimum on byte in memory.
    /// </summary>
    LDUMINAB_32_memop,
    /// <summary>
    /// Instruction LDUMINAH - Atomic unsigned minimum on halfword in memory.
    /// </summary>
    LDUMINAH_32_memop,
    /// <summary>
    /// Instruction LDUMINALB - Atomic unsigned minimum on byte in memory.
    /// </summary>
    LDUMINALB_32_memop,
    /// <summary>
    /// Instruction LDUMINALH - Atomic unsigned minimum on halfword in memory.
    /// </summary>
    LDUMINALH_32_memop,
    /// <summary>
    /// Instruction LDUMINAL - Atomic unsigned minimum on word or doubleword in memory.
    /// </summary>
    LDUMINAL_32_memop,
    /// <summary>
    /// Instruction LDUMINAL - Atomic unsigned minimum on word or doubleword in memory.
    /// </summary>
    LDUMINAL_64_memop,
    /// <summary>
    /// Instruction LDUMINA - Atomic unsigned minimum on word or doubleword in memory.
    /// </summary>
    LDUMINA_32_memop,
    /// <summary>
    /// Instruction LDUMINA - Atomic unsigned minimum on word or doubleword in memory.
    /// </summary>
    LDUMINA_64_memop,
    /// <summary>
    /// Instruction LDUMINB - Atomic unsigned minimum on byte in memory.
    /// </summary>
    LDUMINB_32_memop,
    /// <summary>
    /// Instruction LDUMINH - Atomic unsigned minimum on halfword in memory.
    /// </summary>
    LDUMINH_32_memop,
    /// <summary>
    /// Instruction LDUMINLB - Atomic unsigned minimum on byte in memory.
    /// </summary>
    LDUMINLB_32_memop,
    /// <summary>
    /// Instruction LDUMINLH - Atomic unsigned minimum on halfword in memory.
    /// </summary>
    LDUMINLH_32_memop,
    /// <summary>
    /// Instruction LDUMINL - Atomic unsigned minimum on word or doubleword in memory.
    /// </summary>
    LDUMINL_32_memop,
    /// <summary>
    /// Instruction LDUMINL - Atomic unsigned minimum on word or doubleword in memory.
    /// </summary>
    LDUMINL_64_memop,
    /// <summary>
    /// Instruction LDUMIN - Atomic unsigned minimum on word or doubleword in memory.
    /// </summary>
    LDUMIN_32_memop,
    /// <summary>
    /// Instruction LDUMIN - Atomic unsigned minimum on word or doubleword in memory.
    /// </summary>
    LDUMIN_64_memop,
    /// <summary>
    /// Instruction LDURB - Load register byte (unscaled).
    /// </summary>
    LDURB_32_ldst_unscaled,
    /// <summary>
    /// Instruction LDURH - Load register halfword (unscaled).
    /// </summary>
    LDURH_32_ldst_unscaled,
    /// <summary>
    /// Instruction LDURSB - Load register signed byte (unscaled).
    /// </summary>
    LDURSB_32_ldst_unscaled,
    /// <summary>
    /// Instruction LDURSB - Load register signed byte (unscaled).
    /// </summary>
    LDURSB_64_ldst_unscaled,
    /// <summary>
    /// Instruction LDURSH - Load register signed halfword (unscaled).
    /// </summary>
    LDURSH_32_ldst_unscaled,
    /// <summary>
    /// Instruction LDURSH - Load register signed halfword (unscaled).
    /// </summary>
    LDURSH_64_ldst_unscaled,
    /// <summary>
    /// Instruction LDURSW - Load register signed word (unscaled).
    /// </summary>
    LDURSW_64_ldst_unscaled,
    /// <summary>
    /// Instruction LDUR - Load register (unscaled).
    /// </summary>
    LDUR_32_ldst_unscaled,
    /// <summary>
    /// Instruction LDUR - Load register (unscaled).
    /// </summary>
    LDUR_64_ldst_unscaled,
    /// <summary>
    /// Instruction LDUR - Load SIMD&FP register (unscaled offset).
    /// </summary>
    LDUR_b_ldst_unscaled,
    /// <summary>
    /// Instruction LDUR - Load SIMD&FP register (unscaled offset).
    /// </summary>
    LDUR_d_ldst_unscaled,
    /// <summary>
    /// Instruction LDUR - Load SIMD&FP register (unscaled offset).
    /// </summary>
    LDUR_h_ldst_unscaled,
    /// <summary>
    /// Instruction LDUR - Load SIMD&FP register (unscaled offset).
    /// </summary>
    LDUR_q_ldst_unscaled,
    /// <summary>
    /// Instruction LDUR - Load SIMD&FP register (unscaled offset).
    /// </summary>
    LDUR_s_ldst_unscaled,
    /// <summary>
    /// Instruction LDXP - Load exclusive pair of registers.
    /// </summary>
    LDXP_lp32_ldstexclp,
    /// <summary>
    /// Instruction LDXP - Load exclusive pair of registers.
    /// </summary>
    LDXP_lp64_ldstexclp,
    /// <summary>
    /// Instruction LDXRB - Load exclusive register byte.
    /// </summary>
    LDXRB_lr32_ldstexclr,
    /// <summary>
    /// Instruction LDXRH - Load exclusive register halfword.
    /// </summary>
    LDXRH_lr32_ldstexclr,
    /// <summary>
    /// Instruction LDXR - Load exclusive register.
    /// </summary>
    LDXR_lr32_ldstexclr,
    /// <summary>
    /// Instruction LDXR - Load exclusive register.
    /// </summary>
    LDXR_lr64_ldstexclr,
    /// <summary>
    /// Instruction LSLR - Reversed logical shift left by vector (predicated).
    /// </summary>
    LSLR_z_p_zz,
    /// <summary>
    /// Instruction LSLV - Logical shift left variable.
    /// </summary>
    LSLV_32_dp_2src,
    /// <summary>
    /// Instruction LSLV - Logical shift left variable.
    /// </summary>
    LSLV_64_dp_2src,
    /// <summary>
    /// Instruction LSL - Logical shift left by immediate (predicated).
    /// </summary>
    LSL_z_p_zi,
    /// <summary>
    /// Instruction LSL - Logical shift left by 64-bit wide elements (predicated).
    /// </summary>
    LSL_z_p_zw,
    /// <summary>
    /// Instruction LSL - Logical shift left by vector (predicated).
    /// </summary>
    LSL_z_p_zz,
    /// <summary>
    /// Instruction LSL - Logical shift left by immediate (unpredicated).
    /// </summary>
    LSL_z_zi,
    /// <summary>
    /// Instruction LSL - Logical shift left by 64-bit wide elements (unpredicated).
    /// </summary>
    LSL_z_zw,
    /// <summary>
    /// Instruction LSRR - Reversed logical shift right by vector (predicated).
    /// </summary>
    LSRR_z_p_zz,
    /// <summary>
    /// Instruction LSRV - Logical shift right variable.
    /// </summary>
    LSRV_32_dp_2src,
    /// <summary>
    /// Instruction LSRV - Logical shift right variable.
    /// </summary>
    LSRV_64_dp_2src,
    /// <summary>
    /// Instruction LSR - Logical shift right by immediate (predicated).
    /// </summary>
    LSR_z_p_zi,
    /// <summary>
    /// Instruction LSR - Logical shift right by 64-bit wide elements (predicated).
    /// </summary>
    LSR_z_p_zw,
    /// <summary>
    /// Instruction LSR - Logical shift right by vector (predicated).
    /// </summary>
    LSR_z_p_zz,
    /// <summary>
    /// Instruction LSR - Logical shift right by immediate (unpredicated).
    /// </summary>
    LSR_z_zi,
    /// <summary>
    /// Instruction LSR - Logical shift right by 64-bit wide elements (unpredicated).
    /// </summary>
    LSR_z_zw,
    /// <summary>
    /// Instruction LUTI2 - Lookup table read with 2-bit indices.
    /// </summary>
    LUTI2_asimdtbl_l5,
    /// <summary>
    /// Instruction LUTI2 - Lookup table read with 2-bit indices.
    /// </summary>
    LUTI2_asimdtbl_l6,
    /// <summary>
    /// Instruction LUTI2 - Lookup table read with 2-bit indexes.
    /// </summary>
    LUTI2_mz2_ztz_1,
    /// <summary>
    /// Instruction LUTI2 - Lookup table read with 2-bit indexes.
    /// </summary>
    LUTI2_mz2_ztz_8,
    /// <summary>
    /// Instruction LUTI2 - Lookup table read with 2-bit indexes.
    /// </summary>
    LUTI2_mz4_ztz_1,
    /// <summary>
    /// Instruction LUTI2 - Lookup table read with 2-bit indexes.
    /// </summary>
    LUTI2_mz4_ztz_4,
    /// <summary>
    /// Instruction LUTI2 - Lookup table read with 2-bit indexes.
    /// </summary>
    LUTI2_z_ztz,
    /// <summary>
    /// Instruction LUTI2 - Lookup table read with 2-bit indices.
    /// </summary>
    LUTI2_z_zz_16,
    /// <summary>
    /// Instruction LUTI2 - Lookup table read with 2-bit indices.
    /// </summary>
    LUTI2_z_zz_8,
    /// <summary>
    /// Instruction LUTI4 - Lookup table read with 4-bit indices.
    /// </summary>
    LUTI4_asimdtbl_l5,
    /// <summary>
    /// Instruction LUTI4 - Lookup table read with 4-bit indices.
    /// </summary>
    LUTI4_asimdtbl_l7,
    /// <summary>
    /// Instruction LUTI4 - Lookup table read with 4-bit indexes.
    /// </summary>
    LUTI4_mz2_ztz_1,
    /// <summary>
    /// Instruction LUTI4 - Lookup table read with 4-bit indexes.
    /// </summary>
    LUTI4_mz2_ztz_8,
    /// <summary>
    /// Instruction LUTI4 - Lookup table read with 4-bit indexes and 8-bit elements.
    /// </summary>
    LUTI4_mz4_ztmz2_1,
    /// <summary>
    /// Instruction LUTI4 - Lookup table read with 4-bit indexes and 8-bit elements.
    /// </summary>
    LUTI4_mz4_ztmz2_4,
    /// <summary>
    /// Instruction LUTI4 - Lookup table read with 4-bit indexes.
    /// </summary>
    LUTI4_mz4_ztz_1,
    /// <summary>
    /// Instruction LUTI4 - Lookup table read with 4-bit indexes.
    /// </summary>
    LUTI4_mz4_ztz_4,
    /// <summary>
    /// Instruction LUTI4 - Lookup table read with 4-bit indexes.
    /// </summary>
    LUTI4_z_ztz,
    /// <summary>
    /// Instruction LUTI4 - Lookup table read with 4-bit indices.
    /// </summary>
    LUTI4_z_zz_1x16,
    /// <summary>
    /// Instruction LUTI4 - Lookup table read with 4-bit indices.
    /// </summary>
    LUTI4_z_zz_2x16,
    /// <summary>
    /// Instruction LUTI4 - Lookup table read with 4-bit indices.
    /// </summary>
    LUTI4_z_zz_8,
    /// <summary>
    /// Instruction MADDPT - Multiply-add checked pointer.
    /// </summary>
    MADDPT_64a_dp_3src,
    /// <summary>
    /// Instruction MADD - Multiply-add.
    /// </summary>
    MADD_32a_dp_3src,
    /// <summary>
    /// Instruction MADD - Multiply-add.
    /// </summary>
    MADD_64a_dp_3src,
    /// <summary>
    /// Instruction MADPT - Multiply-add checked pointer vectors, writing multiplicand [Zdn = Za + Zdn * Zm].
    /// </summary>
    MADPT_z_zzz,
    /// <summary>
    /// Instruction MAD - Multiply-add vectors (predicated), writing multiplicand [Zdn = Za + Zdn * Zm].
    /// </summary>
    MAD_z_p_zzz,
    /// <summary>
    /// Instruction MATCH - Detect any matching elements, setting the condition flags.
    /// </summary>
    MATCH_p_p_zz,
    /// <summary>
    /// Instruction MLAPT - Multiply-add checked pointer vectors, writing addend [Zda = Zda + Zn * Zm].
    /// </summary>
    MLAPT_z_zzz,
    /// <summary>
    /// Instruction MLA - Multiply-add to accumulator (vector, by element).
    /// </summary>
    MLA_asimdelem_r,
    /// <summary>
    /// Instruction MLA - Multiply-add to accumulator (vector).
    /// </summary>
    MLA_asimdsame_only,
    /// <summary>
    /// Instruction MLA - Multiply-add vectors (predicated), writing addend [Zda = Zda + Zn * Zm].
    /// </summary>
    MLA_z_p_zzz,
    /// <summary>
    /// Instruction MLA - Multiply-add to accumulator (indexed).
    /// </summary>
    MLA_z_zzzi_d,
    /// <summary>
    /// Instruction MLA - Multiply-add to accumulator (indexed).
    /// </summary>
    MLA_z_zzzi_h,
    /// <summary>
    /// Instruction MLA - Multiply-add to accumulator (indexed).
    /// </summary>
    MLA_z_zzzi_s,
    /// <summary>
    /// Instruction MLS - Multiply-subtract from accumulator (vector, by element).
    /// </summary>
    MLS_asimdelem_r,
    /// <summary>
    /// Instruction MLS - Multiply-subtract from accumulator (vector).
    /// </summary>
    MLS_asimdsame_only,
    /// <summary>
    /// Instruction MLS - Multiply-subtract vectors (predicated), writing addend [Zda = Zda - Zn * Zm].
    /// </summary>
    MLS_z_p_zzz,
    /// <summary>
    /// Instruction MLS - Multiply-subtract from accumulator (indexed).
    /// </summary>
    MLS_z_zzzi_d,
    /// <summary>
    /// Instruction MLS - Multiply-subtract from accumulator (indexed).
    /// </summary>
    MLS_z_zzzi_h,
    /// <summary>
    /// Instruction MLS - Multiply-subtract from accumulator (indexed).
    /// </summary>
    MLS_z_zzzi_s,
    /// <summary>
    /// Instruction MOVAZ - Move and zero two ZA tile slices to vector registers.
    /// </summary>
    MOVAZ_mz2_za_b1,
    /// <summary>
    /// Instruction MOVAZ - Move and zero two ZA tile slices to vector registers.
    /// </summary>
    MOVAZ_mz2_za_d1,
    /// <summary>
    /// Instruction MOVAZ - Move and zero two ZA tile slices to vector registers.
    /// </summary>
    MOVAZ_mz2_za_h1,
    /// <summary>
    /// Instruction MOVAZ - Move and zero two ZA tile slices to vector registers.
    /// </summary>
    MOVAZ_mz2_za_w1,
    /// <summary>
    /// Instruction MOVAZ - Move and zero four ZA tile slices to vector registers.
    /// </summary>
    MOVAZ_mz4_za_b1,
    /// <summary>
    /// Instruction MOVAZ - Move and zero four ZA tile slices to vector registers.
    /// </summary>
    MOVAZ_mz4_za_d1,
    /// <summary>
    /// Instruction MOVAZ - Move and zero four ZA tile slices to vector registers.
    /// </summary>
    MOVAZ_mz4_za_h1,
    /// <summary>
    /// Instruction MOVAZ - Move and zero four ZA tile slices to vector registers.
    /// </summary>
    MOVAZ_mz4_za_w1,
    /// <summary>
    /// Instruction MOVAZ - Move and zero two ZA single-vector groups to vector registers.
    /// </summary>
    MOVAZ_mz_za2_1,
    /// <summary>
    /// Instruction MOVAZ - Move and zero four ZA single-vector groups to vector registers.
    /// </summary>
    MOVAZ_mz_za4_1,
    /// <summary>
    /// Instruction MOVAZ - Move and zero ZA tile slice to vector register.
    /// </summary>
    MOVAZ_z_rza_b,
    /// <summary>
    /// Instruction MOVAZ - Move and zero ZA tile slice to vector register.
    /// </summary>
    MOVAZ_z_rza_d,
    /// <summary>
    /// Instruction MOVAZ - Move and zero ZA tile slice to vector register.
    /// </summary>
    MOVAZ_z_rza_h,
    /// <summary>
    /// Instruction MOVAZ - Move and zero ZA tile slice to vector register.
    /// </summary>
    MOVAZ_z_rza_q,
    /// <summary>
    /// Instruction MOVAZ - Move and zero ZA tile slice to vector register.
    /// </summary>
    MOVAZ_z_rza_w,
    /// <summary>
    /// Instruction MOVA - Move two ZA tile slices to two vector registers.
    /// </summary>
    MOVA_mz2_za_b1,
    /// <summary>
    /// Instruction MOVA - Move two ZA tile slices to two vector registers.
    /// </summary>
    MOVA_mz2_za_d1,
    /// <summary>
    /// Instruction MOVA - Move two ZA tile slices to two vector registers.
    /// </summary>
    MOVA_mz2_za_h1,
    /// <summary>
    /// Instruction MOVA - Move two ZA tile slices to two vector registers.
    /// </summary>
    MOVA_mz2_za_w1,
    /// <summary>
    /// Instruction MOVA - Move four ZA tile slices to four vector registers.
    /// </summary>
    MOVA_mz4_za_b1,
    /// <summary>
    /// Instruction MOVA - Move four ZA tile slices to four vector registers.
    /// </summary>
    MOVA_mz4_za_d1,
    /// <summary>
    /// Instruction MOVA - Move four ZA tile slices to four vector registers.
    /// </summary>
    MOVA_mz4_za_h1,
    /// <summary>
    /// Instruction MOVA - Move four ZA tile slices to four vector registers.
    /// </summary>
    MOVA_mz4_za_w1,
    /// <summary>
    /// Instruction MOVA - Move two ZA single-vector groups to two vector registers.
    /// </summary>
    MOVA_mz_za2_1,
    /// <summary>
    /// Instruction MOVA - Move four ZA single-vector groups to four vector registers.
    /// </summary>
    MOVA_mz_za4_1,
    /// <summary>
    /// Instruction MOVA - Move ZA tile slice to vector register.
    /// </summary>
    MOVA_z_p_rza_b,
    /// <summary>
    /// Instruction MOVA - Move ZA tile slice to vector register.
    /// </summary>
    MOVA_z_p_rza_d,
    /// <summary>
    /// Instruction MOVA - Move ZA tile slice to vector register.
    /// </summary>
    MOVA_z_p_rza_h,
    /// <summary>
    /// Instruction MOVA - Move ZA tile slice to vector register.
    /// </summary>
    MOVA_z_p_rza_q,
    /// <summary>
    /// Instruction MOVA - Move ZA tile slice to vector register.
    /// </summary>
    MOVA_z_p_rza_w,
    /// <summary>
    /// Instruction MOVA - Move two vector registers to two ZA tile slices.
    /// </summary>
    MOVA_za2_z_b1,
    /// <summary>
    /// Instruction MOVA - Move two vector registers to two ZA tile slices.
    /// </summary>
    MOVA_za2_z_d1,
    /// <summary>
    /// Instruction MOVA - Move two vector registers to two ZA tile slices.
    /// </summary>
    MOVA_za2_z_h1,
    /// <summary>
    /// Instruction MOVA - Move two vector registers to two ZA tile slices.
    /// </summary>
    MOVA_za2_z_w1,
    /// <summary>
    /// Instruction MOVA - Move four vector registers to four ZA tile slices.
    /// </summary>
    MOVA_za4_z_b1,
    /// <summary>
    /// Instruction MOVA - Move four vector registers to four ZA tile slices.
    /// </summary>
    MOVA_za4_z_d1,
    /// <summary>
    /// Instruction MOVA - Move four vector registers to four ZA tile slices.
    /// </summary>
    MOVA_za4_z_h1,
    /// <summary>
    /// Instruction MOVA - Move four vector registers to four ZA tile slices.
    /// </summary>
    MOVA_za4_z_w1,
    /// <summary>
    /// Instruction MOVA - Move two vector registers to two ZA single-vector groups.
    /// </summary>
    MOVA_za_mz2_1,
    /// <summary>
    /// Instruction MOVA - Move four vector registers to four ZA single-vector groups.
    /// </summary>
    MOVA_za_mz4_1,
    /// <summary>
    /// Instruction MOVA - Move vector register to ZA tile slice.
    /// </summary>
    MOVA_za_p_rz_b,
    /// <summary>
    /// Instruction MOVA - Move vector register to ZA tile slice.
    /// </summary>
    MOVA_za_p_rz_d,
    /// <summary>
    /// Instruction MOVA - Move vector register to ZA tile slice.
    /// </summary>
    MOVA_za_p_rz_h,
    /// <summary>
    /// Instruction MOVA - Move vector register to ZA tile slice.
    /// </summary>
    MOVA_za_p_rz_q,
    /// <summary>
    /// Instruction MOVA - Move vector register to ZA tile slice.
    /// </summary>
    MOVA_za_p_rz_w,
    /// <summary>
    /// Instruction MOVI - Move immediate (vector).
    /// </summary>
    MOVI_asimdimm_d2_d,
    /// <summary>
    /// Instruction MOVI - Move immediate (vector).
    /// </summary>
    MOVI_asimdimm_d_ds,
    /// <summary>
    /// Instruction MOVI - Move immediate (vector).
    /// </summary>
    MOVI_asimdimm_l_hl,
    /// <summary>
    /// Instruction MOVI - Move immediate (vector).
    /// </summary>
    MOVI_asimdimm_l_sl,
    /// <summary>
    /// Instruction MOVI - Move immediate (vector).
    /// </summary>
    MOVI_asimdimm_m_sm,
    /// <summary>
    /// Instruction MOVI - Move immediate (vector).
    /// </summary>
    MOVI_asimdimm_n_b,
    /// <summary>
    /// Instruction MOVK - Move wide with keep.
    /// </summary>
    MOVK_32_movewide,
    /// <summary>
    /// Instruction MOVK - Move wide with keep.
    /// </summary>
    MOVK_64_movewide,
    /// <summary>
    /// Instruction MOVN - Move wide with NOT.
    /// </summary>
    MOVN_32_movewide,
    /// <summary>
    /// Instruction MOVN - Move wide with NOT.
    /// </summary>
    MOVN_64_movewide,
    /// <summary>
    /// Instruction MOVPRFX - Move prefix (predicated).
    /// </summary>
    MOVPRFX_z_p_z,
    /// <summary>
    /// Instruction MOVPRFX - Move prefix (unpredicated).
    /// </summary>
    MOVPRFX_z_z,
    /// <summary>
    /// Instruction MOVT - Move 8 bytes from ZT0 to general-purpose register.
    /// </summary>
    MOVT_r_zt,
    /// <summary>
    /// Instruction MOVT - Move 8 bytes from general-purpose register to ZT0.
    /// </summary>
    MOVT_zt_r,
    /// <summary>
    /// Instruction MOVT - Move vector register to ZT0.
    /// </summary>
    MOVT_zt_z,
    /// <summary>
    /// Instruction MOVZ - Move wide with zero.
    /// </summary>
    MOVZ_32_movewide,
    /// <summary>
    /// Instruction MOVZ - Move wide with zero.
    /// </summary>
    MOVZ_64_movewide,
    /// <summary>
    /// Instruction MRRS - Move System register to two adjacent general-purpose registers.
    /// </summary>
    MRRS_rs_systemmovepr,
    /// <summary>
    /// Instruction MRS - Move System register to general-purpose register.
    /// </summary>
    MRS_rs_systemmove,
    /// <summary>
    /// Instruction MSB - Multiply-subtract vectors (predicated), writing multiplicand [Zdn = Za - Zdn * Zm].
    /// </summary>
    MSB_z_p_zzz,
    /// <summary>
    /// Instruction MSRR - Move two adjacent general-purpose registers to System register.
    /// </summary>
    MSRR_sr_systemmovepr,
    /// <summary>
    /// Instruction MSR - Move immediate value to special register.
    /// </summary>
    MSR_si_pstate,
    /// <summary>
    /// Instruction MSR - Move general-purpose register to System register.
    /// </summary>
    MSR_sr_systemmove,
    /// <summary>
    /// Instruction MSUBPT - Multiply-subtract checked pointer.
    /// </summary>
    MSUBPT_64a_dp_3src,
    /// <summary>
    /// Instruction MSUB - Multiply-subtract.
    /// </summary>
    MSUB_32a_dp_3src,
    /// <summary>
    /// Instruction MSUB - Multiply-subtract.
    /// </summary>
    MSUB_64a_dp_3src,
    /// <summary>
    /// Instruction MUL - Multiply (vector, by element).
    /// </summary>
    MUL_asimdelem_r,
    /// <summary>
    /// Instruction MUL - Multiply (vector).
    /// </summary>
    MUL_asimdsame_only,
    /// <summary>
    /// Instruction MUL - Multiply vectors (predicated).
    /// </summary>
    MUL_z_p_zz,
    /// <summary>
    /// Instruction MUL - Multiply by immediate (unpredicated).
    /// </summary>
    MUL_z_zi,
    /// <summary>
    /// Instruction MUL - Multiply vectors (unpredicated).
    /// </summary>
    MUL_z_zz,
    /// <summary>
    /// Instruction MUL - Multiply (indexed).
    /// </summary>
    MUL_z_zzi_d,
    /// <summary>
    /// Instruction MUL - Multiply (indexed).
    /// </summary>
    MUL_z_zzi_h,
    /// <summary>
    /// Instruction MUL - Multiply (indexed).
    /// </summary>
    MUL_z_zzi_s,
    /// <summary>
    /// Instruction MVNI - Move inverted immediate (vector).
    /// </summary>
    MVNI_asimdimm_l_hl,
    /// <summary>
    /// Instruction MVNI - Move inverted immediate (vector).
    /// </summary>
    MVNI_asimdimm_l_sl,
    /// <summary>
    /// Instruction MVNI - Move inverted immediate (vector).
    /// </summary>
    MVNI_asimdimm_m_sm,
    /// <summary>
    /// Instruction NANDS - Bitwise NAND predicates, setting the condition flags.
    /// </summary>
    NANDS_p_p_pp_z,
    /// <summary>
    /// Instruction NAND - Bitwise NAND predicates.
    /// </summary>
    NAND_p_p_pp_z,
    /// <summary>
    /// Instruction NBSL - Bitwise inverted select.
    /// </summary>
    NBSL_z_zzz,
    /// <summary>
    /// Instruction NEG - Negate (vector).
    /// </summary>
    NEG_asimdmisc_r,
    /// <summary>
    /// Instruction NEG - Negate (vector).
    /// </summary>
    NEG_asisdmisc_r,
    /// <summary>
    /// Instruction NEG - Negate (predicated).
    /// </summary>
    NEG_z_p_z_m,
    /// <summary>
    /// Instruction NEG - Negate (predicated).
    /// </summary>
    NEG_z_p_z_z,
    /// <summary>
    /// Instruction NMATCH - Detect no matching elements, setting the condition flags.
    /// </summary>
    NMATCH_p_p_zz,
    /// <summary>
    /// Instruction NOP - No operation.
    /// </summary>
    NOP_hi_hints,
    /// <summary>
    /// Instruction NORS - Bitwise NOR predicates, setting the condition flags.
    /// </summary>
    NORS_p_p_pp_z,
    /// <summary>
    /// Instruction NOR - Bitwise NOR predicates.
    /// </summary>
    NOR_p_p_pp_z,
    /// <summary>
    /// Instruction NOT - Bitwise NOT (vector).
    /// </summary>
    NOT_asimdmisc_r,
    /// <summary>
    /// Instruction NOT - Bitwise invert vector (predicated).
    /// </summary>
    NOT_z_p_z_m,
    /// <summary>
    /// Instruction NOT - Bitwise invert vector (predicated).
    /// </summary>
    NOT_z_p_z_z,
    /// <summary>
    /// Instruction ORNS - Bitwise inclusive OR inverted predicate, setting the condition flags.
    /// </summary>
    ORNS_p_p_pp_z,
    /// <summary>
    /// Instruction ORN - Bitwise OR NOT (shifted register).
    /// </summary>
    ORN_32_log_shift,
    /// <summary>
    /// Instruction ORN - Bitwise OR NOT (shifted register).
    /// </summary>
    ORN_64_log_shift,
    /// <summary>
    /// Instruction ORN - Bitwise inclusive OR NOT (vector).
    /// </summary>
    ORN_asimdsame_only,
    /// <summary>
    /// Instruction ORN - Bitwise inclusive OR inverted predicate.
    /// </summary>
    ORN_p_p_pp_z,
    /// <summary>
    /// Instruction ORQV - Bitwise inclusive OR reduction of quadword vector segments.
    /// </summary>
    ORQV_z_p_z,
    /// <summary>
    /// Instruction ORRS - Bitwise inclusive OR predicates, setting the condition flags.
    /// </summary>
    ORRS_p_p_pp_z,
    /// <summary>
    /// Instruction ORR - Bitwise OR (immediate).
    /// </summary>
    ORR_32_log_imm,
    /// <summary>
    /// Instruction ORR - Bitwise OR (shifted register).
    /// </summary>
    ORR_32_log_shift,
    /// <summary>
    /// Instruction ORR - Bitwise OR (immediate).
    /// </summary>
    ORR_64_log_imm,
    /// <summary>
    /// Instruction ORR - Bitwise OR (shifted register).
    /// </summary>
    ORR_64_log_shift,
    /// <summary>
    /// Instruction ORR - Bitwise inclusive OR (vector, immediate).
    /// </summary>
    ORR_asimdimm_l_hl,
    /// <summary>
    /// Instruction ORR - Bitwise inclusive OR (vector, immediate).
    /// </summary>
    ORR_asimdimm_l_sl,
    /// <summary>
    /// Instruction ORR - Bitwise inclusive OR (vector, register).
    /// </summary>
    ORR_asimdsame_only,
    /// <summary>
    /// Instruction ORR - Bitwise inclusive OR predicates.
    /// </summary>
    ORR_p_p_pp_z,
    /// <summary>
    /// Instruction ORR - Bitwise inclusive OR vectors (predicated).
    /// </summary>
    ORR_z_p_zz,
    /// <summary>
    /// Instruction ORR - Bitwise inclusive OR with immediate (unpredicated).
    /// </summary>
    ORR_z_zi,
    /// <summary>
    /// Instruction ORR - Bitwise inclusive OR vectors (unpredicated).
    /// </summary>
    ORR_z_zz,
    /// <summary>
    /// Instruction ORV - Bitwise inclusive OR reduction to scalar.
    /// </summary>
    ORV_r_p_z,
    /// <summary>
    /// Instruction PACDA - Pointer Authentication Code for data address, using key A.
    /// </summary>
    PACDA_64p_dp_1src,
    /// <summary>
    /// Instruction PACDB - Pointer Authentication Code for data address, using key B.
    /// </summary>
    PACDB_64p_dp_1src,
    /// <summary>
    /// Instruction PACDZA - Pointer Authentication Code for data address, using key A.
    /// </summary>
    PACDZA_64z_dp_1src,
    /// <summary>
    /// Instruction PACDZB - Pointer Authentication Code for data address, using key B.
    /// </summary>
    PACDZB_64z_dp_1src,
    /// <summary>
    /// Instruction PACGA - Pointer Authentication Code, using generic key.
    /// </summary>
    PACGA_64p_dp_2src,
    /// <summary>
    /// Instruction PACIA171615 - Pointer Authentication Code for instruction address, using key A.
    /// </summary>
    PACIA171615_64lr_dp_1src,
    /// <summary>
    /// Instruction PACIA1716 - Pointer Authentication Code for instruction address, using key A.
    /// </summary>
    PACIA1716_hi_hints,
    /// <summary>
    /// Instruction PACIASPPC - Pointer Authentication Code for return address, using key A.
    /// </summary>
    PACIASPPC_64lr_dp_1src,
    /// <summary>
    /// Instruction PACIASP - Pointer Authentication Code for instruction address, using key A.
    /// </summary>
    PACIASP_hi_hints,
    /// <summary>
    /// Instruction PACIAZ - Pointer Authentication Code for instruction address, using key A.
    /// </summary>
    PACIAZ_hi_hints,
    /// <summary>
    /// Instruction PACIA - Pointer Authentication Code for instruction address, using key A.
    /// </summary>
    PACIA_64p_dp_1src,
    /// <summary>
    /// Instruction PACIB171615 - Pointer Authentication Code for instruction address, using key B.
    /// </summary>
    PACIB171615_64lr_dp_1src,
    /// <summary>
    /// Instruction PACIB1716 - Pointer Authentication Code for instruction address, using key B.
    /// </summary>
    PACIB1716_hi_hints,
    /// <summary>
    /// Instruction PACIBSPPC - Pointer Authentication Code for return address, using key B.
    /// </summary>
    PACIBSPPC_64lr_dp_1src,
    /// <summary>
    /// Instruction PACIBSP - Pointer Authentication Code for instruction address, using key B.
    /// </summary>
    PACIBSP_hi_hints,
    /// <summary>
    /// Instruction PACIBZ - Pointer Authentication Code for instruction address, using key B.
    /// </summary>
    PACIBZ_hi_hints,
    /// <summary>
    /// Instruction PACIB - Pointer Authentication Code for instruction address, using key B.
    /// </summary>
    PACIB_64p_dp_1src,
    /// <summary>
    /// Instruction PACIZA - Pointer Authentication Code for instruction address, using key A.
    /// </summary>
    PACIZA_64z_dp_1src,
    /// <summary>
    /// Instruction PACIZB - Pointer Authentication Code for instruction address, using key B.
    /// </summary>
    PACIZB_64z_dp_1src,
    /// <summary>
    /// Instruction PACM - Pointer authentication modifier.
    /// </summary>
    PACM_hi_hints,
    /// <summary>
    /// Instruction PACNBIASPPC - Pointer Authentication Code for return address, using key A, not a branch target.
    /// </summary>
    PACNBIASPPC_64lr_dp_1src,
    /// <summary>
    /// Instruction PACNBIBSPPC - Pointer Authentication Code for return address, using key B, not a branch target.
    /// </summary>
    PACNBIBSPPC_64lr_dp_1src,
    /// <summary>
    /// Instruction PEXT - Predicate extract from predicate-as-counter.
    /// </summary>
    PEXT_pn_rr,
    /// <summary>
    /// Instruction PEXT - Predicate extract pair from predicate-as-counter.
    /// </summary>
    PEXT_pp_rr,
    /// <summary>
    /// Instruction PFALSE - Set all predicate elements to false.
    /// </summary>
    PFALSE_p,
    /// <summary>
    /// Instruction PFIRST - Set the first active predicate element to true.
    /// </summary>
    PFIRST_p_p_p,
    /// <summary>
    /// Instruction PMLAL - Multi-vector polynomial multiply long and accumulate vectors.
    /// </summary>
    PMLAL_mz_zzzw_1x2,
    /// <summary>
    /// Instruction PMOV - Move predicate from vector.
    /// </summary>
    PMOV_p_zi_b,
    /// <summary>
    /// Instruction PMOV - Move predicate from vector.
    /// </summary>
    PMOV_p_zi_d,
    /// <summary>
    /// Instruction PMOV - Move predicate from vector.
    /// </summary>
    PMOV_p_zi_h,
    /// <summary>
    /// Instruction PMOV - Move predicate from vector.
    /// </summary>
    PMOV_p_zi_s,
    /// <summary>
    /// Instruction PMOV - Move predicate to vector.
    /// </summary>
    PMOV_z_pi_b,
    /// <summary>
    /// Instruction PMOV - Move predicate to vector.
    /// </summary>
    PMOV_z_pi_d,
    /// <summary>
    /// Instruction PMOV - Move predicate to vector.
    /// </summary>
    PMOV_z_pi_h,
    /// <summary>
    /// Instruction PMOV - Move predicate to vector.
    /// </summary>
    PMOV_z_pi_s,
    /// <summary>
    /// Instruction PMULLB - Polynomial multiply long (bottom).
    /// </summary>
    PMULLB_z_zz,
    /// <summary>
    /// Instruction PMULLB - Polynomial multiply long (bottom).
    /// </summary>
    PMULLB_z_zz_q,
    /// <summary>
    /// Instruction PMULLT - Polynomial multiply long (top).
    /// </summary>
    PMULLT_z_zz,
    /// <summary>
    /// Instruction PMULLT - Polynomial multiply long (top).
    /// </summary>
    PMULLT_z_zz_q,
    /// <summary>
    /// Instruction PMULL - Polynomial multiply long.
    /// </summary>
    PMULL_asimddiff_l,
    /// <summary>
    /// Instruction PMULL - Multi-vector polynomial multiply long.
    /// </summary>
    PMULL_mz_zzw_1x2,
    /// <summary>
    /// Instruction PMUL - Polynomial multiply.
    /// </summary>
    PMUL_asimdsame_only,
    /// <summary>
    /// Instruction PMUL - Polynomial multiply vectors (unpredicated).
    /// </summary>
    PMUL_z_zz,
    /// <summary>
    /// Instruction PNEXT - Find next active predicate.
    /// </summary>
    PNEXT_p_p_p,
    /// <summary>
    /// Instruction PRFB - Gather prefetch bytes (vector plus immediate).
    /// </summary>
    PRFB_i_p_ai_d,
    /// <summary>
    /// Instruction PRFB - Gather prefetch bytes (vector plus immediate).
    /// </summary>
    PRFB_i_p_ai_s,
    /// <summary>
    /// Instruction PRFB - Contiguous prefetch bytes (immediate index).
    /// </summary>
    PRFB_i_p_bi_s,
    /// <summary>
    /// Instruction PRFB - Contiguous prefetch bytes (scalar index).
    /// </summary>
    PRFB_i_p_br_s,
    /// <summary>
    /// Instruction PRFB - Gather prefetch bytes (scalar plus vector).
    /// </summary>
    PRFB_i_p_bz_d_64_scaled,
    /// <summary>
    /// Instruction PRFB - Gather prefetch bytes (scalar plus vector).
    /// </summary>
    PRFB_i_p_bz_d_x32_scaled,
    /// <summary>
    /// Instruction PRFB - Gather prefetch bytes (scalar plus vector).
    /// </summary>
    PRFB_i_p_bz_s_x32_scaled,
    /// <summary>
    /// Instruction PRFD - Gather prefetch doublewords (vector plus immediate).
    /// </summary>
    PRFD_i_p_ai_d,
    /// <summary>
    /// Instruction PRFD - Gather prefetch doublewords (vector plus immediate).
    /// </summary>
    PRFD_i_p_ai_s,
    /// <summary>
    /// Instruction PRFD - Contiguous prefetch doublewords (immediate index).
    /// </summary>
    PRFD_i_p_bi_s,
    /// <summary>
    /// Instruction PRFD - Contiguous prefetch doublewords (scalar index).
    /// </summary>
    PRFD_i_p_br_s,
    /// <summary>
    /// Instruction PRFD - Gather prefetch doublewords (scalar plus vector).
    /// </summary>
    PRFD_i_p_bz_d_64_scaled,
    /// <summary>
    /// Instruction PRFD - Gather prefetch doublewords (scalar plus vector).
    /// </summary>
    PRFD_i_p_bz_d_x32_scaled,
    /// <summary>
    /// Instruction PRFD - Gather prefetch doublewords (scalar plus vector).
    /// </summary>
    PRFD_i_p_bz_s_x32_scaled,
    /// <summary>
    /// Instruction PRFH - Gather prefetch halfwords (vector plus immediate).
    /// </summary>
    PRFH_i_p_ai_d,
    /// <summary>
    /// Instruction PRFH - Gather prefetch halfwords (vector plus immediate).
    /// </summary>
    PRFH_i_p_ai_s,
    /// <summary>
    /// Instruction PRFH - Contiguous prefetch halfwords (immediate index).
    /// </summary>
    PRFH_i_p_bi_s,
    /// <summary>
    /// Instruction PRFH - Contiguous prefetch halfwords (scalar index).
    /// </summary>
    PRFH_i_p_br_s,
    /// <summary>
    /// Instruction PRFH - Gather prefetch halfwords (scalar plus vector).
    /// </summary>
    PRFH_i_p_bz_d_64_scaled,
    /// <summary>
    /// Instruction PRFH - Gather prefetch halfwords (scalar plus vector).
    /// </summary>
    PRFH_i_p_bz_d_x32_scaled,
    /// <summary>
    /// Instruction PRFH - Gather prefetch halfwords (scalar plus vector).
    /// </summary>
    PRFH_i_p_bz_s_x32_scaled,
    /// <summary>
    /// Instruction PRFM - Prefetch memory (immediate).
    /// </summary>
    PRFM_p_ldst_pos,
    /// <summary>
    /// Instruction PRFM - Prefetch memory (register).
    /// </summary>
    PRFM_p_ldst_regoff,
    /// <summary>
    /// Instruction PRFM - Prefetch memory (literal).
    /// </summary>
    PRFM_p_loadlit,
    /// <summary>
    /// Instruction PRFUM - Prefetch memory (unscaled offset).
    /// </summary>
    PRFUM_p_ldst_unscaled,
    /// <summary>
    /// Instruction PRFW - Gather prefetch words (vector plus immediate).
    /// </summary>
    PRFW_i_p_ai_d,
    /// <summary>
    /// Instruction PRFW - Gather prefetch words (vector plus immediate).
    /// </summary>
    PRFW_i_p_ai_s,
    /// <summary>
    /// Instruction PRFW - Contiguous prefetch words (immediate index).
    /// </summary>
    PRFW_i_p_bi_s,
    /// <summary>
    /// Instruction PRFW - Contiguous prefetch words (scalar index).
    /// </summary>
    PRFW_i_p_br_s,
    /// <summary>
    /// Instruction PRFW - Gather prefetch words (scalar plus vector).
    /// </summary>
    PRFW_i_p_bz_d_64_scaled,
    /// <summary>
    /// Instruction PRFW - Gather prefetch words (scalar plus vector).
    /// </summary>
    PRFW_i_p_bz_d_x32_scaled,
    /// <summary>
    /// Instruction PRFW - Gather prefetch words (scalar plus vector).
    /// </summary>
    PRFW_i_p_bz_s_x32_scaled,
    /// <summary>
    /// Instruction PSB - Profiling synchronization barrier.
    /// </summary>
    PSB_hc_hints,
    /// <summary>
    /// Instruction PSEL - Predicate select between predicate register or all-false.
    /// </summary>
    PSEL_p_ppi,
    /// <summary>
    /// Instruction PTEST - Set condition flags for predicate.
    /// </summary>
    PTEST__p_p,
    /// <summary>
    /// Instruction PTRUES - Initialise predicate from named constraint and set the condition flags.
    /// </summary>
    PTRUES_p_s,
    /// <summary>
    /// Instruction PTRUE - Initialise predicate from named constraint.
    /// </summary>
    PTRUE_p_s,
    /// <summary>
    /// Instruction PTRUE - Initialise predicate-as-counter to all active.
    /// </summary>
    PTRUE_pn_i,
    /// <summary>
    /// Instruction PUNPKHI - Unpack and widen half of predicate.
    /// </summary>
    PUNPKHI_p_p,
    /// <summary>
    /// Instruction PUNPKLO - Unpack and widen half of predicate.
    /// </summary>
    PUNPKLO_p_p,
    /// <summary>
    /// Instruction RADDHNB - Rounding add narrow high part (bottom).
    /// </summary>
    RADDHNB_z_zz,
    /// <summary>
    /// Instruction RADDHNT - Rounding add narrow high part (top).
    /// </summary>
    RADDHNT_z_zz,
    /// <summary>
    /// Instruction RADDHN - Rounding add returning high narrow.
    /// </summary>
    RADDHN_asimddiff_n,
    /// <summary>
    /// Instruction RAX1 - Rotate and exclusive-OR.
    /// </summary>
    RAX1_vvv2_cryptosha512_3,
    /// <summary>
    /// Instruction RAX1 - Bitwise rotate left by 1 and exclusive-OR.
    /// </summary>
    RAX1_z_zz,
    /// <summary>
    /// Instruction RBIT - Reverse bits.
    /// </summary>
    RBIT_32_dp_1src,
    /// <summary>
    /// Instruction RBIT - Reverse bits.
    /// </summary>
    RBIT_64_dp_1src,
    /// <summary>
    /// Instruction RBIT - Reverse bit order (vector).
    /// </summary>
    RBIT_asimdmisc_r,
    /// <summary>
    /// Instruction RBIT - Reverse bits (predicated).
    /// </summary>
    RBIT_z_p_z_m,
    /// <summary>
    /// Instruction RBIT - Reverse bits (predicated).
    /// </summary>
    RBIT_z_p_z_z,
    /// <summary>
    /// Instruction RCWCASAL - Read check write compare and swap doubleword in memory.
    /// </summary>
    RCWCASAL_c64_rcwcomswap,
    /// <summary>
    /// Instruction RCWCASA - Read check write compare and swap doubleword in memory.
    /// </summary>
    RCWCASA_c64_rcwcomswap,
    /// <summary>
    /// Instruction RCWCASL - Read check write compare and swap doubleword in memory.
    /// </summary>
    RCWCASL_c64_rcwcomswap,
    /// <summary>
    /// Instruction RCWCASPAL - Read check write compare and swap quadword in memory.
    /// </summary>
    RCWCASPAL_c64_rcwcomswappr,
    /// <summary>
    /// Instruction RCWCASPA - Read check write compare and swap quadword in memory.
    /// </summary>
    RCWCASPA_c64_rcwcomswappr,
    /// <summary>
    /// Instruction RCWCASPL - Read check write compare and swap quadword in memory.
    /// </summary>
    RCWCASPL_c64_rcwcomswappr,
    /// <summary>
    /// Instruction RCWCASP - Read check write compare and swap quadword in memory.
    /// </summary>
    RCWCASP_c64_rcwcomswappr,
    /// <summary>
    /// Instruction RCWCAS - Read check write compare and swap doubleword in memory.
    /// </summary>
    RCWCAS_c64_rcwcomswap,
    /// <summary>
    /// Instruction RCWCLRAL - Read check write atomic bit clear on doubleword in memory.
    /// </summary>
    RCWCLRAL_64_memop,
    /// <summary>
    /// Instruction RCWCLRA - Read check write atomic bit clear on doubleword in memory.
    /// </summary>
    RCWCLRA_64_memop,
    /// <summary>
    /// Instruction RCWCLRL - Read check write atomic bit clear on doubleword in memory.
    /// </summary>
    RCWCLRL_64_memop,
    /// <summary>
    /// Instruction RCWCLRPAL - Read check write atomic bit clear on quadword in memory.
    /// </summary>
    RCWCLRPAL_128_memop_128,
    /// <summary>
    /// Instruction RCWCLRPA - Read check write atomic bit clear on quadword in memory.
    /// </summary>
    RCWCLRPA_128_memop_128,
    /// <summary>
    /// Instruction RCWCLRPL - Read check write atomic bit clear on quadword in memory.
    /// </summary>
    RCWCLRPL_128_memop_128,
    /// <summary>
    /// Instruction RCWCLRP - Read check write atomic bit clear on quadword in memory.
    /// </summary>
    RCWCLRP_128_memop_128,
    /// <summary>
    /// Instruction RCWCLR - Read check write atomic bit clear on doubleword in memory.
    /// </summary>
    RCWCLR_64_memop,
    /// <summary>
    /// Instruction RCWSCASAL - Read check write software compare and swap doubleword in memory.
    /// </summary>
    RCWSCASAL_c64_rcwcomswap,
    /// <summary>
    /// Instruction RCWSCASA - Read check write software compare and swap doubleword in memory.
    /// </summary>
    RCWSCASA_c64_rcwcomswap,
    /// <summary>
    /// Instruction RCWSCASL - Read check write software compare and swap doubleword in memory.
    /// </summary>
    RCWSCASL_c64_rcwcomswap,
    /// <summary>
    /// Instruction RCWSCASPAL - Read check write software compare and swap quadword in memory.
    /// </summary>
    RCWSCASPAL_c64_rcwcomswappr,
    /// <summary>
    /// Instruction RCWSCASPA - Read check write software compare and swap quadword in memory.
    /// </summary>
    RCWSCASPA_c64_rcwcomswappr,
    /// <summary>
    /// Instruction RCWSCASPL - Read check write software compare and swap quadword in memory.
    /// </summary>
    RCWSCASPL_c64_rcwcomswappr,
    /// <summary>
    /// Instruction RCWSCASP - Read check write software compare and swap quadword in memory.
    /// </summary>
    RCWSCASP_c64_rcwcomswappr,
    /// <summary>
    /// Instruction RCWSCAS - Read check write software compare and swap doubleword in memory.
    /// </summary>
    RCWSCAS_c64_rcwcomswap,
    /// <summary>
    /// Instruction RCWSCLRAL - Read check write software atomic bit clear on doubleword in memory.
    /// </summary>
    RCWSCLRAL_64_memop,
    /// <summary>
    /// Instruction RCWSCLRA - Read check write software atomic bit clear on doubleword in memory.
    /// </summary>
    RCWSCLRA_64_memop,
    /// <summary>
    /// Instruction RCWSCLRL - Read check write software atomic bit clear on doubleword in memory.
    /// </summary>
    RCWSCLRL_64_memop,
    /// <summary>
    /// Instruction RCWSCLRPAL - Read check write software atomic bit clear on quadword in memory.
    /// </summary>
    RCWSCLRPAL_128_memop_128,
    /// <summary>
    /// Instruction RCWSCLRPA - Read check write software atomic bit clear on quadword in memory.
    /// </summary>
    RCWSCLRPA_128_memop_128,
    /// <summary>
    /// Instruction RCWSCLRPL - Read check write software atomic bit clear on quadword in memory.
    /// </summary>
    RCWSCLRPL_128_memop_128,
    /// <summary>
    /// Instruction RCWSCLRP - Read check write software atomic bit clear on quadword in memory.
    /// </summary>
    RCWSCLRP_128_memop_128,
    /// <summary>
    /// Instruction RCWSCLR - Read check write software atomic bit clear on doubleword in memory.
    /// </summary>
    RCWSCLR_64_memop,
    /// <summary>
    /// Instruction RCWSETAL - Read check write atomic bit set on doubleword in memory.
    /// </summary>
    RCWSETAL_64_memop,
    /// <summary>
    /// Instruction RCWSETA - Read check write atomic bit set on doubleword in memory.
    /// </summary>
    RCWSETA_64_memop,
    /// <summary>
    /// Instruction RCWSETL - Read check write atomic bit set on doubleword in memory.
    /// </summary>
    RCWSETL_64_memop,
    /// <summary>
    /// Instruction RCWSETPAL - Read check write atomic bit set on quadword in memory.
    /// </summary>
    RCWSETPAL_128_memop_128,
    /// <summary>
    /// Instruction RCWSETPA - Read check write atomic bit set on quadword in memory.
    /// </summary>
    RCWSETPA_128_memop_128,
    /// <summary>
    /// Instruction RCWSETPL - Read check write atomic bit set on quadword in memory.
    /// </summary>
    RCWSETPL_128_memop_128,
    /// <summary>
    /// Instruction RCWSETP - Read check write atomic bit set on quadword in memory.
    /// </summary>
    RCWSETP_128_memop_128,
    /// <summary>
    /// Instruction RCWSET - Read check write atomic bit set on doubleword in memory.
    /// </summary>
    RCWSET_64_memop,
    /// <summary>
    /// Instruction RCWSSETAL - Read check write software atomic bit set on doubleword in memory.
    /// </summary>
    RCWSSETAL_64_memop,
    /// <summary>
    /// Instruction RCWSSETA - Read check write software atomic bit set on doubleword in memory.
    /// </summary>
    RCWSSETA_64_memop,
    /// <summary>
    /// Instruction RCWSSETL - Read check write software atomic bit set on doubleword in memory.
    /// </summary>
    RCWSSETL_64_memop,
    /// <summary>
    /// Instruction RCWSSETPAL - Read check write software atomic bit set on quadword in memory.
    /// </summary>
    RCWSSETPAL_128_memop_128,
    /// <summary>
    /// Instruction RCWSSETPA - Read check write software atomic bit set on quadword in memory.
    /// </summary>
    RCWSSETPA_128_memop_128,
    /// <summary>
    /// Instruction RCWSSETPL - Read check write software atomic bit set on quadword in memory.
    /// </summary>
    RCWSSETPL_128_memop_128,
    /// <summary>
    /// Instruction RCWSSETP - Read check write software atomic bit set on quadword in memory.
    /// </summary>
    RCWSSETP_128_memop_128,
    /// <summary>
    /// Instruction RCWSSET - Read check write software atomic bit set on doubleword in memory.
    /// </summary>
    RCWSSET_64_memop,
    /// <summary>
    /// Instruction RCWSSWPAL - Read check write software swap doubleword in memory.
    /// </summary>
    RCWSSWPAL_64_memop,
    /// <summary>
    /// Instruction RCWSSWPA - Read check write software swap doubleword in memory.
    /// </summary>
    RCWSSWPA_64_memop,
    /// <summary>
    /// Instruction RCWSSWPL - Read check write software swap doubleword in memory.
    /// </summary>
    RCWSSWPL_64_memop,
    /// <summary>
    /// Instruction RCWSSWPPAL - Read check write software swap quadword in memory.
    /// </summary>
    RCWSSWPPAL_128_memop_128,
    /// <summary>
    /// Instruction RCWSSWPPA - Read check write software swap quadword in memory.
    /// </summary>
    RCWSSWPPA_128_memop_128,
    /// <summary>
    /// Instruction RCWSSWPPL - Read check write software swap quadword in memory.
    /// </summary>
    RCWSSWPPL_128_memop_128,
    /// <summary>
    /// Instruction RCWSSWPP - Read check write software swap quadword in memory.
    /// </summary>
    RCWSSWPP_128_memop_128,
    /// <summary>
    /// Instruction RCWSSWP - Read check write software swap doubleword in memory.
    /// </summary>
    RCWSSWP_64_memop,
    /// <summary>
    /// Instruction RCWSWPAL - Read check write swap doubleword in memory.
    /// </summary>
    RCWSWPAL_64_memop,
    /// <summary>
    /// Instruction RCWSWPA - Read check write swap doubleword in memory.
    /// </summary>
    RCWSWPA_64_memop,
    /// <summary>
    /// Instruction RCWSWPL - Read check write swap doubleword in memory.
    /// </summary>
    RCWSWPL_64_memop,
    /// <summary>
    /// Instruction RCWSWPPAL - Read check write swap quadword in memory.
    /// </summary>
    RCWSWPPAL_128_memop_128,
    /// <summary>
    /// Instruction RCWSWPPA - Read check write swap quadword in memory.
    /// </summary>
    RCWSWPPA_128_memop_128,
    /// <summary>
    /// Instruction RCWSWPPL - Read check write swap quadword in memory.
    /// </summary>
    RCWSWPPL_128_memop_128,
    /// <summary>
    /// Instruction RCWSWPP - Read check write swap quadword in memory.
    /// </summary>
    RCWSWPP_128_memop_128,
    /// <summary>
    /// Instruction RCWSWP - Read check write swap doubleword in memory.
    /// </summary>
    RCWSWP_64_memop,
    /// <summary>
    /// Instruction RDFFRS - Return predicate of succesfully loaded elements, setting the condition flags.
    /// </summary>
    RDFFRS_p_p_f,
    /// <summary>
    /// Instruction RDFFR - Read the first-fault register.
    /// </summary>
    RDFFR_p_f,
    /// <summary>
    /// Instruction RDFFR - Return predicate of succesfully loaded elements.
    /// </summary>
    RDFFR_p_p_f,
    /// <summary>
    /// Instruction RDSVL - Read multiple of Streaming SVE vector register size to scalar register.
    /// </summary>
    RDSVL_r_i,
    /// <summary>
    /// Instruction RDVL - Read multiple of vector register size to scalar register.
    /// </summary>
    RDVL_r_i,
    /// <summary>
    /// Instruction RETAASPPCR - Return from subroutine, with enhanced pointer authentication using a register.
    /// </summary>
    RETAASPPCR_64m_branch_reg,
    /// <summary>
    /// Instruction RETAASPPC - Return from subroutine, with enhanced pointer authentication using an immediate offset.
    /// </summary>
    RETAASPPC_only_miscbranch,
    /// <summary>
    /// Instruction RETAA - Return from subroutine, with pointer authentication.
    /// </summary>
    RETAA_64e_branch_reg,
    /// <summary>
    /// Instruction RETABSPPCR - Return from subroutine, with enhanced pointer authentication using a register.
    /// </summary>
    RETABSPPCR_64m_branch_reg,
    /// <summary>
    /// Instruction RETABSPPC - Return from subroutine, with enhanced pointer authentication using an immediate offset.
    /// </summary>
    RETABSPPC_only_miscbranch,
    /// <summary>
    /// Instruction RETAB - Return from subroutine, with pointer authentication.
    /// </summary>
    RETAB_64e_branch_reg,
    /// <summary>
    /// Instruction RET - Return from subroutine.
    /// </summary>
    RET_64r_branch_reg,
    /// <summary>
    /// Instruction REV16 - Reverse bytes in 16-bit halfwords.
    /// </summary>
    REV16_32_dp_1src,
    /// <summary>
    /// Instruction REV16 - Reverse bytes in 16-bit halfwords.
    /// </summary>
    REV16_64_dp_1src,
    /// <summary>
    /// Instruction REV16 - Reverse elements in 16-bit halfwords (vector).
    /// </summary>
    REV16_asimdmisc_r,
    /// <summary>
    /// Instruction REV32 - Reverse bytes in 32-bit words.
    /// </summary>
    REV32_64_dp_1src,
    /// <summary>
    /// Instruction REV32 - Reverse elements in 32-bit words (vector).
    /// </summary>
    REV32_asimdmisc_r,
    /// <summary>
    /// Instruction REV64 - Reverse elements in 64-bit doublewords (vector).
    /// </summary>
    REV64_asimdmisc_r,
    /// <summary>
    /// Instruction REVB - Reverse bytes / halfwords / words within elements (predicated).
    /// </summary>
    REVB_z_z_m,
    /// <summary>
    /// Instruction REVB - Reverse bytes / halfwords / words within elements (predicated).
    /// </summary>
    REVB_z_z_z,
    /// <summary>
    /// Instruction REVD - Reverse 64-bit doublewords in elements (predicated).
    /// </summary>
    REVD_z_p_z_m,
    /// <summary>
    /// Instruction REVD - Reverse 64-bit doublewords in elements (predicated).
    /// </summary>
    REVD_z_p_z_z,
    /// <summary>
    /// Instruction REVH - Reverse bytes / halfwords / words within elements (predicated).
    /// </summary>
    REVH_z_z_m,
    /// <summary>
    /// Instruction REVH - Reverse bytes / halfwords / words within elements (predicated).
    /// </summary>
    REVH_z_z_z,
    /// <summary>
    /// Instruction REVW - Reverse bytes / halfwords / words within elements (predicated).
    /// </summary>
    REVW_z_z_m,
    /// <summary>
    /// Instruction REVW - Reverse bytes / halfwords / words within elements (predicated).
    /// </summary>
    REVW_z_z_z,
    /// <summary>
    /// Instruction REV - Reverse bytes.
    /// </summary>
    REV_32_dp_1src,
    /// <summary>
    /// Instruction REV - Reverse bytes.
    /// </summary>
    REV_64_dp_1src,
    /// <summary>
    /// Instruction REV - Reverse all elements in a predicate.
    /// </summary>
    REV_p_p,
    /// <summary>
    /// Instruction REV - Reverse all elements in a vector (unpredicated).
    /// </summary>
    REV_z_z,
    /// <summary>
    /// Instruction RMIF - Rotate, mask insert flags.
    /// </summary>
    RMIF_only_rmif,
    /// <summary>
    /// Instruction RORV - Rotate right variable.
    /// </summary>
    RORV_32_dp_2src,
    /// <summary>
    /// Instruction RORV - Rotate right variable.
    /// </summary>
    RORV_64_dp_2src,
    /// <summary>
    /// Instruction RPRFM - Range prefetch memory.
    /// </summary>
    RPRFM_r_ldst_regoff,
    /// <summary>
    /// Instruction RSHRNB - Rounding shift right narrow by immediate (bottom).
    /// </summary>
    RSHRNB_z_zi,
    /// <summary>
    /// Instruction RSHRNT - Rounding shift right narrow by immediate (top).
    /// </summary>
    RSHRNT_z_zi,
    /// <summary>
    /// Instruction RSHRN - Rounding shift right narrow (immediate).
    /// </summary>
    RSHRN_asimdshf_n,
    /// <summary>
    /// Instruction RSUBHNB - Rounding subtract narrow high part (bottom).
    /// </summary>
    RSUBHNB_z_zz,
    /// <summary>
    /// Instruction RSUBHNT - Rounding subtract narrow high part (top).
    /// </summary>
    RSUBHNT_z_zz,
    /// <summary>
    /// Instruction RSUBHN - Rounding subtract returning high narrow.
    /// </summary>
    RSUBHN_asimddiff_n,
    /// <summary>
    /// Instruction SABALB - Signed absolute difference and accumulate long (bottom).
    /// </summary>
    SABALB_z_zzz,
    /// <summary>
    /// Instruction SABALT - Signed absolute difference and accumulate long (top).
    /// </summary>
    SABALT_z_zzz,
    /// <summary>
    /// Instruction SABAL - Signed absolute difference and accumulate long.
    /// </summary>
    SABAL_asimddiff_l,
    /// <summary>
    /// Instruction SABA - Signed absolute difference and accumulate.
    /// </summary>
    SABA_asimdsame_only,
    /// <summary>
    /// Instruction SABA - Signed absolute difference and accumulate.
    /// </summary>
    SABA_z_zzz,
    /// <summary>
    /// Instruction SABDLB - Signed absolute difference long (bottom).
    /// </summary>
    SABDLB_z_zz,
    /// <summary>
    /// Instruction SABDLT - Signed absolute difference long (top).
    /// </summary>
    SABDLT_z_zz,
    /// <summary>
    /// Instruction SABDL - Signed absolute difference long.
    /// </summary>
    SABDL_asimddiff_l,
    /// <summary>
    /// Instruction SABD - Signed absolute difference.
    /// </summary>
    SABD_asimdsame_only,
    /// <summary>
    /// Instruction SABD - Signed absolute difference (predicated).
    /// </summary>
    SABD_z_p_zz,
    /// <summary>
    /// Instruction SADALP - Signed add and accumulate long pairwise.
    /// </summary>
    SADALP_asimdmisc_p,
    /// <summary>
    /// Instruction SADALP - Signed add and accumulate long pairwise.
    /// </summary>
    SADALP_z_p_z,
    /// <summary>
    /// Instruction SADDLBT - Signed add long (bottom + top).
    /// </summary>
    SADDLBT_z_zz,
    /// <summary>
    /// Instruction SADDLB - Signed add long (bottom).
    /// </summary>
    SADDLB_z_zz,
    /// <summary>
    /// Instruction SADDLP - Signed add long pairwise.
    /// </summary>
    SADDLP_asimdmisc_p,
    /// <summary>
    /// Instruction SADDLT - Signed add long (top).
    /// </summary>
    SADDLT_z_zz,
    /// <summary>
    /// Instruction SADDLV - Signed add long across vector.
    /// </summary>
    SADDLV_asimdall_only,
    /// <summary>
    /// Instruction SADDL - Signed add long (vector).
    /// </summary>
    SADDL_asimddiff_l,
    /// <summary>
    /// Instruction SADDV - Signed add reduction to scalar.
    /// </summary>
    SADDV_r_p_z,
    /// <summary>
    /// Instruction SADDWB - Signed add wide (bottom).
    /// </summary>
    SADDWB_z_zz,
    /// <summary>
    /// Instruction SADDWT - Signed add wide (top).
    /// </summary>
    SADDWT_z_zz,
    /// <summary>
    /// Instruction SADDW - Signed add wide.
    /// </summary>
    SADDW_asimddiff_w,
    /// <summary>
    /// Instruction SBCLB - Subtract with carry long (bottom).
    /// </summary>
    SBCLB_z_zzz,
    /// <summary>
    /// Instruction SBCLT - Subtract with carry long (top).
    /// </summary>
    SBCLT_z_zzz,
    /// <summary>
    /// Instruction SBCS - Subtract with carry, setting flags.
    /// </summary>
    SBCS_32_addsub_carry,
    /// <summary>
    /// Instruction SBCS - Subtract with carry, setting flags.
    /// </summary>
    SBCS_64_addsub_carry,
    /// <summary>
    /// Instruction SBC - Subtract with carry.
    /// </summary>
    SBC_32_addsub_carry,
    /// <summary>
    /// Instruction SBC - Subtract with carry.
    /// </summary>
    SBC_64_addsub_carry,
    /// <summary>
    /// Instruction SBFM - Signed bitfield move.
    /// </summary>
    SBFM_32m_bitfield,
    /// <summary>
    /// Instruction SBFM - Signed bitfield move.
    /// </summary>
    SBFM_64m_bitfield,
    /// <summary>
    /// Instruction SB - Speculation barrier.
    /// </summary>
    SB_only_barriers,
    /// <summary>
    /// Instruction SCLAMP - Multi-vector signed clamp to minimum/maximum vector.
    /// </summary>
    SCLAMP_mz_zz_2,
    /// <summary>
    /// Instruction SCLAMP - Multi-vector signed clamp to minimum/maximum vector.
    /// </summary>
    SCLAMP_mz_zz_4,
    /// <summary>
    /// Instruction SCLAMP - Signed clamp to minimum/maximum vector.
    /// </summary>
    SCLAMP_z_zz,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (vector).
    /// </summary>
    SCVTF_asimdmisc_r,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (vector).
    /// </summary>
    SCVTF_asimdmiscfp16_r,
    /// <summary>
    /// Instruction SCVTF - Signed fixed-point convert to floating-point (vector).
    /// </summary>
    SCVTF_asimdshf_c,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (vector).
    /// </summary>
    SCVTF_asisdmisc_r,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (vector).
    /// </summary>
    SCVTF_asisdmiscfp16_r,
    /// <summary>
    /// Instruction SCVTF - Signed fixed-point convert to floating-point (vector).
    /// </summary>
    SCVTF_asisdshf_c,
    /// <summary>
    /// Instruction SCVTF - Signed fixed-point convert to floating-point (scalar).
    /// </summary>
    SCVTF_d32_float2fix,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (scalar).
    /// </summary>
    SCVTF_d32_float2int,
    /// <summary>
    /// Instruction SCVTF - Signed fixed-point convert to floating-point (scalar).
    /// </summary>
    SCVTF_d64_float2fix,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (scalar).
    /// </summary>
    SCVTF_d64_float2int,
    /// <summary>
    /// Instruction SCVTF - Signed fixed-point convert to floating-point (scalar).
    /// </summary>
    SCVTF_h32_float2fix,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (scalar).
    /// </summary>
    SCVTF_h32_float2int,
    /// <summary>
    /// Instruction SCVTF - Signed fixed-point convert to floating-point (scalar).
    /// </summary>
    SCVTF_h64_float2fix,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (scalar).
    /// </summary>
    SCVTF_h64_float2int,
    /// <summary>
    /// Instruction SCVTF - Multi-vector signed integer convert to floating-point.
    /// </summary>
    SCVTF_mz_z_2,
    /// <summary>
    /// Instruction SCVTF - Multi-vector signed integer convert to floating-point.
    /// </summary>
    SCVTF_mz_z_4,
    /// <summary>
    /// Instruction SCVTF - Signed fixed-point convert to floating-point (scalar).
    /// </summary>
    SCVTF_s32_float2fix,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (scalar).
    /// </summary>
    SCVTF_s32_float2int,
    /// <summary>
    /// Instruction SCVTF - Signed fixed-point convert to floating-point (scalar).
    /// </summary>
    SCVTF_s64_float2fix,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (scalar).
    /// </summary>
    SCVTF_s64_float2int,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (scalar SIMD&FP).
    /// </summary>
    SCVTF_sisd_32d,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (scalar SIMD&FP).
    /// </summary>
    SCVTF_sisd_32h,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (scalar SIMD&FP).
    /// </summary>
    SCVTF_sisd_64h,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (scalar SIMD&FP).
    /// </summary>
    SCVTF_sisd_64s,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (predicated).
    /// </summary>
    SCVTF_z_p_z_h2fp16,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (predicated).
    /// </summary>
    SCVTF_z_p_z_h2fp16z,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (predicated).
    /// </summary>
    SCVTF_z_p_z_w2d,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (predicated).
    /// </summary>
    SCVTF_z_p_z_w2dz,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (predicated).
    /// </summary>
    SCVTF_z_p_z_w2fp16,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (predicated).
    /// </summary>
    SCVTF_z_p_z_w2fp16z,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (predicated).
    /// </summary>
    SCVTF_z_p_z_w2s,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (predicated).
    /// </summary>
    SCVTF_z_p_z_w2sz,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (predicated).
    /// </summary>
    SCVTF_z_p_z_x2d,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (predicated).
    /// </summary>
    SCVTF_z_p_z_x2dz,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (predicated).
    /// </summary>
    SCVTF_z_p_z_x2fp16,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (predicated).
    /// </summary>
    SCVTF_z_p_z_x2fp16z,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (predicated).
    /// </summary>
    SCVTF_z_p_z_x2s,
    /// <summary>
    /// Instruction SCVTF - Signed integer convert to floating-point (predicated).
    /// </summary>
    SCVTF_z_p_z_x2sz,
    /// <summary>
    /// Instruction SDIVR - Signed reversed divide (predicated).
    /// </summary>
    SDIVR_z_p_zz,
    /// <summary>
    /// Instruction SDIV - Signed divide.
    /// </summary>
    SDIV_32_dp_2src,
    /// <summary>
    /// Instruction SDIV - Signed divide.
    /// </summary>
    SDIV_64_dp_2src,
    /// <summary>
    /// Instruction SDIV - Signed divide (predicated).
    /// </summary>
    SDIV_z_p_zz,
    /// <summary>
    /// Instruction SDOT - Dot product signed arithmetic (vector, by element).
    /// </summary>
    SDOT_asimdelem_d,
    /// <summary>
    /// Instruction SDOT - Dot product signed arithmetic (vector).
    /// </summary>
    SDOT_asimdsame2_d,
    /// <summary>
    /// Instruction SDOT - Signed integer dot product.
    /// </summary>
    SDOT_z32_zzz,
    /// <summary>
    /// Instruction SDOT - Signed integer indexed dot product.
    /// </summary>
    SDOT_z32_zzzi,
    /// <summary>
    /// Instruction SDOT - Signed integer dot product.
    /// </summary>
    SDOT_z_zzz,
    /// <summary>
    /// Instruction SDOT - Signed integer indexed dot product.
    /// </summary>
    SDOT_z_zzzi_d,
    /// <summary>
    /// Instruction SDOT - Signed integer indexed dot product.
    /// </summary>
    SDOT_z_zzzi_s,
    /// <summary>
    /// Instruction SDOT - Multi-vector signed integer dot-product by indexed element.
    /// </summary>
    SDOT_za32_zzi_2xi,
    /// <summary>
    /// Instruction SDOT - Multi-vector signed integer dot-product by indexed element.
    /// </summary>
    SDOT_za32_zzi_4xi,
    /// <summary>
    /// Instruction SDOT - Multi-vector signed integer dot-product by vector.
    /// </summary>
    SDOT_za32_zzv_2x1,
    /// <summary>
    /// Instruction SDOT - Multi-vector signed integer dot-product by vector.
    /// </summary>
    SDOT_za32_zzv_4x1,
    /// <summary>
    /// Instruction SDOT - Multi-vector signed integer dot-product.
    /// </summary>
    SDOT_za32_zzw_2x2,
    /// <summary>
    /// Instruction SDOT - Multi-vector signed integer dot-product.
    /// </summary>
    SDOT_za32_zzw_4x4,
    /// <summary>
    /// Instruction SDOT - Multi-vector signed integer dot-product by indexed element.
    /// </summary>
    SDOT_za_zzi_d2xi,
    /// <summary>
    /// Instruction SDOT - Multi-vector signed integer dot-product by indexed element.
    /// </summary>
    SDOT_za_zzi_d4xi,
    /// <summary>
    /// Instruction SDOT - Multi-vector signed integer dot-product by indexed element.
    /// </summary>
    SDOT_za_zzi_s2xi,
    /// <summary>
    /// Instruction SDOT - Multi-vector signed integer dot-product by indexed element.
    /// </summary>
    SDOT_za_zzi_s4xi,
    /// <summary>
    /// Instruction SDOT - Multi-vector signed integer dot-product by vector.
    /// </summary>
    SDOT_za_zzv_2x1,
    /// <summary>
    /// Instruction SDOT - Multi-vector signed integer dot-product by vector.
    /// </summary>
    SDOT_za_zzv_4x1,
    /// <summary>
    /// Instruction SDOT - Multi-vector signed integer dot-product.
    /// </summary>
    SDOT_za_zzw_2x2,
    /// <summary>
    /// Instruction SDOT - Multi-vector signed integer dot-product.
    /// </summary>
    SDOT_za_zzw_4x4,
    /// <summary>
    /// Instruction SEL - Multi-vector conditionally select elements from two vectors.
    /// </summary>
    SEL_mz_p_zz_2,
    /// <summary>
    /// Instruction SEL - Multi-vector conditionally select elements from two vectors.
    /// </summary>
    SEL_mz_p_zz_4,
    /// <summary>
    /// Instruction SEL - Conditionally select elements from two predicates.
    /// </summary>
    SEL_p_p_pp,
    /// <summary>
    /// Instruction SEL - Conditionally select elements from two vectors.
    /// </summary>
    SEL_z_p_zz,
    /// <summary>
    /// Instruction SETEN - Memory set, non-temporal.
    /// </summary>
    SETEN_set_memcms,
    /// <summary>
    /// Instruction SETETN - Memory set, unprivileged and non-temporal.
    /// </summary>
    SETETN_set_memcms,
    /// <summary>
    /// Instruction SETET - Memory set, unprivileged.
    /// </summary>
    SETET_set_memcms,
    /// <summary>
    /// Instruction SETE - Memory set.
    /// </summary>
    SETE_set_memcms,
    /// <summary>
    /// Instruction SETF16 - Evaluation of 8-bit or 16-bit flag values.
    /// </summary>
    SETF16_only_setf,
    /// <summary>
    /// Instruction SETF8 - Evaluation of 8-bit or 16-bit flag values.
    /// </summary>
    SETF8_only_setf,
    /// <summary>
    /// Instruction SETFFR - Initialise the first-fault register to all true.
    /// </summary>
    SETFFR_f,
    /// <summary>
    /// Instruction SETGEN - Memory set with tag setting, non-temporal.
    /// </summary>
    SETGEN_set_memcms,
    /// <summary>
    /// Instruction SETGETN - Memory set with tag setting, unprivileged and non-temporal.
    /// </summary>
    SETGETN_set_memcms,
    /// <summary>
    /// Instruction SETGET - Memory set with tag setting, unprivileged.
    /// </summary>
    SETGET_set_memcms,
    /// <summary>
    /// Instruction SETGE - Memory set with tag setting.
    /// </summary>
    SETGE_set_memcms,
    /// <summary>
    /// Instruction SETGMN - Memory set with tag setting, non-temporal.
    /// </summary>
    SETGMN_set_memcms,
    /// <summary>
    /// Instruction SETGMTN - Memory set with tag setting, unprivileged and non-temporal.
    /// </summary>
    SETGMTN_set_memcms,
    /// <summary>
    /// Instruction SETGMT - Memory set with tag setting, unprivileged.
    /// </summary>
    SETGMT_set_memcms,
    /// <summary>
    /// Instruction SETGM - Memory set with tag setting.
    /// </summary>
    SETGM_set_memcms,
    /// <summary>
    /// Instruction SETGPN - Memory set with tag setting, non-temporal.
    /// </summary>
    SETGPN_set_memcms,
    /// <summary>
    /// Instruction SETGPTN - Memory set with tag setting, unprivileged and non-temporal.
    /// </summary>
    SETGPTN_set_memcms,
    /// <summary>
    /// Instruction SETGPT - Memory set with tag setting, unprivileged.
    /// </summary>
    SETGPT_set_memcms,
    /// <summary>
    /// Instruction SETGP - Memory set with tag setting.
    /// </summary>
    SETGP_set_memcms,
    /// <summary>
    /// Instruction SETMN - Memory set, non-temporal.
    /// </summary>
    SETMN_set_memcms,
    /// <summary>
    /// Instruction SETMTN - Memory set, unprivileged and non-temporal.
    /// </summary>
    SETMTN_set_memcms,
    /// <summary>
    /// Instruction SETMT - Memory set, unprivileged.
    /// </summary>
    SETMT_set_memcms,
    /// <summary>
    /// Instruction SETM - Memory set.
    /// </summary>
    SETM_set_memcms,
    /// <summary>
    /// Instruction SETPN - Memory set, non-temporal.
    /// </summary>
    SETPN_set_memcms,
    /// <summary>
    /// Instruction SETPTN - Memory set, unprivileged and non-temporal.
    /// </summary>
    SETPTN_set_memcms,
    /// <summary>
    /// Instruction SETPT - Memory set, unprivileged.
    /// </summary>
    SETPT_set_memcms,
    /// <summary>
    /// Instruction SETP - Memory set.
    /// </summary>
    SETP_set_memcms,
    /// <summary>
    /// Instruction SEVL - Send event local.
    /// </summary>
    SEVL_hi_hints,
    /// <summary>
    /// Instruction SEV - Send event.
    /// </summary>
    SEV_hi_hints,
    /// <summary>
    /// Instruction SHA1C - SHA1 hash update (choose).
    /// </summary>
    SHA1C_qsv_cryptosha3,
    /// <summary>
    /// Instruction SHA1H - SHA1 fixed rotate.
    /// </summary>
    SHA1H_ss_cryptosha2,
    /// <summary>
    /// Instruction SHA1M - SHA1 hash update (majority).
    /// </summary>
    SHA1M_qsv_cryptosha3,
    /// <summary>
    /// Instruction SHA1P - SHA1 hash update (parity).
    /// </summary>
    SHA1P_qsv_cryptosha3,
    /// <summary>
    /// Instruction SHA1SU0 - SHA1 schedule update 0.
    /// </summary>
    SHA1SU0_vvv_cryptosha3,
    /// <summary>
    /// Instruction SHA1SU1 - SHA1 schedule update 1.
    /// </summary>
    SHA1SU1_vv_cryptosha2,
    /// <summary>
    /// Instruction SHA256H2 - SHA256 hash update (part 2).
    /// </summary>
    SHA256H2_qqv_cryptosha3,
    /// <summary>
    /// Instruction SHA256H - SHA256 hash update (part 1).
    /// </summary>
    SHA256H_qqv_cryptosha3,
    /// <summary>
    /// Instruction SHA256SU0 - SHA256 schedule update 0.
    /// </summary>
    SHA256SU0_vv_cryptosha2,
    /// <summary>
    /// Instruction SHA256SU1 - SHA256 schedule update 1.
    /// </summary>
    SHA256SU1_vvv_cryptosha3,
    /// <summary>
    /// Instruction SHA512H2 - SHA512 hash update part 2.
    /// </summary>
    SHA512H2_qqv_cryptosha512_3,
    /// <summary>
    /// Instruction SHA512H - SHA512 hash update part 1.
    /// </summary>
    SHA512H_qqv_cryptosha512_3,
    /// <summary>
    /// Instruction SHA512SU0 - SHA512 schedule update 0.
    /// </summary>
    SHA512SU0_vv2_cryptosha512_2,
    /// <summary>
    /// Instruction SHA512SU1 - SHA512 schedule update 1.
    /// </summary>
    SHA512SU1_vvv2_cryptosha512_3,
    /// <summary>
    /// Instruction SHADD - Signed halving add.
    /// </summary>
    SHADD_asimdsame_only,
    /// <summary>
    /// Instruction SHADD - Signed halving addition.
    /// </summary>
    SHADD_z_p_zz,
    /// <summary>
    /// Instruction SHLL - Shift left long (by element size).
    /// </summary>
    SHLL_asimdmisc_s,
    /// <summary>
    /// Instruction SHL - Shift left (immediate).
    /// </summary>
    SHL_asimdshf_r,
    /// <summary>
    /// Instruction SHL - Shift left (immediate).
    /// </summary>
    SHL_asisdshf_r,
    /// <summary>
    /// Instruction SHRNB - Shift right narrow by immediate (bottom).
    /// </summary>
    SHRNB_z_zi,
    /// <summary>
    /// Instruction SHRNT - Shift right narrow by immediate (top).
    /// </summary>
    SHRNT_z_zi,
    /// <summary>
    /// Instruction SHRN - Shift right narrow (immediate).
    /// </summary>
    SHRN_asimdshf_n,
    /// <summary>
    /// Instruction SHSUBR - Signed halving subtract reversed vectors.
    /// </summary>
    SHSUBR_z_p_zz,
    /// <summary>
    /// Instruction SHSUB - Signed halving subtract.
    /// </summary>
    SHSUB_asimdsame_only,
    /// <summary>
    /// Instruction SHSUB - Signed halving subtract.
    /// </summary>
    SHSUB_z_p_zz,
    /// <summary>
    /// Instruction SLI - Shift left and insert (immediate).
    /// </summary>
    SLI_asimdshf_r,
    /// <summary>
    /// Instruction SLI - Shift left and insert (immediate).
    /// </summary>
    SLI_asisdshf_r,
    /// <summary>
    /// Instruction SLI - Shift left and insert (immediate).
    /// </summary>
    SLI_z_zzi,
    /// <summary>
    /// Instruction SM3PARTW1 - SM3PARTW1.
    /// </summary>
    SM3PARTW1_vvv4_cryptosha512_3,
    /// <summary>
    /// Instruction SM3PARTW2 - SM3PARTW2.
    /// </summary>
    SM3PARTW2_vvv4_cryptosha512_3,
    /// <summary>
    /// Instruction SM3SS1 - SM3SS1.
    /// </summary>
    SM3SS1_vvv4_crypto4,
    /// <summary>
    /// Instruction SM3TT1A - SM3TT1A.
    /// </summary>
    SM3TT1A_vvv4_crypto3_imm2,
    /// <summary>
    /// Instruction SM3TT1B - SM3TT1B.
    /// </summary>
    SM3TT1B_vvv4_crypto3_imm2,
    /// <summary>
    /// Instruction SM3TT2A - SM3TT2A.
    /// </summary>
    SM3TT2A_vvv4_crypto3_imm2,
    /// <summary>
    /// Instruction SM3TT2B - SM3TT2B.
    /// </summary>
    SM3TT2B_vvv_crypto3_imm2,
    /// <summary>
    /// Instruction SM4EKEY - SM4 key.
    /// </summary>
    SM4EKEY_vvv4_cryptosha512_3,
    /// <summary>
    /// Instruction SM4EKEY - SM4 key updates.
    /// </summary>
    SM4EKEY_z_zz,
    /// <summary>
    /// Instruction SM4E - SM4 encode.
    /// </summary>
    SM4E_vv4_cryptosha512_2,
    /// <summary>
    /// Instruction SM4E - SM4 encryption and decryption.
    /// </summary>
    SM4E_z_zz,
    /// <summary>
    /// Instruction SMADDL - Signed multiply-add long.
    /// </summary>
    SMADDL_64wa_dp_3src,
    /// <summary>
    /// Instruction SMAXP - Signed maximum pairwise.
    /// </summary>
    SMAXP_asimdsame_only,
    /// <summary>
    /// Instruction SMAXP - Signed maximum pairwise.
    /// </summary>
    SMAXP_z_p_zz,
    /// <summary>
    /// Instruction SMAXQV - Signed maximum reduction of quadword vector segments.
    /// </summary>
    SMAXQV_z_p_z,
    /// <summary>
    /// Instruction SMAXV - Signed maximum across vector.
    /// </summary>
    SMAXV_asimdall_only,
    /// <summary>
    /// Instruction SMAXV - Signed maximum reduction to scalar.
    /// </summary>
    SMAXV_r_p_z,
    /// <summary>
    /// Instruction SMAX - Signed maximum (register).
    /// </summary>
    SMAX_32_dp_2src,
    /// <summary>
    /// Instruction SMAX - Signed maximum (immediate).
    /// </summary>
    SMAX_32_minmax_imm,
    /// <summary>
    /// Instruction SMAX - Signed maximum (register).
    /// </summary>
    SMAX_64_dp_2src,
    /// <summary>
    /// Instruction SMAX - Signed maximum (immediate).
    /// </summary>
    SMAX_64_minmax_imm,
    /// <summary>
    /// Instruction SMAX - Signed maximum (vector).
    /// </summary>
    SMAX_asimdsame_only,
    /// <summary>
    /// Instruction SMAX - Multi-vector signed maximum by vector.
    /// </summary>
    SMAX_mz_zzv_2x1,
    /// <summary>
    /// Instruction SMAX - Multi-vector signed maximum by vector.
    /// </summary>
    SMAX_mz_zzv_4x1,
    /// <summary>
    /// Instruction SMAX - Multi-vector signed maximum.
    /// </summary>
    SMAX_mz_zzw_2x2,
    /// <summary>
    /// Instruction SMAX - Multi-vector signed maximum.
    /// </summary>
    SMAX_mz_zzw_4x4,
    /// <summary>
    /// Instruction SMAX - Signed maximum vectors (predicated).
    /// </summary>
    SMAX_z_p_zz,
    /// <summary>
    /// Instruction SMAX - Signed maximum with immediate (unpredicated).
    /// </summary>
    SMAX_z_zi,
    /// <summary>
    /// Instruction SMC - Secure monitor call.
    /// </summary>
    SMC_ex_exception,
    /// <summary>
    /// Instruction SMINP - Signed minimum pairwise.
    /// </summary>
    SMINP_asimdsame_only,
    /// <summary>
    /// Instruction SMINP - Signed minimum pairwise.
    /// </summary>
    SMINP_z_p_zz,
    /// <summary>
    /// Instruction SMINQV - Signed minimum reduction of quadword vector segments.
    /// </summary>
    SMINQV_z_p_z,
    /// <summary>
    /// Instruction SMINV - Signed minimum across vector.
    /// </summary>
    SMINV_asimdall_only,
    /// <summary>
    /// Instruction SMINV - Signed minimum reduction to scalar.
    /// </summary>
    SMINV_r_p_z,
    /// <summary>
    /// Instruction SMIN - Signed minimum (register).
    /// </summary>
    SMIN_32_dp_2src,
    /// <summary>
    /// Instruction SMIN - Signed minimum (immediate).
    /// </summary>
    SMIN_32_minmax_imm,
    /// <summary>
    /// Instruction SMIN - Signed minimum (register).
    /// </summary>
    SMIN_64_dp_2src,
    /// <summary>
    /// Instruction SMIN - Signed minimum (immediate).
    /// </summary>
    SMIN_64_minmax_imm,
    /// <summary>
    /// Instruction SMIN - Signed minimum (vector).
    /// </summary>
    SMIN_asimdsame_only,
    /// <summary>
    /// Instruction SMIN - Multi-vector signed minimum by vector.
    /// </summary>
    SMIN_mz_zzv_2x1,
    /// <summary>
    /// Instruction SMIN - Multi-vector signed minimum by vector.
    /// </summary>
    SMIN_mz_zzv_4x1,
    /// <summary>
    /// Instruction SMIN - Multi-vector signed minimum.
    /// </summary>
    SMIN_mz_zzw_2x2,
    /// <summary>
    /// Instruction SMIN - Multi-vector signed minimum.
    /// </summary>
    SMIN_mz_zzw_4x4,
    /// <summary>
    /// Instruction SMIN - Signed minimum vectors (predicated).
    /// </summary>
    SMIN_z_p_zz,
    /// <summary>
    /// Instruction SMIN - Signed minimum with immediate (unpredicated).
    /// </summary>
    SMIN_z_zi,
    /// <summary>
    /// Instruction SMLALB - Signed multiply-add long to accumulator (bottom).
    /// </summary>
    SMLALB_z_zzz,
    /// <summary>
    /// Instruction SMLALB - Signed multiply-add long to accumulator (bottom, indexed).
    /// </summary>
    SMLALB_z_zzzi_d,
    /// <summary>
    /// Instruction SMLALB - Signed multiply-add long to accumulator (bottom, indexed).
    /// </summary>
    SMLALB_z_zzzi_s,
    /// <summary>
    /// Instruction SMLALL - Multi-vector signed integer multiply-add long-long by indexed element.
    /// </summary>
    SMLALL_za_zzi_d,
    /// <summary>
    /// Instruction SMLALL - Multi-vector signed integer multiply-add long-long by indexed element.
    /// </summary>
    SMLALL_za_zzi_d2xi,
    /// <summary>
    /// Instruction SMLALL - Multi-vector signed integer multiply-add long-long by indexed element.
    /// </summary>
    SMLALL_za_zzi_d4xi,
    /// <summary>
    /// Instruction SMLALL - Multi-vector signed integer multiply-add long-long by indexed element.
    /// </summary>
    SMLALL_za_zzi_s,
    /// <summary>
    /// Instruction SMLALL - Multi-vector signed integer multiply-add long-long by indexed element.
    /// </summary>
    SMLALL_za_zzi_s2xi,
    /// <summary>
    /// Instruction SMLALL - Multi-vector signed integer multiply-add long-long by indexed element.
    /// </summary>
    SMLALL_za_zzi_s4xi,
    /// <summary>
    /// Instruction SMLALL - Multi-vector signed integer multiply-add long-long by vector.
    /// </summary>
    SMLALL_za_zzv_1,
    /// <summary>
    /// Instruction SMLALL - Multi-vector signed integer multiply-add long-long by vector.
    /// </summary>
    SMLALL_za_zzv_2x1,
    /// <summary>
    /// Instruction SMLALL - Multi-vector signed integer multiply-add long-long by vector.
    /// </summary>
    SMLALL_za_zzv_4x1,
    /// <summary>
    /// Instruction SMLALL - Multi-vector signed integer multiply-add long-long.
    /// </summary>
    SMLALL_za_zzw_2x2,
    /// <summary>
    /// Instruction SMLALL - Multi-vector signed integer multiply-add long-long.
    /// </summary>
    SMLALL_za_zzw_4x4,
    /// <summary>
    /// Instruction SMLALT - Signed multiply-add long to accumulator (top).
    /// </summary>
    SMLALT_z_zzz,
    /// <summary>
    /// Instruction SMLALT - Signed multiply-add long to accumulator (top, indexed).
    /// </summary>
    SMLALT_z_zzzi_d,
    /// <summary>
    /// Instruction SMLALT - Signed multiply-add long to accumulator (top, indexed).
    /// </summary>
    SMLALT_z_zzzi_s,
    /// <summary>
    /// Instruction SMLAL - Signed multiply-add long (vector).
    /// </summary>
    SMLAL_asimddiff_l,
    /// <summary>
    /// Instruction SMLAL - Signed multiply-add long (vector, by element).
    /// </summary>
    SMLAL_asimdelem_l,
    /// <summary>
    /// Instruction SMLAL - Multi-vector signed integer multiply-add long by indexed element.
    /// </summary>
    SMLAL_za_zzi_1,
    /// <summary>
    /// Instruction SMLAL - Multi-vector signed integer multiply-add long by indexed element.
    /// </summary>
    SMLAL_za_zzi_2xi,
    /// <summary>
    /// Instruction SMLAL - Multi-vector signed integer multiply-add long by indexed element.
    /// </summary>
    SMLAL_za_zzi_4xi,
    /// <summary>
    /// Instruction SMLAL - Multi-vector signed integer multiply-add long by vector.
    /// </summary>
    SMLAL_za_zzv_1,
    /// <summary>
    /// Instruction SMLAL - Multi-vector signed integer multiply-add long by vector.
    /// </summary>
    SMLAL_za_zzv_2x1,
    /// <summary>
    /// Instruction SMLAL - Multi-vector signed integer multiply-add long by vector.
    /// </summary>
    SMLAL_za_zzv_4x1,
    /// <summary>
    /// Instruction SMLAL - Multi-vector signed integer multiply-add long.
    /// </summary>
    SMLAL_za_zzw_2x2,
    /// <summary>
    /// Instruction SMLAL - Multi-vector signed integer multiply-add long.
    /// </summary>
    SMLAL_za_zzw_4x4,
    /// <summary>
    /// Instruction SMLSLB - Signed multiply-subtract long from accumulator (bottom).
    /// </summary>
    SMLSLB_z_zzz,
    /// <summary>
    /// Instruction SMLSLB - Signed multiply-subtract long from accumulator (bottom, indexed).
    /// </summary>
    SMLSLB_z_zzzi_d,
    /// <summary>
    /// Instruction SMLSLB - Signed multiply-subtract long from accumulator (bottom, indexed).
    /// </summary>
    SMLSLB_z_zzzi_s,
    /// <summary>
    /// Instruction SMLSLL - Multi-vector signed integer multiply-subtract long-long by indexed element.
    /// </summary>
    SMLSLL_za_zzi_d,
    /// <summary>
    /// Instruction SMLSLL - Multi-vector signed integer multiply-subtract long-long by indexed element.
    /// </summary>
    SMLSLL_za_zzi_d2xi,
    /// <summary>
    /// Instruction SMLSLL - Multi-vector signed integer multiply-subtract long-long by indexed element.
    /// </summary>
    SMLSLL_za_zzi_d4xi,
    /// <summary>
    /// Instruction SMLSLL - Multi-vector signed integer multiply-subtract long-long by indexed element.
    /// </summary>
    SMLSLL_za_zzi_s,
    /// <summary>
    /// Instruction SMLSLL - Multi-vector signed integer multiply-subtract long-long by indexed element.
    /// </summary>
    SMLSLL_za_zzi_s2xi,
    /// <summary>
    /// Instruction SMLSLL - Multi-vector signed integer multiply-subtract long-long by indexed element.
    /// </summary>
    SMLSLL_za_zzi_s4xi,
    /// <summary>
    /// Instruction SMLSLL - Multi-vector signed integer multiply-subtract long-long by vector.
    /// </summary>
    SMLSLL_za_zzv_1,
    /// <summary>
    /// Instruction SMLSLL - Multi-vector signed integer multiply-subtract long-long by vector.
    /// </summary>
    SMLSLL_za_zzv_2x1,
    /// <summary>
    /// Instruction SMLSLL - Multi-vector signed integer multiply-subtract long-long by vector.
    /// </summary>
    SMLSLL_za_zzv_4x1,
    /// <summary>
    /// Instruction SMLSLL - Multi-vector signed integer multiply-subtract long-long.
    /// </summary>
    SMLSLL_za_zzw_2x2,
    /// <summary>
    /// Instruction SMLSLL - Multi-vector signed integer multiply-subtract long-long.
    /// </summary>
    SMLSLL_za_zzw_4x4,
    /// <summary>
    /// Instruction SMLSLT - Signed multiply-subtract long from accumulator (top).
    /// </summary>
    SMLSLT_z_zzz,
    /// <summary>
    /// Instruction SMLSLT - Signed multiply-subtract long from accumulator (top, indexed).
    /// </summary>
    SMLSLT_z_zzzi_d,
    /// <summary>
    /// Instruction SMLSLT - Signed multiply-subtract long from accumulator (top, indexed).
    /// </summary>
    SMLSLT_z_zzzi_s,
    /// <summary>
    /// Instruction SMLSL - Signed multiply-subtract long (vector).
    /// </summary>
    SMLSL_asimddiff_l,
    /// <summary>
    /// Instruction SMLSL - Signed multiply-subtract long (vector, by element).
    /// </summary>
    SMLSL_asimdelem_l,
    /// <summary>
    /// Instruction SMLSL - Multi-vector signed integer multiply-subtract long by indexed element.
    /// </summary>
    SMLSL_za_zzi_1,
    /// <summary>
    /// Instruction SMLSL - Multi-vector signed integer multiply-subtract long by indexed element.
    /// </summary>
    SMLSL_za_zzi_2xi,
    /// <summary>
    /// Instruction SMLSL - Multi-vector signed integer multiply-subtract long by indexed element.
    /// </summary>
    SMLSL_za_zzi_4xi,
    /// <summary>
    /// Instruction SMLSL - Multi-vector signed integer multiply-subtract long by vector.
    /// </summary>
    SMLSL_za_zzv_1,
    /// <summary>
    /// Instruction SMLSL - Multi-vector signed integer multiply-subtract long by vector.
    /// </summary>
    SMLSL_za_zzv_2x1,
    /// <summary>
    /// Instruction SMLSL - Multi-vector signed integer multiply-subtract long by vector.
    /// </summary>
    SMLSL_za_zzv_4x1,
    /// <summary>
    /// Instruction SMLSL - Multi-vector signed integer multiply-subtract long.
    /// </summary>
    SMLSL_za_zzw_2x2,
    /// <summary>
    /// Instruction SMLSL - Multi-vector signed integer multiply-subtract long.
    /// </summary>
    SMLSL_za_zzw_4x4,
    /// <summary>
    /// Instruction SMMLA - Signed 8-bit integer matrix multiply-accumulate (vector).
    /// </summary>
    SMMLA_asimdsame2_g,
    /// <summary>
    /// Instruction SMMLA - Signed integer matrix multiply-accumulate.
    /// </summary>
    SMMLA_z_zzz,
    /// <summary>
    /// Instruction SMOP4A - Signed integer quarter-tile sums of two outer products, accumulating.
    /// </summary>
    SMOP4A_za32_zz_h1x1,
    /// <summary>
    /// Instruction SMOP4A - Signed integer quarter-tile sums of two outer products, accumulating.
    /// </summary>
    SMOP4A_za32_zz_h1x2,
    /// <summary>
    /// Instruction SMOP4A - Signed integer quarter-tile sums of two outer products, accumulating.
    /// </summary>
    SMOP4A_za32_zz_h2x1,
    /// <summary>
    /// Instruction SMOP4A - Signed integer quarter-tile sums of two outer products, accumulating.
    /// </summary>
    SMOP4A_za32_zz_h2x2,
    /// <summary>
    /// Instruction SMOP4A - Signed integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    SMOP4A_za_zz_b1x1,
    /// <summary>
    /// Instruction SMOP4A - Signed integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    SMOP4A_za_zz_b1x2,
    /// <summary>
    /// Instruction SMOP4A - Signed integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    SMOP4A_za_zz_b2x1,
    /// <summary>
    /// Instruction SMOP4A - Signed integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    SMOP4A_za_zz_b2x2,
    /// <summary>
    /// Instruction SMOP4A - Signed integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    SMOP4A_za_zz_h1x1,
    /// <summary>
    /// Instruction SMOP4A - Signed integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    SMOP4A_za_zz_h1x2,
    /// <summary>
    /// Instruction SMOP4A - Signed integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    SMOP4A_za_zz_h2x1,
    /// <summary>
    /// Instruction SMOP4A - Signed integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    SMOP4A_za_zz_h2x2,
    /// <summary>
    /// Instruction SMOP4S - Signed integer quarter-tile sums of two outer products, subtracting.
    /// </summary>
    SMOP4S_za32_zz_h1x1,
    /// <summary>
    /// Instruction SMOP4S - Signed integer quarter-tile sums of two outer products, subtracting.
    /// </summary>
    SMOP4S_za32_zz_h1x2,
    /// <summary>
    /// Instruction SMOP4S - Signed integer quarter-tile sums of two outer products, subtracting.
    /// </summary>
    SMOP4S_za32_zz_h2x1,
    /// <summary>
    /// Instruction SMOP4S - Signed integer quarter-tile sums of two outer products, subtracting.
    /// </summary>
    SMOP4S_za32_zz_h2x2,
    /// <summary>
    /// Instruction SMOP4S - Signed integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    SMOP4S_za_zz_b1x1,
    /// <summary>
    /// Instruction SMOP4S - Signed integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    SMOP4S_za_zz_b1x2,
    /// <summary>
    /// Instruction SMOP4S - Signed integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    SMOP4S_za_zz_b2x1,
    /// <summary>
    /// Instruction SMOP4S - Signed integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    SMOP4S_za_zz_b2x2,
    /// <summary>
    /// Instruction SMOP4S - Signed integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    SMOP4S_za_zz_h1x1,
    /// <summary>
    /// Instruction SMOP4S - Signed integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    SMOP4S_za_zz_h1x2,
    /// <summary>
    /// Instruction SMOP4S - Signed integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    SMOP4S_za_zz_h2x1,
    /// <summary>
    /// Instruction SMOP4S - Signed integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    SMOP4S_za_zz_h2x2,
    /// <summary>
    /// Instruction SMOPA - Signed integer sum of outer products and accumulate.
    /// </summary>
    SMOPA_za32_pp_zz_16,
    /// <summary>
    /// Instruction SMOPA - Signed integer sum of outer products and accumulate.
    /// </summary>
    SMOPA_za_pp_zz_32,
    /// <summary>
    /// Instruction SMOPA - Signed integer sum of outer products and accumulate.
    /// </summary>
    SMOPA_za_pp_zz_64,
    /// <summary>
    /// Instruction SMOPS - Signed integer sum of outer products and subtract.
    /// </summary>
    SMOPS_za32_pp_zz_16,
    /// <summary>
    /// Instruction SMOPS - Signed integer sum of outer products and subtract.
    /// </summary>
    SMOPS_za_pp_zz_32,
    /// <summary>
    /// Instruction SMOPS - Signed integer sum of outer products and subtract.
    /// </summary>
    SMOPS_za_pp_zz_64,
    /// <summary>
    /// Instruction SMOV - Signed move vector element to general-purpose register.
    /// </summary>
    SMOV_asimdins_w_w,
    /// <summary>
    /// Instruction SMOV - Signed move vector element to general-purpose register.
    /// </summary>
    SMOV_asimdins_x_x,
    /// <summary>
    /// Instruction SMSUBL - Signed multiply-subtract long.
    /// </summary>
    SMSUBL_64wa_dp_3src,
    /// <summary>
    /// Instruction SMULH - Signed multiply high.
    /// </summary>
    SMULH_64_dp_3src,
    /// <summary>
    /// Instruction SMULH - Signed multiply returning high half (predicated).
    /// </summary>
    SMULH_z_p_zz,
    /// <summary>
    /// Instruction SMULH - Signed multiply returning high half (unpredicated).
    /// </summary>
    SMULH_z_zz,
    /// <summary>
    /// Instruction SMULLB - Signed multiply long (bottom).
    /// </summary>
    SMULLB_z_zz,
    /// <summary>
    /// Instruction SMULLB - Signed multiply long (bottom, indexed).
    /// </summary>
    SMULLB_z_zzi_d,
    /// <summary>
    /// Instruction SMULLB - Signed multiply long (bottom, indexed).
    /// </summary>
    SMULLB_z_zzi_s,
    /// <summary>
    /// Instruction SMULLT - Signed multiply long (top).
    /// </summary>
    SMULLT_z_zz,
    /// <summary>
    /// Instruction SMULLT - Signed multiply long (top, indexed).
    /// </summary>
    SMULLT_z_zzi_d,
    /// <summary>
    /// Instruction SMULLT - Signed multiply long (top, indexed).
    /// </summary>
    SMULLT_z_zzi_s,
    /// <summary>
    /// Instruction SMULL - Signed multiply long (vector).
    /// </summary>
    SMULL_asimddiff_l,
    /// <summary>
    /// Instruction SMULL - Signed multiply long (vector, by element).
    /// </summary>
    SMULL_asimdelem_l,
    /// <summary>
    /// Instruction SPLICE - Splice two vectors under predicate control.
    /// </summary>
    SPLICE_z_p_zz_con,
    /// <summary>
    /// Instruction SPLICE - Splice two vectors under predicate control.
    /// </summary>
    SPLICE_z_p_zz_des,
    /// <summary>
    /// Instruction SQABS - Signed saturating absolute value.
    /// </summary>
    SQABS_asimdmisc_r,
    /// <summary>
    /// Instruction SQABS - Signed saturating absolute value.
    /// </summary>
    SQABS_asisdmisc_r,
    /// <summary>
    /// Instruction SQABS - Signed saturating absolute value.
    /// </summary>
    SQABS_z_p_z_m,
    /// <summary>
    /// Instruction SQABS - Signed saturating absolute value.
    /// </summary>
    SQABS_z_p_z_z,
    /// <summary>
    /// Instruction SQADD - Signed saturating add.
    /// </summary>
    SQADD_asimdsame_only,
    /// <summary>
    /// Instruction SQADD - Signed saturating add.
    /// </summary>
    SQADD_asisdsame_only,
    /// <summary>
    /// Instruction SQADD - Signed saturating addition (predicated).
    /// </summary>
    SQADD_z_p_zz,
    /// <summary>
    /// Instruction SQADD - Signed saturating add immediate (unpredicated).
    /// </summary>
    SQADD_z_zi,
    /// <summary>
    /// Instruction SQADD - Signed saturating add vectors (unpredicated).
    /// </summary>
    SQADD_z_zz,
    /// <summary>
    /// Instruction SQCADD - Saturating complex integer add with rotate.
    /// </summary>
    SQCADD_z_zz,
    /// <summary>
    /// Instruction SQCVTN - Signed saturating extract narrow and interleave.
    /// </summary>
    SQCVTN_z_mz2,
    /// <summary>
    /// Instruction SQCVTN - Multi-vector signed saturating extract narrow and interleave.
    /// </summary>
    SQCVTN_z_mz4,
    /// <summary>
    /// Instruction SQCVTUN - Signed saturating unsigned extract narrow and interleave.
    /// </summary>
    SQCVTUN_z_mz2,
    /// <summary>
    /// Instruction SQCVTUN - Multi-vector signed saturating unsigned extract narrow and interleave.
    /// </summary>
    SQCVTUN_z_mz4,
    /// <summary>
    /// Instruction SQCVTU - Multi-vector signed saturating unsigned extract narrow.
    /// </summary>
    SQCVTU_z_mz2,
    /// <summary>
    /// Instruction SQCVTU - Multi-vector signed saturating unsigned extract narrow.
    /// </summary>
    SQCVTU_z_mz4,
    /// <summary>
    /// Instruction SQCVT - Multi-vector signed saturating extract narrow.
    /// </summary>
    SQCVT_z_mz2,
    /// <summary>
    /// Instruction SQCVT - Multi-vector signed saturating extract narrow.
    /// </summary>
    SQCVT_z_mz4,
    /// <summary>
    /// Instruction SQDECB - Signed saturating decrement scalar by multiple of 8-bit predicate constraint element count.
    /// </summary>
    SQDECB_r_rs_sx,
    /// <summary>
    /// Instruction SQDECB - Signed saturating decrement scalar by multiple of 8-bit predicate constraint element count.
    /// </summary>
    SQDECB_r_rs_x,
    /// <summary>
    /// Instruction SQDECD - Signed saturating decrement scalar by multiple of 64-bit predicate constraint element count.
    /// </summary>
    SQDECD_r_rs_sx,
    /// <summary>
    /// Instruction SQDECD - Signed saturating decrement scalar by multiple of 64-bit predicate constraint element count.
    /// </summary>
    SQDECD_r_rs_x,
    /// <summary>
    /// Instruction SQDECD - Signed saturating decrement vector by multiple of 64-bit predicate constraint element count.
    /// </summary>
    SQDECD_z_zs,
    /// <summary>
    /// Instruction SQDECH - Signed saturating decrement scalar by multiple of 16-bit predicate constraint element count.
    /// </summary>
    SQDECH_r_rs_sx,
    /// <summary>
    /// Instruction SQDECH - Signed saturating decrement scalar by multiple of 16-bit predicate constraint element count.
    /// </summary>
    SQDECH_r_rs_x,
    /// <summary>
    /// Instruction SQDECH - Signed saturating decrement vector by multiple of 16-bit predicate constraint element count.
    /// </summary>
    SQDECH_z_zs,
    /// <summary>
    /// Instruction SQDECP - Signed saturating decrement scalar by count of true predicate elements.
    /// </summary>
    SQDECP_r_p_r_sx,
    /// <summary>
    /// Instruction SQDECP - Signed saturating decrement scalar by count of true predicate elements.
    /// </summary>
    SQDECP_r_p_r_x,
    /// <summary>
    /// Instruction SQDECP - Signed saturating decrement vector by count of true predicate elements.
    /// </summary>
    SQDECP_z_p_z,
    /// <summary>
    /// Instruction SQDECW - Signed saturating decrement scalar by multiple of 32-bit predicate constraint element count.
    /// </summary>
    SQDECW_r_rs_sx,
    /// <summary>
    /// Instruction SQDECW - Signed saturating decrement scalar by multiple of 32-bit predicate constraint element count.
    /// </summary>
    SQDECW_r_rs_x,
    /// <summary>
    /// Instruction SQDECW - Signed saturating decrement vector by multiple of 32-bit predicate constraint element count.
    /// </summary>
    SQDECW_z_zs,
    /// <summary>
    /// Instruction SQDMLALBT - Signed saturating doubling multiply-add long to accumulator (bottom × top).
    /// </summary>
    SQDMLALBT_z_zzz,
    /// <summary>
    /// Instruction SQDMLALB - Signed saturating doubling multiply-add long to accumulator (bottom).
    /// </summary>
    SQDMLALB_z_zzz,
    /// <summary>
    /// Instruction SQDMLALB - Signed saturating doubling multiply-add long to accumulator (bottom, indexed).
    /// </summary>
    SQDMLALB_z_zzzi_d,
    /// <summary>
    /// Instruction SQDMLALB - Signed saturating doubling multiply-add long to accumulator (bottom, indexed).
    /// </summary>
    SQDMLALB_z_zzzi_s,
    /// <summary>
    /// Instruction SQDMLALT - Signed saturating doubling multiply-add long to accumulator (top).
    /// </summary>
    SQDMLALT_z_zzz,
    /// <summary>
    /// Instruction SQDMLALT - Signed saturating doubling multiply-add long to accumulator (top, indexed).
    /// </summary>
    SQDMLALT_z_zzzi_d,
    /// <summary>
    /// Instruction SQDMLALT - Signed saturating doubling multiply-add long to accumulator (top, indexed).
    /// </summary>
    SQDMLALT_z_zzzi_s,
    /// <summary>
    /// Instruction SQDMLAL - Signed saturating doubling multiply-add long.
    /// </summary>
    SQDMLAL_asimddiff_l,
    /// <summary>
    /// Instruction SQDMLAL - Signed saturating doubling multiply-add long (by element).
    /// </summary>
    SQDMLAL_asimdelem_l,
    /// <summary>
    /// Instruction SQDMLAL - Signed saturating doubling multiply-add long.
    /// </summary>
    SQDMLAL_asisddiff_only,
    /// <summary>
    /// Instruction SQDMLAL - Signed saturating doubling multiply-add long (by element).
    /// </summary>
    SQDMLAL_asisdelem_l,
    /// <summary>
    /// Instruction SQDMLSLBT - Signed saturating doubling multiply-subtract long from accumulator (bottom × top).
    /// </summary>
    SQDMLSLBT_z_zzz,
    /// <summary>
    /// Instruction SQDMLSLB - Signed saturating doubling multiply-subtract long from accumulator (bottom).
    /// </summary>
    SQDMLSLB_z_zzz,
    /// <summary>
    /// Instruction SQDMLSLB - Signed saturating doubling multiply-subtract long from accumulator (bottom, indexed).
    /// </summary>
    SQDMLSLB_z_zzzi_d,
    /// <summary>
    /// Instruction SQDMLSLB - Signed saturating doubling multiply-subtract long from accumulator (bottom, indexed).
    /// </summary>
    SQDMLSLB_z_zzzi_s,
    /// <summary>
    /// Instruction SQDMLSLT - Signed saturating doubling multiply-subtract long from accumulator (top).
    /// </summary>
    SQDMLSLT_z_zzz,
    /// <summary>
    /// Instruction SQDMLSLT - Signed saturating doubling multiply-subtract long from accumulator (top, indexed).
    /// </summary>
    SQDMLSLT_z_zzzi_d,
    /// <summary>
    /// Instruction SQDMLSLT - Signed saturating doubling multiply-subtract long from accumulator (top, indexed).
    /// </summary>
    SQDMLSLT_z_zzzi_s,
    /// <summary>
    /// Instruction SQDMLSL - Signed saturating doubling multiply-subtract long.
    /// </summary>
    SQDMLSL_asimddiff_l,
    /// <summary>
    /// Instruction SQDMLSL - Signed saturating doubling multiply-subtract long (by element).
    /// </summary>
    SQDMLSL_asimdelem_l,
    /// <summary>
    /// Instruction SQDMLSL - Signed saturating doubling multiply-subtract long.
    /// </summary>
    SQDMLSL_asisddiff_only,
    /// <summary>
    /// Instruction SQDMLSL - Signed saturating doubling multiply-subtract long (by element).
    /// </summary>
    SQDMLSL_asisdelem_l,
    /// <summary>
    /// Instruction SQDMULH - Signed saturating doubling multiply returning high half (by element).
    /// </summary>
    SQDMULH_asimdelem_r,
    /// <summary>
    /// Instruction SQDMULH - Signed saturating doubling multiply returning high half.
    /// </summary>
    SQDMULH_asimdsame_only,
    /// <summary>
    /// Instruction SQDMULH - Signed saturating doubling multiply returning high half (by element).
    /// </summary>
    SQDMULH_asisdelem_r,
    /// <summary>
    /// Instruction SQDMULH - Signed saturating doubling multiply returning high half.
    /// </summary>
    SQDMULH_asisdsame_only,
    /// <summary>
    /// Instruction SQDMULH - Multi-vector signed saturating doubling multiply high by vector.
    /// </summary>
    SQDMULH_mz_zzv_2x1,
    /// <summary>
    /// Instruction SQDMULH - Multi-vector signed saturating doubling multiply high by vector.
    /// </summary>
    SQDMULH_mz_zzv_4x1,
    /// <summary>
    /// Instruction SQDMULH - Multi-vector signed saturating doubling multiply high.
    /// </summary>
    SQDMULH_mz_zzw_2x2,
    /// <summary>
    /// Instruction SQDMULH - Multi-vector signed saturating doubling multiply high.
    /// </summary>
    SQDMULH_mz_zzw_4x4,
    /// <summary>
    /// Instruction SQDMULH - Signed saturating doubling multiply high (unpredicated).
    /// </summary>
    SQDMULH_z_zz,
    /// <summary>
    /// Instruction SQDMULH - Signed saturating doubling multiply high (indexed).
    /// </summary>
    SQDMULH_z_zzi_d,
    /// <summary>
    /// Instruction SQDMULH - Signed saturating doubling multiply high (indexed).
    /// </summary>
    SQDMULH_z_zzi_h,
    /// <summary>
    /// Instruction SQDMULH - Signed saturating doubling multiply high (indexed).
    /// </summary>
    SQDMULH_z_zzi_s,
    /// <summary>
    /// Instruction SQDMULLB - Signed saturating doubling multiply long (bottom).
    /// </summary>
    SQDMULLB_z_zz,
    /// <summary>
    /// Instruction SQDMULLB - Signed saturating doubling multiply long (bottom, indexed).
    /// </summary>
    SQDMULLB_z_zzi_d,
    /// <summary>
    /// Instruction SQDMULLB - Signed saturating doubling multiply long (bottom, indexed).
    /// </summary>
    SQDMULLB_z_zzi_s,
    /// <summary>
    /// Instruction SQDMULLT - Signed saturating doubling multiply long (top).
    /// </summary>
    SQDMULLT_z_zz,
    /// <summary>
    /// Instruction SQDMULLT - Signed saturating doubling multiply long (top, indexed).
    /// </summary>
    SQDMULLT_z_zzi_d,
    /// <summary>
    /// Instruction SQDMULLT - Signed saturating doubling multiply long (top, indexed).
    /// </summary>
    SQDMULLT_z_zzi_s,
    /// <summary>
    /// Instruction SQDMULL - Signed saturating doubling multiply long.
    /// </summary>
    SQDMULL_asimddiff_l,
    /// <summary>
    /// Instruction SQDMULL - Signed saturating doubling multiply long (by element).
    /// </summary>
    SQDMULL_asimdelem_l,
    /// <summary>
    /// Instruction SQDMULL - Signed saturating doubling multiply long.
    /// </summary>
    SQDMULL_asisddiff_only,
    /// <summary>
    /// Instruction SQDMULL - Signed saturating doubling multiply long (by element).
    /// </summary>
    SQDMULL_asisdelem_l,
    /// <summary>
    /// Instruction SQINCB - Signed saturating increment scalar by multiple of 8-bit predicate constraint element count.
    /// </summary>
    SQINCB_r_rs_sx,
    /// <summary>
    /// Instruction SQINCB - Signed saturating increment scalar by multiple of 8-bit predicate constraint element count.
    /// </summary>
    SQINCB_r_rs_x,
    /// <summary>
    /// Instruction SQINCD - Signed saturating increment scalar by multiple of 64-bit predicate constraint element count.
    /// </summary>
    SQINCD_r_rs_sx,
    /// <summary>
    /// Instruction SQINCD - Signed saturating increment scalar by multiple of 64-bit predicate constraint element count.
    /// </summary>
    SQINCD_r_rs_x,
    /// <summary>
    /// Instruction SQINCD - Signed saturating increment vector by multiple of 64-bit predicate constraint element count.
    /// </summary>
    SQINCD_z_zs,
    /// <summary>
    /// Instruction SQINCH - Signed saturating increment scalar by multiple of 16-bit predicate constraint element count.
    /// </summary>
    SQINCH_r_rs_sx,
    /// <summary>
    /// Instruction SQINCH - Signed saturating increment scalar by multiple of 16-bit predicate constraint element count.
    /// </summary>
    SQINCH_r_rs_x,
    /// <summary>
    /// Instruction SQINCH - Signed saturating increment vector by multiple of 16-bit predicate constraint element count.
    /// </summary>
    SQINCH_z_zs,
    /// <summary>
    /// Instruction SQINCP - Signed saturating increment scalar by count of true predicate elements.
    /// </summary>
    SQINCP_r_p_r_sx,
    /// <summary>
    /// Instruction SQINCP - Signed saturating increment scalar by count of true predicate elements.
    /// </summary>
    SQINCP_r_p_r_x,
    /// <summary>
    /// Instruction SQINCP - Signed saturating increment vector by count of true predicate elements.
    /// </summary>
    SQINCP_z_p_z,
    /// <summary>
    /// Instruction SQINCW - Signed saturating increment scalar by multiple of 32-bit predicate constraint element count.
    /// </summary>
    SQINCW_r_rs_sx,
    /// <summary>
    /// Instruction SQINCW - Signed saturating increment scalar by multiple of 32-bit predicate constraint element count.
    /// </summary>
    SQINCW_r_rs_x,
    /// <summary>
    /// Instruction SQINCW - Signed saturating increment vector by multiple of 32-bit predicate constraint element count.
    /// </summary>
    SQINCW_z_zs,
    /// <summary>
    /// Instruction SQNEG - Signed saturating negate.
    /// </summary>
    SQNEG_asimdmisc_r,
    /// <summary>
    /// Instruction SQNEG - Signed saturating negate.
    /// </summary>
    SQNEG_asisdmisc_r,
    /// <summary>
    /// Instruction SQNEG - Signed saturating negate.
    /// </summary>
    SQNEG_z_p_z_m,
    /// <summary>
    /// Instruction SQNEG - Signed saturating negate.
    /// </summary>
    SQNEG_z_p_z_z,
    /// <summary>
    /// Instruction SQRDCMLAH - Saturating rounding doubling complex integer multiply-add high with rotate.
    /// </summary>
    SQRDCMLAH_z_zzz,
    /// <summary>
    /// Instruction SQRDCMLAH - Saturating rounding doubling complex integer multiply-add high with rotate (indexed).
    /// </summary>
    SQRDCMLAH_z_zzzi_h,
    /// <summary>
    /// Instruction SQRDCMLAH - Saturating rounding doubling complex integer multiply-add high with rotate (indexed).
    /// </summary>
    SQRDCMLAH_z_zzzi_s,
    /// <summary>
    /// Instruction SQRDMLAH - Signed saturating rounding doubling multiply accumulate returning high half (by element).
    /// </summary>
    SQRDMLAH_asimdelem_r,
    /// <summary>
    /// Instruction SQRDMLAH - Signed saturating rounding doubling multiply accumulate returning high half (vector).
    /// </summary>
    SQRDMLAH_asimdsame2_only,
    /// <summary>
    /// Instruction SQRDMLAH - Signed saturating rounding doubling multiply accumulate returning high half (by element).
    /// </summary>
    SQRDMLAH_asisdelem_r,
    /// <summary>
    /// Instruction SQRDMLAH - Signed saturating rounding doubling multiply accumulate returning high half (vector).
    /// </summary>
    SQRDMLAH_asisdsame2_only,
    /// <summary>
    /// Instruction SQRDMLAH - Signed saturating rounding doubling multiply-add high to accumulator (unpredicated).
    /// </summary>
    SQRDMLAH_z_zzz,
    /// <summary>
    /// Instruction SQRDMLAH - Signed saturating rounding doubling multiply-add high to accumulator (indexed).
    /// </summary>
    SQRDMLAH_z_zzzi_d,
    /// <summary>
    /// Instruction SQRDMLAH - Signed saturating rounding doubling multiply-add high to accumulator (indexed).
    /// </summary>
    SQRDMLAH_z_zzzi_h,
    /// <summary>
    /// Instruction SQRDMLAH - Signed saturating rounding doubling multiply-add high to accumulator (indexed).
    /// </summary>
    SQRDMLAH_z_zzzi_s,
    /// <summary>
    /// Instruction SQRDMLSH - Signed saturating rounding doubling multiply subtract returning high half (by element).
    /// </summary>
    SQRDMLSH_asimdelem_r,
    /// <summary>
    /// Instruction SQRDMLSH - Signed saturating rounding doubling multiply subtract returning high half (vector).
    /// </summary>
    SQRDMLSH_asimdsame2_only,
    /// <summary>
    /// Instruction SQRDMLSH - Signed saturating rounding doubling multiply subtract returning high half (by element).
    /// </summary>
    SQRDMLSH_asisdelem_r,
    /// <summary>
    /// Instruction SQRDMLSH - Signed saturating rounding doubling multiply subtract returning high half (vector).
    /// </summary>
    SQRDMLSH_asisdsame2_only,
    /// <summary>
    /// Instruction SQRDMLSH - Signed saturating rounding doubling multiply-subtract high from accumulator (unpredicated).
    /// </summary>
    SQRDMLSH_z_zzz,
    /// <summary>
    /// Instruction SQRDMLSH - Signed saturating rounding doubling multiply-subtract high from accumulator (indexed).
    /// </summary>
    SQRDMLSH_z_zzzi_d,
    /// <summary>
    /// Instruction SQRDMLSH - Signed saturating rounding doubling multiply-subtract high from accumulator (indexed).
    /// </summary>
    SQRDMLSH_z_zzzi_h,
    /// <summary>
    /// Instruction SQRDMLSH - Signed saturating rounding doubling multiply-subtract high from accumulator (indexed).
    /// </summary>
    SQRDMLSH_z_zzzi_s,
    /// <summary>
    /// Instruction SQRDMULH - Signed saturating rounding doubling multiply returning high half (by element).
    /// </summary>
    SQRDMULH_asimdelem_r,
    /// <summary>
    /// Instruction SQRDMULH - Signed saturating rounding doubling multiply returning high half.
    /// </summary>
    SQRDMULH_asimdsame_only,
    /// <summary>
    /// Instruction SQRDMULH - Signed saturating rounding doubling multiply returning high half (by element).
    /// </summary>
    SQRDMULH_asisdelem_r,
    /// <summary>
    /// Instruction SQRDMULH - Signed saturating rounding doubling multiply returning high half.
    /// </summary>
    SQRDMULH_asisdsame_only,
    /// <summary>
    /// Instruction SQRDMULH - Signed saturating rounding doubling multiply high (unpredicated).
    /// </summary>
    SQRDMULH_z_zz,
    /// <summary>
    /// Instruction SQRDMULH - Signed saturating rounding doubling multiply high (indexed).
    /// </summary>
    SQRDMULH_z_zzi_d,
    /// <summary>
    /// Instruction SQRDMULH - Signed saturating rounding doubling multiply high (indexed).
    /// </summary>
    SQRDMULH_z_zzi_h,
    /// <summary>
    /// Instruction SQRDMULH - Signed saturating rounding doubling multiply high (indexed).
    /// </summary>
    SQRDMULH_z_zzi_s,
    /// <summary>
    /// Instruction SQRSHLR - Signed saturating rounding shift left reversed vectors (predicated).
    /// </summary>
    SQRSHLR_z_p_zz,
    /// <summary>
    /// Instruction SQRSHL - Signed saturating rounding shift left (register).
    /// </summary>
    SQRSHL_asimdsame_only,
    /// <summary>
    /// Instruction SQRSHL - Signed saturating rounding shift left (register).
    /// </summary>
    SQRSHL_asisdsame_only,
    /// <summary>
    /// Instruction SQRSHL - Signed saturating rounding shift left by vector (predicated).
    /// </summary>
    SQRSHL_z_p_zz,
    /// <summary>
    /// Instruction SQRSHRNB - Signed saturating rounding shift right narrow by immediate (bottom).
    /// </summary>
    SQRSHRNB_z_zi,
    /// <summary>
    /// Instruction SQRSHRNT - Signed saturating rounding shift right narrow by immediate (top).
    /// </summary>
    SQRSHRNT_z_zi,
    /// <summary>
    /// Instruction SQRSHRN - Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    SQRSHRN_asimdshf_n,
    /// <summary>
    /// Instruction SQRSHRN - Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    SQRSHRN_asisdshf_n,
    /// <summary>
    /// Instruction SQRSHRN - Signed saturating rounding shift right narrow by immediate and interleave.
    /// </summary>
    SQRSHRN_z_mz2,
    /// <summary>
    /// Instruction SQRSHRN - Multi-vector signed saturating rounding shift right narrow by immediate and interleave.
    /// </summary>
    SQRSHRN_z_mz4,
    /// <summary>
    /// Instruction SQRSHRUNB - Signed saturating rounding shift right unsigned narrow by immediate (bottom).
    /// </summary>
    SQRSHRUNB_z_zi,
    /// <summary>
    /// Instruction SQRSHRUNT - Signed saturating rounding shift right unsigned narrow by immediate (top).
    /// </summary>
    SQRSHRUNT_z_zi,
    /// <summary>
    /// Instruction SQRSHRUN - Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    SQRSHRUN_asimdshf_n,
    /// <summary>
    /// Instruction SQRSHRUN - Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    SQRSHRUN_asisdshf_n,
    /// <summary>
    /// Instruction SQRSHRUN - Signed saturating rounding shift right unsigned narrow by immediate and interleave.
    /// </summary>
    SQRSHRUN_z_mz2,
    /// <summary>
    /// Instruction SQRSHRUN - Multi-vector signed saturating rounding shift right unsigned narrow by immediate and interleave.
    /// </summary>
    SQRSHRUN_z_mz4,
    /// <summary>
    /// Instruction SQRSHRU - Multi-vector signed saturating rounding shift right unsigned narrow by immediate.
    /// </summary>
    SQRSHRU_z_mz2,
    /// <summary>
    /// Instruction SQRSHRU - Multi-vector signed saturating rounding shift right unsigned narrow by immediate.
    /// </summary>
    SQRSHRU_z_mz4,
    /// <summary>
    /// Instruction SQRSHR - Multi-vector signed saturating rounding shift right narrow by immediate.
    /// </summary>
    SQRSHR_z_mz2,
    /// <summary>
    /// Instruction SQRSHR - Multi-vector signed saturating rounding shift right narrow by immediate.
    /// </summary>
    SQRSHR_z_mz4,
    /// <summary>
    /// Instruction SQSHLR - Signed saturating shift left reversed vectors (predicated).
    /// </summary>
    SQSHLR_z_p_zz,
    /// <summary>
    /// Instruction SQSHLU - Signed saturating shift left unsigned (immediate).
    /// </summary>
    SQSHLU_asimdshf_r,
    /// <summary>
    /// Instruction SQSHLU - Signed saturating shift left unsigned (immediate).
    /// </summary>
    SQSHLU_asisdshf_r,
    /// <summary>
    /// Instruction SQSHLU - Signed saturating shift left unsigned by immediate.
    /// </summary>
    SQSHLU_z_p_zi,
    /// <summary>
    /// Instruction SQSHL - Signed saturating shift left (register).
    /// </summary>
    SQSHL_asimdsame_only,
    /// <summary>
    /// Instruction SQSHL - Signed saturating shift left (immediate).
    /// </summary>
    SQSHL_asimdshf_r,
    /// <summary>
    /// Instruction SQSHL - Signed saturating shift left (register).
    /// </summary>
    SQSHL_asisdsame_only,
    /// <summary>
    /// Instruction SQSHL - Signed saturating shift left (immediate).
    /// </summary>
    SQSHL_asisdshf_r,
    /// <summary>
    /// Instruction SQSHL - Signed saturating shift left by immediate.
    /// </summary>
    SQSHL_z_p_zi,
    /// <summary>
    /// Instruction SQSHL - Signed saturating shift left by vector (predicated).
    /// </summary>
    SQSHL_z_p_zz,
    /// <summary>
    /// Instruction SQSHRNB - Signed saturating shift right narrow by immediate (bottom).
    /// </summary>
    SQSHRNB_z_zi,
    /// <summary>
    /// Instruction SQSHRNT - Signed saturating shift right narrow by immediate (top).
    /// </summary>
    SQSHRNT_z_zi,
    /// <summary>
    /// Instruction SQSHRN - Signed saturating shift right narrow (immediate).
    /// </summary>
    SQSHRN_asimdshf_n,
    /// <summary>
    /// Instruction SQSHRN - Signed saturating shift right narrow (immediate).
    /// </summary>
    SQSHRN_asisdshf_n,
    /// <summary>
    /// Instruction SQSHRUNB - Signed saturating shift right unsigned narrow by immediate (bottom).
    /// </summary>
    SQSHRUNB_z_zi,
    /// <summary>
    /// Instruction SQSHRUNT - Signed saturating shift right unsigned narrow by immediate (top).
    /// </summary>
    SQSHRUNT_z_zi,
    /// <summary>
    /// Instruction SQSHRUN - Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    SQSHRUN_asimdshf_n,
    /// <summary>
    /// Instruction SQSHRUN - Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    SQSHRUN_asisdshf_n,
    /// <summary>
    /// Instruction SQSUBR - Signed saturating subtraction reversed vectors (predicated).
    /// </summary>
    SQSUBR_z_p_zz,
    /// <summary>
    /// Instruction SQSUB - Signed saturating subtract.
    /// </summary>
    SQSUB_asimdsame_only,
    /// <summary>
    /// Instruction SQSUB - Signed saturating subtract.
    /// </summary>
    SQSUB_asisdsame_only,
    /// <summary>
    /// Instruction SQSUB - Signed saturating subtraction (predicated).
    /// </summary>
    SQSUB_z_p_zz,
    /// <summary>
    /// Instruction SQSUB - Signed saturating subtract immediate (unpredicated).
    /// </summary>
    SQSUB_z_zi,
    /// <summary>
    /// Instruction SQSUB - Signed saturating subtract vectors (unpredicated).
    /// </summary>
    SQSUB_z_zz,
    /// <summary>
    /// Instruction SQXTNB - Signed saturating extract narrow (bottom).
    /// </summary>
    SQXTNB_z_zz,
    /// <summary>
    /// Instruction SQXTNT - Signed saturating extract narrow (top).
    /// </summary>
    SQXTNT_z_zz,
    /// <summary>
    /// Instruction SQXTN - Signed saturating extract narrow.
    /// </summary>
    SQXTN_asimdmisc_n,
    /// <summary>
    /// Instruction SQXTN - Signed saturating extract narrow.
    /// </summary>
    SQXTN_asisdmisc_n,
    /// <summary>
    /// Instruction SQXTUNB - Signed saturating unsigned extract narrow (bottom).
    /// </summary>
    SQXTUNB_z_zz,
    /// <summary>
    /// Instruction SQXTUNT - Signed saturating unsigned extract narrow (top).
    /// </summary>
    SQXTUNT_z_zz,
    /// <summary>
    /// Instruction SQXTUN - Signed saturating extract unsigned narrow.
    /// </summary>
    SQXTUN_asimdmisc_n,
    /// <summary>
    /// Instruction SQXTUN - Signed saturating extract unsigned narrow.
    /// </summary>
    SQXTUN_asisdmisc_n,
    /// <summary>
    /// Instruction SRHADD - Signed rounding halving add.
    /// </summary>
    SRHADD_asimdsame_only,
    /// <summary>
    /// Instruction SRHADD - Signed rounding halving addition.
    /// </summary>
    SRHADD_z_p_zz,
    /// <summary>
    /// Instruction SRI - Shift right and insert (immediate).
    /// </summary>
    SRI_asimdshf_r,
    /// <summary>
    /// Instruction SRI - Shift right and insert (immediate).
    /// </summary>
    SRI_asisdshf_r,
    /// <summary>
    /// Instruction SRI - Shift right and insert (immediate).
    /// </summary>
    SRI_z_zzi,
    /// <summary>
    /// Instruction SRSHLR - Signed rounding shift left reversed vectors (predicated).
    /// </summary>
    SRSHLR_z_p_zz,
    /// <summary>
    /// Instruction SRSHL - Signed rounding shift left (register).
    /// </summary>
    SRSHL_asimdsame_only,
    /// <summary>
    /// Instruction SRSHL - Signed rounding shift left (register).
    /// </summary>
    SRSHL_asisdsame_only,
    /// <summary>
    /// Instruction SRSHL - Multi-vector signed rounding shift left by vector.
    /// </summary>
    SRSHL_mz_zzv_2x1,
    /// <summary>
    /// Instruction SRSHL - Multi-vector signed rounding shift left by vector.
    /// </summary>
    SRSHL_mz_zzv_4x1,
    /// <summary>
    /// Instruction SRSHL - Multi-vector signed rounding shift left.
    /// </summary>
    SRSHL_mz_zzw_2x2,
    /// <summary>
    /// Instruction SRSHL - Multi-vector signed rounding shift left.
    /// </summary>
    SRSHL_mz_zzw_4x4,
    /// <summary>
    /// Instruction SRSHL - Signed rounding shift left by vector (predicated).
    /// </summary>
    SRSHL_z_p_zz,
    /// <summary>
    /// Instruction SRSHR - Signed rounding shift right (immediate).
    /// </summary>
    SRSHR_asimdshf_r,
    /// <summary>
    /// Instruction SRSHR - Signed rounding shift right (immediate).
    /// </summary>
    SRSHR_asisdshf_r,
    /// <summary>
    /// Instruction SRSHR - Signed rounding shift right by immediate.
    /// </summary>
    SRSHR_z_p_zi,
    /// <summary>
    /// Instruction SRSRA - Signed rounding shift right and accumulate (immediate).
    /// </summary>
    SRSRA_asimdshf_r,
    /// <summary>
    /// Instruction SRSRA - Signed rounding shift right and accumulate (immediate).
    /// </summary>
    SRSRA_asisdshf_r,
    /// <summary>
    /// Instruction SRSRA - Signed rounding shift right and accumulate (immediate).
    /// </summary>
    SRSRA_z_zi,
    /// <summary>
    /// Instruction SSHLLB - Signed shift left long by immediate (bottom).
    /// </summary>
    SSHLLB_z_zi,
    /// <summary>
    /// Instruction SSHLLT - Signed shift left long by immediate (top).
    /// </summary>
    SSHLLT_z_zi,
    /// <summary>
    /// Instruction SSHLL - Signed shift left long (immediate).
    /// </summary>
    SSHLL_asimdshf_l,
    /// <summary>
    /// Instruction SSHL - Signed shift left (register).
    /// </summary>
    SSHL_asimdsame_only,
    /// <summary>
    /// Instruction SSHL - Signed shift left (register).
    /// </summary>
    SSHL_asisdsame_only,
    /// <summary>
    /// Instruction SSHR - Signed shift right (immediate).
    /// </summary>
    SSHR_asimdshf_r,
    /// <summary>
    /// Instruction SSHR - Signed shift right (immediate).
    /// </summary>
    SSHR_asisdshf_r,
    /// <summary>
    /// Instruction SSRA - Signed shift right and accumulate (immediate).
    /// </summary>
    SSRA_asimdshf_r,
    /// <summary>
    /// Instruction SSRA - Signed shift right and accumulate (immediate).
    /// </summary>
    SSRA_asisdshf_r,
    /// <summary>
    /// Instruction SSRA - Signed shift right and accumulate (immediate).
    /// </summary>
    SSRA_z_zi,
    /// <summary>
    /// Instruction SSUBLBT - Signed subtract long (bottom - top).
    /// </summary>
    SSUBLBT_z_zz,
    /// <summary>
    /// Instruction SSUBLB - Signed subtract long (bottom).
    /// </summary>
    SSUBLB_z_zz,
    /// <summary>
    /// Instruction SSUBLTB - Signed subtract long (top - bottom).
    /// </summary>
    SSUBLTB_z_zz,
    /// <summary>
    /// Instruction SSUBLT - Signed subtract long (top).
    /// </summary>
    SSUBLT_z_zz,
    /// <summary>
    /// Instruction SSUBL - Signed subtract long.
    /// </summary>
    SSUBL_asimddiff_l,
    /// <summary>
    /// Instruction SSUBWB - Signed subtract wide (bottom).
    /// </summary>
    SSUBWB_z_zz,
    /// <summary>
    /// Instruction SSUBWT - Signed subtract wide (top).
    /// </summary>
    SSUBWT_z_zz,
    /// <summary>
    /// Instruction SSUBW - Signed subtract wide.
    /// </summary>
    SSUBW_asimddiff_w,
    /// <summary>
    /// Instruction ST1B - Contiguous store of bytes from multiple consecutive vectors (immediate index).
    /// </summary>
    ST1B_mz_p_bi_2,
    /// <summary>
    /// Instruction ST1B - Contiguous store of bytes from multiple consecutive vectors (immediate index).
    /// </summary>
    ST1B_mz_p_bi_4,
    /// <summary>
    /// Instruction ST1B - Contiguous store of bytes from multiple consecutive vectors (scalar index).
    /// </summary>
    ST1B_mz_p_br_2,
    /// <summary>
    /// Instruction ST1B - Contiguous store of bytes from multiple consecutive vectors (scalar index).
    /// </summary>
    ST1B_mz_p_br_4,
    /// <summary>
    /// Instruction ST1B - Contiguous store of bytes from multiple strided vectors (immediate index).
    /// </summary>
    ST1B_mzx_p_bi_2x8,
    /// <summary>
    /// Instruction ST1B - Contiguous store of bytes from multiple strided vectors (immediate index).
    /// </summary>
    ST1B_mzx_p_bi_4x4,
    /// <summary>
    /// Instruction ST1B - Contiguous store of bytes from multiple strided vectors (scalar index).
    /// </summary>
    ST1B_mzx_p_br_2x8,
    /// <summary>
    /// Instruction ST1B - Contiguous store of bytes from multiple strided vectors (scalar index).
    /// </summary>
    ST1B_mzx_p_br_4x4,
    /// <summary>
    /// Instruction ST1B - Scatter store bytes from a vector (immediate index).
    /// </summary>
    ST1B_z_p_ai_d,
    /// <summary>
    /// Instruction ST1B - Scatter store bytes from a vector (immediate index).
    /// </summary>
    ST1B_z_p_ai_s,
    /// <summary>
    /// Instruction ST1B - Contiguous store bytes from vector (immediate index).
    /// </summary>
    ST1B_z_p_bi,
    /// <summary>
    /// Instruction ST1B - Contiguous store bytes from vector (scalar index).
    /// </summary>
    ST1B_z_p_br,
    /// <summary>
    /// Instruction ST1B - Scatter store bytes from a vector (vector index).
    /// </summary>
    ST1B_z_p_bz_d_64_unscaled,
    /// <summary>
    /// Instruction ST1B - Scatter store bytes from a vector (vector index).
    /// </summary>
    ST1B_z_p_bz_d_x32_unscaled,
    /// <summary>
    /// Instruction ST1B - Scatter store bytes from a vector (vector index).
    /// </summary>
    ST1B_z_p_bz_s_x32_unscaled,
    /// <summary>
    /// Instruction ST1B - Contiguous store of bytes from 8-bit element ZA tile slice.
    /// </summary>
    ST1B_za_p_rrr,
    /// <summary>
    /// Instruction ST1D - Contiguous store of doublewords from multiple consecutive vectors (immediate index).
    /// </summary>
    ST1D_mz_p_bi_2,
    /// <summary>
    /// Instruction ST1D - Contiguous store of doublewords from multiple consecutive vectors (immediate index).
    /// </summary>
    ST1D_mz_p_bi_4,
    /// <summary>
    /// Instruction ST1D - Contiguous store of doublewords from multiple consecutive vectors (scalar index).
    /// </summary>
    ST1D_mz_p_br_2,
    /// <summary>
    /// Instruction ST1D - Contiguous store of doublewords from multiple consecutive vectors (scalar index).
    /// </summary>
    ST1D_mz_p_br_4,
    /// <summary>
    /// Instruction ST1D - Contiguous store of doublewords from multiple strided vectors (immediate index).
    /// </summary>
    ST1D_mzx_p_bi_2x8,
    /// <summary>
    /// Instruction ST1D - Contiguous store of doublewords from multiple strided vectors (immediate index).
    /// </summary>
    ST1D_mzx_p_bi_4x4,
    /// <summary>
    /// Instruction ST1D - Contiguous store of doublewords from multiple strided vectors (scalar index).
    /// </summary>
    ST1D_mzx_p_br_2x8,
    /// <summary>
    /// Instruction ST1D - Contiguous store of doublewords from multiple strided vectors (scalar index).
    /// </summary>
    ST1D_mzx_p_br_4x4,
    /// <summary>
    /// Instruction ST1D - Scatter store doublewords from a vector (immediate index).
    /// </summary>
    ST1D_z_p_ai_d,
    /// <summary>
    /// Instruction ST1D - Contiguous store doublewords from vector (immediate index).
    /// </summary>
    ST1D_z_p_bi,
    /// <summary>
    /// Instruction ST1D - Contiguous store doublewords from vector (immediate index).
    /// </summary>
    ST1D_z_p_bi_u128,
    /// <summary>
    /// Instruction ST1D - Contiguous store doublewords from vector (scalar index).
    /// </summary>
    ST1D_z_p_br,
    /// <summary>
    /// Instruction ST1D - Contiguous store doublewords from vector (scalar index).
    /// </summary>
    ST1D_z_p_br_u128,
    /// <summary>
    /// Instruction ST1D - Scatter store doublewords from a vector (vector index).
    /// </summary>
    ST1D_z_p_bz_d_64_scaled,
    /// <summary>
    /// Instruction ST1D - Scatter store doublewords from a vector (vector index).
    /// </summary>
    ST1D_z_p_bz_d_64_unscaled,
    /// <summary>
    /// Instruction ST1D - Scatter store doublewords from a vector (vector index).
    /// </summary>
    ST1D_z_p_bz_d_x32_scaled,
    /// <summary>
    /// Instruction ST1D - Scatter store doublewords from a vector (vector index).
    /// </summary>
    ST1D_z_p_bz_d_x32_unscaled,
    /// <summary>
    /// Instruction ST1D - Contiguous store of doublewords from 64-bit element ZA tile slice.
    /// </summary>
    ST1D_za_p_rrr,
    /// <summary>
    /// Instruction ST1H - Contiguous store of halfwords from multiple consecutive vectors (immediate index).
    /// </summary>
    ST1H_mz_p_bi_2,
    /// <summary>
    /// Instruction ST1H - Contiguous store of halfwords from multiple consecutive vectors (immediate index).
    /// </summary>
    ST1H_mz_p_bi_4,
    /// <summary>
    /// Instruction ST1H - Contiguous store of halfwords from multiple consecutive vectors (scalar index).
    /// </summary>
    ST1H_mz_p_br_2,
    /// <summary>
    /// Instruction ST1H - Contiguous store of halfwords from multiple consecutive vectors (scalar index).
    /// </summary>
    ST1H_mz_p_br_4,
    /// <summary>
    /// Instruction ST1H - Contiguous store of halfwords from multiple strided vectors (immediate index).
    /// </summary>
    ST1H_mzx_p_bi_2x8,
    /// <summary>
    /// Instruction ST1H - Contiguous store of halfwords from multiple strided vectors (immediate index).
    /// </summary>
    ST1H_mzx_p_bi_4x4,
    /// <summary>
    /// Instruction ST1H - Contiguous store of halfwords from multiple strided vectors (scalar index).
    /// </summary>
    ST1H_mzx_p_br_2x8,
    /// <summary>
    /// Instruction ST1H - Contiguous store of halfwords from multiple strided vectors (scalar index).
    /// </summary>
    ST1H_mzx_p_br_4x4,
    /// <summary>
    /// Instruction ST1H - Scatter store halfwords from a vector (immediate index).
    /// </summary>
    ST1H_z_p_ai_d,
    /// <summary>
    /// Instruction ST1H - Scatter store halfwords from a vector (immediate index).
    /// </summary>
    ST1H_z_p_ai_s,
    /// <summary>
    /// Instruction ST1H - Contiguous store halfwords from vector (immediate index).
    /// </summary>
    ST1H_z_p_bi,
    /// <summary>
    /// Instruction ST1H - Contiguous store halfwords from vector (scalar index).
    /// </summary>
    ST1H_z_p_br,
    /// <summary>
    /// Instruction ST1H - Scatter store halfwords from a vector (vector index).
    /// </summary>
    ST1H_z_p_bz_d_64_scaled,
    /// <summary>
    /// Instruction ST1H - Scatter store halfwords from a vector (vector index).
    /// </summary>
    ST1H_z_p_bz_d_64_unscaled,
    /// <summary>
    /// Instruction ST1H - Scatter store halfwords from a vector (vector index).
    /// </summary>
    ST1H_z_p_bz_d_x32_scaled,
    /// <summary>
    /// Instruction ST1H - Scatter store halfwords from a vector (vector index).
    /// </summary>
    ST1H_z_p_bz_d_x32_unscaled,
    /// <summary>
    /// Instruction ST1H - Scatter store halfwords from a vector (vector index).
    /// </summary>
    ST1H_z_p_bz_s_x32_scaled,
    /// <summary>
    /// Instruction ST1H - Scatter store halfwords from a vector (vector index).
    /// </summary>
    ST1H_z_p_bz_s_x32_unscaled,
    /// <summary>
    /// Instruction ST1H - Contiguous store of halfwords from 16-bit element ZA tile slice.
    /// </summary>
    ST1H_za_p_rrr,
    /// <summary>
    /// Instruction ST1Q - Scatter store quadwords.
    /// </summary>
    ST1Q_z_p_ar_d_64_unscaled,
    /// <summary>
    /// Instruction ST1Q - Contiguous store of quadwords from 128-bit element ZA tile slice.
    /// </summary>
    ST1Q_za_p_rrr,
    /// <summary>
    /// Instruction ST1W - Contiguous store of words from multiple consecutive vectors (immediate index).
    /// </summary>
    ST1W_mz_p_bi_2,
    /// <summary>
    /// Instruction ST1W - Contiguous store of words from multiple consecutive vectors (immediate index).
    /// </summary>
    ST1W_mz_p_bi_4,
    /// <summary>
    /// Instruction ST1W - Contiguous store of words from multiple consecutive vectors (scalar index).
    /// </summary>
    ST1W_mz_p_br_2,
    /// <summary>
    /// Instruction ST1W - Contiguous store of words from multiple consecutive vectors (scalar index).
    /// </summary>
    ST1W_mz_p_br_4,
    /// <summary>
    /// Instruction ST1W - Contiguous store of words from multiple strided vectors (immediate index).
    /// </summary>
    ST1W_mzx_p_bi_2x8,
    /// <summary>
    /// Instruction ST1W - Contiguous store of words from multiple strided vectors (immediate index).
    /// </summary>
    ST1W_mzx_p_bi_4x4,
    /// <summary>
    /// Instruction ST1W - Contiguous store of words from multiple strided vectors (scalar index).
    /// </summary>
    ST1W_mzx_p_br_2x8,
    /// <summary>
    /// Instruction ST1W - Contiguous store of words from multiple strided vectors (scalar index).
    /// </summary>
    ST1W_mzx_p_br_4x4,
    /// <summary>
    /// Instruction ST1W - Scatter store words from a vector (immediate index).
    /// </summary>
    ST1W_z_p_ai_d,
    /// <summary>
    /// Instruction ST1W - Scatter store words from a vector (immediate index).
    /// </summary>
    ST1W_z_p_ai_s,
    /// <summary>
    /// Instruction ST1W - Contiguous store words from vector (immediate index).
    /// </summary>
    ST1W_z_p_bi,
    /// <summary>
    /// Instruction ST1W - Contiguous store words from vector (immediate index).
    /// </summary>
    ST1W_z_p_bi_u128,
    /// <summary>
    /// Instruction ST1W - Contiguous store words from vector (scalar index).
    /// </summary>
    ST1W_z_p_br,
    /// <summary>
    /// Instruction ST1W - Contiguous store words from vector (scalar index).
    /// </summary>
    ST1W_z_p_br_u128,
    /// <summary>
    /// Instruction ST1W - Scatter store words from a vector (vector index).
    /// </summary>
    ST1W_z_p_bz_d_64_scaled,
    /// <summary>
    /// Instruction ST1W - Scatter store words from a vector (vector index).
    /// </summary>
    ST1W_z_p_bz_d_64_unscaled,
    /// <summary>
    /// Instruction ST1W - Scatter store words from a vector (vector index).
    /// </summary>
    ST1W_z_p_bz_d_x32_scaled,
    /// <summary>
    /// Instruction ST1W - Scatter store words from a vector (vector index).
    /// </summary>
    ST1W_z_p_bz_d_x32_unscaled,
    /// <summary>
    /// Instruction ST1W - Scatter store words from a vector (vector index).
    /// </summary>
    ST1W_z_p_bz_s_x32_scaled,
    /// <summary>
    /// Instruction ST1W - Scatter store words from a vector (vector index).
    /// </summary>
    ST1W_z_p_bz_s_x32_unscaled,
    /// <summary>
    /// Instruction ST1W - Contiguous store of words from 32-bit element ZA tile slice.
    /// </summary>
    ST1W_za_p_rrr,
    /// <summary>
    /// Instruction ST1 - Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    ST1_asisdlse_r1_1v,
    /// <summary>
    /// Instruction ST1 - Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    ST1_asisdlse_r2_2v,
    /// <summary>
    /// Instruction ST1 - Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    ST1_asisdlse_r3_3v,
    /// <summary>
    /// Instruction ST1 - Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    ST1_asisdlse_r4_4v,
    /// <summary>
    /// Instruction ST1 - Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    ST1_asisdlsep_i1_i1,
    /// <summary>
    /// Instruction ST1 - Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    ST1_asisdlsep_i2_i2,
    /// <summary>
    /// Instruction ST1 - Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    ST1_asisdlsep_i3_i3,
    /// <summary>
    /// Instruction ST1 - Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    ST1_asisdlsep_i4_i4,
    /// <summary>
    /// Instruction ST1 - Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    ST1_asisdlsep_r1_r1,
    /// <summary>
    /// Instruction ST1 - Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    ST1_asisdlsep_r2_r2,
    /// <summary>
    /// Instruction ST1 - Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    ST1_asisdlsep_r3_r3,
    /// <summary>
    /// Instruction ST1 - Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    ST1_asisdlsep_r4_r4,
    /// <summary>
    /// Instruction ST1 - Store a single-element structure from one lane of one register.
    /// </summary>
    ST1_asisdlso_b1_1b,
    /// <summary>
    /// Instruction ST1 - Store a single-element structure from one lane of one register.
    /// </summary>
    ST1_asisdlso_d1_1d,
    /// <summary>
    /// Instruction ST1 - Store a single-element structure from one lane of one register.
    /// </summary>
    ST1_asisdlso_h1_1h,
    /// <summary>
    /// Instruction ST1 - Store a single-element structure from one lane of one register.
    /// </summary>
    ST1_asisdlso_s1_1s,
    /// <summary>
    /// Instruction ST1 - Store a single-element structure from one lane of one register.
    /// </summary>
    ST1_asisdlsop_b1_i1b,
    /// <summary>
    /// Instruction ST1 - Store a single-element structure from one lane of one register.
    /// </summary>
    ST1_asisdlsop_bx1_r1b,
    /// <summary>
    /// Instruction ST1 - Store a single-element structure from one lane of one register.
    /// </summary>
    ST1_asisdlsop_d1_i1d,
    /// <summary>
    /// Instruction ST1 - Store a single-element structure from one lane of one register.
    /// </summary>
    ST1_asisdlsop_dx1_r1d,
    /// <summary>
    /// Instruction ST1 - Store a single-element structure from one lane of one register.
    /// </summary>
    ST1_asisdlsop_h1_i1h,
    /// <summary>
    /// Instruction ST1 - Store a single-element structure from one lane of one register.
    /// </summary>
    ST1_asisdlsop_hx1_r1h,
    /// <summary>
    /// Instruction ST1 - Store a single-element structure from one lane of one register.
    /// </summary>
    ST1_asisdlsop_s1_i1s,
    /// <summary>
    /// Instruction ST1 - Store a single-element structure from one lane of one register.
    /// </summary>
    ST1_asisdlsop_sx1_r1s,
    /// <summary>
    /// Instruction ST2B - Contiguous store two-byte structures from two vectors (immediate index).
    /// </summary>
    ST2B_z_p_bi_contiguous,
    /// <summary>
    /// Instruction ST2B - Contiguous store two-byte structures from two vectors (scalar index).
    /// </summary>
    ST2B_z_p_br_contiguous,
    /// <summary>
    /// Instruction ST2D - Contiguous store two-doubleword structures from two vectors (immediate index).
    /// </summary>
    ST2D_z_p_bi_contiguous,
    /// <summary>
    /// Instruction ST2D - Contiguous store two-doubleword structures from two vectors (scalar index).
    /// </summary>
    ST2D_z_p_br_contiguous,
    /// <summary>
    /// Instruction ST2G - Store Allocation Tags.
    /// </summary>
    ST2G_64soffset_ldsttags,
    /// <summary>
    /// Instruction ST2G - Store Allocation Tags.
    /// </summary>
    ST2G_64spost_ldsttags,
    /// <summary>
    /// Instruction ST2G - Store Allocation Tags.
    /// </summary>
    ST2G_64spre_ldsttags,
    /// <summary>
    /// Instruction ST2H - Contiguous store two-halfword structures from two vectors (immediate index).
    /// </summary>
    ST2H_z_p_bi_contiguous,
    /// <summary>
    /// Instruction ST2H - Contiguous store two-halfword structures from two vectors (scalar index).
    /// </summary>
    ST2H_z_p_br_contiguous,
    /// <summary>
    /// Instruction ST2Q - Contiguous store two-quadword structures from two vectors (immediate index).
    /// </summary>
    ST2Q_z_p_bi_contiguous,
    /// <summary>
    /// Instruction ST2Q - Contiguous store two-quadword structures from two vectors (scalar index).
    /// </summary>
    ST2Q_z_p_br_contiguous,
    /// <summary>
    /// Instruction ST2W - Contiguous store two-word structures from two vectors (immediate index).
    /// </summary>
    ST2W_z_p_bi_contiguous,
    /// <summary>
    /// Instruction ST2W - Contiguous store two-word structures from two vectors (scalar index).
    /// </summary>
    ST2W_z_p_br_contiguous,
    /// <summary>
    /// Instruction ST2 - Store multiple 2-element structures from two registers.
    /// </summary>
    ST2_asisdlse_r2,
    /// <summary>
    /// Instruction ST2 - Store multiple 2-element structures from two registers.
    /// </summary>
    ST2_asisdlsep_i2_i,
    /// <summary>
    /// Instruction ST2 - Store multiple 2-element structures from two registers.
    /// </summary>
    ST2_asisdlsep_r2_r,
    /// <summary>
    /// Instruction ST2 - Store single 2-element structure from one lane of two registers.
    /// </summary>
    ST2_asisdlso_b2_2b,
    /// <summary>
    /// Instruction ST2 - Store single 2-element structure from one lane of two registers.
    /// </summary>
    ST2_asisdlso_d2_2d,
    /// <summary>
    /// Instruction ST2 - Store single 2-element structure from one lane of two registers.
    /// </summary>
    ST2_asisdlso_h2_2h,
    /// <summary>
    /// Instruction ST2 - Store single 2-element structure from one lane of two registers.
    /// </summary>
    ST2_asisdlso_s2_2s,
    /// <summary>
    /// Instruction ST2 - Store single 2-element structure from one lane of two registers.
    /// </summary>
    ST2_asisdlsop_b2_i2b,
    /// <summary>
    /// Instruction ST2 - Store single 2-element structure from one lane of two registers.
    /// </summary>
    ST2_asisdlsop_bx2_r2b,
    /// <summary>
    /// Instruction ST2 - Store single 2-element structure from one lane of two registers.
    /// </summary>
    ST2_asisdlsop_d2_i2d,
    /// <summary>
    /// Instruction ST2 - Store single 2-element structure from one lane of two registers.
    /// </summary>
    ST2_asisdlsop_dx2_r2d,
    /// <summary>
    /// Instruction ST2 - Store single 2-element structure from one lane of two registers.
    /// </summary>
    ST2_asisdlsop_h2_i2h,
    /// <summary>
    /// Instruction ST2 - Store single 2-element structure from one lane of two registers.
    /// </summary>
    ST2_asisdlsop_hx2_r2h,
    /// <summary>
    /// Instruction ST2 - Store single 2-element structure from one lane of two registers.
    /// </summary>
    ST2_asisdlsop_s2_i2s,
    /// <summary>
    /// Instruction ST2 - Store single 2-element structure from one lane of two registers.
    /// </summary>
    ST2_asisdlsop_sx2_r2s,
    /// <summary>
    /// Instruction ST3B - Contiguous store three-byte structures from three vectors (immediate index).
    /// </summary>
    ST3B_z_p_bi_contiguous,
    /// <summary>
    /// Instruction ST3B - Contiguous store three-byte structures from three vectors (scalar index).
    /// </summary>
    ST3B_z_p_br_contiguous,
    /// <summary>
    /// Instruction ST3D - Contiguous store three-doubleword structures from three vectors (immediate index).
    /// </summary>
    ST3D_z_p_bi_contiguous,
    /// <summary>
    /// Instruction ST3D - Contiguous store three-doubleword structures from three vectors (scalar index).
    /// </summary>
    ST3D_z_p_br_contiguous,
    /// <summary>
    /// Instruction ST3H - Contiguous store three-halfword structures from three vectors (immediate index).
    /// </summary>
    ST3H_z_p_bi_contiguous,
    /// <summary>
    /// Instruction ST3H - Contiguous store three-halfword structures from three vectors (scalar index).
    /// </summary>
    ST3H_z_p_br_contiguous,
    /// <summary>
    /// Instruction ST3Q - Contiguous store three-quadword structures from three vectors (immediate index).
    /// </summary>
    ST3Q_z_p_bi_contiguous,
    /// <summary>
    /// Instruction ST3Q - Contiguous store three-quadword structures from three vectors (scalar index).
    /// </summary>
    ST3Q_z_p_br_contiguous,
    /// <summary>
    /// Instruction ST3W - Contiguous store three-word structures from three vectors (immediate index).
    /// </summary>
    ST3W_z_p_bi_contiguous,
    /// <summary>
    /// Instruction ST3W - Contiguous store three-word structures from three vectors (scalar index).
    /// </summary>
    ST3W_z_p_br_contiguous,
    /// <summary>
    /// Instruction ST3 - Store multiple 3-element structures from three registers.
    /// </summary>
    ST3_asisdlse_r3,
    /// <summary>
    /// Instruction ST3 - Store multiple 3-element structures from three registers.
    /// </summary>
    ST3_asisdlsep_i3_i,
    /// <summary>
    /// Instruction ST3 - Store multiple 3-element structures from three registers.
    /// </summary>
    ST3_asisdlsep_r3_r,
    /// <summary>
    /// Instruction ST3 - Store single 3-element structure from one lane of three registers.
    /// </summary>
    ST3_asisdlso_b3_3b,
    /// <summary>
    /// Instruction ST3 - Store single 3-element structure from one lane of three registers.
    /// </summary>
    ST3_asisdlso_d3_3d,
    /// <summary>
    /// Instruction ST3 - Store single 3-element structure from one lane of three registers.
    /// </summary>
    ST3_asisdlso_h3_3h,
    /// <summary>
    /// Instruction ST3 - Store single 3-element structure from one lane of three registers.
    /// </summary>
    ST3_asisdlso_s3_3s,
    /// <summary>
    /// Instruction ST3 - Store single 3-element structure from one lane of three registers.
    /// </summary>
    ST3_asisdlsop_b3_i3b,
    /// <summary>
    /// Instruction ST3 - Store single 3-element structure from one lane of three registers.
    /// </summary>
    ST3_asisdlsop_bx3_r3b,
    /// <summary>
    /// Instruction ST3 - Store single 3-element structure from one lane of three registers.
    /// </summary>
    ST3_asisdlsop_d3_i3d,
    /// <summary>
    /// Instruction ST3 - Store single 3-element structure from one lane of three registers.
    /// </summary>
    ST3_asisdlsop_dx3_r3d,
    /// <summary>
    /// Instruction ST3 - Store single 3-element structure from one lane of three registers.
    /// </summary>
    ST3_asisdlsop_h3_i3h,
    /// <summary>
    /// Instruction ST3 - Store single 3-element structure from one lane of three registers.
    /// </summary>
    ST3_asisdlsop_hx3_r3h,
    /// <summary>
    /// Instruction ST3 - Store single 3-element structure from one lane of three registers.
    /// </summary>
    ST3_asisdlsop_s3_i3s,
    /// <summary>
    /// Instruction ST3 - Store single 3-element structure from one lane of three registers.
    /// </summary>
    ST3_asisdlsop_sx3_r3s,
    /// <summary>
    /// Instruction ST4B - Contiguous store four-byte structures from four vectors (immediate index).
    /// </summary>
    ST4B_z_p_bi_contiguous,
    /// <summary>
    /// Instruction ST4B - Contiguous store four-byte structures from four vectors (scalar index).
    /// </summary>
    ST4B_z_p_br_contiguous,
    /// <summary>
    /// Instruction ST4D - Contiguous store four-doubleword structures from four vectors (immediate index).
    /// </summary>
    ST4D_z_p_bi_contiguous,
    /// <summary>
    /// Instruction ST4D - Contiguous store four-doubleword structures from four vectors (scalar index).
    /// </summary>
    ST4D_z_p_br_contiguous,
    /// <summary>
    /// Instruction ST4H - Contiguous store four-halfword structures from four vectors (immediate index).
    /// </summary>
    ST4H_z_p_bi_contiguous,
    /// <summary>
    /// Instruction ST4H - Contiguous store four-halfword structures from four vectors (scalar index).
    /// </summary>
    ST4H_z_p_br_contiguous,
    /// <summary>
    /// Instruction ST4Q - Contiguous store four-quadword structures from four vectors (immediate index).
    /// </summary>
    ST4Q_z_p_bi_contiguous,
    /// <summary>
    /// Instruction ST4Q - Contiguous store four-quadword structures from four vectors (scalar index).
    /// </summary>
    ST4Q_z_p_br_contiguous,
    /// <summary>
    /// Instruction ST4W - Contiguous store four-word structures from four vectors (immediate index).
    /// </summary>
    ST4W_z_p_bi_contiguous,
    /// <summary>
    /// Instruction ST4W - Contiguous store four-word structures from four vectors (scalar index).
    /// </summary>
    ST4W_z_p_br_contiguous,
    /// <summary>
    /// Instruction ST4 - Store multiple 4-element structures from four registers.
    /// </summary>
    ST4_asisdlse_r4,
    /// <summary>
    /// Instruction ST4 - Store multiple 4-element structures from four registers.
    /// </summary>
    ST4_asisdlsep_i4_i,
    /// <summary>
    /// Instruction ST4 - Store multiple 4-element structures from four registers.
    /// </summary>
    ST4_asisdlsep_r4_r,
    /// <summary>
    /// Instruction ST4 - Store single 4-element structure from one lane of four registers.
    /// </summary>
    ST4_asisdlso_b4_4b,
    /// <summary>
    /// Instruction ST4 - Store single 4-element structure from one lane of four registers.
    /// </summary>
    ST4_asisdlso_d4_4d,
    /// <summary>
    /// Instruction ST4 - Store single 4-element structure from one lane of four registers.
    /// </summary>
    ST4_asisdlso_h4_4h,
    /// <summary>
    /// Instruction ST4 - Store single 4-element structure from one lane of four registers.
    /// </summary>
    ST4_asisdlso_s4_4s,
    /// <summary>
    /// Instruction ST4 - Store single 4-element structure from one lane of four registers.
    /// </summary>
    ST4_asisdlsop_b4_i4b,
    /// <summary>
    /// Instruction ST4 - Store single 4-element structure from one lane of four registers.
    /// </summary>
    ST4_asisdlsop_bx4_r4b,
    /// <summary>
    /// Instruction ST4 - Store single 4-element structure from one lane of four registers.
    /// </summary>
    ST4_asisdlsop_d4_i4d,
    /// <summary>
    /// Instruction ST4 - Store single 4-element structure from one lane of four registers.
    /// </summary>
    ST4_asisdlsop_dx4_r4d,
    /// <summary>
    /// Instruction ST4 - Store single 4-element structure from one lane of four registers.
    /// </summary>
    ST4_asisdlsop_h4_i4h,
    /// <summary>
    /// Instruction ST4 - Store single 4-element structure from one lane of four registers.
    /// </summary>
    ST4_asisdlsop_hx4_r4h,
    /// <summary>
    /// Instruction ST4 - Store single 4-element structure from one lane of four registers.
    /// </summary>
    ST4_asisdlsop_s4_i4s,
    /// <summary>
    /// Instruction ST4 - Store single 4-element structure from one lane of four registers.
    /// </summary>
    ST4_asisdlsop_sx4_r4s,
    /// <summary>
    /// Instruction ST64BV0 - Single-copy atomic 64-byte EL0 store with status result.
    /// </summary>
    ST64BV0_64_memop,
    /// <summary>
    /// Instruction ST64BV - Single-copy atomic 64-byte store with status result.
    /// </summary>
    ST64BV_64_memop,
    /// <summary>
    /// Instruction ST64B - Single-copy atomic 64-byte store without status result.
    /// </summary>
    ST64B_64l_memop,
    /// <summary>
    /// Instruction STBFADDL - BFloat16 floating-point atomic add in memory, without return.
    /// </summary>
    STBFADDL_16,
    /// <summary>
    /// Instruction STBFADD - BFloat16 floating-point atomic add in memory, without return.
    /// </summary>
    STBFADD_16,
    /// <summary>
    /// Instruction STBFMAXL - BFloat16 floating-point atomic maximum in memory, without return.
    /// </summary>
    STBFMAXL_16,
    /// <summary>
    /// Instruction STBFMAXNML - BFloat16 floating-point atomic maximum number in memory, without return.
    /// </summary>
    STBFMAXNML_16,
    /// <summary>
    /// Instruction STBFMAXNM - BFloat16 floating-point atomic maximum number in memory, without return.
    /// </summary>
    STBFMAXNM_16,
    /// <summary>
    /// Instruction STBFMAX - BFloat16 floating-point atomic maximum in memory, without return.
    /// </summary>
    STBFMAX_16,
    /// <summary>
    /// Instruction STBFMINL - BFloat16 floating-point atomic minimum in memory, without return.
    /// </summary>
    STBFMINL_16,
    /// <summary>
    /// Instruction STBFMINNML - BFloat16 floating-point atomic minimum number in memory, without return.
    /// </summary>
    STBFMINNML_16,
    /// <summary>
    /// Instruction STBFMINNM - BFloat16 floating-point atomic minimum number in memory, without return.
    /// </summary>
    STBFMINNM_16,
    /// <summary>
    /// Instruction STBFMIN - BFloat16 floating-point atomic minimum in memory, without return.
    /// </summary>
    STBFMIN_16,
    /// <summary>
    /// Instruction STFADDL - Floating-point atomic add in memory, without return.
    /// </summary>
    STFADDL_16,
    /// <summary>
    /// Instruction STFADDL - Floating-point atomic add in memory, without return.
    /// </summary>
    STFADDL_32,
    /// <summary>
    /// Instruction STFADDL - Floating-point atomic add in memory, without return.
    /// </summary>
    STFADDL_64,
    /// <summary>
    /// Instruction STFADD - Floating-point atomic add in memory, without return.
    /// </summary>
    STFADD_16,
    /// <summary>
    /// Instruction STFADD - Floating-point atomic add in memory, without return.
    /// </summary>
    STFADD_32,
    /// <summary>
    /// Instruction STFADD - Floating-point atomic add in memory, without return.
    /// </summary>
    STFADD_64,
    /// <summary>
    /// Instruction STFMAXL - Floating-point atomic maximum in memory, without return.
    /// </summary>
    STFMAXL_16,
    /// <summary>
    /// Instruction STFMAXL - Floating-point atomic maximum in memory, without return.
    /// </summary>
    STFMAXL_32,
    /// <summary>
    /// Instruction STFMAXL - Floating-point atomic maximum in memory, without return.
    /// </summary>
    STFMAXL_64,
    /// <summary>
    /// Instruction STFMAXNML - Floating-point atomic maximum number in memory, without return.
    /// </summary>
    STFMAXNML_16,
    /// <summary>
    /// Instruction STFMAXNML - Floating-point atomic maximum number in memory, without return.
    /// </summary>
    STFMAXNML_32,
    /// <summary>
    /// Instruction STFMAXNML - Floating-point atomic maximum number in memory, without return.
    /// </summary>
    STFMAXNML_64,
    /// <summary>
    /// Instruction STFMAXNM - Floating-point atomic maximum number in memory, without return.
    /// </summary>
    STFMAXNM_16,
    /// <summary>
    /// Instruction STFMAXNM - Floating-point atomic maximum number in memory, without return.
    /// </summary>
    STFMAXNM_32,
    /// <summary>
    /// Instruction STFMAXNM - Floating-point atomic maximum number in memory, without return.
    /// </summary>
    STFMAXNM_64,
    /// <summary>
    /// Instruction STFMAX - Floating-point atomic maximum in memory, without return.
    /// </summary>
    STFMAX_16,
    /// <summary>
    /// Instruction STFMAX - Floating-point atomic maximum in memory, without return.
    /// </summary>
    STFMAX_32,
    /// <summary>
    /// Instruction STFMAX - Floating-point atomic maximum in memory, without return.
    /// </summary>
    STFMAX_64,
    /// <summary>
    /// Instruction STFMINL - Floating-point atomic minimum in memory, without return.
    /// </summary>
    STFMINL_16,
    /// <summary>
    /// Instruction STFMINL - Floating-point atomic minimum in memory, without return.
    /// </summary>
    STFMINL_32,
    /// <summary>
    /// Instruction STFMINL - Floating-point atomic minimum in memory, without return.
    /// </summary>
    STFMINL_64,
    /// <summary>
    /// Instruction STFMINNML - Floating-point atomic minimum number in memory, without return.
    /// </summary>
    STFMINNML_16,
    /// <summary>
    /// Instruction STFMINNML - Floating-point atomic minimum number in memory, without return.
    /// </summary>
    STFMINNML_32,
    /// <summary>
    /// Instruction STFMINNML - Floating-point atomic minimum number in memory, without return.
    /// </summary>
    STFMINNML_64,
    /// <summary>
    /// Instruction STFMINNM - Floating-point atomic minimum number in memory, without return.
    /// </summary>
    STFMINNM_16,
    /// <summary>
    /// Instruction STFMINNM - Floating-point atomic minimum number in memory, without return.
    /// </summary>
    STFMINNM_32,
    /// <summary>
    /// Instruction STFMINNM - Floating-point atomic minimum number in memory, without return.
    /// </summary>
    STFMINNM_64,
    /// <summary>
    /// Instruction STFMIN - Floating-point atomic minimum in memory, without return.
    /// </summary>
    STFMIN_16,
    /// <summary>
    /// Instruction STFMIN - Floating-point atomic minimum in memory, without return.
    /// </summary>
    STFMIN_32,
    /// <summary>
    /// Instruction STFMIN - Floating-point atomic minimum in memory, without return.
    /// </summary>
    STFMIN_64,
    /// <summary>
    /// Instruction STGM - Store Allocation Tag multiple.
    /// </summary>
    STGM_64bulk_ldsttags,
    /// <summary>
    /// Instruction STGP - Store Allocation Tag and pair of registers.
    /// </summary>
    STGP_64_ldstpair_off,
    /// <summary>
    /// Instruction STGP - Store Allocation Tag and pair of registers.
    /// </summary>
    STGP_64_ldstpair_post,
    /// <summary>
    /// Instruction STGP - Store Allocation Tag and pair of registers.
    /// </summary>
    STGP_64_ldstpair_pre,
    /// <summary>
    /// Instruction STG - Store Allocation Tag.
    /// </summary>
    STG_64soffset_ldsttags,
    /// <summary>
    /// Instruction STG - Store Allocation Tag.
    /// </summary>
    STG_64spost_ldsttags,
    /// <summary>
    /// Instruction STG - Store Allocation Tag.
    /// </summary>
    STG_64spre_ldsttags,
    /// <summary>
    /// Instruction STILP - Store-release ordered pair of registers.
    /// </summary>
    STILP_32s_ldiappstilp,
    /// <summary>
    /// Instruction STILP - Store-release ordered pair of registers.
    /// </summary>
    STILP_32se_ldiappstilp,
    /// <summary>
    /// Instruction STILP - Store-release ordered pair of registers.
    /// </summary>
    STILP_64s_ldiappstilp,
    /// <summary>
    /// Instruction STILP - Store-release ordered pair of registers.
    /// </summary>
    STILP_64ss_ldiappstilp,
    /// <summary>
    /// Instruction STL1 - Store-release a single-element structure from one lane of one register.
    /// </summary>
    STL1_asisdlso_d1,
    /// <summary>
    /// Instruction STLLRB - Store LORelease register byte.
    /// </summary>
    STLLRB_sl32_ldstord,
    /// <summary>
    /// Instruction STLLRH - Store LORelease register halfword.
    /// </summary>
    STLLRH_sl32_ldstord,
    /// <summary>
    /// Instruction STLLR - Store LORelease register.
    /// </summary>
    STLLR_sl32_ldstord,
    /// <summary>
    /// Instruction STLLR - Store LORelease register.
    /// </summary>
    STLLR_sl64_ldstord,
    /// <summary>
    /// Instruction STLRB - Store-release register byte.
    /// </summary>
    STLRB_sl32_ldstord,
    /// <summary>
    /// Instruction STLRH - Store-release register halfword.
    /// </summary>
    STLRH_sl32_ldstord,
    /// <summary>
    /// Instruction STLR - Store-release register.
    /// </summary>
    STLR_32s_ldapstl_writeback,
    /// <summary>
    /// Instruction STLR - Store-release register.
    /// </summary>
    STLR_64s_ldapstl_writeback,
    /// <summary>
    /// Instruction STLR - Store-release register.
    /// </summary>
    STLR_sl32_ldstord,
    /// <summary>
    /// Instruction STLR - Store-release register.
    /// </summary>
    STLR_sl64_ldstord,
    /// <summary>
    /// Instruction STLTXR - Store-release unprivileged exclusive register.
    /// </summary>
    STLTXR_sr32_ldstexclr_unpriv,
    /// <summary>
    /// Instruction STLTXR - Store-release unprivileged exclusive register.
    /// </summary>
    STLTXR_sr64_ldstexclr_unpriv,
    /// <summary>
    /// Instruction STLURB - Store-release register byte (unscaled).
    /// </summary>
    STLURB_32_ldapstl_unscaled,
    /// <summary>
    /// Instruction STLURH - Store-release register halfword (unscaled).
    /// </summary>
    STLURH_32_ldapstl_unscaled,
    /// <summary>
    /// Instruction STLUR - Store-release register (unscaled).
    /// </summary>
    STLUR_32_ldapstl_unscaled,
    /// <summary>
    /// Instruction STLUR - Store-release register (unscaled).
    /// </summary>
    STLUR_64_ldapstl_unscaled,
    /// <summary>
    /// Instruction STLUR - Store-release SIMD&FP register (unscaled offset).
    /// </summary>
    STLUR_b_ldapstl_simd,
    /// <summary>
    /// Instruction STLUR - Store-release SIMD&FP register (unscaled offset).
    /// </summary>
    STLUR_d_ldapstl_simd,
    /// <summary>
    /// Instruction STLUR - Store-release SIMD&FP register (unscaled offset).
    /// </summary>
    STLUR_h_ldapstl_simd,
    /// <summary>
    /// Instruction STLUR - Store-release SIMD&FP register (unscaled offset).
    /// </summary>
    STLUR_q_ldapstl_simd,
    /// <summary>
    /// Instruction STLUR - Store-release SIMD&FP register (unscaled offset).
    /// </summary>
    STLUR_s_ldapstl_simd,
    /// <summary>
    /// Instruction STLXP - Store-release exclusive pair of registers.
    /// </summary>
    STLXP_sp32_ldstexclp,
    /// <summary>
    /// Instruction STLXP - Store-release exclusive pair of registers.
    /// </summary>
    STLXP_sp64_ldstexclp,
    /// <summary>
    /// Instruction STLXRB - Store-release exclusive register byte.
    /// </summary>
    STLXRB_sr32_ldstexclr,
    /// <summary>
    /// Instruction STLXRH - Store-release exclusive register halfword.
    /// </summary>
    STLXRH_sr32_ldstexclr,
    /// <summary>
    /// Instruction STLXR - Store-release exclusive register.
    /// </summary>
    STLXR_sr32_ldstexclr,
    /// <summary>
    /// Instruction STLXR - Store-release exclusive register.
    /// </summary>
    STLXR_sr64_ldstexclr,
    /// <summary>
    /// Instruction STMOPA - Signed integer sparse sum of two outer products, accumulating.
    /// </summary>
    STMOPA_za32_zzzi_h2x1,
    /// <summary>
    /// Instruction STMOPA - Signed integer sparse sum of four outer products, accumulating.
    /// </summary>
    STMOPA_za_zzzi_b2x1,
    /// <summary>
    /// Instruction STNP - Store pair of registers, with non-temporal hint.
    /// </summary>
    STNP_32_ldstnapair_offs,
    /// <summary>
    /// Instruction STNP - Store pair of registers, with non-temporal hint.
    /// </summary>
    STNP_64_ldstnapair_offs,
    /// <summary>
    /// Instruction STNP - Store pair of SIMD&FP registers, with non-temporal hint.
    /// </summary>
    STNP_d_ldstnapair_offs,
    /// <summary>
    /// Instruction STNP - Store pair of SIMD&FP registers, with non-temporal hint.
    /// </summary>
    STNP_q_ldstnapair_offs,
    /// <summary>
    /// Instruction STNP - Store pair of SIMD&FP registers, with non-temporal hint.
    /// </summary>
    STNP_s_ldstnapair_offs,
    /// <summary>
    /// Instruction STNT1B - Contiguous store non-temporal of bytes from multiple consecutive vectors (immediate index).
    /// </summary>
    STNT1B_mz_p_bi_2,
    /// <summary>
    /// Instruction STNT1B - Contiguous store non-temporal of bytes from multiple consecutive vectors (immediate index).
    /// </summary>
    STNT1B_mz_p_bi_4,
    /// <summary>
    /// Instruction STNT1B - Contiguous store non-temporal of bytes from multiple consecutive vectors (scalar index).
    /// </summary>
    STNT1B_mz_p_br_2,
    /// <summary>
    /// Instruction STNT1B - Contiguous store non-temporal of bytes from multiple consecutive vectors (scalar index).
    /// </summary>
    STNT1B_mz_p_br_4,
    /// <summary>
    /// Instruction STNT1B - Contiguous store non-temporal of bytes from multiple strided vectors (immediate index).
    /// </summary>
    STNT1B_mzx_p_bi_2x8,
    /// <summary>
    /// Instruction STNT1B - Contiguous store non-temporal of bytes from multiple strided vectors (immediate index).
    /// </summary>
    STNT1B_mzx_p_bi_4x4,
    /// <summary>
    /// Instruction STNT1B - Contiguous store non-temporal of bytes from multiple strided vectors (scalar index).
    /// </summary>
    STNT1B_mzx_p_br_2x8,
    /// <summary>
    /// Instruction STNT1B - Contiguous store non-temporal of bytes from multiple strided vectors (scalar index).
    /// </summary>
    STNT1B_mzx_p_br_4x4,
    /// <summary>
    /// Instruction STNT1B - Scatter store non-temporal bytes.
    /// </summary>
    STNT1B_z_p_ar_d_64_unscaled,
    /// <summary>
    /// Instruction STNT1B - Scatter store non-temporal bytes.
    /// </summary>
    STNT1B_z_p_ar_s_x32_unscaled,
    /// <summary>
    /// Instruction STNT1B - Contiguous store non-temporal bytes from vector (immediate index).
    /// </summary>
    STNT1B_z_p_bi_contiguous,
    /// <summary>
    /// Instruction STNT1B - Contiguous store non-temporal bytes from vector (scalar index).
    /// </summary>
    STNT1B_z_p_br_contiguous,
    /// <summary>
    /// Instruction STNT1D - Contiguous store non-temporal of doublewords from multiple consecutive vectors (immediate index).
    /// </summary>
    STNT1D_mz_p_bi_2,
    /// <summary>
    /// Instruction STNT1D - Contiguous store non-temporal of doublewords from multiple consecutive vectors (immediate index).
    /// </summary>
    STNT1D_mz_p_bi_4,
    /// <summary>
    /// Instruction STNT1D - Contiguous store non-temporal of doublewords from multiple consecutive vectors (scalar index).
    /// </summary>
    STNT1D_mz_p_br_2,
    /// <summary>
    /// Instruction STNT1D - Contiguous store non-temporal of doublewords from multiple consecutive vectors (scalar index).
    /// </summary>
    STNT1D_mz_p_br_4,
    /// <summary>
    /// Instruction STNT1D - Contiguous store non-temporal of doublewords from multiple strided vectors (immediate index).
    /// </summary>
    STNT1D_mzx_p_bi_2x8,
    /// <summary>
    /// Instruction STNT1D - Contiguous store non-temporal of doublewords from multiple strided vectors (immediate index).
    /// </summary>
    STNT1D_mzx_p_bi_4x4,
    /// <summary>
    /// Instruction STNT1D - Contiguous store non-temporal of doublewords from multiple strided vectors (scalar index).
    /// </summary>
    STNT1D_mzx_p_br_2x8,
    /// <summary>
    /// Instruction STNT1D - Contiguous store non-temporal of doublewords from multiple strided vectors (scalar index).
    /// </summary>
    STNT1D_mzx_p_br_4x4,
    /// <summary>
    /// Instruction STNT1D - Scatter store non-temporal doublewords.
    /// </summary>
    STNT1D_z_p_ar_d_64_unscaled,
    /// <summary>
    /// Instruction STNT1D - Contiguous store non-temporal doublewords from vector (immediate index).
    /// </summary>
    STNT1D_z_p_bi_contiguous,
    /// <summary>
    /// Instruction STNT1D - Contiguous store non-temporal doublewords from vector (scalar index).
    /// </summary>
    STNT1D_z_p_br_contiguous,
    /// <summary>
    /// Instruction STNT1H - Contiguous store non-temporal of halfwords from multiple consecutive vectors (immediate index).
    /// </summary>
    STNT1H_mz_p_bi_2,
    /// <summary>
    /// Instruction STNT1H - Contiguous store non-temporal of halfwords from multiple consecutive vectors (immediate index).
    /// </summary>
    STNT1H_mz_p_bi_4,
    /// <summary>
    /// Instruction STNT1H - Contiguous store non-temporal of halfwords from multiple consecutive vectors (scalar index).
    /// </summary>
    STNT1H_mz_p_br_2,
    /// <summary>
    /// Instruction STNT1H - Contiguous store non-temporal of halfwords from multiple consecutive vectors (scalar index).
    /// </summary>
    STNT1H_mz_p_br_4,
    /// <summary>
    /// Instruction STNT1H - Contiguous store non-temporal of halfwords from multiple strided vectors (immediate index).
    /// </summary>
    STNT1H_mzx_p_bi_2x8,
    /// <summary>
    /// Instruction STNT1H - Contiguous store non-temporal of halfwords from multiple strided vectors (immediate index).
    /// </summary>
    STNT1H_mzx_p_bi_4x4,
    /// <summary>
    /// Instruction STNT1H - Contiguous store non-temporal of halfwords from multiple strided vectors (scalar index).
    /// </summary>
    STNT1H_mzx_p_br_2x8,
    /// <summary>
    /// Instruction STNT1H - Contiguous store non-temporal of halfwords from multiple strided vectors (scalar index).
    /// </summary>
    STNT1H_mzx_p_br_4x4,
    /// <summary>
    /// Instruction STNT1H - Scatter store non-temporal halfwords.
    /// </summary>
    STNT1H_z_p_ar_d_64_unscaled,
    /// <summary>
    /// Instruction STNT1H - Scatter store non-temporal halfwords.
    /// </summary>
    STNT1H_z_p_ar_s_x32_unscaled,
    /// <summary>
    /// Instruction STNT1H - Contiguous store non-temporal halfwords from vector (immediate index).
    /// </summary>
    STNT1H_z_p_bi_contiguous,
    /// <summary>
    /// Instruction STNT1H - Contiguous store non-temporal halfwords from vector (scalar index).
    /// </summary>
    STNT1H_z_p_br_contiguous,
    /// <summary>
    /// Instruction STNT1W - Contiguous store non-temporal of words from multiple consecutive vectors (immediate index).
    /// </summary>
    STNT1W_mz_p_bi_2,
    /// <summary>
    /// Instruction STNT1W - Contiguous store non-temporal of words from multiple consecutive vectors (immediate index).
    /// </summary>
    STNT1W_mz_p_bi_4,
    /// <summary>
    /// Instruction STNT1W - Contiguous store non-temporal of words from multiple consecutive vectors (scalar index).
    /// </summary>
    STNT1W_mz_p_br_2,
    /// <summary>
    /// Instruction STNT1W - Contiguous store non-temporal of words from multiple consecutive vectors (scalar index).
    /// </summary>
    STNT1W_mz_p_br_4,
    /// <summary>
    /// Instruction STNT1W - Contiguous store non-temporal of words from multiple strided vectors (immediate index).
    /// </summary>
    STNT1W_mzx_p_bi_2x8,
    /// <summary>
    /// Instruction STNT1W - Contiguous store non-temporal of words from multiple strided vectors (immediate index).
    /// </summary>
    STNT1W_mzx_p_bi_4x4,
    /// <summary>
    /// Instruction STNT1W - Contiguous store non-temporal of words from multiple strided vectors (scalar index).
    /// </summary>
    STNT1W_mzx_p_br_2x8,
    /// <summary>
    /// Instruction STNT1W - Contiguous store non-temporal of words from multiple strided vectors (scalar index).
    /// </summary>
    STNT1W_mzx_p_br_4x4,
    /// <summary>
    /// Instruction STNT1W - Scatter store non-temporal words.
    /// </summary>
    STNT1W_z_p_ar_d_64_unscaled,
    /// <summary>
    /// Instruction STNT1W - Scatter store non-temporal words.
    /// </summary>
    STNT1W_z_p_ar_s_x32_unscaled,
    /// <summary>
    /// Instruction STNT1W - Contiguous store non-temporal words from vector (immediate index).
    /// </summary>
    STNT1W_z_p_bi_contiguous,
    /// <summary>
    /// Instruction STNT1W - Contiguous store non-temporal words from vector (scalar index).
    /// </summary>
    STNT1W_z_p_br_contiguous,
    /// <summary>
    /// Instruction STP - Store pair of registers.
    /// </summary>
    STP_32_ldstpair_off,
    /// <summary>
    /// Instruction STP - Store pair of registers.
    /// </summary>
    STP_32_ldstpair_post,
    /// <summary>
    /// Instruction STP - Store pair of registers.
    /// </summary>
    STP_32_ldstpair_pre,
    /// <summary>
    /// Instruction STP - Store pair of registers.
    /// </summary>
    STP_64_ldstpair_off,
    /// <summary>
    /// Instruction STP - Store pair of registers.
    /// </summary>
    STP_64_ldstpair_post,
    /// <summary>
    /// Instruction STP - Store pair of registers.
    /// </summary>
    STP_64_ldstpair_pre,
    /// <summary>
    /// Instruction STP - Store pair of SIMD&FP registers.
    /// </summary>
    STP_d_ldstpair_off,
    /// <summary>
    /// Instruction STP - Store pair of SIMD&FP registers.
    /// </summary>
    STP_d_ldstpair_post,
    /// <summary>
    /// Instruction STP - Store pair of SIMD&FP registers.
    /// </summary>
    STP_d_ldstpair_pre,
    /// <summary>
    /// Instruction STP - Store pair of SIMD&FP registers.
    /// </summary>
    STP_q_ldstpair_off,
    /// <summary>
    /// Instruction STP - Store pair of SIMD&FP registers.
    /// </summary>
    STP_q_ldstpair_post,
    /// <summary>
    /// Instruction STP - Store pair of SIMD&FP registers.
    /// </summary>
    STP_q_ldstpair_pre,
    /// <summary>
    /// Instruction STP - Store pair of SIMD&FP registers.
    /// </summary>
    STP_s_ldstpair_off,
    /// <summary>
    /// Instruction STP - Store pair of SIMD&FP registers.
    /// </summary>
    STP_s_ldstpair_post,
    /// <summary>
    /// Instruction STP - Store pair of SIMD&FP registers.
    /// </summary>
    STP_s_ldstpair_pre,
    /// <summary>
    /// Instruction STRB - Store register byte (immediate).
    /// </summary>
    STRB_32_ldst_immpost,
    /// <summary>
    /// Instruction STRB - Store register byte (immediate).
    /// </summary>
    STRB_32_ldst_immpre,
    /// <summary>
    /// Instruction STRB - Store register byte (immediate).
    /// </summary>
    STRB_32_ldst_pos,
    /// <summary>
    /// Instruction STRB - Store register byte (register).
    /// </summary>
    STRB_32b_ldst_regoff,
    /// <summary>
    /// Instruction STRB - Store register byte (register).
    /// </summary>
    STRB_32bl_ldst_regoff,
    /// <summary>
    /// Instruction STRH - Store register halfword (immediate).
    /// </summary>
    STRH_32_ldst_immpost,
    /// <summary>
    /// Instruction STRH - Store register halfword (immediate).
    /// </summary>
    STRH_32_ldst_immpre,
    /// <summary>
    /// Instruction STRH - Store register halfword (immediate).
    /// </summary>
    STRH_32_ldst_pos,
    /// <summary>
    /// Instruction STRH - Store register halfword (register).
    /// </summary>
    STRH_32_ldst_regoff,
    /// <summary>
    /// Instruction STR - Store register (immediate).
    /// </summary>
    STR_32_ldst_immpost,
    /// <summary>
    /// Instruction STR - Store register (immediate).
    /// </summary>
    STR_32_ldst_immpre,
    /// <summary>
    /// Instruction STR - Store register (immediate).
    /// </summary>
    STR_32_ldst_pos,
    /// <summary>
    /// Instruction STR - Store register (register).
    /// </summary>
    STR_32_ldst_regoff,
    /// <summary>
    /// Instruction STR - Store register (immediate).
    /// </summary>
    STR_64_ldst_immpost,
    /// <summary>
    /// Instruction STR - Store register (immediate).
    /// </summary>
    STR_64_ldst_immpre,
    /// <summary>
    /// Instruction STR - Store register (immediate).
    /// </summary>
    STR_64_ldst_pos,
    /// <summary>
    /// Instruction STR - Store register (register).
    /// </summary>
    STR_64_ldst_regoff,
    /// <summary>
    /// Instruction STR - Store SIMD&FP register (immediate offset).
    /// </summary>
    STR_b_ldst_immpost,
    /// <summary>
    /// Instruction STR - Store SIMD&FP register (immediate offset).
    /// </summary>
    STR_b_ldst_immpre,
    /// <summary>
    /// Instruction STR - Store SIMD&FP register (immediate offset).
    /// </summary>
    STR_b_ldst_pos,
    /// <summary>
    /// Instruction STR - Store SIMD&FP register (register offset).
    /// </summary>
    STR_b_ldst_regoff,
    /// <summary>
    /// Instruction STR - Store SIMD&FP register (register offset).
    /// </summary>
    STR_bl_ldst_regoff,
    /// <summary>
    /// Instruction STR - Store SIMD&FP register (immediate offset).
    /// </summary>
    STR_d_ldst_immpost,
    /// <summary>
    /// Instruction STR - Store SIMD&FP register (immediate offset).
    /// </summary>
    STR_d_ldst_immpre,
    /// <summary>
    /// Instruction STR - Store SIMD&FP register (immediate offset).
    /// </summary>
    STR_d_ldst_pos,
    /// <summary>
    /// Instruction STR - Store SIMD&FP register (register offset).
    /// </summary>
    STR_d_ldst_regoff,
    /// <summary>
    /// Instruction STR - Store SIMD&FP register (immediate offset).
    /// </summary>
    STR_h_ldst_immpost,
    /// <summary>
    /// Instruction STR - Store SIMD&FP register (immediate offset).
    /// </summary>
    STR_h_ldst_immpre,
    /// <summary>
    /// Instruction STR - Store SIMD&FP register (immediate offset).
    /// </summary>
    STR_h_ldst_pos,
    /// <summary>
    /// Instruction STR - Store SIMD&FP register (register offset).
    /// </summary>
    STR_h_ldst_regoff,
    /// <summary>
    /// Instruction STR - Store predicate register.
    /// </summary>
    STR_p_bi,
    /// <summary>
    /// Instruction STR - Store SIMD&FP register (immediate offset).
    /// </summary>
    STR_q_ldst_immpost,
    /// <summary>
    /// Instruction STR - Store SIMD&FP register (immediate offset).
    /// </summary>
    STR_q_ldst_immpre,
    /// <summary>
    /// Instruction STR - Store SIMD&FP register (immediate offset).
    /// </summary>
    STR_q_ldst_pos,
    /// <summary>
    /// Instruction STR - Store SIMD&FP register (register offset).
    /// </summary>
    STR_q_ldst_regoff,
    /// <summary>
    /// Instruction STR - Store SIMD&FP register (immediate offset).
    /// </summary>
    STR_s_ldst_immpost,
    /// <summary>
    /// Instruction STR - Store SIMD&FP register (immediate offset).
    /// </summary>
    STR_s_ldst_immpre,
    /// <summary>
    /// Instruction STR - Store SIMD&FP register (immediate offset).
    /// </summary>
    STR_s_ldst_pos,
    /// <summary>
    /// Instruction STR - Store SIMD&FP register (register offset).
    /// </summary>
    STR_s_ldst_regoff,
    /// <summary>
    /// Instruction STR - Store vector register.
    /// </summary>
    STR_z_bi,
    /// <summary>
    /// Instruction STR - Store ZA array vector.
    /// </summary>
    STR_za_ri,
    /// <summary>
    /// Instruction STR - Store ZT0 register.
    /// </summary>
    STR_zt_br,
    /// <summary>
    /// Instruction STSHH - Store shared hint.
    /// </summary>
    STSHH_hi_hints,
    /// <summary>
    /// Instruction STTNP - Store unprivileged pair of registers, with non-temporal hint.
    /// </summary>
    STTNP_64_ldstnapair_offs,
    /// <summary>
    /// Instruction STTNP - Store unprivileged pair of SIMD&FP registers, with non-temporal hint.
    /// </summary>
    STTNP_q_ldstnapair_offs,
    /// <summary>
    /// Instruction STTP - Store unprivileged pair of registers.
    /// </summary>
    STTP_64_ldstpair_off,
    /// <summary>
    /// Instruction STTP - Store unprivileged pair of registers.
    /// </summary>
    STTP_64_ldstpair_post,
    /// <summary>
    /// Instruction STTP - Store unprivileged pair of registers.
    /// </summary>
    STTP_64_ldstpair_pre,
    /// <summary>
    /// Instruction STTP - Store unprivileged pair of SIMD&FP registers.
    /// </summary>
    STTP_q_ldstpair_off,
    /// <summary>
    /// Instruction STTP - Store unprivileged pair of SIMD&FP registers.
    /// </summary>
    STTP_q_ldstpair_post,
    /// <summary>
    /// Instruction STTP - Store unprivileged pair of SIMD&FP registers.
    /// </summary>
    STTP_q_ldstpair_pre,
    /// <summary>
    /// Instruction STTRB - Store register byte (unprivileged).
    /// </summary>
    STTRB_32_ldst_unpriv,
    /// <summary>
    /// Instruction STTRH - Store register halfword (unprivileged).
    /// </summary>
    STTRH_32_ldst_unpriv,
    /// <summary>
    /// Instruction STTR - Store register (unprivileged).
    /// </summary>
    STTR_32_ldst_unpriv,
    /// <summary>
    /// Instruction STTR - Store register (unprivileged).
    /// </summary>
    STTR_64_ldst_unpriv,
    /// <summary>
    /// Instruction STTXR - Store unprivileged exclusive register.
    /// </summary>
    STTXR_sr32_ldstexclr_unpriv,
    /// <summary>
    /// Instruction STTXR - Store unprivileged exclusive register.
    /// </summary>
    STTXR_sr64_ldstexclr_unpriv,
    /// <summary>
    /// Instruction STURB - Store register byte (unscaled).
    /// </summary>
    STURB_32_ldst_unscaled,
    /// <summary>
    /// Instruction STURH - Store register halfword (unscaled).
    /// </summary>
    STURH_32_ldst_unscaled,
    /// <summary>
    /// Instruction STUR - Store register (unscaled).
    /// </summary>
    STUR_32_ldst_unscaled,
    /// <summary>
    /// Instruction STUR - Store register (unscaled).
    /// </summary>
    STUR_64_ldst_unscaled,
    /// <summary>
    /// Instruction STUR - Store SIMD&FP register (unscaled offset).
    /// </summary>
    STUR_b_ldst_unscaled,
    /// <summary>
    /// Instruction STUR - Store SIMD&FP register (unscaled offset).
    /// </summary>
    STUR_d_ldst_unscaled,
    /// <summary>
    /// Instruction STUR - Store SIMD&FP register (unscaled offset).
    /// </summary>
    STUR_h_ldst_unscaled,
    /// <summary>
    /// Instruction STUR - Store SIMD&FP register (unscaled offset).
    /// </summary>
    STUR_q_ldst_unscaled,
    /// <summary>
    /// Instruction STUR - Store SIMD&FP register (unscaled offset).
    /// </summary>
    STUR_s_ldst_unscaled,
    /// <summary>
    /// Instruction STXP - Store exclusive pair of registers.
    /// </summary>
    STXP_sp32_ldstexclp,
    /// <summary>
    /// Instruction STXP - Store exclusive pair of registers.
    /// </summary>
    STXP_sp64_ldstexclp,
    /// <summary>
    /// Instruction STXRB - Store exclusive register byte.
    /// </summary>
    STXRB_sr32_ldstexclr,
    /// <summary>
    /// Instruction STXRH - Store exclusive register halfword.
    /// </summary>
    STXRH_sr32_ldstexclr,
    /// <summary>
    /// Instruction STXR - Store exclusive register.
    /// </summary>
    STXR_sr32_ldstexclr,
    /// <summary>
    /// Instruction STXR - Store exclusive register.
    /// </summary>
    STXR_sr64_ldstexclr,
    /// <summary>
    /// Instruction STZ2G - Store Allocation Tags, zeroing.
    /// </summary>
    STZ2G_64soffset_ldsttags,
    /// <summary>
    /// Instruction STZ2G - Store Allocation Tags, zeroing.
    /// </summary>
    STZ2G_64spost_ldsttags,
    /// <summary>
    /// Instruction STZ2G - Store Allocation Tags, zeroing.
    /// </summary>
    STZ2G_64spre_ldsttags,
    /// <summary>
    /// Instruction STZGM - Store Allocation Tag and zero multiple.
    /// </summary>
    STZGM_64bulk_ldsttags,
    /// <summary>
    /// Instruction STZG - Store Allocation Tag, zeroing.
    /// </summary>
    STZG_64soffset_ldsttags,
    /// <summary>
    /// Instruction STZG - Store Allocation Tag, zeroing.
    /// </summary>
    STZG_64spost_ldsttags,
    /// <summary>
    /// Instruction STZG - Store Allocation Tag, zeroing.
    /// </summary>
    STZG_64spre_ldsttags,
    /// <summary>
    /// Instruction SUBG - Subtract with tag.
    /// </summary>
    SUBG_64_addsub_immtags,
    /// <summary>
    /// Instruction SUBHNB - Subtract narrow high part (bottom).
    /// </summary>
    SUBHNB_z_zz,
    /// <summary>
    /// Instruction SUBHNT - Subtract narrow high part (top).
    /// </summary>
    SUBHNT_z_zz,
    /// <summary>
    /// Instruction SUBHN - Subtract returning high narrow.
    /// </summary>
    SUBHN_asimddiff_n,
    /// <summary>
    /// Instruction SUBPS - Subtract pointer, setting flags.
    /// </summary>
    SUBPS_64s_dp_2src,
    /// <summary>
    /// Instruction SUBPT - Subtract checked pointer.
    /// </summary>
    SUBPT_64_addsub_pt,
    /// <summary>
    /// Instruction SUBPT - Subtract checked pointer vectors (predicated).
    /// </summary>
    SUBPT_z_p_zz,
    /// <summary>
    /// Instruction SUBPT - Subtract checked pointer vectors (unpredicated).
    /// </summary>
    SUBPT_z_zz,
    /// <summary>
    /// Instruction SUBP - Subtract pointer.
    /// </summary>
    SUBP_64s_dp_2src,
    /// <summary>
    /// Instruction SUBR - Reversed subtract vectors (predicated).
    /// </summary>
    SUBR_z_p_zz,
    /// <summary>
    /// Instruction SUBR - Reversed subtract from immediate (unpredicated).
    /// </summary>
    SUBR_z_zi,
    /// <summary>
    /// Instruction SUBS - Subtract optionally-shifted register, setting flags.
    /// </summary>
    SUBS_32_addsub_shift,
    /// <summary>
    /// Instruction SUBS - Subtract extended and scaled register, setting flags.
    /// </summary>
    SUBS_32s_addsub_ext,
    /// <summary>
    /// Instruction SUBS - Subtract immediate value, setting flags.
    /// </summary>
    SUBS_32s_addsub_imm,
    /// <summary>
    /// Instruction SUBS - Subtract optionally-shifted register, setting flags.
    /// </summary>
    SUBS_64_addsub_shift,
    /// <summary>
    /// Instruction SUBS - Subtract extended and scaled register, setting flags.
    /// </summary>
    SUBS_64s_addsub_ext,
    /// <summary>
    /// Instruction SUBS - Subtract immediate value, setting flags.
    /// </summary>
    SUBS_64s_addsub_imm,
    /// <summary>
    /// Instruction SUB - Subtract extended and scaled register.
    /// </summary>
    SUB_32_addsub_ext,
    /// <summary>
    /// Instruction SUB - Subtract immediate value.
    /// </summary>
    SUB_32_addsub_imm,
    /// <summary>
    /// Instruction SUB - Subtract optionally-shifted register.
    /// </summary>
    SUB_32_addsub_shift,
    /// <summary>
    /// Instruction SUB - Subtract extended and scaled register.
    /// </summary>
    SUB_64_addsub_ext,
    /// <summary>
    /// Instruction SUB - Subtract immediate value.
    /// </summary>
    SUB_64_addsub_imm,
    /// <summary>
    /// Instruction SUB - Subtract optionally-shifted register.
    /// </summary>
    SUB_64_addsub_shift,
    /// <summary>
    /// Instruction SUB - Subtract (vector).
    /// </summary>
    SUB_asimdsame_only,
    /// <summary>
    /// Instruction SUB - Subtract (vector).
    /// </summary>
    SUB_asisdsame_only,
    /// <summary>
    /// Instruction SUB - Subtract vectors (predicated).
    /// </summary>
    SUB_z_p_zz,
    /// <summary>
    /// Instruction SUB - Subtract immediate (unpredicated).
    /// </summary>
    SUB_z_zi,
    /// <summary>
    /// Instruction SUB - Subtract vectors (unpredicated).
    /// </summary>
    SUB_z_zz,
    /// <summary>
    /// Instruction SUB - Subtract multi-vector from ZA array vector accumulators.
    /// </summary>
    SUB_za_zw_2x2,
    /// <summary>
    /// Instruction SUB - Subtract multi-vector from ZA array vector accumulators.
    /// </summary>
    SUB_za_zw_4x4,
    /// <summary>
    /// Instruction SUB - Subtract replicated single vector from multi-vector with ZA array vector results.
    /// </summary>
    SUB_za_zzv_2x1,
    /// <summary>
    /// Instruction SUB - Subtract replicated single vector from multi-vector with ZA array vector results.
    /// </summary>
    SUB_za_zzv_4x1,
    /// <summary>
    /// Instruction SUB - Subtract multi-vector from multi-vector with ZA array vector results.
    /// </summary>
    SUB_za_zzw_2x2,
    /// <summary>
    /// Instruction SUB - Subtract multi-vector from multi-vector with ZA array vector results.
    /// </summary>
    SUB_za_zzw_4x4,
    /// <summary>
    /// Instruction SUDOT - Dot product with signed and unsigned integers (vector, by element).
    /// </summary>
    SUDOT_asimdelem_d,
    /// <summary>
    /// Instruction SUDOT - Signed by unsigned integer indexed dot product.
    /// </summary>
    SUDOT_z_zzzi_s,
    /// <summary>
    /// Instruction SUDOT - Multi-vector signed by unsigned integer dot-product by indexed elements.
    /// </summary>
    SUDOT_za_zzi_s2xi,
    /// <summary>
    /// Instruction SUDOT - Multi-vector signed by unsigned integer dot-product by indexed elements.
    /// </summary>
    SUDOT_za_zzi_s4xi,
    /// <summary>
    /// Instruction SUDOT - Multi-vector signed by unsigned integer dot-product by vector.
    /// </summary>
    SUDOT_za_zzv_s2x1,
    /// <summary>
    /// Instruction SUDOT - Multi-vector signed by unsigned integer dot-product by vector.
    /// </summary>
    SUDOT_za_zzv_s4x1,
    /// <summary>
    /// Instruction SUMLALL - Multi-vector signed by unsigned integer multiply-add long-long by indexed element.
    /// </summary>
    SUMLALL_za_zzi_s,
    /// <summary>
    /// Instruction SUMLALL - Multi-vector signed by unsigned integer multiply-add long-long by indexed element.
    /// </summary>
    SUMLALL_za_zzi_s2xi,
    /// <summary>
    /// Instruction SUMLALL - Multi-vector signed by unsigned integer multiply-add long-long by indexed element.
    /// </summary>
    SUMLALL_za_zzi_s4xi,
    /// <summary>
    /// Instruction SUMLALL - Multi-vector signed by unsigned integer multiply-add long-long by vector.
    /// </summary>
    SUMLALL_za_zzv_s2x1,
    /// <summary>
    /// Instruction SUMLALL - Multi-vector signed by unsigned integer multiply-add long-long by vector.
    /// </summary>
    SUMLALL_za_zzv_s4x1,
    /// <summary>
    /// Instruction SUMOP4A - Signed by unsigned integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    SUMOP4A_za_zz_b1x1,
    /// <summary>
    /// Instruction SUMOP4A - Signed by unsigned integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    SUMOP4A_za_zz_b1x2,
    /// <summary>
    /// Instruction SUMOP4A - Signed by unsigned integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    SUMOP4A_za_zz_b2x1,
    /// <summary>
    /// Instruction SUMOP4A - Signed by unsigned integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    SUMOP4A_za_zz_b2x2,
    /// <summary>
    /// Instruction SUMOP4A - Signed by unsigned integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    SUMOP4A_za_zz_h1x1,
    /// <summary>
    /// Instruction SUMOP4A - Signed by unsigned integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    SUMOP4A_za_zz_h1x2,
    /// <summary>
    /// Instruction SUMOP4A - Signed by unsigned integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    SUMOP4A_za_zz_h2x1,
    /// <summary>
    /// Instruction SUMOP4A - Signed by unsigned integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    SUMOP4A_za_zz_h2x2,
    /// <summary>
    /// Instruction SUMOP4S - Signed by unsigned integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    SUMOP4S_za_zz_b1x1,
    /// <summary>
    /// Instruction SUMOP4S - Signed by unsigned integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    SUMOP4S_za_zz_b1x2,
    /// <summary>
    /// Instruction SUMOP4S - Signed by unsigned integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    SUMOP4S_za_zz_b2x1,
    /// <summary>
    /// Instruction SUMOP4S - Signed by unsigned integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    SUMOP4S_za_zz_b2x2,
    /// <summary>
    /// Instruction SUMOP4S - Signed by unsigned integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    SUMOP4S_za_zz_h1x1,
    /// <summary>
    /// Instruction SUMOP4S - Signed by unsigned integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    SUMOP4S_za_zz_h1x2,
    /// <summary>
    /// Instruction SUMOP4S - Signed by unsigned integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    SUMOP4S_za_zz_h2x1,
    /// <summary>
    /// Instruction SUMOP4S - Signed by unsigned integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    SUMOP4S_za_zz_h2x2,
    /// <summary>
    /// Instruction SUMOPA - Signed by unsigned integer sum of outer products and accumulate.
    /// </summary>
    SUMOPA_za_pp_zz_32,
    /// <summary>
    /// Instruction SUMOPA - Signed by unsigned integer sum of outer products and accumulate.
    /// </summary>
    SUMOPA_za_pp_zz_64,
    /// <summary>
    /// Instruction SUMOPS - Signed by unsigned integer sum of outer products and subtract.
    /// </summary>
    SUMOPS_za_pp_zz_32,
    /// <summary>
    /// Instruction SUMOPS - Signed by unsigned integer sum of outer products and subtract.
    /// </summary>
    SUMOPS_za_pp_zz_64,
    /// <summary>
    /// Instruction SUNPKHI - Signed unpack and extend half of vector.
    /// </summary>
    SUNPKHI_z_z,
    /// <summary>
    /// Instruction SUNPKLO - Signed unpack and extend half of vector.
    /// </summary>
    SUNPKLO_z_z,
    /// <summary>
    /// Instruction SUNPK - Unpack and sign-extend multi-vector elements.
    /// </summary>
    SUNPK_mz_z_2,
    /// <summary>
    /// Instruction SUNPK - Unpack and sign-extend multi-vector elements.
    /// </summary>
    SUNPK_mz_z_4,
    /// <summary>
    /// Instruction SUQADD - Signed saturating accumulate of unsigned value.
    /// </summary>
    SUQADD_asimdmisc_r,
    /// <summary>
    /// Instruction SUQADD - Signed saturating accumulate of unsigned value.
    /// </summary>
    SUQADD_asisdmisc_r,
    /// <summary>
    /// Instruction SUQADD - Signed saturating addition of unsigned value.
    /// </summary>
    SUQADD_z_p_zz,
    /// <summary>
    /// Instruction SUTMOPA - Signed by unsigned integer sparse sum of four outer products, accumulating.
    /// </summary>
    SUTMOPA_za_zzzi_b2x1,
    /// <summary>
    /// Instruction SUVDOT - Multi-vector signed by unsigned integer vertical dot-product by indexed element.
    /// </summary>
    SUVDOT_za_zzi_s4xi,
    /// <summary>
    /// Instruction SVC - Supervisor call.
    /// </summary>
    SVC_ex_exception,
    /// <summary>
    /// Instruction SVDOT - Multi-vector signed integer vertical dot-product by indexed element.
    /// </summary>
    SVDOT_za32_zzi_2xi,
    /// <summary>
    /// Instruction SVDOT - Multi-vector signed integer vertical dot-product by indexed element.
    /// </summary>
    SVDOT_za_zzi_d4xi,
    /// <summary>
    /// Instruction SVDOT - Multi-vector signed integer vertical dot-product by indexed element.
    /// </summary>
    SVDOT_za_zzi_s4xi,
    /// <summary>
    /// Instruction SWPAB - Swap byte in memory.
    /// </summary>
    SWPAB_32_memop,
    /// <summary>
    /// Instruction SWPAH - Swap halfword in memory.
    /// </summary>
    SWPAH_32_memop,
    /// <summary>
    /// Instruction SWPALB - Swap byte in memory.
    /// </summary>
    SWPALB_32_memop,
    /// <summary>
    /// Instruction SWPALH - Swap halfword in memory.
    /// </summary>
    SWPALH_32_memop,
    /// <summary>
    /// Instruction SWPAL - Swap word or doubleword in memory.
    /// </summary>
    SWPAL_32_memop,
    /// <summary>
    /// Instruction SWPAL - Swap word or doubleword in memory.
    /// </summary>
    SWPAL_64_memop,
    /// <summary>
    /// Instruction SWPA - Swap word or doubleword in memory.
    /// </summary>
    SWPA_32_memop,
    /// <summary>
    /// Instruction SWPA - Swap word or doubleword in memory.
    /// </summary>
    SWPA_64_memop,
    /// <summary>
    /// Instruction SWPB - Swap byte in memory.
    /// </summary>
    SWPB_32_memop,
    /// <summary>
    /// Instruction SWPH - Swap halfword in memory.
    /// </summary>
    SWPH_32_memop,
    /// <summary>
    /// Instruction SWPLB - Swap byte in memory.
    /// </summary>
    SWPLB_32_memop,
    /// <summary>
    /// Instruction SWPLH - Swap halfword in memory.
    /// </summary>
    SWPLH_32_memop,
    /// <summary>
    /// Instruction SWPL - Swap word or doubleword in memory.
    /// </summary>
    SWPL_32_memop,
    /// <summary>
    /// Instruction SWPL - Swap word or doubleword in memory.
    /// </summary>
    SWPL_64_memop,
    /// <summary>
    /// Instruction SWPPAL - Swap quadword in memory.
    /// </summary>
    SWPPAL_128_memop_128,
    /// <summary>
    /// Instruction SWPPA - Swap quadword in memory.
    /// </summary>
    SWPPA_128_memop_128,
    /// <summary>
    /// Instruction SWPPL - Swap quadword in memory.
    /// </summary>
    SWPPL_128_memop_128,
    /// <summary>
    /// Instruction SWPP - Swap quadword in memory.
    /// </summary>
    SWPP_128_memop_128,
    /// <summary>
    /// Instruction SWPTAL - Swap unprivileged.
    /// </summary>
    SWPTAL_32_memop_unpriv,
    /// <summary>
    /// Instruction SWPTAL - Swap unprivileged.
    /// </summary>
    SWPTAL_64_memop_unpriv,
    /// <summary>
    /// Instruction SWPTA - Swap unprivileged.
    /// </summary>
    SWPTA_32_memop_unpriv,
    /// <summary>
    /// Instruction SWPTA - Swap unprivileged.
    /// </summary>
    SWPTA_64_memop_unpriv,
    /// <summary>
    /// Instruction SWPTL - Swap unprivileged.
    /// </summary>
    SWPTL_32_memop_unpriv,
    /// <summary>
    /// Instruction SWPTL - Swap unprivileged.
    /// </summary>
    SWPTL_64_memop_unpriv,
    /// <summary>
    /// Instruction SWPT - Swap unprivileged.
    /// </summary>
    SWPT_32_memop_unpriv,
    /// <summary>
    /// Instruction SWPT - Swap unprivileged.
    /// </summary>
    SWPT_64_memop_unpriv,
    /// <summary>
    /// Instruction SWP - Swap word or doubleword in memory.
    /// </summary>
    SWP_32_memop,
    /// <summary>
    /// Instruction SWP - Swap word or doubleword in memory.
    /// </summary>
    SWP_64_memop,
    /// <summary>
    /// Instruction SXTB - Signed byte / halfword / word extend (predicated).
    /// </summary>
    SXTB_z_p_z_m,
    /// <summary>
    /// Instruction SXTB - Signed byte / halfword / word extend (predicated).
    /// </summary>
    SXTB_z_p_z_z,
    /// <summary>
    /// Instruction SXTH - Signed byte / halfword / word extend (predicated).
    /// </summary>
    SXTH_z_p_z_m,
    /// <summary>
    /// Instruction SXTH - Signed byte / halfword / word extend (predicated).
    /// </summary>
    SXTH_z_p_z_z,
    /// <summary>
    /// Instruction SXTW - Signed byte / halfword / word extend (predicated).
    /// </summary>
    SXTW_z_p_z_m,
    /// <summary>
    /// Instruction SXTW - Signed byte / halfword / word extend (predicated).
    /// </summary>
    SXTW_z_p_z_z,
    /// <summary>
    /// Instruction SYSL - System instruction with result.
    /// </summary>
    SYSL_rc_systeminstrs,
    /// <summary>
    /// Instruction SYSP - 128-bit system instruction.
    /// </summary>
    SYSP_cr_syspairinstrs,
    /// <summary>
    /// Instruction SYS - System instruction.
    /// </summary>
    SYS_cr_systeminstrs,
    /// <summary>
    /// Instruction TBLQ - Programmable table lookup within each quadword vector segment (zeroing).
    /// </summary>
    TBLQ_z_zz,
    /// <summary>
    /// Instruction TBL - Table vector lookup.
    /// </summary>
    TBL_asimdtbl_l1_1,
    /// <summary>
    /// Instruction TBL - Table vector lookup.
    /// </summary>
    TBL_asimdtbl_l2_2,
    /// <summary>
    /// Instruction TBL - Table vector lookup.
    /// </summary>
    TBL_asimdtbl_l3_3,
    /// <summary>
    /// Instruction TBL - Table vector lookup.
    /// </summary>
    TBL_asimdtbl_l4_4,
    /// <summary>
    /// Instruction TBL - Programmable table lookup in one or two vector table (zeroing).
    /// </summary>
    TBL_z_zz_1,
    /// <summary>
    /// Instruction TBL - Programmable table lookup in one or two vector table (zeroing).
    /// </summary>
    TBL_z_zz_2,
    /// <summary>
    /// Instruction TBNZ - Test bit and branch if nonzero.
    /// </summary>
    TBNZ_only_testbranch,
    /// <summary>
    /// Instruction TBXQ - Programmable table lookup within each quadword vector segment (merging).
    /// </summary>
    TBXQ_z_zz,
    /// <summary>
    /// Instruction TBX - Table vector lookup extension.
    /// </summary>
    TBX_asimdtbl_l1_1,
    /// <summary>
    /// Instruction TBX - Table vector lookup extension.
    /// </summary>
    TBX_asimdtbl_l2_2,
    /// <summary>
    /// Instruction TBX - Table vector lookup extension.
    /// </summary>
    TBX_asimdtbl_l3_3,
    /// <summary>
    /// Instruction TBX - Table vector lookup extension.
    /// </summary>
    TBX_asimdtbl_l4_4,
    /// <summary>
    /// Instruction TBX - Programmable table lookup in single vector table (merging).
    /// </summary>
    TBX_z_zz,
    /// <summary>
    /// Instruction TBZ - Test bit and branch if zero.
    /// </summary>
    TBZ_only_testbranch,
    /// <summary>
    /// Instruction TCANCEL - Cancel current transaction.
    /// </summary>
    TCANCEL_ex_exception,
    /// <summary>
    /// Instruction TCOMMIT - Commit current transaction.
    /// </summary>
    TCOMMIT_only_barriers,
    /// <summary>
    /// Instruction TRN1 - Transpose vectors (primary).
    /// </summary>
    TRN1_asimdperm_only,
    /// <summary>
    /// Instruction TRN1 - Interleave even or odd elements from two predicates.
    /// </summary>
    TRN1_p_pp,
    /// <summary>
    /// Instruction TRN1 - Interleave even or odd elements from two vectors.
    /// </summary>
    TRN1_z_zz,
    /// <summary>
    /// Instruction TRN1 - Interleave even or odd elements from two vectors.
    /// </summary>
    TRN1_z_zz_q,
    /// <summary>
    /// Instruction TRN2 - Transpose vectors (secondary).
    /// </summary>
    TRN2_asimdperm_only,
    /// <summary>
    /// Instruction TRN2 - Interleave even or odd elements from two predicates.
    /// </summary>
    TRN2_p_pp,
    /// <summary>
    /// Instruction TRN2 - Interleave even or odd elements from two vectors.
    /// </summary>
    TRN2_z_zz,
    /// <summary>
    /// Instruction TRN2 - Interleave even or odd elements from two vectors.
    /// </summary>
    TRN2_z_zz_q,
    /// <summary>
    /// Instruction TSB - Trace synchronization barrier.
    /// </summary>
    TSB_hc_hints,
    /// <summary>
    /// Instruction TSTART - Start transaction.
    /// </summary>
    TSTART_br_systemresult,
    /// <summary>
    /// Instruction TTEST - Test transaction state.
    /// </summary>
    TTEST_br_systemresult,
    /// <summary>
    /// Instruction UABALB - Unsigned absolute difference and accumulate long (bottom).
    /// </summary>
    UABALB_z_zzz,
    /// <summary>
    /// Instruction UABALT - Unsigned absolute difference and accumulate long (top).
    /// </summary>
    UABALT_z_zzz,
    /// <summary>
    /// Instruction UABAL - Unsigned absolute difference and accumulate long.
    /// </summary>
    UABAL_asimddiff_l,
    /// <summary>
    /// Instruction UABA - Unsigned absolute difference and accumulate.
    /// </summary>
    UABA_asimdsame_only,
    /// <summary>
    /// Instruction UABA - Unsigned absolute difference and accumulate.
    /// </summary>
    UABA_z_zzz,
    /// <summary>
    /// Instruction UABDLB - Unsigned absolute difference long (bottom).
    /// </summary>
    UABDLB_z_zz,
    /// <summary>
    /// Instruction UABDLT - Unsigned absolute difference long (top).
    /// </summary>
    UABDLT_z_zz,
    /// <summary>
    /// Instruction UABDL - Unsigned absolute difference long.
    /// </summary>
    UABDL_asimddiff_l,
    /// <summary>
    /// Instruction UABD - Unsigned absolute difference (vector).
    /// </summary>
    UABD_asimdsame_only,
    /// <summary>
    /// Instruction UABD - Unsigned absolute difference (predicated).
    /// </summary>
    UABD_z_p_zz,
    /// <summary>
    /// Instruction UADALP - Unsigned add and accumulate long pairwise.
    /// </summary>
    UADALP_asimdmisc_p,
    /// <summary>
    /// Instruction UADALP - Unsigned add and accumulate long pairwise.
    /// </summary>
    UADALP_z_p_z,
    /// <summary>
    /// Instruction UADDLB - Unsigned add long (bottom).
    /// </summary>
    UADDLB_z_zz,
    /// <summary>
    /// Instruction UADDLP - Unsigned add long pairwise.
    /// </summary>
    UADDLP_asimdmisc_p,
    /// <summary>
    /// Instruction UADDLT - Unsigned add long (top).
    /// </summary>
    UADDLT_z_zz,
    /// <summary>
    /// Instruction UADDLV - Unsigned sum long across vector.
    /// </summary>
    UADDLV_asimdall_only,
    /// <summary>
    /// Instruction UADDL - Unsigned add long (vector).
    /// </summary>
    UADDL_asimddiff_l,
    /// <summary>
    /// Instruction UADDV - Unsigned add reduction to scalar.
    /// </summary>
    UADDV_r_p_z,
    /// <summary>
    /// Instruction UADDWB - Unsigned add wide (bottom).
    /// </summary>
    UADDWB_z_zz,
    /// <summary>
    /// Instruction UADDWT - Unsigned add wide (top).
    /// </summary>
    UADDWT_z_zz,
    /// <summary>
    /// Instruction UADDW - Unsigned add wide.
    /// </summary>
    UADDW_asimddiff_w,
    /// <summary>
    /// Instruction UBFM - Unsigned bitfield move.
    /// </summary>
    UBFM_32m_bitfield,
    /// <summary>
    /// Instruction UBFM - Unsigned bitfield move.
    /// </summary>
    UBFM_64m_bitfield,
    /// <summary>
    /// Instruction UCLAMP - Multi-vector unsigned clamp to minimum/maximum vector.
    /// </summary>
    UCLAMP_mz_zz_2,
    /// <summary>
    /// Instruction UCLAMP - Multi-vector unsigned clamp to minimum/maximum vector.
    /// </summary>
    UCLAMP_mz_zz_4,
    /// <summary>
    /// Instruction UCLAMP - Unsigned clamp to minimum/maximum vector.
    /// </summary>
    UCLAMP_z_zz,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (vector).
    /// </summary>
    UCVTF_asimdmisc_r,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (vector).
    /// </summary>
    UCVTF_asimdmiscfp16_r,
    /// <summary>
    /// Instruction UCVTF - Unsigned fixed-point convert to floating-point (vector).
    /// </summary>
    UCVTF_asimdshf_c,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (vector).
    /// </summary>
    UCVTF_asisdmisc_r,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (vector).
    /// </summary>
    UCVTF_asisdmiscfp16_r,
    /// <summary>
    /// Instruction UCVTF - Unsigned fixed-point convert to floating-point (vector).
    /// </summary>
    UCVTF_asisdshf_c,
    /// <summary>
    /// Instruction UCVTF - Unsigned fixed-point convert to floating-point (scalar).
    /// </summary>
    UCVTF_d32_float2fix,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (scalar).
    /// </summary>
    UCVTF_d32_float2int,
    /// <summary>
    /// Instruction UCVTF - Unsigned fixed-point convert to floating-point (scalar).
    /// </summary>
    UCVTF_d64_float2fix,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (scalar).
    /// </summary>
    UCVTF_d64_float2int,
    /// <summary>
    /// Instruction UCVTF - Unsigned fixed-point convert to floating-point (scalar).
    /// </summary>
    UCVTF_h32_float2fix,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (scalar).
    /// </summary>
    UCVTF_h32_float2int,
    /// <summary>
    /// Instruction UCVTF - Unsigned fixed-point convert to floating-point (scalar).
    /// </summary>
    UCVTF_h64_float2fix,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (scalar).
    /// </summary>
    UCVTF_h64_float2int,
    /// <summary>
    /// Instruction UCVTF - Multi-vector unsigned integer convert to floating-point.
    /// </summary>
    UCVTF_mz_z_2,
    /// <summary>
    /// Instruction UCVTF - Multi-vector unsigned integer convert to floating-point.
    /// </summary>
    UCVTF_mz_z_4,
    /// <summary>
    /// Instruction UCVTF - Unsigned fixed-point convert to floating-point (scalar).
    /// </summary>
    UCVTF_s32_float2fix,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (scalar).
    /// </summary>
    UCVTF_s32_float2int,
    /// <summary>
    /// Instruction UCVTF - Unsigned fixed-point convert to floating-point (scalar).
    /// </summary>
    UCVTF_s64_float2fix,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (scalar).
    /// </summary>
    UCVTF_s64_float2int,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (scalar SIMD&FP).
    /// </summary>
    UCVTF_sisd_32d,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (scalar SIMD&FP).
    /// </summary>
    UCVTF_sisd_32h,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (scalar SIMD&FP).
    /// </summary>
    UCVTF_sisd_64h,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (scalar SIMD&FP).
    /// </summary>
    UCVTF_sisd_64s,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (predicated).
    /// </summary>
    UCVTF_z_p_z_h2fp16,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (predicated).
    /// </summary>
    UCVTF_z_p_z_h2fp16z,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (predicated).
    /// </summary>
    UCVTF_z_p_z_w2d,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (predicated).
    /// </summary>
    UCVTF_z_p_z_w2dz,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (predicated).
    /// </summary>
    UCVTF_z_p_z_w2fp16,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (predicated).
    /// </summary>
    UCVTF_z_p_z_w2fp16z,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (predicated).
    /// </summary>
    UCVTF_z_p_z_w2s,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (predicated).
    /// </summary>
    UCVTF_z_p_z_w2sz,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (predicated).
    /// </summary>
    UCVTF_z_p_z_x2d,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (predicated).
    /// </summary>
    UCVTF_z_p_z_x2dz,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (predicated).
    /// </summary>
    UCVTF_z_p_z_x2fp16,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (predicated).
    /// </summary>
    UCVTF_z_p_z_x2fp16z,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (predicated).
    /// </summary>
    UCVTF_z_p_z_x2s,
    /// <summary>
    /// Instruction UCVTF - Unsigned integer convert to floating-point (predicated).
    /// </summary>
    UCVTF_z_p_z_x2sz,
    /// <summary>
    /// Instruction UDF - Permanently undefined.
    /// </summary>
    UDF_only_perm_undef,
    /// <summary>
    /// Instruction UDIVR - Unsigned reversed divide (predicated).
    /// </summary>
    UDIVR_z_p_zz,
    /// <summary>
    /// Instruction UDIV - Unsigned divide.
    /// </summary>
    UDIV_32_dp_2src,
    /// <summary>
    /// Instruction UDIV - Unsigned divide.
    /// </summary>
    UDIV_64_dp_2src,
    /// <summary>
    /// Instruction UDIV - Unsigned divide (predicated).
    /// </summary>
    UDIV_z_p_zz,
    /// <summary>
    /// Instruction UDOT - Dot product unsigned arithmetic (vector, by element).
    /// </summary>
    UDOT_asimdelem_d,
    /// <summary>
    /// Instruction UDOT - Dot product unsigned arithmetic (vector).
    /// </summary>
    UDOT_asimdsame2_d,
    /// <summary>
    /// Instruction UDOT - Unsigned integer dot product.
    /// </summary>
    UDOT_z32_zzz,
    /// <summary>
    /// Instruction UDOT - Unsigned integer indexed dot product.
    /// </summary>
    UDOT_z32_zzzi,
    /// <summary>
    /// Instruction UDOT - Unsigned integer dot product.
    /// </summary>
    UDOT_z_zzz,
    /// <summary>
    /// Instruction UDOT - Unsigned integer indexed dot product.
    /// </summary>
    UDOT_z_zzzi_d,
    /// <summary>
    /// Instruction UDOT - Unsigned integer indexed dot product.
    /// </summary>
    UDOT_z_zzzi_s,
    /// <summary>
    /// Instruction UDOT - Multi-vector unsigned integer dot-product by indexed element.
    /// </summary>
    UDOT_za32_zzi_2xi,
    /// <summary>
    /// Instruction UDOT - Multi-vector unsigned integer dot-product by indexed element.
    /// </summary>
    UDOT_za32_zzi_4xi,
    /// <summary>
    /// Instruction UDOT - Multi-vector unsigned integer dot-product by vector.
    /// </summary>
    UDOT_za32_zzv_2x1,
    /// <summary>
    /// Instruction UDOT - Multi-vector unsigned integer dot-product by vector.
    /// </summary>
    UDOT_za32_zzv_4x1,
    /// <summary>
    /// Instruction UDOT - Multi-vector unsigned integer dot-product.
    /// </summary>
    UDOT_za32_zzw_2x2,
    /// <summary>
    /// Instruction UDOT - Multi-vector unsigned integer dot-product.
    /// </summary>
    UDOT_za32_zzw_4x4,
    /// <summary>
    /// Instruction UDOT - Multi-vector unsigned integer dot-product by indexed element.
    /// </summary>
    UDOT_za_zzi_d2xi,
    /// <summary>
    /// Instruction UDOT - Multi-vector unsigned integer dot-product by indexed element.
    /// </summary>
    UDOT_za_zzi_d4xi,
    /// <summary>
    /// Instruction UDOT - Multi-vector unsigned integer dot-product by indexed element.
    /// </summary>
    UDOT_za_zzi_s2xi,
    /// <summary>
    /// Instruction UDOT - Multi-vector unsigned integer dot-product by indexed element.
    /// </summary>
    UDOT_za_zzi_s4xi,
    /// <summary>
    /// Instruction UDOT - Multi-vector unsigned integer dot-product by vector.
    /// </summary>
    UDOT_za_zzv_2x1,
    /// <summary>
    /// Instruction UDOT - Multi-vector unsigned integer dot-product by vector.
    /// </summary>
    UDOT_za_zzv_4x1,
    /// <summary>
    /// Instruction UDOT - Multi-vector unsigned integer dot-product.
    /// </summary>
    UDOT_za_zzw_2x2,
    /// <summary>
    /// Instruction UDOT - Multi-vector unsigned integer dot-product.
    /// </summary>
    UDOT_za_zzw_4x4,
    /// <summary>
    /// Instruction UHADD - Unsigned halving add.
    /// </summary>
    UHADD_asimdsame_only,
    /// <summary>
    /// Instruction UHADD - Unsigned halving addition.
    /// </summary>
    UHADD_z_p_zz,
    /// <summary>
    /// Instruction UHSUBR - Unsigned halving subtract reversed vectors.
    /// </summary>
    UHSUBR_z_p_zz,
    /// <summary>
    /// Instruction UHSUB - Unsigned halving subtract.
    /// </summary>
    UHSUB_asimdsame_only,
    /// <summary>
    /// Instruction UHSUB - Unsigned halving subtract.
    /// </summary>
    UHSUB_z_p_zz,
    /// <summary>
    /// Instruction UMADDL - Unsigned multiply-add long.
    /// </summary>
    UMADDL_64wa_dp_3src,
    /// <summary>
    /// Instruction UMAXP - Unsigned maximum pairwise.
    /// </summary>
    UMAXP_asimdsame_only,
    /// <summary>
    /// Instruction UMAXP - Unsigned maximum pairwise.
    /// </summary>
    UMAXP_z_p_zz,
    /// <summary>
    /// Instruction UMAXQV - Unsigned maximum reduction of quadword vector segments.
    /// </summary>
    UMAXQV_z_p_z,
    /// <summary>
    /// Instruction UMAXV - Unsigned maximum across vector.
    /// </summary>
    UMAXV_asimdall_only,
    /// <summary>
    /// Instruction UMAXV - Unsigned maximum reduction to scalar.
    /// </summary>
    UMAXV_r_p_z,
    /// <summary>
    /// Instruction UMAX - Unsigned maximum (register).
    /// </summary>
    UMAX_32_dp_2src,
    /// <summary>
    /// Instruction UMAX - Unsigned maximum (immediate).
    /// </summary>
    UMAX_32u_minmax_imm,
    /// <summary>
    /// Instruction UMAX - Unsigned maximum (register).
    /// </summary>
    UMAX_64_dp_2src,
    /// <summary>
    /// Instruction UMAX - Unsigned maximum (immediate).
    /// </summary>
    UMAX_64u_minmax_imm,
    /// <summary>
    /// Instruction UMAX - Unsigned maximum (vector).
    /// </summary>
    UMAX_asimdsame_only,
    /// <summary>
    /// Instruction UMAX - Multi-vector unsigned maximum by vector.
    /// </summary>
    UMAX_mz_zzv_2x1,
    /// <summary>
    /// Instruction UMAX - Multi-vector unsigned maximum by vector.
    /// </summary>
    UMAX_mz_zzv_4x1,
    /// <summary>
    /// Instruction UMAX - Multi-vector unsigned maximum.
    /// </summary>
    UMAX_mz_zzw_2x2,
    /// <summary>
    /// Instruction UMAX - Multi-vector unsigned maximum.
    /// </summary>
    UMAX_mz_zzw_4x4,
    /// <summary>
    /// Instruction UMAX - Unsigned maximum vectors (predicated).
    /// </summary>
    UMAX_z_p_zz,
    /// <summary>
    /// Instruction UMAX - Unsigned maximum with immediate (unpredicated).
    /// </summary>
    UMAX_z_zi,
    /// <summary>
    /// Instruction UMINP - Unsigned minimum pairwise.
    /// </summary>
    UMINP_asimdsame_only,
    /// <summary>
    /// Instruction UMINP - Unsigned minimum pairwise.
    /// </summary>
    UMINP_z_p_zz,
    /// <summary>
    /// Instruction UMINQV - Unsigned minimum reduction of quadword vector segments.
    /// </summary>
    UMINQV_z_p_z,
    /// <summary>
    /// Instruction UMINV - Unsigned minimum across vector.
    /// </summary>
    UMINV_asimdall_only,
    /// <summary>
    /// Instruction UMINV - Unsigned minimum reduction to scalar.
    /// </summary>
    UMINV_r_p_z,
    /// <summary>
    /// Instruction UMIN - Unsigned minimum (register).
    /// </summary>
    UMIN_32_dp_2src,
    /// <summary>
    /// Instruction UMIN - Unsigned minimum (immediate).
    /// </summary>
    UMIN_32u_minmax_imm,
    /// <summary>
    /// Instruction UMIN - Unsigned minimum (register).
    /// </summary>
    UMIN_64_dp_2src,
    /// <summary>
    /// Instruction UMIN - Unsigned minimum (immediate).
    /// </summary>
    UMIN_64u_minmax_imm,
    /// <summary>
    /// Instruction UMIN - Unsigned minimum (vector).
    /// </summary>
    UMIN_asimdsame_only,
    /// <summary>
    /// Instruction UMIN - Multi-vector unsigned minimum by vector.
    /// </summary>
    UMIN_mz_zzv_2x1,
    /// <summary>
    /// Instruction UMIN - Multi-vector unsigned minimum by vector.
    /// </summary>
    UMIN_mz_zzv_4x1,
    /// <summary>
    /// Instruction UMIN - Multi-vector unsigned minimum.
    /// </summary>
    UMIN_mz_zzw_2x2,
    /// <summary>
    /// Instruction UMIN - Multi-vector unsigned minimum.
    /// </summary>
    UMIN_mz_zzw_4x4,
    /// <summary>
    /// Instruction UMIN - Unsigned minimum vectors (predicated).
    /// </summary>
    UMIN_z_p_zz,
    /// <summary>
    /// Instruction UMIN - Unsigned minimum with immediate (unpredicated).
    /// </summary>
    UMIN_z_zi,
    /// <summary>
    /// Instruction UMLALB - Unsigned multiply-add long to accumulator (bottom).
    /// </summary>
    UMLALB_z_zzz,
    /// <summary>
    /// Instruction UMLALB - Unsigned multiply-add long to accumulator (bottom, indexed).
    /// </summary>
    UMLALB_z_zzzi_d,
    /// <summary>
    /// Instruction UMLALB - Unsigned multiply-add long to accumulator (bottom, indexed).
    /// </summary>
    UMLALB_z_zzzi_s,
    /// <summary>
    /// Instruction UMLALL - Multi-vector unsigned integer multiply-add long-long by indexed element.
    /// </summary>
    UMLALL_za_zzi_d,
    /// <summary>
    /// Instruction UMLALL - Multi-vector unsigned integer multiply-add long-long by indexed element.
    /// </summary>
    UMLALL_za_zzi_d2xi,
    /// <summary>
    /// Instruction UMLALL - Multi-vector unsigned integer multiply-add long-long by indexed element.
    /// </summary>
    UMLALL_za_zzi_d4xi,
    /// <summary>
    /// Instruction UMLALL - Multi-vector unsigned integer multiply-add long-long by indexed element.
    /// </summary>
    UMLALL_za_zzi_s,
    /// <summary>
    /// Instruction UMLALL - Multi-vector unsigned integer multiply-add long-long by indexed element.
    /// </summary>
    UMLALL_za_zzi_s2xi,
    /// <summary>
    /// Instruction UMLALL - Multi-vector unsigned integer multiply-add long-long by indexed element.
    /// </summary>
    UMLALL_za_zzi_s4xi,
    /// <summary>
    /// Instruction UMLALL - Multi-vector unsigned integer multiply-add long-long by vector.
    /// </summary>
    UMLALL_za_zzv_1,
    /// <summary>
    /// Instruction UMLALL - Multi-vector unsigned integer multiply-add long-long by vector.
    /// </summary>
    UMLALL_za_zzv_2x1,
    /// <summary>
    /// Instruction UMLALL - Multi-vector unsigned integer multiply-add long-long by vector.
    /// </summary>
    UMLALL_za_zzv_4x1,
    /// <summary>
    /// Instruction UMLALL - Multi-vector unsigned integer multiply-add long-long.
    /// </summary>
    UMLALL_za_zzw_2x2,
    /// <summary>
    /// Instruction UMLALL - Multi-vector unsigned integer multiply-add long-long.
    /// </summary>
    UMLALL_za_zzw_4x4,
    /// <summary>
    /// Instruction UMLALT - Unsigned multiply-add long to accumulator (top).
    /// </summary>
    UMLALT_z_zzz,
    /// <summary>
    /// Instruction UMLALT - Unsigned multiply-add long to accumulator (top, indexed).
    /// </summary>
    UMLALT_z_zzzi_d,
    /// <summary>
    /// Instruction UMLALT - Unsigned multiply-add long to accumulator (top, indexed).
    /// </summary>
    UMLALT_z_zzzi_s,
    /// <summary>
    /// Instruction UMLAL - Unsigned multiply-add long (vector).
    /// </summary>
    UMLAL_asimddiff_l,
    /// <summary>
    /// Instruction UMLAL - Unsigned multiply-add long (vector, by element).
    /// </summary>
    UMLAL_asimdelem_l,
    /// <summary>
    /// Instruction UMLAL - Multi-vector unsigned integer multiply-add long by indexed element.
    /// </summary>
    UMLAL_za_zzi_1,
    /// <summary>
    /// Instruction UMLAL - Multi-vector unsigned integer multiply-add long by indexed element.
    /// </summary>
    UMLAL_za_zzi_2xi,
    /// <summary>
    /// Instruction UMLAL - Multi-vector unsigned integer multiply-add long by indexed element.
    /// </summary>
    UMLAL_za_zzi_4xi,
    /// <summary>
    /// Instruction UMLAL - Multi-vector unsigned integer multiply-add long by vector.
    /// </summary>
    UMLAL_za_zzv_1,
    /// <summary>
    /// Instruction UMLAL - Multi-vector unsigned integer multiply-add long by vector.
    /// </summary>
    UMLAL_za_zzv_2x1,
    /// <summary>
    /// Instruction UMLAL - Multi-vector unsigned integer multiply-add long by vector.
    /// </summary>
    UMLAL_za_zzv_4x1,
    /// <summary>
    /// Instruction UMLAL - Multi-vector unsigned integer multiply-add long.
    /// </summary>
    UMLAL_za_zzw_2x2,
    /// <summary>
    /// Instruction UMLAL - Multi-vector unsigned integer multiply-add long.
    /// </summary>
    UMLAL_za_zzw_4x4,
    /// <summary>
    /// Instruction UMLSLB - Unsigned multiply-subtract long from accumulator (bottom).
    /// </summary>
    UMLSLB_z_zzz,
    /// <summary>
    /// Instruction UMLSLB - Unsigned multiply-subtract long from accumulator (bottom, indexed).
    /// </summary>
    UMLSLB_z_zzzi_d,
    /// <summary>
    /// Instruction UMLSLB - Unsigned multiply-subtract long from accumulator (bottom, indexed).
    /// </summary>
    UMLSLB_z_zzzi_s,
    /// <summary>
    /// Instruction UMLSLL - Multi-vector unsigned integer multiply-subtract long-long by indexed element.
    /// </summary>
    UMLSLL_za_zzi_d,
    /// <summary>
    /// Instruction UMLSLL - Multi-vector unsigned integer multiply-subtract long-long by indexed element.
    /// </summary>
    UMLSLL_za_zzi_d2xi,
    /// <summary>
    /// Instruction UMLSLL - Multi-vector unsigned integer multiply-subtract long-long by indexed element.
    /// </summary>
    UMLSLL_za_zzi_d4xi,
    /// <summary>
    /// Instruction UMLSLL - Multi-vector unsigned integer multiply-subtract long-long by indexed element.
    /// </summary>
    UMLSLL_za_zzi_s,
    /// <summary>
    /// Instruction UMLSLL - Multi-vector unsigned integer multiply-subtract long-long by indexed element.
    /// </summary>
    UMLSLL_za_zzi_s2xi,
    /// <summary>
    /// Instruction UMLSLL - Multi-vector unsigned integer multiply-subtract long-long by indexed element.
    /// </summary>
    UMLSLL_za_zzi_s4xi,
    /// <summary>
    /// Instruction UMLSLL - Multi-vector unsigned integer multiply-subtract long-long by vector.
    /// </summary>
    UMLSLL_za_zzv_1,
    /// <summary>
    /// Instruction UMLSLL - Multi-vector unsigned integer multiply-subtract long-long by vector.
    /// </summary>
    UMLSLL_za_zzv_2x1,
    /// <summary>
    /// Instruction UMLSLL - Multi-vector unsigned integer multiply-subtract long-long by vector.
    /// </summary>
    UMLSLL_za_zzv_4x1,
    /// <summary>
    /// Instruction UMLSLL - Multi-vector unsigned integer multiply-subtract long-long.
    /// </summary>
    UMLSLL_za_zzw_2x2,
    /// <summary>
    /// Instruction UMLSLL - Multi-vector unsigned integer multiply-subtract long-long.
    /// </summary>
    UMLSLL_za_zzw_4x4,
    /// <summary>
    /// Instruction UMLSLT - Unsigned multiply-subtract long from accumulator (top).
    /// </summary>
    UMLSLT_z_zzz,
    /// <summary>
    /// Instruction UMLSLT - Unsigned multiply-subtract long from accumulator (top, indexed).
    /// </summary>
    UMLSLT_z_zzzi_d,
    /// <summary>
    /// Instruction UMLSLT - Unsigned multiply-subtract long from accumulator (top, indexed).
    /// </summary>
    UMLSLT_z_zzzi_s,
    /// <summary>
    /// Instruction UMLSL - Unsigned multiply-subtract long (vector).
    /// </summary>
    UMLSL_asimddiff_l,
    /// <summary>
    /// Instruction UMLSL - Unsigned multiply-subtract long (vector, by element).
    /// </summary>
    UMLSL_asimdelem_l,
    /// <summary>
    /// Instruction UMLSL - Multi-vector unsigned integer multiply-subtract long by indexed element.
    /// </summary>
    UMLSL_za_zzi_1,
    /// <summary>
    /// Instruction UMLSL - Multi-vector unsigned integer multiply-subtract long by indexed element.
    /// </summary>
    UMLSL_za_zzi_2xi,
    /// <summary>
    /// Instruction UMLSL - Multi-vector unsigned integer multiply-subtract long by indexed element.
    /// </summary>
    UMLSL_za_zzi_4xi,
    /// <summary>
    /// Instruction UMLSL - Multi-vector unsigned integer multiply-subtract long by vector.
    /// </summary>
    UMLSL_za_zzv_1,
    /// <summary>
    /// Instruction UMLSL - Multi-vector unsigned integer multiply-subtract long by vector.
    /// </summary>
    UMLSL_za_zzv_2x1,
    /// <summary>
    /// Instruction UMLSL - Multi-vector unsigned integer multiply-subtract long by vector.
    /// </summary>
    UMLSL_za_zzv_4x1,
    /// <summary>
    /// Instruction UMLSL - Multi-vector unsigned integer multiply-subtract long.
    /// </summary>
    UMLSL_za_zzw_2x2,
    /// <summary>
    /// Instruction UMLSL - Multi-vector unsigned integer multiply-subtract long.
    /// </summary>
    UMLSL_za_zzw_4x4,
    /// <summary>
    /// Instruction UMMLA - Unsigned 8-bit integer matrix multiply-accumulate (vector).
    /// </summary>
    UMMLA_asimdsame2_g,
    /// <summary>
    /// Instruction UMMLA - Unsigned integer matrix multiply-accumulate.
    /// </summary>
    UMMLA_z_zzz,
    /// <summary>
    /// Instruction UMOP4A - Unsigned integer quarter-tile sums of two outer products, accumulating.
    /// </summary>
    UMOP4A_za32_zz_h1x1,
    /// <summary>
    /// Instruction UMOP4A - Unsigned integer quarter-tile sums of two outer products, accumulating.
    /// </summary>
    UMOP4A_za32_zz_h1x2,
    /// <summary>
    /// Instruction UMOP4A - Unsigned integer quarter-tile sums of two outer products, accumulating.
    /// </summary>
    UMOP4A_za32_zz_h2x1,
    /// <summary>
    /// Instruction UMOP4A - Unsigned integer quarter-tile sums of two outer products, accumulating.
    /// </summary>
    UMOP4A_za32_zz_h2x2,
    /// <summary>
    /// Instruction UMOP4A - Unsigned integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    UMOP4A_za_zz_b1x1,
    /// <summary>
    /// Instruction UMOP4A - Unsigned integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    UMOP4A_za_zz_b1x2,
    /// <summary>
    /// Instruction UMOP4A - Unsigned integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    UMOP4A_za_zz_b2x1,
    /// <summary>
    /// Instruction UMOP4A - Unsigned integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    UMOP4A_za_zz_b2x2,
    /// <summary>
    /// Instruction UMOP4A - Unsigned integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    UMOP4A_za_zz_h1x1,
    /// <summary>
    /// Instruction UMOP4A - Unsigned integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    UMOP4A_za_zz_h1x2,
    /// <summary>
    /// Instruction UMOP4A - Unsigned integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    UMOP4A_za_zz_h2x1,
    /// <summary>
    /// Instruction UMOP4A - Unsigned integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    UMOP4A_za_zz_h2x2,
    /// <summary>
    /// Instruction UMOP4S - Unsigned integer quarter-tile sums of two outer products, subtracting.
    /// </summary>
    UMOP4S_za32_zz_h1x1,
    /// <summary>
    /// Instruction UMOP4S - Unsigned integer quarter-tile sums of two outer products, subtracting.
    /// </summary>
    UMOP4S_za32_zz_h1x2,
    /// <summary>
    /// Instruction UMOP4S - Unsigned integer quarter-tile sums of two outer products, subtracting.
    /// </summary>
    UMOP4S_za32_zz_h2x1,
    /// <summary>
    /// Instruction UMOP4S - Unsigned integer quarter-tile sums of two outer products, subtracting.
    /// </summary>
    UMOP4S_za32_zz_h2x2,
    /// <summary>
    /// Instruction UMOP4S - Unsigned integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    UMOP4S_za_zz_b1x1,
    /// <summary>
    /// Instruction UMOP4S - Unsigned integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    UMOP4S_za_zz_b1x2,
    /// <summary>
    /// Instruction UMOP4S - Unsigned integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    UMOP4S_za_zz_b2x1,
    /// <summary>
    /// Instruction UMOP4S - Unsigned integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    UMOP4S_za_zz_b2x2,
    /// <summary>
    /// Instruction UMOP4S - Unsigned integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    UMOP4S_za_zz_h1x1,
    /// <summary>
    /// Instruction UMOP4S - Unsigned integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    UMOP4S_za_zz_h1x2,
    /// <summary>
    /// Instruction UMOP4S - Unsigned integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    UMOP4S_za_zz_h2x1,
    /// <summary>
    /// Instruction UMOP4S - Unsigned integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    UMOP4S_za_zz_h2x2,
    /// <summary>
    /// Instruction UMOPA - Unsigned integer sum of outer products and accumulate.
    /// </summary>
    UMOPA_za32_pp_zz_16,
    /// <summary>
    /// Instruction UMOPA - Unsigned integer sum of outer products and accumulate.
    /// </summary>
    UMOPA_za_pp_zz_32,
    /// <summary>
    /// Instruction UMOPA - Unsigned integer sum of outer products and accumulate.
    /// </summary>
    UMOPA_za_pp_zz_64,
    /// <summary>
    /// Instruction UMOPS - Unsigned integer sum of outer products and subtract.
    /// </summary>
    UMOPS_za32_pp_zz_16,
    /// <summary>
    /// Instruction UMOPS - Unsigned integer sum of outer products and subtract.
    /// </summary>
    UMOPS_za_pp_zz_32,
    /// <summary>
    /// Instruction UMOPS - Unsigned integer sum of outer products and subtract.
    /// </summary>
    UMOPS_za_pp_zz_64,
    /// <summary>
    /// Instruction UMOV - Unsigned move vector element to general-purpose register.
    /// </summary>
    UMOV_asimdins_w_w,
    /// <summary>
    /// Instruction UMOV - Unsigned move vector element to general-purpose register.
    /// </summary>
    UMOV_asimdins_x_x,
    /// <summary>
    /// Instruction UMSUBL - Unsigned multiply-subtract long.
    /// </summary>
    UMSUBL_64wa_dp_3src,
    /// <summary>
    /// Instruction UMULH - Unsigned multiply high.
    /// </summary>
    UMULH_64_dp_3src,
    /// <summary>
    /// Instruction UMULH - Unsigned multiply returning high half (predicated).
    /// </summary>
    UMULH_z_p_zz,
    /// <summary>
    /// Instruction UMULH - Unsigned multiply returning high half (unpredicated).
    /// </summary>
    UMULH_z_zz,
    /// <summary>
    /// Instruction UMULLB - Unsigned multiply long (bottom).
    /// </summary>
    UMULLB_z_zz,
    /// <summary>
    /// Instruction UMULLB - Unsigned multiply long (bottom, indexed).
    /// </summary>
    UMULLB_z_zzi_d,
    /// <summary>
    /// Instruction UMULLB - Unsigned multiply long (bottom, indexed).
    /// </summary>
    UMULLB_z_zzi_s,
    /// <summary>
    /// Instruction UMULLT - Unsigned multiply long (top).
    /// </summary>
    UMULLT_z_zz,
    /// <summary>
    /// Instruction UMULLT - Unsigned multiply long (top, indexed).
    /// </summary>
    UMULLT_z_zzi_d,
    /// <summary>
    /// Instruction UMULLT - Unsigned multiply long (top, indexed).
    /// </summary>
    UMULLT_z_zzi_s,
    /// <summary>
    /// Instruction UMULL - Unsigned multiply long (vector).
    /// </summary>
    UMULL_asimddiff_l,
    /// <summary>
    /// Instruction UMULL - Unsigned multiply long (vector, by element).
    /// </summary>
    UMULL_asimdelem_l,
    /// <summary>
    /// Instruction UQADD - Unsigned saturating add.
    /// </summary>
    UQADD_asimdsame_only,
    /// <summary>
    /// Instruction UQADD - Unsigned saturating add.
    /// </summary>
    UQADD_asisdsame_only,
    /// <summary>
    /// Instruction UQADD - Unsigned saturating addition (predicated).
    /// </summary>
    UQADD_z_p_zz,
    /// <summary>
    /// Instruction UQADD - Unsigned saturating add immediate (unpredicated).
    /// </summary>
    UQADD_z_zi,
    /// <summary>
    /// Instruction UQADD - Unsigned saturating add vectors (unpredicated).
    /// </summary>
    UQADD_z_zz,
    /// <summary>
    /// Instruction UQCVTN - Unsigned saturating extract narrow and interleave.
    /// </summary>
    UQCVTN_z_mz2,
    /// <summary>
    /// Instruction UQCVTN - Multi-vector unsigned saturating extract narrow and interleave.
    /// </summary>
    UQCVTN_z_mz4,
    /// <summary>
    /// Instruction UQCVT - Multi-vector unsigned saturating extract narrow.
    /// </summary>
    UQCVT_z_mz2,
    /// <summary>
    /// Instruction UQCVT - Multi-vector unsigned saturating extract narrow.
    /// </summary>
    UQCVT_z_mz4,
    /// <summary>
    /// Instruction UQDECB - Unsigned saturating decrement scalar by multiple of 8-bit predicate constraint element count.
    /// </summary>
    UQDECB_r_rs_uw,
    /// <summary>
    /// Instruction UQDECB - Unsigned saturating decrement scalar by multiple of 8-bit predicate constraint element count.
    /// </summary>
    UQDECB_r_rs_x,
    /// <summary>
    /// Instruction UQDECD - Unsigned saturating decrement scalar by multiple of 64-bit predicate constraint element count.
    /// </summary>
    UQDECD_r_rs_uw,
    /// <summary>
    /// Instruction UQDECD - Unsigned saturating decrement scalar by multiple of 64-bit predicate constraint element count.
    /// </summary>
    UQDECD_r_rs_x,
    /// <summary>
    /// Instruction UQDECD - Unsigned saturating decrement vector by multiple of 64-bit predicate constraint element count.
    /// </summary>
    UQDECD_z_zs,
    /// <summary>
    /// Instruction UQDECH - Unsigned saturating decrement scalar by multiple of 16-bit predicate constraint element count.
    /// </summary>
    UQDECH_r_rs_uw,
    /// <summary>
    /// Instruction UQDECH - Unsigned saturating decrement scalar by multiple of 16-bit predicate constraint element count.
    /// </summary>
    UQDECH_r_rs_x,
    /// <summary>
    /// Instruction UQDECH - Unsigned saturating decrement vector by multiple of 16-bit predicate constraint element count.
    /// </summary>
    UQDECH_z_zs,
    /// <summary>
    /// Instruction UQDECP - Unsigned saturating decrement scalar by count of true predicate elements.
    /// </summary>
    UQDECP_r_p_r_uw,
    /// <summary>
    /// Instruction UQDECP - Unsigned saturating decrement scalar by count of true predicate elements.
    /// </summary>
    UQDECP_r_p_r_x,
    /// <summary>
    /// Instruction UQDECP - Unsigned saturating decrement vector by count of true predicate elements.
    /// </summary>
    UQDECP_z_p_z,
    /// <summary>
    /// Instruction UQDECW - Unsigned saturating decrement scalar by multiple of 32-bit predicate constraint element count.
    /// </summary>
    UQDECW_r_rs_uw,
    /// <summary>
    /// Instruction UQDECW - Unsigned saturating decrement scalar by multiple of 32-bit predicate constraint element count.
    /// </summary>
    UQDECW_r_rs_x,
    /// <summary>
    /// Instruction UQDECW - Unsigned saturating decrement vector by multiple of 32-bit predicate constraint element count.
    /// </summary>
    UQDECW_z_zs,
    /// <summary>
    /// Instruction UQINCB - Unsigned saturating increment scalar by multiple of 8-bit predicate constraint element count.
    /// </summary>
    UQINCB_r_rs_uw,
    /// <summary>
    /// Instruction UQINCB - Unsigned saturating increment scalar by multiple of 8-bit predicate constraint element count.
    /// </summary>
    UQINCB_r_rs_x,
    /// <summary>
    /// Instruction UQINCD - Unsigned saturating increment scalar by multiple of 64-bit predicate constraint element count.
    /// </summary>
    UQINCD_r_rs_uw,
    /// <summary>
    /// Instruction UQINCD - Unsigned saturating increment scalar by multiple of 64-bit predicate constraint element count.
    /// </summary>
    UQINCD_r_rs_x,
    /// <summary>
    /// Instruction UQINCD - Unsigned saturating increment vector by multiple of 64-bit predicate constraint element count.
    /// </summary>
    UQINCD_z_zs,
    /// <summary>
    /// Instruction UQINCH - Unsigned saturating increment scalar by multiple of 16-bit predicate constraint element count.
    /// </summary>
    UQINCH_r_rs_uw,
    /// <summary>
    /// Instruction UQINCH - Unsigned saturating increment scalar by multiple of 16-bit predicate constraint element count.
    /// </summary>
    UQINCH_r_rs_x,
    /// <summary>
    /// Instruction UQINCH - Unsigned saturating increment vector by multiple of 16-bit predicate constraint element count.
    /// </summary>
    UQINCH_z_zs,
    /// <summary>
    /// Instruction UQINCP - Unsigned saturating increment scalar by count of true predicate elements.
    /// </summary>
    UQINCP_r_p_r_uw,
    /// <summary>
    /// Instruction UQINCP - Unsigned saturating increment scalar by count of true predicate elements.
    /// </summary>
    UQINCP_r_p_r_x,
    /// <summary>
    /// Instruction UQINCP - Unsigned saturating increment vector by count of true predicate elements.
    /// </summary>
    UQINCP_z_p_z,
    /// <summary>
    /// Instruction UQINCW - Unsigned saturating increment scalar by multiple of 32-bit predicate constraint element count.
    /// </summary>
    UQINCW_r_rs_uw,
    /// <summary>
    /// Instruction UQINCW - Unsigned saturating increment scalar by multiple of 32-bit predicate constraint element count.
    /// </summary>
    UQINCW_r_rs_x,
    /// <summary>
    /// Instruction UQINCW - Unsigned saturating increment vector by multiple of 32-bit predicate constraint element count.
    /// </summary>
    UQINCW_z_zs,
    /// <summary>
    /// Instruction UQRSHLR - Unsigned saturating rounding shift left reversed vectors (predicated).
    /// </summary>
    UQRSHLR_z_p_zz,
    /// <summary>
    /// Instruction UQRSHL - Unsigned saturating rounding shift left (register).
    /// </summary>
    UQRSHL_asimdsame_only,
    /// <summary>
    /// Instruction UQRSHL - Unsigned saturating rounding shift left (register).
    /// </summary>
    UQRSHL_asisdsame_only,
    /// <summary>
    /// Instruction UQRSHL - Unsigned saturating rounding shift left by vector (predicated).
    /// </summary>
    UQRSHL_z_p_zz,
    /// <summary>
    /// Instruction UQRSHRNB - Unsigned saturating rounding shift right narrow by immediate (bottom).
    /// </summary>
    UQRSHRNB_z_zi,
    /// <summary>
    /// Instruction UQRSHRNT - Unsigned saturating rounding shift right narrow by immediate (top).
    /// </summary>
    UQRSHRNT_z_zi,
    /// <summary>
    /// Instruction UQRSHRN - Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    UQRSHRN_asimdshf_n,
    /// <summary>
    /// Instruction UQRSHRN - Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    UQRSHRN_asisdshf_n,
    /// <summary>
    /// Instruction UQRSHRN - Unsigned saturating rounding shift right narrow by immediate and interleave.
    /// </summary>
    UQRSHRN_z_mz2,
    /// <summary>
    /// Instruction UQRSHRN - Multi-vector unsigned saturating rounding shift right narrow by immediate and interleave.
    /// </summary>
    UQRSHRN_z_mz4,
    /// <summary>
    /// Instruction UQRSHR - Multi-vector unsigned saturating rounding shift right narrow by immediate.
    /// </summary>
    UQRSHR_z_mz2,
    /// <summary>
    /// Instruction UQRSHR - Multi-vector unsigned saturating rounding shift right narrow by immediate.
    /// </summary>
    UQRSHR_z_mz4,
    /// <summary>
    /// Instruction UQSHLR - Unsigned saturating shift left reversed vectors (predicated).
    /// </summary>
    UQSHLR_z_p_zz,
    /// <summary>
    /// Instruction UQSHL - Unsigned saturating shift left (register).
    /// </summary>
    UQSHL_asimdsame_only,
    /// <summary>
    /// Instruction UQSHL - Unsigned saturating shift left (immediate).
    /// </summary>
    UQSHL_asimdshf_r,
    /// <summary>
    /// Instruction UQSHL - Unsigned saturating shift left (register).
    /// </summary>
    UQSHL_asisdsame_only,
    /// <summary>
    /// Instruction UQSHL - Unsigned saturating shift left (immediate).
    /// </summary>
    UQSHL_asisdshf_r,
    /// <summary>
    /// Instruction UQSHL - Unsigned saturating shift left by immediate.
    /// </summary>
    UQSHL_z_p_zi,
    /// <summary>
    /// Instruction UQSHL - Unsigned saturating shift left by vector (predicated).
    /// </summary>
    UQSHL_z_p_zz,
    /// <summary>
    /// Instruction UQSHRNB - Unsigned saturating shift right narrow by immediate (bottom).
    /// </summary>
    UQSHRNB_z_zi,
    /// <summary>
    /// Instruction UQSHRNT - Unsigned saturating shift right narrow by immediate (top).
    /// </summary>
    UQSHRNT_z_zi,
    /// <summary>
    /// Instruction UQSHRN - Unsigned saturating shift right narrow (immediate).
    /// </summary>
    UQSHRN_asimdshf_n,
    /// <summary>
    /// Instruction UQSHRN - Unsigned saturating shift right narrow (immediate).
    /// </summary>
    UQSHRN_asisdshf_n,
    /// <summary>
    /// Instruction UQSUBR - Unsigned saturating subtraction reversed vectors (predicated).
    /// </summary>
    UQSUBR_z_p_zz,
    /// <summary>
    /// Instruction UQSUB - Unsigned saturating subtract.
    /// </summary>
    UQSUB_asimdsame_only,
    /// <summary>
    /// Instruction UQSUB - Unsigned saturating subtract.
    /// </summary>
    UQSUB_asisdsame_only,
    /// <summary>
    /// Instruction UQSUB - Unsigned saturating subtraction (predicated).
    /// </summary>
    UQSUB_z_p_zz,
    /// <summary>
    /// Instruction UQSUB - Unsigned saturating subtract immediate (unpredicated).
    /// </summary>
    UQSUB_z_zi,
    /// <summary>
    /// Instruction UQSUB - Unsigned saturating subtract vectors (unpredicated).
    /// </summary>
    UQSUB_z_zz,
    /// <summary>
    /// Instruction UQXTNB - Unsigned saturating extract narrow (bottom).
    /// </summary>
    UQXTNB_z_zz,
    /// <summary>
    /// Instruction UQXTNT - Unsigned saturating extract narrow (top).
    /// </summary>
    UQXTNT_z_zz,
    /// <summary>
    /// Instruction UQXTN - Unsigned saturating extract narrow.
    /// </summary>
    UQXTN_asimdmisc_n,
    /// <summary>
    /// Instruction UQXTN - Unsigned saturating extract narrow.
    /// </summary>
    UQXTN_asisdmisc_n,
    /// <summary>
    /// Instruction URECPE - Unsigned reciprocal estimate.
    /// </summary>
    URECPE_asimdmisc_r,
    /// <summary>
    /// Instruction URECPE - Unsigned reciprocal estimate (predicated).
    /// </summary>
    URECPE_z_p_z_m,
    /// <summary>
    /// Instruction URECPE - Unsigned reciprocal estimate (predicated).
    /// </summary>
    URECPE_z_p_z_z,
    /// <summary>
    /// Instruction URHADD - Unsigned rounding halving add.
    /// </summary>
    URHADD_asimdsame_only,
    /// <summary>
    /// Instruction URHADD - Unsigned rounding halving addition.
    /// </summary>
    URHADD_z_p_zz,
    /// <summary>
    /// Instruction URSHLR - Unsigned rounding shift left reversed vectors (predicated).
    /// </summary>
    URSHLR_z_p_zz,
    /// <summary>
    /// Instruction URSHL - Unsigned rounding shift left (register).
    /// </summary>
    URSHL_asimdsame_only,
    /// <summary>
    /// Instruction URSHL - Unsigned rounding shift left (register).
    /// </summary>
    URSHL_asisdsame_only,
    /// <summary>
    /// Instruction URSHL - Multi-vector unsigned rounding shift left by vector.
    /// </summary>
    URSHL_mz_zzv_2x1,
    /// <summary>
    /// Instruction URSHL - Multi-vector unsigned rounding shift left by vector.
    /// </summary>
    URSHL_mz_zzv_4x1,
    /// <summary>
    /// Instruction URSHL - Multi-vector unsigned rounding shift left.
    /// </summary>
    URSHL_mz_zzw_2x2,
    /// <summary>
    /// Instruction URSHL - Multi-vector unsigned rounding shift left.
    /// </summary>
    URSHL_mz_zzw_4x4,
    /// <summary>
    /// Instruction URSHL - Unsigned rounding shift left by vector (predicated).
    /// </summary>
    URSHL_z_p_zz,
    /// <summary>
    /// Instruction URSHR - Unsigned rounding shift right (immediate).
    /// </summary>
    URSHR_asimdshf_r,
    /// <summary>
    /// Instruction URSHR - Unsigned rounding shift right (immediate).
    /// </summary>
    URSHR_asisdshf_r,
    /// <summary>
    /// Instruction URSHR - Unsigned rounding shift right by immediate.
    /// </summary>
    URSHR_z_p_zi,
    /// <summary>
    /// Instruction URSQRTE - Unsigned reciprocal square root estimate.
    /// </summary>
    URSQRTE_asimdmisc_r,
    /// <summary>
    /// Instruction URSQRTE - Unsigned reciprocal square root estimate (predicated).
    /// </summary>
    URSQRTE_z_p_z_m,
    /// <summary>
    /// Instruction URSQRTE - Unsigned reciprocal square root estimate (predicated).
    /// </summary>
    URSQRTE_z_p_z_z,
    /// <summary>
    /// Instruction URSRA - Unsigned rounding shift right and accumulate (immediate).
    /// </summary>
    URSRA_asimdshf_r,
    /// <summary>
    /// Instruction URSRA - Unsigned rounding shift right and accumulate (immediate).
    /// </summary>
    URSRA_asisdshf_r,
    /// <summary>
    /// Instruction URSRA - Unsigned rounding shift right and accumulate (immediate).
    /// </summary>
    URSRA_z_zi,
    /// <summary>
    /// Instruction USDOT - Dot product with unsigned and signed integers (vector, by element).
    /// </summary>
    USDOT_asimdelem_d,
    /// <summary>
    /// Instruction USDOT - Dot product with unsigned and signed integers (vector).
    /// </summary>
    USDOT_asimdsame2_d,
    /// <summary>
    /// Instruction USDOT - Unsigned by signed integer dot product.
    /// </summary>
    USDOT_z_zzz_s,
    /// <summary>
    /// Instruction USDOT - Unsigned by signed integer indexed dot product.
    /// </summary>
    USDOT_z_zzzi_s,
    /// <summary>
    /// Instruction USDOT - Multi-vector unsigned by signed integer dot-product by indexed element.
    /// </summary>
    USDOT_za_zzi_s2xi,
    /// <summary>
    /// Instruction USDOT - Multi-vector unsigned by signed integer dot-product by indexed element.
    /// </summary>
    USDOT_za_zzi_s4xi,
    /// <summary>
    /// Instruction USDOT - Multi-vector unsigned by signed integer dot-product by vector.
    /// </summary>
    USDOT_za_zzv_s2x1,
    /// <summary>
    /// Instruction USDOT - Multi-vector unsigned by signed integer dot-product by vector.
    /// </summary>
    USDOT_za_zzv_s4x1,
    /// <summary>
    /// Instruction USDOT - Multi-vector unsigned by signed integer dot-product.
    /// </summary>
    USDOT_za_zzw_s2x2,
    /// <summary>
    /// Instruction USDOT - Multi-vector unsigned by signed integer dot-product.
    /// </summary>
    USDOT_za_zzw_s4x4,
    /// <summary>
    /// Instruction USHLLB - Unsigned shift left long by immediate (bottom).
    /// </summary>
    USHLLB_z_zi,
    /// <summary>
    /// Instruction USHLLT - Unsigned shift left long by immediate (top).
    /// </summary>
    USHLLT_z_zi,
    /// <summary>
    /// Instruction USHLL - Unsigned shift left long (immediate).
    /// </summary>
    USHLL_asimdshf_l,
    /// <summary>
    /// Instruction USHL - Unsigned shift left (register).
    /// </summary>
    USHL_asimdsame_only,
    /// <summary>
    /// Instruction USHL - Unsigned shift left (register).
    /// </summary>
    USHL_asisdsame_only,
    /// <summary>
    /// Instruction USHR - Unsigned shift right (immediate).
    /// </summary>
    USHR_asimdshf_r,
    /// <summary>
    /// Instruction USHR - Unsigned shift right (immediate).
    /// </summary>
    USHR_asisdshf_r,
    /// <summary>
    /// Instruction USMLALL - Multi-vector unsigned by signed integer multiply-add long-long by indexed element.
    /// </summary>
    USMLALL_za_zzi_s,
    /// <summary>
    /// Instruction USMLALL - Multi-vector unsigned by signed integer multiply-add long-long by indexed element.
    /// </summary>
    USMLALL_za_zzi_s2xi,
    /// <summary>
    /// Instruction USMLALL - Multi-vector unsigned by signed integer multiply-add long-long by indexed element.
    /// </summary>
    USMLALL_za_zzi_s4xi,
    /// <summary>
    /// Instruction USMLALL - Multi-vector unsigned by signed integer multiply-add long-long by vector.
    /// </summary>
    USMLALL_za_zzv_s,
    /// <summary>
    /// Instruction USMLALL - Multi-vector unsigned by signed integer multiply-add long-long by vector.
    /// </summary>
    USMLALL_za_zzv_s2x1,
    /// <summary>
    /// Instruction USMLALL - Multi-vector unsigned by signed integer multiply-add long-long by vector.
    /// </summary>
    USMLALL_za_zzv_s4x1,
    /// <summary>
    /// Instruction USMLALL - Multi-vector unsigned by signed integer multiply-add long-long.
    /// </summary>
    USMLALL_za_zzw_s2x2,
    /// <summary>
    /// Instruction USMLALL - Multi-vector unsigned by signed integer multiply-add long-long.
    /// </summary>
    USMLALL_za_zzw_s4x4,
    /// <summary>
    /// Instruction USMMLA - Unsigned and signed 8-bit integer matrix multiply-accumulate (vector).
    /// </summary>
    USMMLA_asimdsame2_g,
    /// <summary>
    /// Instruction USMMLA - Unsigned by signed integer matrix multiply-accumulate.
    /// </summary>
    USMMLA_z_zzz,
    /// <summary>
    /// Instruction USMOP4A - Unsigned by signed integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    USMOP4A_za_zz_b1x1,
    /// <summary>
    /// Instruction USMOP4A - Unsigned by signed integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    USMOP4A_za_zz_b1x2,
    /// <summary>
    /// Instruction USMOP4A - Unsigned by signed integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    USMOP4A_za_zz_b2x1,
    /// <summary>
    /// Instruction USMOP4A - Unsigned by signed integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    USMOP4A_za_zz_b2x2,
    /// <summary>
    /// Instruction USMOP4A - Unsigned by signed integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    USMOP4A_za_zz_h1x1,
    /// <summary>
    /// Instruction USMOP4A - Unsigned by signed integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    USMOP4A_za_zz_h1x2,
    /// <summary>
    /// Instruction USMOP4A - Unsigned by signed integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    USMOP4A_za_zz_h2x1,
    /// <summary>
    /// Instruction USMOP4A - Unsigned by signed integer quarter-tile sums of four outer products, accumulating.
    /// </summary>
    USMOP4A_za_zz_h2x2,
    /// <summary>
    /// Instruction USMOP4S - Unsigned by signed integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    USMOP4S_za_zz_b1x1,
    /// <summary>
    /// Instruction USMOP4S - Unsigned by signed integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    USMOP4S_za_zz_b1x2,
    /// <summary>
    /// Instruction USMOP4S - Unsigned by signed integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    USMOP4S_za_zz_b2x1,
    /// <summary>
    /// Instruction USMOP4S - Unsigned by signed integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    USMOP4S_za_zz_b2x2,
    /// <summary>
    /// Instruction USMOP4S - Unsigned by signed integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    USMOP4S_za_zz_h1x1,
    /// <summary>
    /// Instruction USMOP4S - Unsigned by signed integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    USMOP4S_za_zz_h1x2,
    /// <summary>
    /// Instruction USMOP4S - Unsigned by signed integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    USMOP4S_za_zz_h2x1,
    /// <summary>
    /// Instruction USMOP4S - Unsigned by signed integer quarter-tile sums of four outer products, subtracting.
    /// </summary>
    USMOP4S_za_zz_h2x2,
    /// <summary>
    /// Instruction USMOPA - Unsigned by signed integer sum of outer products and accumulate.
    /// </summary>
    USMOPA_za_pp_zz_32,
    /// <summary>
    /// Instruction USMOPA - Unsigned by signed integer sum of outer products and accumulate.
    /// </summary>
    USMOPA_za_pp_zz_64,
    /// <summary>
    /// Instruction USMOPS - Unsigned by signed integer sum of outer products and subtract.
    /// </summary>
    USMOPS_za_pp_zz_32,
    /// <summary>
    /// Instruction USMOPS - Unsigned by signed integer sum of outer products and subtract.
    /// </summary>
    USMOPS_za_pp_zz_64,
    /// <summary>
    /// Instruction USQADD - Unsigned saturating accumulate of signed value.
    /// </summary>
    USQADD_asimdmisc_r,
    /// <summary>
    /// Instruction USQADD - Unsigned saturating accumulate of signed value.
    /// </summary>
    USQADD_asisdmisc_r,
    /// <summary>
    /// Instruction USQADD - Unsigned saturating addition of signed value.
    /// </summary>
    USQADD_z_p_zz,
    /// <summary>
    /// Instruction USRA - Unsigned shift right and accumulate (immediate).
    /// </summary>
    USRA_asimdshf_r,
    /// <summary>
    /// Instruction USRA - Unsigned shift right and accumulate (immediate).
    /// </summary>
    USRA_asisdshf_r,
    /// <summary>
    /// Instruction USRA - Unsigned shift right and accumulate (immediate).
    /// </summary>
    USRA_z_zi,
    /// <summary>
    /// Instruction USTMOPA - Unsigned by signed integer sparse sum of four outer products, accumulating.
    /// </summary>
    USTMOPA_za_zzzi_b2x1,
    /// <summary>
    /// Instruction USUBLB - Unsigned subtract long (bottom).
    /// </summary>
    USUBLB_z_zz,
    /// <summary>
    /// Instruction USUBLT - Unsigned subtract long (top).
    /// </summary>
    USUBLT_z_zz,
    /// <summary>
    /// Instruction USUBL - Unsigned subtract long.
    /// </summary>
    USUBL_asimddiff_l,
    /// <summary>
    /// Instruction USUBWB - Unsigned subtract wide (bottom).
    /// </summary>
    USUBWB_z_zz,
    /// <summary>
    /// Instruction USUBWT - Unsigned subtract wide (top).
    /// </summary>
    USUBWT_z_zz,
    /// <summary>
    /// Instruction USUBW - Unsigned subtract wide.
    /// </summary>
    USUBW_asimddiff_w,
    /// <summary>
    /// Instruction USVDOT - Multi-vector unsigned by signed integer vertical dot-product by indexed element.
    /// </summary>
    USVDOT_za_zzi_s4xi,
    /// <summary>
    /// Instruction UTMOPA - Unsigned integer sparse sum of two outer products, accumulating.
    /// </summary>
    UTMOPA_za32_zzzi_h2x1,
    /// <summary>
    /// Instruction UTMOPA - Unsigned integer sparse sum of four outer products, accumulating.
    /// </summary>
    UTMOPA_za_zzzi_b2x1,
    /// <summary>
    /// Instruction UUNPKHI - Unsigned unpack and extend half of vector.
    /// </summary>
    UUNPKHI_z_z,
    /// <summary>
    /// Instruction UUNPKLO - Unsigned unpack and extend half of vector.
    /// </summary>
    UUNPKLO_z_z,
    /// <summary>
    /// Instruction UUNPK - Unpack and zero-extend multi-vector elements.
    /// </summary>
    UUNPK_mz_z_2,
    /// <summary>
    /// Instruction UUNPK - Unpack and zero-extend multi-vector elements.
    /// </summary>
    UUNPK_mz_z_4,
    /// <summary>
    /// Instruction UVDOT - Multi-vector unsigned integer vertical dot-product by indexed element.
    /// </summary>
    UVDOT_za32_zzi_2xi,
    /// <summary>
    /// Instruction UVDOT - Multi-vector unsigned integer vertical dot-product by indexed element.
    /// </summary>
    UVDOT_za_zzi_d4xi,
    /// <summary>
    /// Instruction UVDOT - Multi-vector unsigned integer vertical dot-product by indexed element.
    /// </summary>
    UVDOT_za_zzi_s4xi,
    /// <summary>
    /// Instruction UXTB - Unsigned byte / halfword / word extend (predicated).
    /// </summary>
    UXTB_z_p_z_m,
    /// <summary>
    /// Instruction UXTB - Unsigned byte / halfword / word extend (predicated).
    /// </summary>
    UXTB_z_p_z_z,
    /// <summary>
    /// Instruction UXTH - Unsigned byte / halfword / word extend (predicated).
    /// </summary>
    UXTH_z_p_z_m,
    /// <summary>
    /// Instruction UXTH - Unsigned byte / halfword / word extend (predicated).
    /// </summary>
    UXTH_z_p_z_z,
    /// <summary>
    /// Instruction UXTW - Unsigned byte / halfword / word extend (predicated).
    /// </summary>
    UXTW_z_p_z_m,
    /// <summary>
    /// Instruction UXTW - Unsigned byte / halfword / word extend (predicated).
    /// </summary>
    UXTW_z_p_z_z,
    /// <summary>
    /// Instruction UZP1 - Unzip vectors (primary).
    /// </summary>
    UZP1_asimdperm_only,
    /// <summary>
    /// Instruction UZP1 - Concatenate even or odd elements from two predicates.
    /// </summary>
    UZP1_p_pp,
    /// <summary>
    /// Instruction UZP1 - Concatenate even or odd elements from two vectors.
    /// </summary>
    UZP1_z_zz,
    /// <summary>
    /// Instruction UZP1 - Concatenate even or odd elements from two vectors.
    /// </summary>
    UZP1_z_zz_q,
    /// <summary>
    /// Instruction UZP2 - Unzip vectors (secondary).
    /// </summary>
    UZP2_asimdperm_only,
    /// <summary>
    /// Instruction UZP2 - Concatenate even or odd elements from two predicates.
    /// </summary>
    UZP2_p_pp,
    /// <summary>
    /// Instruction UZP2 - Concatenate even or odd elements from two vectors.
    /// </summary>
    UZP2_z_zz,
    /// <summary>
    /// Instruction UZP2 - Concatenate even or odd elements from two vectors.
    /// </summary>
    UZP2_z_zz_q,
    /// <summary>
    /// Instruction UZPQ1 - Concatenate even elements within each pair of quadword vector segments.
    /// </summary>
    UZPQ1_z_zz,
    /// <summary>
    /// Instruction UZPQ2 - Concatenate odd elements within each pair of quadword vector segments.
    /// </summary>
    UZPQ2_z_zz,
    /// <summary>
    /// Instruction UZP - Concatenate elements from four vectors.
    /// </summary>
    UZP_mz_z_4,
    /// <summary>
    /// Instruction UZP - Concatenate elements from four vectors.
    /// </summary>
    UZP_mz_z_4q,
    /// <summary>
    /// Instruction UZP - Concatenate elements from two vectors.
    /// </summary>
    UZP_mz_zz_2,
    /// <summary>
    /// Instruction UZP - Concatenate elements from two vectors.
    /// </summary>
    UZP_mz_zz_2q,
    /// <summary>
    /// Instruction WFET - Wait for event with timeout.
    /// </summary>
    WFET_only_systeminstrswithreg,
    /// <summary>
    /// Instruction WFE - Wait for event.
    /// </summary>
    WFE_hi_hints,
    /// <summary>
    /// Instruction WFIT - Wait for interrupt with timeout.
    /// </summary>
    WFIT_only_systeminstrswithreg,
    /// <summary>
    /// Instruction WFI - Wait for interrupt.
    /// </summary>
    WFI_hi_hints,
    /// <summary>
    /// Instruction WHILEGE - While decrementing signed scalar greater than or equal to scalar.
    /// </summary>
    WHILEGE_p_p_rr,
    /// <summary>
    /// Instruction WHILEGE - While decrementing signed scalar greater than or equal to scalar (predicate-as-counter).
    /// </summary>
    WHILEGE_pn_rr,
    /// <summary>
    /// Instruction WHILEGE - While decrementing signed scalar greater than or equal to scalar (pair of predicates).
    /// </summary>
    WHILEGE_pp_rr,
    /// <summary>
    /// Instruction WHILEGT - While decrementing signed scalar greater than scalar.
    /// </summary>
    WHILEGT_p_p_rr,
    /// <summary>
    /// Instruction WHILEGT - While decrementing signed scalar greater than scalar (predicate-as-counter).
    /// </summary>
    WHILEGT_pn_rr,
    /// <summary>
    /// Instruction WHILEGT - While decrementing signed scalar greater than scalar (pair of predicates).
    /// </summary>
    WHILEGT_pp_rr,
    /// <summary>
    /// Instruction WHILEHI - While decrementing unsigned scalar higher than scalar.
    /// </summary>
    WHILEHI_p_p_rr,
    /// <summary>
    /// Instruction WHILEHI - While decrementing unsigned scalar higher than scalar (predicate-as-counter).
    /// </summary>
    WHILEHI_pn_rr,
    /// <summary>
    /// Instruction WHILEHI - While decrementing unsigned scalar higher than scalar (pair of predicates).
    /// </summary>
    WHILEHI_pp_rr,
    /// <summary>
    /// Instruction WHILEHS - While decrementing unsigned scalar higher or same as scalar.
    /// </summary>
    WHILEHS_p_p_rr,
    /// <summary>
    /// Instruction WHILEHS - While decrementing unsigned scalar higher or same as scalar (predicate-as-counter).
    /// </summary>
    WHILEHS_pn_rr,
    /// <summary>
    /// Instruction WHILEHS - While decrementing unsigned scalar higher or same as scalar (pair of predicates).
    /// </summary>
    WHILEHS_pp_rr,
    /// <summary>
    /// Instruction WHILELE - While incrementing signed scalar less than or equal to scalar.
    /// </summary>
    WHILELE_p_p_rr,
    /// <summary>
    /// Instruction WHILELE - While incrementing signed scalar less than or equal to scalar (predicate-as-counter).
    /// </summary>
    WHILELE_pn_rr,
    /// <summary>
    /// Instruction WHILELE - While incrementing signed scalar less than or equal to scalar (pair of predicates).
    /// </summary>
    WHILELE_pp_rr,
    /// <summary>
    /// Instruction WHILELO - While incrementing unsigned scalar lower than scalar.
    /// </summary>
    WHILELO_p_p_rr,
    /// <summary>
    /// Instruction WHILELO - While incrementing unsigned scalar lower than scalar (predicate-as-counter).
    /// </summary>
    WHILELO_pn_rr,
    /// <summary>
    /// Instruction WHILELO - While incrementing unsigned scalar lower than scalar (pair of predicates).
    /// </summary>
    WHILELO_pp_rr,
    /// <summary>
    /// Instruction WHILELS - While incrementing unsigned scalar lower or same as scalar.
    /// </summary>
    WHILELS_p_p_rr,
    /// <summary>
    /// Instruction WHILELS - While incrementing unsigned scalar lower or same as scalar (predicate-as-counter).
    /// </summary>
    WHILELS_pn_rr,
    /// <summary>
    /// Instruction WHILELS - While incrementing unsigned scalar lower or same as scalar (pair of predicates).
    /// </summary>
    WHILELS_pp_rr,
    /// <summary>
    /// Instruction WHILELT - While incrementing signed scalar less than scalar.
    /// </summary>
    WHILELT_p_p_rr,
    /// <summary>
    /// Instruction WHILELT - While incrementing signed scalar less than scalar (predicate-as-counter).
    /// </summary>
    WHILELT_pn_rr,
    /// <summary>
    /// Instruction WHILELT - While incrementing signed scalar less than scalar (pair of predicates).
    /// </summary>
    WHILELT_pp_rr,
    /// <summary>
    /// Instruction WHILERW - While free of read-after-write conflicts.
    /// </summary>
    WHILERW_p_rr,
    /// <summary>
    /// Instruction WHILEWR - While free of write-after-read/write conflicts.
    /// </summary>
    WHILEWR_p_rr,
    /// <summary>
    /// Instruction WRFFR - Write the first-fault register.
    /// </summary>
    WRFFR_f_p,
    /// <summary>
    /// Instruction XAFLAG - Convert floating-point condition flags from external format to Arm format.
    /// </summary>
    XAFLAG_m_pstate,
    /// <summary>
    /// Instruction XAR - Exclusive-OR and rotate.
    /// </summary>
    XAR_vvv2_crypto3_imm6,
    /// <summary>
    /// Instruction XAR - Bitwise exclusive-OR and rotate right by immediate.
    /// </summary>
    XAR_z_zzi,
    /// <summary>
    /// Instruction XPACD - Strip Pointer Authentication Code.
    /// </summary>
    XPACD_64z_dp_1src,
    /// <summary>
    /// Instruction XPACI - Strip Pointer Authentication Code.
    /// </summary>
    XPACI_64z_dp_1src,
    /// <summary>
    /// Instruction XPACLRI - Strip Pointer Authentication Code.
    /// </summary>
    XPACLRI_hi_hints,
    /// <summary>
    /// Instruction XTN - Extract narrow.
    /// </summary>
    XTN_asimdmisc_n,
    /// <summary>
    /// Instruction YIELD - Yield.
    /// </summary>
    YIELD_hi_hints,
    /// <summary>
    /// Instruction ZERO - Zero ZA single-vector groups.
    /// </summary>
    ZERO_za1_ri_2,
    /// <summary>
    /// Instruction ZERO - Zero ZA single-vector groups.
    /// </summary>
    ZERO_za1_ri_4,
    /// <summary>
    /// Instruction ZERO - Zero ZA double-vector groups.
    /// </summary>
    ZERO_za2_ri_1,
    /// <summary>
    /// Instruction ZERO - Zero ZA double-vector groups.
    /// </summary>
    ZERO_za2_ri_2,
    /// <summary>
    /// Instruction ZERO - Zero ZA double-vector groups.
    /// </summary>
    ZERO_za2_ri_4,
    /// <summary>
    /// Instruction ZERO - Zero ZA quad-vector groups.
    /// </summary>
    ZERO_za4_ri_1,
    /// <summary>
    /// Instruction ZERO - Zero ZA quad-vector groups.
    /// </summary>
    ZERO_za4_ri_2,
    /// <summary>
    /// Instruction ZERO - Zero ZA quad-vector groups.
    /// </summary>
    ZERO_za4_ri_4,
    /// <summary>
    /// Instruction ZERO - Zero a list of 64-bit element ZA tiles.
    /// </summary>
    ZERO_za_i,
    /// <summary>
    /// Instruction ZERO - Zero ZT0.
    /// </summary>
    ZERO_zt_i,
    /// <summary>
    /// Instruction ZIP1 - Zip vectors (primary).
    /// </summary>
    ZIP1_asimdperm_only,
    /// <summary>
    /// Instruction ZIP1 - Interleave elements from two half predicates.
    /// </summary>
    ZIP1_p_pp,
    /// <summary>
    /// Instruction ZIP1 - Interleave elements from two half vectors.
    /// </summary>
    ZIP1_z_zz,
    /// <summary>
    /// Instruction ZIP1 - Interleave elements from two half vectors.
    /// </summary>
    ZIP1_z_zz_q,
    /// <summary>
    /// Instruction ZIP2 - Zip vectors (secondary).
    /// </summary>
    ZIP2_asimdperm_only,
    /// <summary>
    /// Instruction ZIP2 - Interleave elements from two half predicates.
    /// </summary>
    ZIP2_p_pp,
    /// <summary>
    /// Instruction ZIP2 - Interleave elements from two half vectors.
    /// </summary>
    ZIP2_z_zz,
    /// <summary>
    /// Instruction ZIP2 - Interleave elements from two half vectors.
    /// </summary>
    ZIP2_z_zz_q,
    /// <summary>
    /// Instruction ZIPQ1 - Interleave elements from low halves of each pair of quadword vector segments.
    /// </summary>
    ZIPQ1_z_zz,
    /// <summary>
    /// Instruction ZIPQ2 - Interleave elements from high halves of each pair of quadword vector segments.
    /// </summary>
    ZIPQ2_z_zz,
    /// <summary>
    /// Instruction ZIP - Interleave elements from four vectors.
    /// </summary>
    ZIP_mz_z_4,
    /// <summary>
    /// Instruction ZIP - Interleave elements from four vectors.
    /// </summary>
    ZIP_mz_z_4q,
    /// <summary>
    /// Instruction ZIP - Interleave elements from two vectors.
    /// </summary>
    ZIP_mz_zz_2,
    /// <summary>
    /// Instruction ZIP - Interleave elements from two vectors.
    /// </summary>
    ZIP_mz_zz_2q,
}
