// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

namespace AsmArm64;

/// <summary>
/// Decode vector arrangements from raw instruction.
/// </summary>
static class Arm64VectorArrangementHelper
{
    public static bool TryDecode(Arm64RawInstruction rawValue, byte valueArrangementIndex, out Arm64RegisterVKind vKind, out int elementCount)
    {
        switch (valueArrangementIndex)
        {
            case 1:
                vKind = Arm64RegisterVKind.B;
                elementCount = 0;
                return true;
            case 2:
                vKind = Arm64RegisterVKind.D;
                elementCount = 0;
                return true;
            case 3:
                vKind = Arm64RegisterVKind.H;
                elementCount = 0;
                return true;
            case 4:
                vKind = Arm64RegisterVKind.S;
                elementCount = 0;
                return true;
            case 5:
                vKind = Arm64RegisterVKind.B;
                elementCount = 16;
                return true;
            case 6:
                vKind = Arm64RegisterVKind.B;
                elementCount = 2;
                return true;
            case 7:
                vKind = Arm64RegisterVKind.D;
                elementCount = 2;
                return true;
            case 8:
                vKind = Arm64RegisterVKind.H;
                elementCount = 2;
                return true;
            case 9:
                vKind = Arm64RegisterVKind.B;
                elementCount = 4;
                return true;
            case 10:
                vKind = Arm64RegisterVKind.S;
                elementCount = 4;
                return true;
            case 11:
                vKind = Arm64RegisterVKind.H;
                elementCount = 8;
                return true;
            case 12:
                return TryDecodeFromBitValues(((rawValue >> 22) & 0x1), 16, out vKind, out elementCount);
            case 13:
                return TryDecodeFromBitValues(((rawValue >> 22) & 0x1), 22, out vKind, out elementCount);
            case 14:
                return TryDecodeFromBitValues(((rawValue >> 22) & 0x1), 26, out vKind, out elementCount);
            case 15:
                return TryDecodeFromBitValues(((rawValue >> 30) & 0x1), 12, out vKind, out elementCount);
            case 16:
                return TryDecodeFromBitValues(((rawValue >> 30) & 0x1), 10, out vKind, out elementCount);
            case 17:
                return TryDecodeFromBitValues(((rawValue >> 30) & 0x1), 1, out vKind, out elementCount);
            case 18:
                return TryDecodeFromBitValues(((rawValue >> 30) & 0x1), 6, out vKind, out elementCount);
            case 19:
                return TryDecodeFromBitValues(((rawValue >> 30) & 0x1) | ((rawValue >> 21) & 0x2), 3, out vKind, out elementCount);
            case 20:
                return TryDecodeFromBitValues(((rawValue >> 30) & 0x1) | ((rawValue >> 21) & 0x2), 24, out vKind, out elementCount);
            case 21:
                return TryDecodeFromBitValues(((rawValue >> 30) & 0x1) | ((rawValue >> 21) & 0x2), 27, out vKind, out elementCount);
            case 22:
                return TryDecodeFromBitValues(((rawValue >> 22) & 0x3), 11, out vKind, out elementCount);
            case 23:
                return TryDecodeFromBitValues(((rawValue >> 22) & 0x3), 13, out vKind, out elementCount);
            case 24:
                return TryDecodeFromBitValues(((rawValue >> 22) & 0x3), 33, out vKind, out elementCount);
            case 25:
                return TryDecodeFromBitValues(((rawValue >> 22) & 0x3), 8, out vKind, out elementCount);
            case 26:
                return TryDecodeFromBitValues(((rawValue >> 22) & 0x1) | ((rawValue >> 29) & 0x2), 17, out vKind, out elementCount);
            case 27:
                return TryDecodeFromBitValues(((rawValue >> 30) & 0x1) | ((rawValue >> 9) & 0x6), 2, out vKind, out elementCount);
            case 28:
                return TryDecodeFromBitValues(((rawValue >> 30) & 0x1) | ((rawValue >> 9) & 0x6), 5, out vKind, out elementCount);
            case 29:
                return TryDecodeFromBitValues(((rawValue >> 30) & 0x1) | ((rawValue >> 21) & 0x6), 25, out vKind, out elementCount);
            case 30:
                return TryDecodeFromBitValues(((rawValue >> 30) & 0x1) | ((rawValue >> 21) & 0x6), 19, out vKind, out elementCount);
            case 31:
                return TryDecodeFromBitValues(((rawValue >> 30) & 0x1) | ((rawValue >> 21) & 0x6), 2, out vKind, out elementCount);
            case 32:
                return TryDecodeFromBitValues(((rawValue >> 30) & 0x1) | ((rawValue >> 21) & 0x6), 4, out vKind, out elementCount);
            case 33:
                return TryDecodeFromBitValues(((rawValue >> 30) & 0x1) | ((rawValue >> 21) & 0x6), 28, out vKind, out elementCount);
            case 34:
                return TryDecodeFromBitValues(((rawValue >> 30) & 0x1) | ((rawValue >> 21) & 0x6), 29, out vKind, out elementCount);
            case 35:
                return TryDecodeFromBitValues(((rawValue >> 30) & 0x1) | ((rawValue >> 21) & 0x6), 20, out vKind, out elementCount);
            case 36:
                return TryDecodeFromBitValues(((rawValue >> 30) & 0x1) | ((rawValue >> 21) & 0x6), 30, out vKind, out elementCount);
            case 37:
                return TryDecodeFromBitValues(((rawValue >> 30) & 0x1) | ((rawValue >> 21) & 0x6), 21, out vKind, out elementCount);
            case 38:
                return TryDecodeFromBitValues(((rawValue >> 30) & 0x1) | ((rawValue >> 21) & 0x6), 7, out vKind, out elementCount);
            case 39:
                return TryDecodeFromBitValues(((rawValue >> 19) & 0xF), 14, out vKind, out elementCount);
            case 40:
                return TryDecodeFromBitValues(((rawValue >> 16) & 0x1F), 23, out vKind, out elementCount);
            case 41:
                return TryDecodeFromBitValues(((rawValue >> 16) & 0x1F), 32, out vKind, out elementCount);
            case 42:
                return TryDecodeFromBitValues(((rawValue >> 16) & 0x1F), 34, out vKind, out elementCount);
            case 43:
                return TryDecodeFromBitValues(((rawValue >> 30) & 0x1) | ((rawValue >> 18) & 0x1E), 9, out vKind, out elementCount);
            case 44:
                return TryDecodeFromBitValues(((rawValue >> 30) & 0x1) | ((rawValue >> 18) & 0x1E), 15, out vKind, out elementCount);
            case 45:
                return TryDecodeFromBitValues(((rawValue >> 30) & 0x1) | ((rawValue >> 18) & 0x1E), 18, out vKind, out elementCount);
            case 46:
                return TryDecodeFromBitValues(((rawValue >> 30) & 0x1) | ((rawValue >> 15) & 0x3E), 31, out vKind, out elementCount);
        }
        
        elementCount = 0;
        vKind = Arm64RegisterVKind.Default;
        return false;
    }
    public static bool TryDecodeFromBitValues(uint bitValues, byte valueArrangementValuesIndex, out Arm64RegisterVKind vKind, out int elementCount)
    {
        switch (valueArrangementValuesIndex)
        {
            case 1:
                switch (bitValues)
                {
                    case 0:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 4;
                        return true;
                    case 1:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 8;
                        return true;
                }
                break;
            case 2:
                switch (bitValues)
                {
                    case 0:
                        vKind = Arm64RegisterVKind.B;
                        elementCount = 8;
                        return true;
                    case 1:
                        vKind = Arm64RegisterVKind.B;
                        elementCount = 16;
                        return true;
                    case 2:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 4;
                        return true;
                    case 3:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 8;
                        return true;
                    case 4:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 2;
                        return true;
                    case 5:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 4;
                        return true;
                    case 7:
                        vKind = Arm64RegisterVKind.D;
                        elementCount = 2;
                        return true;
                }
                break;
            case 3:
                switch (bitValues)
                {
                    case 0:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 2;
                        return true;
                    case 1:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 4;
                        return true;
                    case 3:
                        vKind = Arm64RegisterVKind.D;
                        elementCount = 2;
                        return true;
                }
                break;
            case 4:
                switch (bitValues)
                {
                    case 0:
                        vKind = Arm64RegisterVKind.B;
                        elementCount = 8;
                        return true;
                    case 1:
                        vKind = Arm64RegisterVKind.B;
                        elementCount = 16;
                        return true;
                    case 2:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 4;
                        return true;
                    case 3:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 8;
                        return true;
                    case 4:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 2;
                        return true;
                    case 5:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 4;
                        return true;
                }
                break;
            case 5:
                switch (bitValues)
                {
                    case 0:
                        vKind = Arm64RegisterVKind.B;
                        elementCount = 8;
                        return true;
                    case 1:
                        vKind = Arm64RegisterVKind.B;
                        elementCount = 16;
                        return true;
                    case 2:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 4;
                        return true;
                    case 3:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 8;
                        return true;
                    case 4:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 2;
                        return true;
                    case 5:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 4;
                        return true;
                    case 6:
                        vKind = Arm64RegisterVKind.D;
                        elementCount = 1;
                        return true;
                    case 7:
                        vKind = Arm64RegisterVKind.D;
                        elementCount = 2;
                        return true;
                }
                break;
            case 6:
                switch (bitValues)
                {
                    case 0:
                        vKind = Arm64RegisterVKind.B;
                        elementCount = 8;
                        return true;
                    case 1:
                        vKind = Arm64RegisterVKind.B;
                        elementCount = 16;
                        return true;
                }
                break;
            case 7:
                switch (bitValues)
                {
                    case 2:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 4;
                        return true;
                    case 3:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 8;
                        return true;
                    case 4:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 2;
                        return true;
                    case 5:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 4;
                        return true;
                }
                break;
            case 8:
                switch (bitValues)
                {
                    case 0:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 8;
                        return true;
                    case 1:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 4;
                        return true;
                    case 2:
                        vKind = Arm64RegisterVKind.D;
                        elementCount = 2;
                        return true;
                }
                break;
            case 9:
                if (bitValues == 2)
                {
                    vKind = Arm64RegisterVKind.B;
                    elementCount = 8;
                    return true;
                }
                if (bitValues == 3)
                {
                    vKind = Arm64RegisterVKind.B;
                    elementCount = 16;
                    return true;
                }
                if ((bitValues & 0x1d) == 4)
                {
                    vKind = Arm64RegisterVKind.H;
                    elementCount = 4;
                    return true;
                }
                if ((bitValues & 0x1d) == 5)
                {
                    vKind = Arm64RegisterVKind.H;
                    elementCount = 8;
                    return true;
                }
                if ((bitValues & 0x19) == 8)
                {
                    vKind = Arm64RegisterVKind.S;
                    elementCount = 2;
                    return true;
                }
                if ((bitValues & 0x19) == 9)
                {
                    vKind = Arm64RegisterVKind.S;
                    elementCount = 4;
                    return true;
                }
                if ((bitValues & 0x11) == 17)
                {
                    vKind = Arm64RegisterVKind.D;
                    elementCount = 2;
                    return true;
                }
                break;
            case 10:
                switch (bitValues)
                {
                    case 0:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 2;
                        return true;
                    case 1:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 4;
                        return true;
                }
                break;
            case 11:
                switch (bitValues)
                {
                    case 1:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 0;
                        return true;
                    case 2:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 0;
                        return true;
                }
                break;
            case 12:
                switch (bitValues)
                {
                    case 0:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 2;
                        return true;
                    case 1:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 4;
                        return true;
                }
                break;
            case 13:
                switch (bitValues)
                {
                    case 1:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 4;
                        return true;
                    case 2:
                        vKind = Arm64RegisterVKind.D;
                        elementCount = 2;
                        return true;
                }
                break;
            case 14:
                if (bitValues == 1)
                {
                    vKind = Arm64RegisterVKind.H;
                    elementCount = 8;
                    return true;
                }
                if ((bitValues & 0xe) == 2)
                {
                    vKind = Arm64RegisterVKind.S;
                    elementCount = 4;
                    return true;
                }
                if ((bitValues & 0xc) == 4)
                {
                    vKind = Arm64RegisterVKind.D;
                    elementCount = 2;
                    return true;
                }
                break;
            case 15:
                if (bitValues == 2)
                {
                    vKind = Arm64RegisterVKind.B;
                    elementCount = 8;
                    return true;
                }
                if (bitValues == 3)
                {
                    vKind = Arm64RegisterVKind.B;
                    elementCount = 16;
                    return true;
                }
                if ((bitValues & 0x1d) == 4)
                {
                    vKind = Arm64RegisterVKind.H;
                    elementCount = 4;
                    return true;
                }
                if ((bitValues & 0x1d) == 5)
                {
                    vKind = Arm64RegisterVKind.H;
                    elementCount = 8;
                    return true;
                }
                if ((bitValues & 0x19) == 8)
                {
                    vKind = Arm64RegisterVKind.S;
                    elementCount = 2;
                    return true;
                }
                if ((bitValues & 0x19) == 9)
                {
                    vKind = Arm64RegisterVKind.S;
                    elementCount = 4;
                    return true;
                }
                break;
            case 16:
                switch (bitValues)
                {
                    case 0:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 0;
                        return true;
                    case 1:
                        vKind = Arm64RegisterVKind.D;
                        elementCount = 0;
                        return true;
                }
                break;
            case 17:
                switch (bitValues)
                {
                    case 0:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 2;
                        return true;
                    case 2:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 4;
                        return true;
                    case 3:
                        vKind = Arm64RegisterVKind.D;
                        elementCount = 2;
                        return true;
                }
                break;
            case 18:
                if ((bitValues & 0x1d) == 4)
                {
                    vKind = Arm64RegisterVKind.H;
                    elementCount = 4;
                    return true;
                }
                if ((bitValues & 0x1d) == 5)
                {
                    vKind = Arm64RegisterVKind.H;
                    elementCount = 8;
                    return true;
                }
                if ((bitValues & 0x19) == 8)
                {
                    vKind = Arm64RegisterVKind.S;
                    elementCount = 2;
                    return true;
                }
                if ((bitValues & 0x19) == 9)
                {
                    vKind = Arm64RegisterVKind.S;
                    elementCount = 4;
                    return true;
                }
                if ((bitValues & 0x11) == 17)
                {
                    vKind = Arm64RegisterVKind.D;
                    elementCount = 2;
                    return true;
                }
                break;
            case 19:
                switch (bitValues)
                {
                    case 0:
                        vKind = Arm64RegisterVKind.B;
                        elementCount = 8;
                        return true;
                    case 1:
                        vKind = Arm64RegisterVKind.B;
                        elementCount = 16;
                        return true;
                    case 2:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 4;
                        return true;
                    case 3:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 8;
                        return true;
                    case 5:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 4;
                        return true;
                }
                break;
            case 20:
                switch (bitValues)
                {
                    case 0:
                        vKind = Arm64RegisterVKind.B;
                        elementCount = 8;
                        return true;
                    case 1:
                        vKind = Arm64RegisterVKind.B;
                        elementCount = 16;
                        return true;
                }
                break;
            case 21:
                switch (bitValues)
                {
                    case 2:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 4;
                        return true;
                    case 3:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 8;
                        return true;
                    case 4:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 2;
                        return true;
                    case 5:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 4;
                        return true;
                    case 7:
                        vKind = Arm64RegisterVKind.D;
                        elementCount = 2;
                        return true;
                }
                break;
            case 22:
                switch (bitValues)
                {
                    case 0:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 2;
                        return true;
                    case 1:
                        vKind = Arm64RegisterVKind.D;
                        elementCount = 2;
                        return true;
                }
                break;
            case 23:
                if ((bitValues & 0xf) == 8)
                {
                    vKind = Arm64RegisterVKind.D;
                    elementCount = 0;
                    return true;
                }
                if ((bitValues & 0x7) == 4)
                {
                    vKind = Arm64RegisterVKind.S;
                    elementCount = 0;
                    return true;
                }
                if ((bitValues & 0x3) == 2)
                {
                    vKind = Arm64RegisterVKind.H;
                    elementCount = 0;
                    return true;
                }
                if ((bitValues & 0x1) == 1)
                {
                    vKind = Arm64RegisterVKind.B;
                    elementCount = 0;
                    return true;
                }
                break;
            case 24:
                switch (bitValues)
                {
                    case 0:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 2;
                        return true;
                    case 1:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 4;
                        return true;
                }
                break;
            case 25:
                switch (bitValues)
                {
                    case 0:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 4;
                        return true;
                    case 1:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 8;
                        return true;
                    case 2:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 2;
                        return true;
                    case 3:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 4;
                        return true;
                    case 4:
                        vKind = Arm64RegisterVKind.D;
                        elementCount = 1;
                        return true;
                    case 5:
                        vKind = Arm64RegisterVKind.D;
                        elementCount = 2;
                        return true;
                }
                break;
            case 26:
                switch (bitValues)
                {
                    case 0:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 4;
                        return true;
                    case 1:
                        vKind = Arm64RegisterVKind.D;
                        elementCount = 2;
                        return true;
                }
                break;
            case 27:
                switch (bitValues)
                {
                    case 0:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 4;
                        return true;
                    case 1:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 8;
                        return true;
                    case 2:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 2;
                        return true;
                    case 3:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 4;
                        return true;
                }
                break;
            case 28:
                switch (bitValues)
                {
                    case 0:
                        vKind = Arm64RegisterVKind.B;
                        elementCount = 8;
                        return true;
                    case 1:
                        vKind = Arm64RegisterVKind.B;
                        elementCount = 16;
                        return true;
                    case 2:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 4;
                        return true;
                    case 3:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 8;
                        return true;
                }
                break;
            case 29:
                switch (bitValues)
                {
                    case 0:
                        vKind = Arm64RegisterVKind.B;
                        elementCount = 8;
                        return true;
                    case 1:
                        vKind = Arm64RegisterVKind.B;
                        elementCount = 16;
                        return true;
                    case 6:
                        vKind = Arm64RegisterVKind.D;
                        elementCount = 1;
                        return true;
                    case 7:
                        vKind = Arm64RegisterVKind.D;
                        elementCount = 2;
                        return true;
                }
                break;
            case 30:
                switch (bitValues)
                {
                    case 2:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 4;
                        return true;
                    case 3:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 8;
                        return true;
                    case 5:
                        vKind = Arm64RegisterVKind.S;
                        elementCount = 4;
                        return true;
                }
                break;
            case 31:
                if ((bitValues & 0x1f) == 17)
                {
                    vKind = Arm64RegisterVKind.D;
                    elementCount = 2;
                    return true;
                }
                if ((bitValues & 0xf) == 8)
                {
                    vKind = Arm64RegisterVKind.S;
                    elementCount = 2;
                    return true;
                }
                if ((bitValues & 0xf) == 9)
                {
                    vKind = Arm64RegisterVKind.S;
                    elementCount = 4;
                    return true;
                }
                if ((bitValues & 0x7) == 4)
                {
                    vKind = Arm64RegisterVKind.H;
                    elementCount = 4;
                    return true;
                }
                if ((bitValues & 0x7) == 5)
                {
                    vKind = Arm64RegisterVKind.H;
                    elementCount = 8;
                    return true;
                }
                if ((bitValues & 0x3) == 2)
                {
                    vKind = Arm64RegisterVKind.B;
                    elementCount = 8;
                    return true;
                }
                if ((bitValues & 0x3) == 3)
                {
                    vKind = Arm64RegisterVKind.B;
                    elementCount = 16;
                    return true;
                }
                break;
            case 32:
                if ((bitValues & 0x7) == 4)
                {
                    vKind = Arm64RegisterVKind.S;
                    elementCount = 0;
                    return true;
                }
                if ((bitValues & 0x3) == 2)
                {
                    vKind = Arm64RegisterVKind.H;
                    elementCount = 0;
                    return true;
                }
                if ((bitValues & 0x1) == 1)
                {
                    vKind = Arm64RegisterVKind.B;
                    elementCount = 0;
                    return true;
                }
                break;
            case 33:
                switch (bitValues)
                {
                    case 0:
                        vKind = Arm64RegisterVKind.H;
                        elementCount = 8;
                        return true;
                    case 3:
                        vKind = Arm64RegisterVKind.Q;
                        elementCount = 1;
                        return true;
                }
                break;
            case 34:
                if ((bitValues & 0x3) == 2)
                {
                    vKind = Arm64RegisterVKind.H;
                    elementCount = 0;
                    return true;
                }
                if ((bitValues & 0x1) == 1)
                {
                    vKind = Arm64RegisterVKind.B;
                    elementCount = 0;
                    return true;
                }
                break;
        }
        
        elementCount = 0;
        vKind = Arm64RegisterVKind.Default;
        return false;
    }
}
