// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
namespace AsmArm64;
static partial class Arm64InstructionFactory
{
    /// <summary>
    /// Floating-point convert from single-precision to BFloat16 format (scalar).
    /// </summary>
    /// <remarks><code>BFCVT Hd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFCVT_bs_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BFCVT(Arm64RegisterH Hd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E634000U; // Encoding for: BFCVT_bs_floatdp1
        raw |= (uint)Hd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute value (scalar).
    /// </summary>
    /// <remarks><code>FABS Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABS_h_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FABS(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EE0C000U; // Encoding for: FABS_h_floatdp1
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute value (scalar).
    /// </summary>
    /// <remarks><code>FABS Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABS_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FABS(Arm64RegisterS Sd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E20C000U; // Encoding for: FABS_s_floatdp1
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute value (scalar).
    /// </summary>
    /// <remarks><code>FABS Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABS_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FABS(Arm64RegisterD Dd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E60C000U; // Encoding for: FABS_d_floatdp1
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point add (scalar).
    /// </summary>
    /// <remarks><code>FADD Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADD_h_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FADD(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
    {
        uint raw = 0x1EE02800U; // Encoding for: FADD_h_floatdp2
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point add (scalar).
    /// </summary>
    /// <remarks><code>FADD Sd, Sn, Sm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADD_s_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FADD(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm)
    {
        uint raw = 0x1E202800U; // Encoding for: FADD_s_floatdp2
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)Sm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point add (scalar).
    /// </summary>
    /// <remarks><code>FADD Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADD_d_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FADD(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
    {
        uint raw = 0x1E602800U; // Encoding for: FADD_d_floatdp2
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point conditional quiet compare (scalar).
    /// </summary>
    /// <remarks><code>FCCMP Hn, Hm, #nzcv, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCCMP_h_floatccmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCCMP(Arm64RegisterH Hn, Arm64RegisterH Hm, byte nzcv, Arm64ConditionalKind cond)
    {
        uint raw = 0x1EE00400U; // Encoding for: FCCMP_h_floatccmp
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        raw |= (uint)(nzcv & 0xF) << 0;
        return raw;
    }
    /// <summary>
    /// Floating-point conditional quiet compare (scalar).
    /// </summary>
    /// <remarks><code>FCCMP Sn, Sm, #nzcv, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCCMP_s_floatccmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCCMP(Arm64RegisterS Sn, Arm64RegisterS Sm, byte nzcv, Arm64ConditionalKind cond)
    {
        uint raw = 0x1E200400U; // Encoding for: FCCMP_s_floatccmp
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)Sm.Index << 16;
        raw |= (uint)(nzcv & 0xF) << 0;
        return raw;
    }
    /// <summary>
    /// Floating-point conditional quiet compare (scalar).
    /// </summary>
    /// <remarks><code>FCCMP Dn, Dm, #nzcv, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCCMP_d_floatccmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCCMP(Arm64RegisterD Dn, Arm64RegisterD Dm, byte nzcv, Arm64ConditionalKind cond)
    {
        uint raw = 0x1E600400U; // Encoding for: FCCMP_d_floatccmp
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        raw |= (uint)(nzcv & 0xF) << 0;
        return raw;
    }
    /// <summary>
    /// Floating-point conditional signaling compare (scalar).
    /// </summary>
    /// <remarks><code>FCCMPE Hn, Hm, #nzcv, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCCMPE_h_floatccmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCCMPE(Arm64RegisterH Hn, Arm64RegisterH Hm, byte nzcv, Arm64ConditionalKind cond)
    {
        uint raw = 0x1EE00410U; // Encoding for: FCCMPE_h_floatccmp
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        raw |= (uint)(nzcv & 0xF) << 0;
        return raw;
    }
    /// <summary>
    /// Floating-point conditional signaling compare (scalar).
    /// </summary>
    /// <remarks><code>FCCMPE Sn, Sm, #nzcv, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCCMPE_s_floatccmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCCMPE(Arm64RegisterS Sn, Arm64RegisterS Sm, byte nzcv, Arm64ConditionalKind cond)
    {
        uint raw = 0x1E200410U; // Encoding for: FCCMPE_s_floatccmp
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)Sm.Index << 16;
        raw |= (uint)(nzcv & 0xF) << 0;
        return raw;
    }
    /// <summary>
    /// Floating-point conditional signaling compare (scalar).
    /// </summary>
    /// <remarks><code>FCCMPE Dn, Dm, #nzcv, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCCMPE_d_floatccmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCCMPE(Arm64RegisterD Dn, Arm64RegisterD Dm, byte nzcv, Arm64ConditionalKind cond)
    {
        uint raw = 0x1E600410U; // Encoding for: FCCMPE_d_floatccmp
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        raw |= (uint)(nzcv & 0xF) << 0;
        return raw;
    }
    /// <summary>
    /// Floating-point quiet compare (scalar).
    /// </summary>
    /// <remarks><code>FCMP Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMP_h_floatcmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMP(Arm64RegisterH Hn, Arm64RegisterH Hm)
    {
        uint raw = 0x1EE02000U; // Encoding for: FCMP_h_floatcmp
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point quiet compare (scalar).
    /// </summary>
    /// <remarks><code>FCMP Hn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMP_hz_floatcmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMP(Arm64RegisterH Hn, float zero = 0.0f)
    {
        uint raw = 0x1EE02008U; // Encoding for: FCMP_hz_floatcmp
        raw |= (uint)Hn.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point quiet compare (scalar).
    /// </summary>
    /// <remarks><code>FCMP Sn, Sm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMP_s_floatcmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMP(Arm64RegisterS Sn, Arm64RegisterS Sm)
    {
        uint raw = 0x1E202000U; // Encoding for: FCMP_s_floatcmp
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)Sm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point quiet compare (scalar).
    /// </summary>
    /// <remarks><code>FCMP Sn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMP_sz_floatcmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMP(Arm64RegisterS Sn, float zero = 0.0f)
    {
        uint raw = 0x1E202008U; // Encoding for: FCMP_sz_floatcmp
        raw |= (uint)Sn.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point quiet compare (scalar).
    /// </summary>
    /// <remarks><code>FCMP Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMP_d_floatcmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMP(Arm64RegisterD Dn, Arm64RegisterD Dm)
    {
        uint raw = 0x1E602000U; // Encoding for: FCMP_d_floatcmp
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point quiet compare (scalar).
    /// </summary>
    /// <remarks><code>FCMP Dn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMP_dz_floatcmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMP(Arm64RegisterD Dn, float zero = 0.0f)
    {
        uint raw = 0x1E602008U; // Encoding for: FCMP_dz_floatcmp
        raw |= (uint)Dn.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point signaling compare (scalar).
    /// </summary>
    /// <remarks><code>FCMPE Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMPE_h_floatcmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMPE(Arm64RegisterH Hn, Arm64RegisterH Hm)
    {
        uint raw = 0x1EE02010U; // Encoding for: FCMPE_h_floatcmp
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point signaling compare (scalar).
    /// </summary>
    /// <remarks><code>FCMPE Hn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMPE_hz_floatcmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMPE(Arm64RegisterH Hn, float zero = 0.0f)
    {
        uint raw = 0x1EE02018U; // Encoding for: FCMPE_hz_floatcmp
        raw |= (uint)Hn.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point signaling compare (scalar).
    /// </summary>
    /// <remarks><code>FCMPE Sn, Sm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMPE_s_floatcmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMPE(Arm64RegisterS Sn, Arm64RegisterS Sm)
    {
        uint raw = 0x1E202010U; // Encoding for: FCMPE_s_floatcmp
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)Sm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point signaling compare (scalar).
    /// </summary>
    /// <remarks><code>FCMPE Sn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMPE_sz_floatcmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMPE(Arm64RegisterS Sn, float zero = 0.0f)
    {
        uint raw = 0x1E202018U; // Encoding for: FCMPE_sz_floatcmp
        raw |= (uint)Sn.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point signaling compare (scalar).
    /// </summary>
    /// <remarks><code>FCMPE Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMPE_d_floatcmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMPE(Arm64RegisterD Dn, Arm64RegisterD Dm)
    {
        uint raw = 0x1E602010U; // Encoding for: FCMPE_d_floatcmp
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point signaling compare (scalar).
    /// </summary>
    /// <remarks><code>FCMPE Dn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMPE_dz_floatcmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMPE(Arm64RegisterD Dn, float zero = 0.0f)
    {
        uint raw = 0x1E602018U; // Encoding for: FCMPE_dz_floatcmp
        raw |= (uint)Dn.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point conditional select (scalar).
    /// </summary>
    /// <remarks><code>FCSEL Hd, Hn, Hm, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCSEL_h_floatsel), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCSEL(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm, Arm64ConditionalKind cond)
    {
        uint raw = 0x1EE00C00U; // Encoding for: FCSEL_h_floatsel
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point conditional select (scalar).
    /// </summary>
    /// <remarks><code>FCSEL Sd, Sn, Sm, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCSEL_s_floatsel), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCSEL(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm, Arm64ConditionalKind cond)
    {
        uint raw = 0x1E200C00U; // Encoding for: FCSEL_s_floatsel
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)Sm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point conditional select (scalar).
    /// </summary>
    /// <remarks><code>FCSEL Dd, Dn, Dm, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCSEL_d_floatsel), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCSEL(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm, Arm64ConditionalKind cond)
    {
        uint raw = 0x1E600C00U; // Encoding for: FCSEL_d_floatsel
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point convert precision (scalar).
    /// </summary>
    /// <remarks><code>FCVT Sd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVT_sh_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVT(Arm64RegisterS Sd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EE24000U; // Encoding for: FCVT_sh_floatdp1
        raw |= (uint)Sd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert precision (scalar).
    /// </summary>
    /// <remarks><code>FCVT Dd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVT_dh_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVT(Arm64RegisterD Dd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EE2C000U; // Encoding for: FCVT_dh_floatdp1
        raw |= (uint)Dd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert precision (scalar).
    /// </summary>
    /// <remarks><code>FCVT Hd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVT_hs_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVT(Arm64RegisterH Hd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E23C000U; // Encoding for: FCVT_hs_floatdp1
        raw |= (uint)Hd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert precision (scalar).
    /// </summary>
    /// <remarks><code>FCVT Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVT_ds_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVT(Arm64RegisterD Dd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E22C000U; // Encoding for: FCVT_ds_floatdp1
        raw |= (uint)Dd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert precision (scalar).
    /// </summary>
    /// <remarks><code>FCVT Hd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVT_hd_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVT(Arm64RegisterH Hd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E63C000U; // Encoding for: FCVT_hd_floatdp1
        raw |= (uint)Hd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert precision (scalar).
    /// </summary>
    /// <remarks><code>FCVT Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVT_sd_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVT(Arm64RegisterS Sd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E624000U; // Encoding for: FCVT_sd_floatdp1
        raw |= (uint)Sd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTAS Sd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_sisd_32h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAS(Arm64RegisterS Sd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EFA0000U; // Encoding for: FCVTAS_sisd_32h
        raw |= (uint)Sd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTAS Dd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_sisd_64h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAS(Arm64RegisterD Dd, Arm64RegisterH Hn)
    {
        uint raw = 0x9EFA0000U; // Encoding for: FCVTAS_sisd_64h
        raw |= (uint)Dd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTAS Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_sisd_64s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAS(Arm64RegisterD Dd, Arm64RegisterS Sn)
    {
        uint raw = 0x9E3A0000U; // Encoding for: FCVTAS_sisd_64s
        raw |= (uint)Dd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTAS Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_sisd_32d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAS(Arm64RegisterS Sd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E7A0000U; // Encoding for: FCVTAS_sisd_32d
        raw |= (uint)Sd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FCVTAS Wd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_32h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAS(Arm64RegisterW Wd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EE40000U; // Encoding for: FCVTAS_32h_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FCVTAS Xd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_64h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAS(Arm64RegisterX Xd, Arm64RegisterH Hn)
    {
        uint raw = 0x9EE40000U; // Encoding for: FCVTAS_64h_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FCVTAS Wd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_32s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAS(Arm64RegisterW Wd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E240000U; // Encoding for: FCVTAS_32s_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FCVTAS Xd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_64s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAS(Arm64RegisterX Xd, Arm64RegisterS Sn)
    {
        uint raw = 0x9E240000U; // Encoding for: FCVTAS_64s_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FCVTAS Wd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_32d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAS(Arm64RegisterW Wd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E640000U; // Encoding for: FCVTAS_32d_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FCVTAS Xd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_64d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAS(Arm64RegisterX Xd, Arm64RegisterD Dn)
    {
        uint raw = 0x9E640000U; // Encoding for: FCVTAS_64d_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTAU Sd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_sisd_32h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAU(Arm64RegisterS Sd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EFB0000U; // Encoding for: FCVTAU_sisd_32h
        raw |= (uint)Sd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTAU Dd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_sisd_64h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAU(Arm64RegisterD Dd, Arm64RegisterH Hn)
    {
        uint raw = 0x9EFB0000U; // Encoding for: FCVTAU_sisd_64h
        raw |= (uint)Dd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTAU Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_sisd_64s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAU(Arm64RegisterD Dd, Arm64RegisterS Sn)
    {
        uint raw = 0x9E3B0000U; // Encoding for: FCVTAU_sisd_64s
        raw |= (uint)Dd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTAU Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_sisd_32d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAU(Arm64RegisterS Sd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E7B0000U; // Encoding for: FCVTAU_sisd_32d
        raw |= (uint)Sd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FCVTAU Wd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_32h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAU(Arm64RegisterW Wd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EE50000U; // Encoding for: FCVTAU_32h_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FCVTAU Xd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_64h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAU(Arm64RegisterX Xd, Arm64RegisterH Hn)
    {
        uint raw = 0x9EE50000U; // Encoding for: FCVTAU_64h_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FCVTAU Wd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_32s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAU(Arm64RegisterW Wd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E250000U; // Encoding for: FCVTAU_32s_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FCVTAU Xd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_64s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAU(Arm64RegisterX Xd, Arm64RegisterS Sn)
    {
        uint raw = 0x9E250000U; // Encoding for: FCVTAU_64s_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FCVTAU Wd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_32d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAU(Arm64RegisterW Wd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E650000U; // Encoding for: FCVTAU_32d_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FCVTAU Xd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_64d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAU(Arm64RegisterX Xd, Arm64RegisterD Dn)
    {
        uint raw = 0x9E650000U; // Encoding for: FCVTAU_64d_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTMS Sd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_sisd_32h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMS(Arm64RegisterS Sd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EF40000U; // Encoding for: FCVTMS_sisd_32h
        raw |= (uint)Sd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTMS Dd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_sisd_64h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMS(Arm64RegisterD Dd, Arm64RegisterH Hn)
    {
        uint raw = 0x9EF40000U; // Encoding for: FCVTMS_sisd_64h
        raw |= (uint)Dd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTMS Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_sisd_64s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMS(Arm64RegisterD Dd, Arm64RegisterS Sn)
    {
        uint raw = 0x9E340000U; // Encoding for: FCVTMS_sisd_64s
        raw |= (uint)Dd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTMS Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_sisd_32d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMS(Arm64RegisterS Sd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E740000U; // Encoding for: FCVTMS_sisd_32d
        raw |= (uint)Sd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTMS Wd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_32h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMS(Arm64RegisterW Wd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EF00000U; // Encoding for: FCVTMS_32h_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTMS Xd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_64h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMS(Arm64RegisterX Xd, Arm64RegisterH Hn)
    {
        uint raw = 0x9EF00000U; // Encoding for: FCVTMS_64h_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTMS Wd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_32s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMS(Arm64RegisterW Wd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E300000U; // Encoding for: FCVTMS_32s_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTMS Xd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_64s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMS(Arm64RegisterX Xd, Arm64RegisterS Sn)
    {
        uint raw = 0x9E300000U; // Encoding for: FCVTMS_64s_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTMS Wd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_32d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMS(Arm64RegisterW Wd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E700000U; // Encoding for: FCVTMS_32d_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTMS Xd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_64d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMS(Arm64RegisterX Xd, Arm64RegisterD Dn)
    {
        uint raw = 0x9E700000U; // Encoding for: FCVTMS_64d_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTMU Sd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_sisd_32h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMU(Arm64RegisterS Sd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EF50000U; // Encoding for: FCVTMU_sisd_32h
        raw |= (uint)Sd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTMU Dd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_sisd_64h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMU(Arm64RegisterD Dd, Arm64RegisterH Hn)
    {
        uint raw = 0x9EF50000U; // Encoding for: FCVTMU_sisd_64h
        raw |= (uint)Dd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTMU Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_sisd_64s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMU(Arm64RegisterD Dd, Arm64RegisterS Sn)
    {
        uint raw = 0x9E350000U; // Encoding for: FCVTMU_sisd_64s
        raw |= (uint)Dd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTMU Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_sisd_32d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMU(Arm64RegisterS Sd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E750000U; // Encoding for: FCVTMU_sisd_32d
        raw |= (uint)Sd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTMU Wd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_32h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMU(Arm64RegisterW Wd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EF10000U; // Encoding for: FCVTMU_32h_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTMU Xd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_64h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMU(Arm64RegisterX Xd, Arm64RegisterH Hn)
    {
        uint raw = 0x9EF10000U; // Encoding for: FCVTMU_64h_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTMU Wd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_32s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMU(Arm64RegisterW Wd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E310000U; // Encoding for: FCVTMU_32s_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTMU Xd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_64s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMU(Arm64RegisterX Xd, Arm64RegisterS Sn)
    {
        uint raw = 0x9E310000U; // Encoding for: FCVTMU_64s_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTMU Wd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_32d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMU(Arm64RegisterW Wd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E710000U; // Encoding for: FCVTMU_32d_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTMU Xd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_64d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMU(Arm64RegisterX Xd, Arm64RegisterD Dn)
    {
        uint raw = 0x9E710000U; // Encoding for: FCVTMU_64d_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTNS Sd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_sisd_32h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNS(Arm64RegisterS Sd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EEA0000U; // Encoding for: FCVTNS_sisd_32h
        raw |= (uint)Sd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTNS Dd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_sisd_64h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNS(Arm64RegisterD Dd, Arm64RegisterH Hn)
    {
        uint raw = 0x9EEA0000U; // Encoding for: FCVTNS_sisd_64h
        raw |= (uint)Dd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTNS Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_sisd_64s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNS(Arm64RegisterD Dd, Arm64RegisterS Sn)
    {
        uint raw = 0x9E2A0000U; // Encoding for: FCVTNS_sisd_64s
        raw |= (uint)Dd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTNS Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_sisd_32d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNS(Arm64RegisterS Sd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E6A0000U; // Encoding for: FCVTNS_sisd_32d
        raw |= (uint)Sd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FCVTNS Wd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_32h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNS(Arm64RegisterW Wd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EE00000U; // Encoding for: FCVTNS_32h_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FCVTNS Xd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_64h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNS(Arm64RegisterX Xd, Arm64RegisterH Hn)
    {
        uint raw = 0x9EE00000U; // Encoding for: FCVTNS_64h_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FCVTNS Wd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_32s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNS(Arm64RegisterW Wd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E200000U; // Encoding for: FCVTNS_32s_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FCVTNS Xd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_64s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNS(Arm64RegisterX Xd, Arm64RegisterS Sn)
    {
        uint raw = 0x9E200000U; // Encoding for: FCVTNS_64s_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FCVTNS Wd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_32d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNS(Arm64RegisterW Wd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E600000U; // Encoding for: FCVTNS_32d_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FCVTNS Xd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_64d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNS(Arm64RegisterX Xd, Arm64RegisterD Dn)
    {
        uint raw = 0x9E600000U; // Encoding for: FCVTNS_64d_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTNU Sd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_sisd_32h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNU(Arm64RegisterS Sd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EEB0000U; // Encoding for: FCVTNU_sisd_32h
        raw |= (uint)Sd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTNU Dd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_sisd_64h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNU(Arm64RegisterD Dd, Arm64RegisterH Hn)
    {
        uint raw = 0x9EEB0000U; // Encoding for: FCVTNU_sisd_64h
        raw |= (uint)Dd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTNU Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_sisd_64s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNU(Arm64RegisterD Dd, Arm64RegisterS Sn)
    {
        uint raw = 0x9E2B0000U; // Encoding for: FCVTNU_sisd_64s
        raw |= (uint)Dd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTNU Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_sisd_32d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNU(Arm64RegisterS Sd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E6B0000U; // Encoding for: FCVTNU_sisd_32d
        raw |= (uint)Sd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FCVTNU Wd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_32h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNU(Arm64RegisterW Wd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EE10000U; // Encoding for: FCVTNU_32h_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FCVTNU Xd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_64h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNU(Arm64RegisterX Xd, Arm64RegisterH Hn)
    {
        uint raw = 0x9EE10000U; // Encoding for: FCVTNU_64h_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FCVTNU Wd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_32s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNU(Arm64RegisterW Wd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E210000U; // Encoding for: FCVTNU_32s_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FCVTNU Xd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_64s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNU(Arm64RegisterX Xd, Arm64RegisterS Sn)
    {
        uint raw = 0x9E210000U; // Encoding for: FCVTNU_64s_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FCVTNU Wd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_32d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNU(Arm64RegisterW Wd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E610000U; // Encoding for: FCVTNU_32d_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FCVTNU Xd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_64d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNU(Arm64RegisterX Xd, Arm64RegisterD Dn)
    {
        uint raw = 0x9E610000U; // Encoding for: FCVTNU_64d_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTPS Sd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_sisd_32h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPS(Arm64RegisterS Sd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EF20000U; // Encoding for: FCVTPS_sisd_32h
        raw |= (uint)Sd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTPS Dd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_sisd_64h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPS(Arm64RegisterD Dd, Arm64RegisterH Hn)
    {
        uint raw = 0x9EF20000U; // Encoding for: FCVTPS_sisd_64h
        raw |= (uint)Dd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTPS Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_sisd_64s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPS(Arm64RegisterD Dd, Arm64RegisterS Sn)
    {
        uint raw = 0x9E320000U; // Encoding for: FCVTPS_sisd_64s
        raw |= (uint)Dd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTPS Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_sisd_32d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPS(Arm64RegisterS Sd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E720000U; // Encoding for: FCVTPS_sisd_32d
        raw |= (uint)Sd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTPS Wd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_32h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPS(Arm64RegisterW Wd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EE80000U; // Encoding for: FCVTPS_32h_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTPS Xd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_64h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPS(Arm64RegisterX Xd, Arm64RegisterH Hn)
    {
        uint raw = 0x9EE80000U; // Encoding for: FCVTPS_64h_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTPS Wd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_32s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPS(Arm64RegisterW Wd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E280000U; // Encoding for: FCVTPS_32s_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTPS Xd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_64s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPS(Arm64RegisterX Xd, Arm64RegisterS Sn)
    {
        uint raw = 0x9E280000U; // Encoding for: FCVTPS_64s_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTPS Wd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_32d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPS(Arm64RegisterW Wd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E680000U; // Encoding for: FCVTPS_32d_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTPS Xd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_64d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPS(Arm64RegisterX Xd, Arm64RegisterD Dn)
    {
        uint raw = 0x9E680000U; // Encoding for: FCVTPS_64d_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTPU Sd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_sisd_32h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPU(Arm64RegisterS Sd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EF30000U; // Encoding for: FCVTPU_sisd_32h
        raw |= (uint)Sd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTPU Dd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_sisd_64h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPU(Arm64RegisterD Dd, Arm64RegisterH Hn)
    {
        uint raw = 0x9EF30000U; // Encoding for: FCVTPU_sisd_64h
        raw |= (uint)Dd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTPU Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_sisd_64s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPU(Arm64RegisterD Dd, Arm64RegisterS Sn)
    {
        uint raw = 0x9E330000U; // Encoding for: FCVTPU_sisd_64s
        raw |= (uint)Dd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTPU Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_sisd_32d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPU(Arm64RegisterS Sd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E730000U; // Encoding for: FCVTPU_sisd_32d
        raw |= (uint)Sd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTPU Wd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_32h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPU(Arm64RegisterW Wd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EE90000U; // Encoding for: FCVTPU_32h_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTPU Xd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_64h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPU(Arm64RegisterX Xd, Arm64RegisterH Hn)
    {
        uint raw = 0x9EE90000U; // Encoding for: FCVTPU_64h_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTPU Wd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_32s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPU(Arm64RegisterW Wd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E290000U; // Encoding for: FCVTPU_32s_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTPU Xd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_64s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPU(Arm64RegisterX Xd, Arm64RegisterS Sn)
    {
        uint raw = 0x9E290000U; // Encoding for: FCVTPU_64s_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTPU Wd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_32d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPU(Arm64RegisterW Wd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E690000U; // Encoding for: FCVTPU_32d_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTPU Xd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_64d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPU(Arm64RegisterX Xd, Arm64RegisterD Dn)
    {
        uint raw = 0x9E690000U; // Encoding for: FCVTPU_64d_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTZS Sd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_sisd_32h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterS Sd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EF60000U; // Encoding for: FCVTZS_sisd_32h
        raw |= (uint)Sd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTZS Dd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_sisd_64h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterD Dd, Arm64RegisterH Hn)
    {
        uint raw = 0x9EF60000U; // Encoding for: FCVTZS_sisd_64h
        raw |= (uint)Dd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTZS Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_sisd_64s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterD Dd, Arm64RegisterS Sn)
    {
        uint raw = 0x9E360000U; // Encoding for: FCVTZS_sisd_64s
        raw |= (uint)Dd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTZS Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_sisd_32d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterS Sd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E760000U; // Encoding for: FCVTZS_sisd_32d
        raw |= (uint)Sd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZS Wd, Hn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_32h_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterW Wd, Arm64RegisterH Hn, uint fbits)
    {
        uint raw = 0x1ED80000U; // Encoding for: FCVTZS_32h_float2fix
        raw |= (uint)Wd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)((64 - fbits) & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZS Xd, Hn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_64h_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterX Xd, Arm64RegisterH Hn, uint fbits)
    {
        uint raw = 0x9ED80000U; // Encoding for: FCVTZS_64h_float2fix
        raw |= (uint)Xd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)((64 - fbits) & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZS Wd, Sn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_32s_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterW Wd, Arm64RegisterS Sn, uint fbits)
    {
        uint raw = 0x1E180000U; // Encoding for: FCVTZS_32s_float2fix
        raw |= (uint)Wd.Index;
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)((64 - fbits) & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZS Xd, Sn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_64s_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterX Xd, Arm64RegisterS Sn, uint fbits)
    {
        uint raw = 0x9E180000U; // Encoding for: FCVTZS_64s_float2fix
        raw |= (uint)Xd.Index;
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)((64 - fbits) & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZS Wd, Dn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_32d_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterW Wd, Arm64RegisterD Dn, uint fbits)
    {
        uint raw = 0x1E580000U; // Encoding for: FCVTZS_32d_float2fix
        raw |= (uint)Wd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)((64 - fbits) & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZS Xd, Dn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_64d_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterX Xd, Arm64RegisterD Dn, uint fbits)
    {
        uint raw = 0x9E580000U; // Encoding for: FCVTZS_64d_float2fix
        raw |= (uint)Xd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)((64 - fbits) & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZS Wd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_32h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterW Wd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EF80000U; // Encoding for: FCVTZS_32h_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZS Xd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_64h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterX Xd, Arm64RegisterH Hn)
    {
        uint raw = 0x9EF80000U; // Encoding for: FCVTZS_64h_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZS Wd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_32s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterW Wd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E380000U; // Encoding for: FCVTZS_32s_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZS Xd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_64s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterX Xd, Arm64RegisterS Sn)
    {
        uint raw = 0x9E380000U; // Encoding for: FCVTZS_64s_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZS Wd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_32d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterW Wd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E780000U; // Encoding for: FCVTZS_32d_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZS Xd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_64d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterX Xd, Arm64RegisterD Dn)
    {
        uint raw = 0x9E780000U; // Encoding for: FCVTZS_64d_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTZU Sd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_sisd_32h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterS Sd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EF70000U; // Encoding for: FCVTZU_sisd_32h
        raw |= (uint)Sd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTZU Dd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_sisd_64h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterD Dd, Arm64RegisterH Hn)
    {
        uint raw = 0x9EF70000U; // Encoding for: FCVTZU_sisd_64h
        raw |= (uint)Dd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTZU Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_sisd_64s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterD Dd, Arm64RegisterS Sn)
    {
        uint raw = 0x9E370000U; // Encoding for: FCVTZU_sisd_64s
        raw |= (uint)Dd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTZU Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_sisd_32d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterS Sd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E770000U; // Encoding for: FCVTZU_sisd_32d
        raw |= (uint)Sd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZU Wd, Hn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_32h_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterW Wd, Arm64RegisterH Hn, uint fbits)
    {
        uint raw = 0x1ED90000U; // Encoding for: FCVTZU_32h_float2fix
        raw |= (uint)Wd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)((64 - fbits) & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZU Xd, Hn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_64h_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterX Xd, Arm64RegisterH Hn, uint fbits)
    {
        uint raw = 0x9ED90000U; // Encoding for: FCVTZU_64h_float2fix
        raw |= (uint)Xd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)((64 - fbits) & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZU Wd, Sn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_32s_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterW Wd, Arm64RegisterS Sn, uint fbits)
    {
        uint raw = 0x1E190000U; // Encoding for: FCVTZU_32s_float2fix
        raw |= (uint)Wd.Index;
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)((64 - fbits) & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZU Xd, Sn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_64s_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterX Xd, Arm64RegisterS Sn, uint fbits)
    {
        uint raw = 0x9E190000U; // Encoding for: FCVTZU_64s_float2fix
        raw |= (uint)Xd.Index;
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)((64 - fbits) & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZU Wd, Dn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_32d_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterW Wd, Arm64RegisterD Dn, uint fbits)
    {
        uint raw = 0x1E590000U; // Encoding for: FCVTZU_32d_float2fix
        raw |= (uint)Wd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)((64 - fbits) & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZU Xd, Dn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_64d_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterX Xd, Arm64RegisterD Dn, uint fbits)
    {
        uint raw = 0x9E590000U; // Encoding for: FCVTZU_64d_float2fix
        raw |= (uint)Xd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)((64 - fbits) & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZU Wd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_32h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterW Wd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EF90000U; // Encoding for: FCVTZU_32h_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZU Xd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_64h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterX Xd, Arm64RegisterH Hn)
    {
        uint raw = 0x9EF90000U; // Encoding for: FCVTZU_64h_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZU Wd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_32s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterW Wd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E390000U; // Encoding for: FCVTZU_32s_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZU Xd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_64s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterX Xd, Arm64RegisterS Sn)
    {
        uint raw = 0x9E390000U; // Encoding for: FCVTZU_64s_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZU Wd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_32d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterW Wd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E790000U; // Encoding for: FCVTZU_32d_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZU Xd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_64d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterX Xd, Arm64RegisterD Dn)
    {
        uint raw = 0x9E790000U; // Encoding for: FCVTZU_64d_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point divide (scalar).
    /// </summary>
    /// <remarks><code>FDIV Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDIV_h_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FDIV(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
    {
        uint raw = 0x1EE01800U; // Encoding for: FDIV_h_floatdp2
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point divide (scalar).
    /// </summary>
    /// <remarks><code>FDIV Sd, Sn, Sm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDIV_s_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FDIV(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm)
    {
        uint raw = 0x1E201800U; // Encoding for: FDIV_s_floatdp2
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)Sm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point divide (scalar).
    /// </summary>
    /// <remarks><code>FDIV Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDIV_d_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FDIV(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
    {
        uint raw = 0x1E601800U; // Encoding for: FDIV_d_floatdp2
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point Javascript convert to signed fixed-point, rounding toward zero.
    /// </summary>
    /// <remarks><code>FJCVTZS Wd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FJCVTZS_32d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FJCVTZS(Arm64RegisterW Wd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E7E0000U; // Encoding for: FJCVTZS_32d_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-add (scalar).
    /// </summary>
    /// <remarks><code>FMADD Hd, Hn, Hm, Ha</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMADD_h_floatdp3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMADD(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm, Arm64RegisterH Ha)
    {
        uint raw = 0x1FC00000U; // Encoding for: FMADD_h_floatdp3
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        raw |= (uint)Ha.Index << 10;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-add (scalar).
    /// </summary>
    /// <remarks><code>FMADD Sd, Sn, Sm, Sa</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMADD_s_floatdp3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMADD(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm, Arm64RegisterS Sa)
    {
        uint raw = 0x1F000000U; // Encoding for: FMADD_s_floatdp3
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)Sm.Index << 16;
        raw |= (uint)Sa.Index << 10;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-add (scalar).
    /// </summary>
    /// <remarks><code>FMADD Dd, Dn, Dm, Da</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMADD_d_floatdp3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMADD(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm, Arm64RegisterD Da)
    {
        uint raw = 0x1F400000U; // Encoding for: FMADD_d_floatdp3
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        raw |= (uint)Da.Index << 10;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum (scalar).
    /// </summary>
    /// <remarks><code>FMAX Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAX_h_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAX(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
    {
        uint raw = 0x1EE04800U; // Encoding for: FMAX_h_floatdp2
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum (scalar).
    /// </summary>
    /// <remarks><code>FMAX Sd, Sn, Sm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAX_s_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAX(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm)
    {
        uint raw = 0x1E204800U; // Encoding for: FMAX_s_floatdp2
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)Sm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum (scalar).
    /// </summary>
    /// <remarks><code>FMAX Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAX_d_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAX(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
    {
        uint raw = 0x1E604800U; // Encoding for: FMAX_d_floatdp2
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum number (scalar).
    /// </summary>
    /// <remarks><code>FMAXNM Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNM_h_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXNM(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
    {
        uint raw = 0x1EE06800U; // Encoding for: FMAXNM_h_floatdp2
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum number (scalar).
    /// </summary>
    /// <remarks><code>FMAXNM Sd, Sn, Sm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNM_s_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXNM(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm)
    {
        uint raw = 0x1E206800U; // Encoding for: FMAXNM_s_floatdp2
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)Sm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum number (scalar).
    /// </summary>
    /// <remarks><code>FMAXNM Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNM_d_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXNM(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
    {
        uint raw = 0x1E606800U; // Encoding for: FMAXNM_d_floatdp2
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum (scalar).
    /// </summary>
    /// <remarks><code>FMIN Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMIN_h_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMIN(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
    {
        uint raw = 0x1EE05800U; // Encoding for: FMIN_h_floatdp2
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum (scalar).
    /// </summary>
    /// <remarks><code>FMIN Sd, Sn, Sm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMIN_s_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMIN(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm)
    {
        uint raw = 0x1E205800U; // Encoding for: FMIN_s_floatdp2
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)Sm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum (scalar).
    /// </summary>
    /// <remarks><code>FMIN Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMIN_d_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMIN(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
    {
        uint raw = 0x1E605800U; // Encoding for: FMIN_d_floatdp2
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum number (scalar).
    /// </summary>
    /// <remarks><code>FMINNM Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNM_h_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINNM(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
    {
        uint raw = 0x1EE07800U; // Encoding for: FMINNM_h_floatdp2
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum number (scalar).
    /// </summary>
    /// <remarks><code>FMINNM Sd, Sn, Sm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNM_s_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINNM(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm)
    {
        uint raw = 0x1E207800U; // Encoding for: FMINNM_s_floatdp2
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)Sm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum number (scalar).
    /// </summary>
    /// <remarks><code>FMINNM Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNM_d_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINNM(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
    {
        uint raw = 0x1E607800U; // Encoding for: FMINNM_d_floatdp2
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Wd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_32h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMOV(Arm64RegisterW Wd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EE60000U; // Encoding for: FMOV_32h_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Xd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_64h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMOV(Arm64RegisterX Xd, Arm64RegisterH Hn)
    {
        uint raw = 0x9EE60000U; // Encoding for: FMOV_64h_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Hd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_h32_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMOV(Arm64RegisterH Hd, Arm64RegisterW Wn)
    {
        uint raw = 0x1EE70000U; // Encoding for: FMOV_h32_float2int
        raw |= (uint)Hd.Index;
        raw |= (uint)Wn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Sd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_s32_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMOV(Arm64RegisterS Sd, Arm64RegisterW Wn)
    {
        uint raw = 0x1E270000U; // Encoding for: FMOV_s32_float2int
        raw |= (uint)Sd.Index;
        raw |= (uint)Wn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Wd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_32s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMOV(Arm64RegisterW Wd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E260000U; // Encoding for: FMOV_32s_float2int
        raw |= (uint)Wd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Hd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_h64_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMOV(Arm64RegisterH Hd, Arm64RegisterX Xn)
    {
        uint raw = 0x9EE70000U; // Encoding for: FMOV_h64_float2int
        raw |= (uint)Hd.Index;
        raw |= (uint)Xn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Dd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_d64_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMOV(Arm64RegisterD Dd, Arm64RegisterX Xn)
    {
        uint raw = 0x9E670000U; // Encoding for: FMOV_d64_float2int
        raw |= (uint)Dd.Index;
        raw |= (uint)Xn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Vd.D[1], Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_v64i_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMOV(Arm64RegisterV_D.Indexed Vd_D, Arm64RegisterX Xn)
    {
        uint raw = 0x9EAF0000U; // Encoding for: FMOV_v64i_float2int
        raw |= (uint)Vd_D.Index;
        {
            // Write the element indexer for Vd_D.ElementIndex
            var _i_ = Vd_D.ElementIndex & 0x0;
        }
        raw |= (uint)Xn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Xd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_64d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMOV(Arm64RegisterX Xd, Arm64RegisterD Dn)
    {
        uint raw = 0x9E660000U; // Encoding for: FMOV_64d_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Xd, Vn.D[1]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_64vx_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMOV(Arm64RegisterX Xd, Arm64RegisterV_D.Indexed Vn_D)
    {
        uint raw = 0x9EAE0000U; // Encoding for: FMOV_64vx_float2int
        raw |= (uint)Xd.Index;
        raw |= (uint)Vn_D.Index << 5;
        {
            // Write the element indexer for Vn_D.ElementIndex
            var _i_ = Vn_D.ElementIndex & 0x0;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point move register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_h_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMOV(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EE04000U; // Encoding for: FMOV_h_floatdp1
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point move register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMOV(Arm64RegisterS Sd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E204000U; // Encoding for: FMOV_s_floatdp1
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point move register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMOV(Arm64RegisterD Dd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E604000U; // Encoding for: FMOV_d_floatdp1
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point move immediate (scalar).
    /// </summary>
    /// <remarks><code>FMOV Hd, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_h_floatimm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMOV(Arm64RegisterH Hd, Arm64FloatImmediate imm)
    {
        uint raw = 0x1EE01000U; // Encoding for: FMOV_h_floatimm
        raw |= (uint)Hd.Index;
        raw |= (uint)imm.Value << 13;
        return raw;
    }
    /// <summary>
    /// Floating-point move immediate (scalar).
    /// </summary>
    /// <remarks><code>FMOV Sd, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_s_floatimm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMOV(Arm64RegisterS Sd, Arm64FloatImmediate imm)
    {
        uint raw = 0x1E201000U; // Encoding for: FMOV_s_floatimm
        raw |= (uint)Sd.Index;
        raw |= (uint)imm.Value << 13;
        return raw;
    }
    /// <summary>
    /// Floating-point move immediate (scalar).
    /// </summary>
    /// <remarks><code>FMOV Dd, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_d_floatimm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMOV(Arm64RegisterD Dd, Arm64FloatImmediate imm)
    {
        uint raw = 0x1E601000U; // Encoding for: FMOV_d_floatimm
        raw |= (uint)Dd.Index;
        raw |= (uint)imm.Value << 13;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-subtract (scalar).
    /// </summary>
    /// <remarks><code>FMSUB Hd, Hn, Hm, Ha</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMSUB_h_floatdp3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMSUB(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm, Arm64RegisterH Ha)
    {
        uint raw = 0x1FC08000U; // Encoding for: FMSUB_h_floatdp3
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        raw |= (uint)Ha.Index << 10;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-subtract (scalar).
    /// </summary>
    /// <remarks><code>FMSUB Sd, Sn, Sm, Sa</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMSUB_s_floatdp3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMSUB(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm, Arm64RegisterS Sa)
    {
        uint raw = 0x1F008000U; // Encoding for: FMSUB_s_floatdp3
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)Sm.Index << 16;
        raw |= (uint)Sa.Index << 10;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-subtract (scalar).
    /// </summary>
    /// <remarks><code>FMSUB Dd, Dn, Dm, Da</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMSUB_d_floatdp3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMSUB(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm, Arm64RegisterD Da)
    {
        uint raw = 0x1F408000U; // Encoding for: FMSUB_d_floatdp3
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        raw |= (uint)Da.Index << 10;
        return raw;
    }
    /// <summary>
    /// Floating-point multiply (scalar).
    /// </summary>
    /// <remarks><code>FMUL Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_h_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMUL(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
    {
        uint raw = 0x1EE00800U; // Encoding for: FMUL_h_floatdp2
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point multiply (scalar).
    /// </summary>
    /// <remarks><code>FMUL Sd, Sn, Sm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_s_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMUL(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm)
    {
        uint raw = 0x1E200800U; // Encoding for: FMUL_s_floatdp2
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)Sm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point multiply (scalar).
    /// </summary>
    /// <remarks><code>FMUL Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_d_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMUL(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
    {
        uint raw = 0x1E600800U; // Encoding for: FMUL_d_floatdp2
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point negate (scalar).
    /// </summary>
    /// <remarks><code>FNEG Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNEG_h_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FNEG(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EE14000U; // Encoding for: FNEG_h_floatdp1
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point negate (scalar).
    /// </summary>
    /// <remarks><code>FNEG Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNEG_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FNEG(Arm64RegisterS Sd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E214000U; // Encoding for: FNEG_s_floatdp1
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point negate (scalar).
    /// </summary>
    /// <remarks><code>FNEG Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNEG_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FNEG(Arm64RegisterD Dd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E614000U; // Encoding for: FNEG_d_floatdp1
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point negated fused multiply-add (scalar).
    /// </summary>
    /// <remarks><code>FNMADD Hd, Hn, Hm, Ha</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNMADD_h_floatdp3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FNMADD(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm, Arm64RegisterH Ha)
    {
        uint raw = 0x1FE00000U; // Encoding for: FNMADD_h_floatdp3
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        raw |= (uint)Ha.Index << 10;
        return raw;
    }
    /// <summary>
    /// Floating-point negated fused multiply-add (scalar).
    /// </summary>
    /// <remarks><code>FNMADD Sd, Sn, Sm, Sa</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNMADD_s_floatdp3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FNMADD(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm, Arm64RegisterS Sa)
    {
        uint raw = 0x1F200000U; // Encoding for: FNMADD_s_floatdp3
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)Sm.Index << 16;
        raw |= (uint)Sa.Index << 10;
        return raw;
    }
    /// <summary>
    /// Floating-point negated fused multiply-add (scalar).
    /// </summary>
    /// <remarks><code>FNMADD Dd, Dn, Dm, Da</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNMADD_d_floatdp3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FNMADD(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm, Arm64RegisterD Da)
    {
        uint raw = 0x1F600000U; // Encoding for: FNMADD_d_floatdp3
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        raw |= (uint)Da.Index << 10;
        return raw;
    }
    /// <summary>
    /// Floating-point negated fused multiply-subtract (scalar).
    /// </summary>
    /// <remarks><code>FNMSUB Hd, Hn, Hm, Ha</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNMSUB_h_floatdp3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FNMSUB(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm, Arm64RegisterH Ha)
    {
        uint raw = 0x1FE08000U; // Encoding for: FNMSUB_h_floatdp3
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        raw |= (uint)Ha.Index << 10;
        return raw;
    }
    /// <summary>
    /// Floating-point negated fused multiply-subtract (scalar).
    /// </summary>
    /// <remarks><code>FNMSUB Sd, Sn, Sm, Sa</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNMSUB_s_floatdp3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FNMSUB(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm, Arm64RegisterS Sa)
    {
        uint raw = 0x1F208000U; // Encoding for: FNMSUB_s_floatdp3
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)Sm.Index << 16;
        raw |= (uint)Sa.Index << 10;
        return raw;
    }
    /// <summary>
    /// Floating-point negated fused multiply-subtract (scalar).
    /// </summary>
    /// <remarks><code>FNMSUB Dd, Dn, Dm, Da</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNMSUB_d_floatdp3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FNMSUB(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm, Arm64RegisterD Da)
    {
        uint raw = 0x1F608000U; // Encoding for: FNMSUB_d_floatdp3
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        raw |= (uint)Da.Index << 10;
        return raw;
    }
    /// <summary>
    /// Floating-point multiply-negate (scalar).
    /// </summary>
    /// <remarks><code>FNMUL Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNMUL_h_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FNMUL(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
    {
        uint raw = 0x1EE08800U; // Encoding for: FNMUL_h_floatdp2
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point multiply-negate (scalar).
    /// </summary>
    /// <remarks><code>FNMUL Sd, Sn, Sm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNMUL_s_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FNMUL(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm)
    {
        uint raw = 0x1E208800U; // Encoding for: FNMUL_s_floatdp2
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)Sm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point multiply-negate (scalar).
    /// </summary>
    /// <remarks><code>FNMUL Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNMUL_d_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FNMUL(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
    {
        uint raw = 0x1E608800U; // Encoding for: FNMUL_d_floatdp2
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point round to 32-bit integer, using current rounding mode (scalar).
    /// </summary>
    /// <remarks><code>FRINT32X Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT32X_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINT32X(Arm64RegisterS Sd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E28C000U; // Encoding for: FRINT32X_s_floatdp1
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to 32-bit integer, using current rounding mode (scalar).
    /// </summary>
    /// <remarks><code>FRINT32X Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT32X_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINT32X(Arm64RegisterD Dd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E68C000U; // Encoding for: FRINT32X_d_floatdp1
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to 32-bit integer toward zero (scalar).
    /// </summary>
    /// <remarks><code>FRINT32Z Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT32Z_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINT32Z(Arm64RegisterS Sd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E284000U; // Encoding for: FRINT32Z_s_floatdp1
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to 32-bit integer toward zero (scalar).
    /// </summary>
    /// <remarks><code>FRINT32Z Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT32Z_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINT32Z(Arm64RegisterD Dd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E684000U; // Encoding for: FRINT32Z_d_floatdp1
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to 64-bit integer, using current rounding mode (scalar).
    /// </summary>
    /// <remarks><code>FRINT64X Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT64X_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINT64X(Arm64RegisterS Sd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E29C000U; // Encoding for: FRINT64X_s_floatdp1
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to 64-bit integer, using current rounding mode (scalar).
    /// </summary>
    /// <remarks><code>FRINT64X Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT64X_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINT64X(Arm64RegisterD Dd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E69C000U; // Encoding for: FRINT64X_d_floatdp1
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to 64-bit integer toward zero (scalar).
    /// </summary>
    /// <remarks><code>FRINT64Z Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT64Z_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINT64Z(Arm64RegisterS Sd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E294000U; // Encoding for: FRINT64Z_s_floatdp1
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to 64-bit integer toward zero (scalar).
    /// </summary>
    /// <remarks><code>FRINT64Z Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT64Z_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINT64Z(Arm64RegisterD Dd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E694000U; // Encoding for: FRINT64Z_d_floatdp1
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FRINTA Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTA_h_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTA(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EE64000U; // Encoding for: FRINTA_h_floatdp1
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FRINTA Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTA_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTA(Arm64RegisterS Sd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E264000U; // Encoding for: FRINTA_s_floatdp1
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FRINTA Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTA_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTA(Arm64RegisterD Dd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E664000U; // Encoding for: FRINTA_d_floatdp1
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, using current rounding mode (scalar).
    /// </summary>
    /// <remarks><code>FRINTI Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTI_h_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTI(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EE7C000U; // Encoding for: FRINTI_h_floatdp1
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, using current rounding mode (scalar).
    /// </summary>
    /// <remarks><code>FRINTI Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTI_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTI(Arm64RegisterS Sd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E27C000U; // Encoding for: FRINTI_s_floatdp1
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, using current rounding mode (scalar).
    /// </summary>
    /// <remarks><code>FRINTI Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTI_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTI(Arm64RegisterD Dd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E67C000U; // Encoding for: FRINTI_d_floatdp1
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FRINTM Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTM_h_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTM(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EE54000U; // Encoding for: FRINTM_h_floatdp1
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FRINTM Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTM_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTM(Arm64RegisterS Sd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E254000U; // Encoding for: FRINTM_s_floatdp1
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FRINTM Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTM_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTM(Arm64RegisterD Dd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E654000U; // Encoding for: FRINTM_d_floatdp1
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FRINTN Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTN_h_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTN(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EE44000U; // Encoding for: FRINTN_h_floatdp1
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FRINTN Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTN_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTN(Arm64RegisterS Sd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E244000U; // Encoding for: FRINTN_s_floatdp1
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FRINTN Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTN_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTN(Arm64RegisterD Dd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E644000U; // Encoding for: FRINTN_d_floatdp1
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FRINTP Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTP_h_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTP(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EE4C000U; // Encoding for: FRINTP_h_floatdp1
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FRINTP Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTP_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTP(Arm64RegisterS Sd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E24C000U; // Encoding for: FRINTP_s_floatdp1
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FRINTP Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTP_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTP(Arm64RegisterD Dd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E64C000U; // Encoding for: FRINTP_d_floatdp1
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral exact, using current rounding mode (scalar).
    /// </summary>
    /// <remarks><code>FRINTX Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTX_h_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTX(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EE74000U; // Encoding for: FRINTX_h_floatdp1
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral exact, using current rounding mode (scalar).
    /// </summary>
    /// <remarks><code>FRINTX Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTX_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTX(Arm64RegisterS Sd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E274000U; // Encoding for: FRINTX_s_floatdp1
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral exact, using current rounding mode (scalar).
    /// </summary>
    /// <remarks><code>FRINTX Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTX_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTX(Arm64RegisterD Dd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E674000U; // Encoding for: FRINTX_d_floatdp1
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, toward zero (scalar).
    /// </summary>
    /// <remarks><code>FRINTZ Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTZ_h_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTZ(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EE5C000U; // Encoding for: FRINTZ_h_floatdp1
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, toward zero (scalar).
    /// </summary>
    /// <remarks><code>FRINTZ Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTZ_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTZ(Arm64RegisterS Sd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E25C000U; // Encoding for: FRINTZ_s_floatdp1
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, toward zero (scalar).
    /// </summary>
    /// <remarks><code>FRINTZ Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTZ_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTZ(Arm64RegisterD Dd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E65C000U; // Encoding for: FRINTZ_d_floatdp1
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point square root (scalar).
    /// </summary>
    /// <remarks><code>FSQRT Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSQRT_h_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FSQRT(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x1EE1C000U; // Encoding for: FSQRT_h_floatdp1
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point square root (scalar).
    /// </summary>
    /// <remarks><code>FSQRT Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSQRT_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FSQRT(Arm64RegisterS Sd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E21C000U; // Encoding for: FSQRT_s_floatdp1
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point square root (scalar).
    /// </summary>
    /// <remarks><code>FSQRT Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSQRT_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FSQRT(Arm64RegisterD Dd, Arm64RegisterD Dn)
    {
        uint raw = 0x1E61C000U; // Encoding for: FSQRT_d_floatdp1
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point subtract (scalar).
    /// </summary>
    /// <remarks><code>FSUB Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSUB_h_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FSUB(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
    {
        uint raw = 0x1EE03800U; // Encoding for: FSUB_h_floatdp2
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point subtract (scalar).
    /// </summary>
    /// <remarks><code>FSUB Sd, Sn, Sm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSUB_s_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FSUB(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm)
    {
        uint raw = 0x1E203800U; // Encoding for: FSUB_s_floatdp2
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)Sm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point subtract (scalar).
    /// </summary>
    /// <remarks><code>FSUB Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSUB_d_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FSUB(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
    {
        uint raw = 0x1E603800U; // Encoding for: FSUB_d_floatdp2
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed integer convert to floating-point (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>SCVTF Hd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_sisd_32h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterH Hd, Arm64RegisterS Sn)
    {
        uint raw = 0x1EFC0000U; // Encoding for: SCVTF_sisd_32h
        raw |= (uint)Hd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed integer convert to floating-point (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>SCVTF Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_sisd_32d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterD Dd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E7C0000U; // Encoding for: SCVTF_sisd_32d
        raw |= (uint)Dd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed integer convert to floating-point (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>SCVTF Hd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_sisd_64h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterH Hd, Arm64RegisterD Dn)
    {
        uint raw = 0x9EFC0000U; // Encoding for: SCVTF_sisd_64h
        raw |= (uint)Hd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed integer convert to floating-point (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>SCVTF Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_sisd_64s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterS Sd, Arm64RegisterD Dn)
    {
        uint raw = 0x9E3C0000U; // Encoding for: SCVTF_sisd_64s
        raw |= (uint)Sd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed fixed-point convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>SCVTF Hd, Wn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_h32_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterH Hd, Arm64RegisterW Wn, uint fbits)
    {
        uint raw = 0x1EC20000U; // Encoding for: SCVTF_h32_float2fix
        raw |= (uint)Hd.Index;
        raw |= (uint)Wn.Index << 5;
        raw |= (uint)((64 - fbits) & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Signed fixed-point convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>SCVTF Hd, Xn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_h64_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterH Hd, Arm64RegisterX Xn, uint fbits)
    {
        uint raw = 0x9EC20000U; // Encoding for: SCVTF_h64_float2fix
        raw |= (uint)Hd.Index;
        raw |= (uint)Xn.Index << 5;
        raw |= (uint)((64 - fbits) & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Signed fixed-point convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>SCVTF Sd, Wn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_s32_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterS Sd, Arm64RegisterW Wn, uint fbits)
    {
        uint raw = 0x1E020000U; // Encoding for: SCVTF_s32_float2fix
        raw |= (uint)Sd.Index;
        raw |= (uint)Wn.Index << 5;
        raw |= (uint)((64 - fbits) & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Signed fixed-point convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>SCVTF Sd, Xn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_s64_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterS Sd, Arm64RegisterX Xn, uint fbits)
    {
        uint raw = 0x9E020000U; // Encoding for: SCVTF_s64_float2fix
        raw |= (uint)Sd.Index;
        raw |= (uint)Xn.Index << 5;
        raw |= (uint)((64 - fbits) & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Signed fixed-point convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>SCVTF Dd, Wn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_d32_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterD Dd, Arm64RegisterW Wn, uint fbits)
    {
        uint raw = 0x1E420000U; // Encoding for: SCVTF_d32_float2fix
        raw |= (uint)Dd.Index;
        raw |= (uint)Wn.Index << 5;
        raw |= (uint)((64 - fbits) & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Signed fixed-point convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>SCVTF Dd, Xn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_d64_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterD Dd, Arm64RegisterX Xn, uint fbits)
    {
        uint raw = 0x9E420000U; // Encoding for: SCVTF_d64_float2fix
        raw |= (uint)Dd.Index;
        raw |= (uint)Xn.Index << 5;
        raw |= (uint)((64 - fbits) & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Signed integer convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>SCVTF Hd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_h32_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterH Hd, Arm64RegisterW Wn)
    {
        uint raw = 0x1EE20000U; // Encoding for: SCVTF_h32_float2int
        raw |= (uint)Hd.Index;
        raw |= (uint)Wn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed integer convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>SCVTF Sd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_s32_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterS Sd, Arm64RegisterW Wn)
    {
        uint raw = 0x1E220000U; // Encoding for: SCVTF_s32_float2int
        raw |= (uint)Sd.Index;
        raw |= (uint)Wn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed integer convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>SCVTF Dd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_d32_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterD Dd, Arm64RegisterW Wn)
    {
        uint raw = 0x1E620000U; // Encoding for: SCVTF_d32_float2int
        raw |= (uint)Dd.Index;
        raw |= (uint)Wn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed integer convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>SCVTF Hd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_h64_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterH Hd, Arm64RegisterX Xn)
    {
        uint raw = 0x9EE20000U; // Encoding for: SCVTF_h64_float2int
        raw |= (uint)Hd.Index;
        raw |= (uint)Xn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed integer convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>SCVTF Sd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_s64_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterS Sd, Arm64RegisterX Xn)
    {
        uint raw = 0x9E220000U; // Encoding for: SCVTF_s64_float2int
        raw |= (uint)Sd.Index;
        raw |= (uint)Xn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed integer convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>SCVTF Dd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_d64_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterD Dd, Arm64RegisterX Xn)
    {
        uint raw = 0x9E620000U; // Encoding for: SCVTF_d64_float2int
        raw |= (uint)Dd.Index;
        raw |= (uint)Xn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned integer convert to floating-point (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>UCVTF Hd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_sisd_32h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterH Hd, Arm64RegisterS Sn)
    {
        uint raw = 0x1EFD0000U; // Encoding for: UCVTF_sisd_32h
        raw |= (uint)Hd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned integer convert to floating-point (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>UCVTF Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_sisd_32d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterD Dd, Arm64RegisterS Sn)
    {
        uint raw = 0x1E7D0000U; // Encoding for: UCVTF_sisd_32d
        raw |= (uint)Dd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned integer convert to floating-point (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>UCVTF Hd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_sisd_64h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterH Hd, Arm64RegisterD Dn)
    {
        uint raw = 0x9EFD0000U; // Encoding for: UCVTF_sisd_64h
        raw |= (uint)Hd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned integer convert to floating-point (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>UCVTF Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_sisd_64s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterS Sd, Arm64RegisterD Dn)
    {
        uint raw = 0x9E3D0000U; // Encoding for: UCVTF_sisd_64s
        raw |= (uint)Sd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>UCVTF Hd, Wn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_h32_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterH Hd, Arm64RegisterW Wn, uint fbits)
    {
        uint raw = 0x1EC30000U; // Encoding for: UCVTF_h32_float2fix
        raw |= (uint)Hd.Index;
        raw |= (uint)Wn.Index << 5;
        raw |= (uint)((64 - fbits) & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>UCVTF Hd, Xn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_h64_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterH Hd, Arm64RegisterX Xn, uint fbits)
    {
        uint raw = 0x9EC30000U; // Encoding for: UCVTF_h64_float2fix
        raw |= (uint)Hd.Index;
        raw |= (uint)Xn.Index << 5;
        raw |= (uint)((64 - fbits) & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>UCVTF Sd, Wn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_s32_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterS Sd, Arm64RegisterW Wn, uint fbits)
    {
        uint raw = 0x1E030000U; // Encoding for: UCVTF_s32_float2fix
        raw |= (uint)Sd.Index;
        raw |= (uint)Wn.Index << 5;
        raw |= (uint)((64 - fbits) & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>UCVTF Sd, Xn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_s64_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterS Sd, Arm64RegisterX Xn, uint fbits)
    {
        uint raw = 0x9E030000U; // Encoding for: UCVTF_s64_float2fix
        raw |= (uint)Sd.Index;
        raw |= (uint)Xn.Index << 5;
        raw |= (uint)((64 - fbits) & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>UCVTF Dd, Wn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_d32_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterD Dd, Arm64RegisterW Wn, uint fbits)
    {
        uint raw = 0x1E430000U; // Encoding for: UCVTF_d32_float2fix
        raw |= (uint)Dd.Index;
        raw |= (uint)Wn.Index << 5;
        raw |= (uint)((64 - fbits) & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>UCVTF Dd, Xn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_d64_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterD Dd, Arm64RegisterX Xn, uint fbits)
    {
        uint raw = 0x9E430000U; // Encoding for: UCVTF_d64_float2fix
        raw |= (uint)Dd.Index;
        raw |= (uint)Xn.Index << 5;
        raw |= (uint)((64 - fbits) & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Unsigned integer convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>UCVTF Hd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_h32_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterH Hd, Arm64RegisterW Wn)
    {
        uint raw = 0x1EE30000U; // Encoding for: UCVTF_h32_float2int
        raw |= (uint)Hd.Index;
        raw |= (uint)Wn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned integer convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>UCVTF Sd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_s32_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterS Sd, Arm64RegisterW Wn)
    {
        uint raw = 0x1E230000U; // Encoding for: UCVTF_s32_float2int
        raw |= (uint)Sd.Index;
        raw |= (uint)Wn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned integer convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>UCVTF Dd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_d32_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterD Dd, Arm64RegisterW Wn)
    {
        uint raw = 0x1E630000U; // Encoding for: UCVTF_d32_float2int
        raw |= (uint)Dd.Index;
        raw |= (uint)Wn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned integer convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>UCVTF Hd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_h64_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterH Hd, Arm64RegisterX Xn)
    {
        uint raw = 0x9EE30000U; // Encoding for: UCVTF_h64_float2int
        raw |= (uint)Hd.Index;
        raw |= (uint)Xn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned integer convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>UCVTF Sd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_s64_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterS Sd, Arm64RegisterX Xn)
    {
        uint raw = 0x9E230000U; // Encoding for: UCVTF_s64_float2int
        raw |= (uint)Sd.Index;
        raw |= (uint)Xn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned integer convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>UCVTF Dd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_d64_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterD Dd, Arm64RegisterX Xn)
    {
        uint raw = 0x9E630000U; // Encoding for: UCVTF_d64_float2int
        raw |= (uint)Dd.Index;
        raw |= (uint)Xn.Index << 5;
        return raw;
    }
}
