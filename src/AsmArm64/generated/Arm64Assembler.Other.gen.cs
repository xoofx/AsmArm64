// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
using System.Runtime.CompilerServices;
namespace AsmArm64;
partial class Arm64Assembler
{
    /// <summary>
    /// Load register, with pointer authentication.
    /// </summary>
    /// <remarks><code>LDRAA Xt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRAA_64_ldst_pac), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRAA(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDRAA(Xt, src));
    /// <summary>
    /// Load register, with pointer authentication.
    /// </summary>
    /// <remarks><code>LDRAA Xt, [Xn|SP{, #simm}]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRAA_64w_ldst_pac), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRAA(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor.PreIncrement src)
         => AddInstruction(Arm64InstructionFactory.LDRAA(Xt, src));
    /// <summary>
    /// Load register, with pointer authentication.
    /// </summary>
    /// <remarks><code>LDRAB Xt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRAB_64_ldst_pac), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRAB(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDRAB(Xt, src));
    /// <summary>
    /// Load register, with pointer authentication.
    /// </summary>
    /// <remarks><code>LDRAB Xt, [Xn|SP{, #simm}]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRAB_64w_ldst_pac), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRAB(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor.PreIncrement src)
         => AddInstruction(Arm64InstructionFactory.LDRAB(Xt, src));
}
