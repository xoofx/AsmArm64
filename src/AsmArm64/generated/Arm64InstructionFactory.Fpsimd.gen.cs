// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
namespace AsmArm64;
static partial class Arm64InstructionFactory
{
    /// <summary>
    /// Load-acquire RCpc SIMD&amp;FP register (unscaled offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAPUR_b_ldapstl_simd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDAPUR(Arm64RegisterB Bt, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0x1D400800U; // Encoding for: LDAPUR_b_ldapstl_simd
        return raw;
    }
    /// <summary>
    /// Load-acquire RCpc SIMD&amp;FP register (unscaled offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAPUR_h_ldapstl_simd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDAPUR(Arm64RegisterH Ht, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0x5D400800U; // Encoding for: LDAPUR_h_ldapstl_simd
        return raw;
    }
    /// <summary>
    /// Load-acquire RCpc SIMD&amp;FP register (unscaled offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAPUR_s_ldapstl_simd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDAPUR(Arm64RegisterS St, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0x9D400800U; // Encoding for: LDAPUR_s_ldapstl_simd
        return raw;
    }
    /// <summary>
    /// Load-acquire RCpc SIMD&amp;FP register (unscaled offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAPUR_d_ldapstl_simd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDAPUR(Arm64RegisterD Dt, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0xDD400800U; // Encoding for: LDAPUR_d_ldapstl_simd
        return raw;
    }
    /// <summary>
    /// Load-acquire RCpc SIMD&amp;FP register (unscaled offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAPUR_q_ldapstl_simd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDAPUR(Arm64RegisterQ Qt, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0x1DC00800U; // Encoding for: LDAPUR_q_ldapstl_simd
        return raw;
    }
    /// <summary>
    /// Load pair of SIMD&amp;FP registers, with non-temporal hint
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDNP_s_ldstnapair_offs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDNP(Arm64RegisterS St1, Arm64RegisterS St2, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0x2C400000U; // Encoding for: LDNP_s_ldstnapair_offs
        return raw;
    }
    /// <summary>
    /// Load pair of SIMD&amp;FP registers, with non-temporal hint
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDNP_d_ldstnapair_offs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDNP(Arm64RegisterD Dt1, Arm64RegisterD Dt2, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0x6C400000U; // Encoding for: LDNP_d_ldstnapair_offs
        return raw;
    }
    /// <summary>
    /// Load pair of SIMD&amp;FP registers, with non-temporal hint
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDNP_q_ldstnapair_offs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDNP(Arm64RegisterQ Qt1, Arm64RegisterQ Qt2, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0xAC400000U; // Encoding for: LDNP_q_ldstnapair_offs
        return raw;
    }
    /// <summary>
    /// Load pair of SIMD&amp;FP registers
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDP_s_ldstpair_post), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDP(Arm64RegisterS St1, Arm64RegisterS St2, Arm64BaseMemoryAccessor src, long imm)
    {
        uint raw = 0x2CC00000U; // Encoding for: LDP_s_ldstpair_post
        return raw;
    }
    /// <summary>
    /// Load pair of SIMD&amp;FP registers
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDP_d_ldstpair_post), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDP(Arm64RegisterD Dt1, Arm64RegisterD Dt2, Arm64BaseMemoryAccessor src, long imm)
    {
        uint raw = 0x6CC00000U; // Encoding for: LDP_d_ldstpair_post
        return raw;
    }
    /// <summary>
    /// Load pair of SIMD&amp;FP registers
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDP_q_ldstpair_post), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDP(Arm64RegisterQ Qt1, Arm64RegisterQ Qt2, Arm64BaseMemoryAccessor src, long imm)
    {
        uint raw = 0xACC00000U; // Encoding for: LDP_q_ldstpair_post
        return raw;
    }
    /// <summary>
    /// Load pair of SIMD&amp;FP registers
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDP_s_ldstpair_pre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDP(Arm64RegisterS St1, Arm64RegisterS St2, Arm64ImmediateMemoryAccessorPreIncrement src)
    {
        uint raw = 0x2DC00000U; // Encoding for: LDP_s_ldstpair_pre
        return raw;
    }
    /// <summary>
    /// Load pair of SIMD&amp;FP registers
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDP_d_ldstpair_pre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDP(Arm64RegisterD Dt1, Arm64RegisterD Dt2, Arm64ImmediateMemoryAccessorPreIncrement src)
    {
        uint raw = 0x6DC00000U; // Encoding for: LDP_d_ldstpair_pre
        return raw;
    }
    /// <summary>
    /// Load pair of SIMD&amp;FP registers
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDP_q_ldstpair_pre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDP(Arm64RegisterQ Qt1, Arm64RegisterQ Qt2, Arm64ImmediateMemoryAccessorPreIncrement src)
    {
        uint raw = 0xADC00000U; // Encoding for: LDP_q_ldstpair_pre
        return raw;
    }
    /// <summary>
    /// Load pair of SIMD&amp;FP registers
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDP_s_ldstpair_off), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDP(Arm64RegisterS St1, Arm64RegisterS St2, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0x2D400000U; // Encoding for: LDP_s_ldstpair_off
        return raw;
    }
    /// <summary>
    /// Load pair of SIMD&amp;FP registers
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDP_d_ldstpair_off), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDP(Arm64RegisterD Dt1, Arm64RegisterD Dt2, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0x6D400000U; // Encoding for: LDP_d_ldstpair_off
        return raw;
    }
    /// <summary>
    /// Load pair of SIMD&amp;FP registers
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDP_q_ldstpair_off), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDP(Arm64RegisterQ Qt1, Arm64RegisterQ Qt2, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0xAD400000U; // Encoding for: LDP_q_ldstpair_off
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_b_ldst_immpost), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDR(Arm64RegisterB Bt, Arm64BaseMemoryAccessor src, long simm)
    {
        uint raw = 0x3C400400U; // Encoding for: LDR_b_ldst_immpost
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_h_ldst_immpost), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDR(Arm64RegisterH Ht, Arm64BaseMemoryAccessor src, long simm)
    {
        uint raw = 0x7C400400U; // Encoding for: LDR_h_ldst_immpost
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_s_ldst_immpost), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDR(Arm64RegisterS St, Arm64BaseMemoryAccessor src, long simm)
    {
        uint raw = 0xBC400400U; // Encoding for: LDR_s_ldst_immpost
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_d_ldst_immpost), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDR(Arm64RegisterD Dt, Arm64BaseMemoryAccessor src, long simm)
    {
        uint raw = 0xFC400400U; // Encoding for: LDR_d_ldst_immpost
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_q_ldst_immpost), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDR(Arm64RegisterQ Qt, Arm64BaseMemoryAccessor src, long simm)
    {
        uint raw = 0x3CC00400U; // Encoding for: LDR_q_ldst_immpost
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_b_ldst_immpre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDR(Arm64RegisterB Bt, Arm64ImmediateMemoryAccessorPreIncrement src)
    {
        uint raw = 0x3C400C00U; // Encoding for: LDR_b_ldst_immpre
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_h_ldst_immpre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDR(Arm64RegisterH Ht, Arm64ImmediateMemoryAccessorPreIncrement src)
    {
        uint raw = 0x7C400C00U; // Encoding for: LDR_h_ldst_immpre
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_s_ldst_immpre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDR(Arm64RegisterS St, Arm64ImmediateMemoryAccessorPreIncrement src)
    {
        uint raw = 0xBC400C00U; // Encoding for: LDR_s_ldst_immpre
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_d_ldst_immpre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDR(Arm64RegisterD Dt, Arm64ImmediateMemoryAccessorPreIncrement src)
    {
        uint raw = 0xFC400C00U; // Encoding for: LDR_d_ldst_immpre
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_q_ldst_immpre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDR(Arm64RegisterQ Qt, Arm64ImmediateMemoryAccessorPreIncrement src)
    {
        uint raw = 0x3CC00C00U; // Encoding for: LDR_q_ldst_immpre
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_b_ldst_pos), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDR(Arm64RegisterB Bt, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0x3D400000U; // Encoding for: LDR_b_ldst_pos
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_h_ldst_pos), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDR(Arm64RegisterH Ht, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0x7D400000U; // Encoding for: LDR_h_ldst_pos
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_s_ldst_pos), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDR(Arm64RegisterS St, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0xBD400000U; // Encoding for: LDR_s_ldst_pos
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_d_ldst_pos), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDR(Arm64RegisterD Dt, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0xFD400000U; // Encoding for: LDR_d_ldst_pos
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_q_ldst_pos), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDR(Arm64RegisterQ Qt, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0x3DC00000U; // Encoding for: LDR_q_ldst_pos
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (PC-relative literal)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_s_loadlit), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDR(Arm64RegisterS St, Arm64Label label)
    {
        uint raw = 0x1C000000U; // Encoding for: LDR_s_loadlit
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (PC-relative literal)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_d_loadlit), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDR(Arm64RegisterD Dt, Arm64Label label)
    {
        uint raw = 0x5C000000U; // Encoding for: LDR_d_loadlit
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (PC-relative literal)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_q_loadlit), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDR(Arm64RegisterQ Qt, Arm64Label label)
    {
        uint raw = 0x9C000000U; // Encoding for: LDR_q_loadlit
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (register offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_b_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDR(Arm64RegisterB Bt, Arm64RegisterExtendMemoryAccessor src)
    {
        uint raw = 0x3C600800U; // Encoding for: LDR_b_ldst_regoff
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (register offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_bl_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDR(Arm64RegisterB Bt, Arm64RegisterExtendMemoryAccessor src)
    {
        uint raw = 0x3C606800U; // Encoding for: LDR_bl_ldst_regoff
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (register offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_h_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDR(Arm64RegisterH Ht, Arm64OptionalRegisterExtendMemoryAccessor src)
    {
        uint raw = 0x7C600800U; // Encoding for: LDR_h_ldst_regoff
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (register offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_s_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDR(Arm64RegisterS St, Arm64OptionalRegisterExtendMemoryAccessor src)
    {
        uint raw = 0xBC600800U; // Encoding for: LDR_s_ldst_regoff
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (register offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_d_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDR(Arm64RegisterD Dt, Arm64OptionalRegisterExtendMemoryAccessor src)
    {
        uint raw = 0xFC600800U; // Encoding for: LDR_d_ldst_regoff
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (register offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_q_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDR(Arm64RegisterQ Qt, Arm64OptionalRegisterExtendMemoryAccessor src)
    {
        uint raw = 0x3CE00800U; // Encoding for: LDR_q_ldst_regoff
        return raw;
    }
    /// <summary>
    /// Load unprivileged pair of SIMD&amp;FP registers, with non-temporal hint
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTNP_q_ldstnapair_offs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDTNP(Arm64RegisterQ Qt1, Arm64RegisterQ Qt2, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0xEC400000U; // Encoding for: LDTNP_q_ldstnapair_offs
        return raw;
    }
    /// <summary>
    /// Load unprivileged pair of SIMD&amp;FP registers
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTP_q_ldstpair_post), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDTP(Arm64RegisterQ Qt1, Arm64RegisterQ Qt2, Arm64BaseMemoryAccessor src, long imm)
    {
        uint raw = 0xECC00000U; // Encoding for: LDTP_q_ldstpair_post
        return raw;
    }
    /// <summary>
    /// Load unprivileged pair of SIMD&amp;FP registers
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTP_q_ldstpair_pre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDTP(Arm64RegisterQ Qt1, Arm64RegisterQ Qt2, Arm64ImmediateMemoryAccessorPreIncrement src)
    {
        uint raw = 0xEDC00000U; // Encoding for: LDTP_q_ldstpair_pre
        return raw;
    }
    /// <summary>
    /// Load unprivileged pair of SIMD&amp;FP registers
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTP_q_ldstpair_off), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDTP(Arm64RegisterQ Qt1, Arm64RegisterQ Qt2, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0xED400000U; // Encoding for: LDTP_q_ldstpair_off
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (unscaled offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUR_b_ldst_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDUR(Arm64RegisterB Bt, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0x3C400000U; // Encoding for: LDUR_b_ldst_unscaled
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (unscaled offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUR_h_ldst_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDUR(Arm64RegisterH Ht, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0x7C400000U; // Encoding for: LDUR_h_ldst_unscaled
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (unscaled offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUR_s_ldst_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDUR(Arm64RegisterS St, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0xBC400000U; // Encoding for: LDUR_s_ldst_unscaled
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (unscaled offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUR_d_ldst_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDUR(Arm64RegisterD Dt, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0xFC400000U; // Encoding for: LDUR_d_ldst_unscaled
        return raw;
    }
    /// <summary>
    /// Load SIMD&amp;FP register (unscaled offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUR_q_ldst_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDUR(Arm64RegisterQ Qt, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0x3CC00000U; // Encoding for: LDUR_q_ldst_unscaled
        return raw;
    }
    /// <summary>
    /// Store-release SIMD&amp;FP register (unscaled offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STLUR_b_ldapstl_simd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STLUR(Arm64RegisterB Bt, Arm64OptionalImmediateMemoryAccessor dst)
    {
        uint raw = 0x1D000800U; // Encoding for: STLUR_b_ldapstl_simd
        return raw;
    }
    /// <summary>
    /// Store-release SIMD&amp;FP register (unscaled offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STLUR_h_ldapstl_simd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STLUR(Arm64RegisterH Ht, Arm64OptionalImmediateMemoryAccessor dst)
    {
        uint raw = 0x5D000800U; // Encoding for: STLUR_h_ldapstl_simd
        return raw;
    }
    /// <summary>
    /// Store-release SIMD&amp;FP register (unscaled offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STLUR_s_ldapstl_simd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STLUR(Arm64RegisterS St, Arm64OptionalImmediateMemoryAccessor dst)
    {
        uint raw = 0x9D000800U; // Encoding for: STLUR_s_ldapstl_simd
        return raw;
    }
    /// <summary>
    /// Store-release SIMD&amp;FP register (unscaled offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STLUR_d_ldapstl_simd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STLUR(Arm64RegisterD Dt, Arm64OptionalImmediateMemoryAccessor dst)
    {
        uint raw = 0xDD000800U; // Encoding for: STLUR_d_ldapstl_simd
        return raw;
    }
    /// <summary>
    /// Store-release SIMD&amp;FP register (unscaled offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STLUR_q_ldapstl_simd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STLUR(Arm64RegisterQ Qt, Arm64OptionalImmediateMemoryAccessor dst)
    {
        uint raw = 0x1D800800U; // Encoding for: STLUR_q_ldapstl_simd
        return raw;
    }
    /// <summary>
    /// Store pair of SIMD&amp;FP registers, with non-temporal hint
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STNP_s_ldstnapair_offs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STNP(Arm64RegisterS St1, Arm64RegisterS St2, Arm64OptionalImmediateMemoryAccessor dst)
    {
        uint raw = 0x2C000000U; // Encoding for: STNP_s_ldstnapair_offs
        return raw;
    }
    /// <summary>
    /// Store pair of SIMD&amp;FP registers, with non-temporal hint
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STNP_d_ldstnapair_offs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STNP(Arm64RegisterD Dt1, Arm64RegisterD Dt2, Arm64OptionalImmediateMemoryAccessor dst)
    {
        uint raw = 0x6C000000U; // Encoding for: STNP_d_ldstnapair_offs
        return raw;
    }
    /// <summary>
    /// Store pair of SIMD&amp;FP registers, with non-temporal hint
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STNP_q_ldstnapair_offs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STNP(Arm64RegisterQ Qt1, Arm64RegisterQ Qt2, Arm64OptionalImmediateMemoryAccessor dst)
    {
        uint raw = 0xAC000000U; // Encoding for: STNP_q_ldstnapair_offs
        return raw;
    }
    /// <summary>
    /// Store pair of SIMD&amp;FP registers
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STP_s_ldstpair_post), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STP(Arm64RegisterS St1, Arm64RegisterS St2, Arm64BaseMemoryAccessor dst, long imm)
    {
        uint raw = 0x2C800000U; // Encoding for: STP_s_ldstpair_post
        return raw;
    }
    /// <summary>
    /// Store pair of SIMD&amp;FP registers
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STP_d_ldstpair_post), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STP(Arm64RegisterD Dt1, Arm64RegisterD Dt2, Arm64BaseMemoryAccessor dst, long imm)
    {
        uint raw = 0x6C800000U; // Encoding for: STP_d_ldstpair_post
        return raw;
    }
    /// <summary>
    /// Store pair of SIMD&amp;FP registers
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STP_q_ldstpair_post), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STP(Arm64RegisterQ Qt1, Arm64RegisterQ Qt2, Arm64BaseMemoryAccessor dst, long imm)
    {
        uint raw = 0xAC800000U; // Encoding for: STP_q_ldstpair_post
        return raw;
    }
    /// <summary>
    /// Store pair of SIMD&amp;FP registers
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STP_s_ldstpair_pre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STP(Arm64RegisterS St1, Arm64RegisterS St2, Arm64ImmediateMemoryAccessorPreIncrement dst)
    {
        uint raw = 0x2D800000U; // Encoding for: STP_s_ldstpair_pre
        return raw;
    }
    /// <summary>
    /// Store pair of SIMD&amp;FP registers
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STP_d_ldstpair_pre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STP(Arm64RegisterD Dt1, Arm64RegisterD Dt2, Arm64ImmediateMemoryAccessorPreIncrement dst)
    {
        uint raw = 0x6D800000U; // Encoding for: STP_d_ldstpair_pre
        return raw;
    }
    /// <summary>
    /// Store pair of SIMD&amp;FP registers
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STP_q_ldstpair_pre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STP(Arm64RegisterQ Qt1, Arm64RegisterQ Qt2, Arm64ImmediateMemoryAccessorPreIncrement dst)
    {
        uint raw = 0xAD800000U; // Encoding for: STP_q_ldstpair_pre
        return raw;
    }
    /// <summary>
    /// Store pair of SIMD&amp;FP registers
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STP_s_ldstpair_off), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STP(Arm64RegisterS St1, Arm64RegisterS St2, Arm64OptionalImmediateMemoryAccessor dst)
    {
        uint raw = 0x2D000000U; // Encoding for: STP_s_ldstpair_off
        return raw;
    }
    /// <summary>
    /// Store pair of SIMD&amp;FP registers
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STP_d_ldstpair_off), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STP(Arm64RegisterD Dt1, Arm64RegisterD Dt2, Arm64OptionalImmediateMemoryAccessor dst)
    {
        uint raw = 0x6D000000U; // Encoding for: STP_d_ldstpair_off
        return raw;
    }
    /// <summary>
    /// Store pair of SIMD&amp;FP registers
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STP_q_ldstpair_off), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STP(Arm64RegisterQ Qt1, Arm64RegisterQ Qt2, Arm64OptionalImmediateMemoryAccessor dst)
    {
        uint raw = 0xAD000000U; // Encoding for: STP_q_ldstpair_off
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_b_ldst_immpost), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STR(Arm64RegisterB Bt, Arm64BaseMemoryAccessor dst, long simm)
    {
        uint raw = 0x3C000400U; // Encoding for: STR_b_ldst_immpost
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_h_ldst_immpost), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STR(Arm64RegisterH Ht, Arm64BaseMemoryAccessor dst, long simm)
    {
        uint raw = 0x7C000400U; // Encoding for: STR_h_ldst_immpost
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_s_ldst_immpost), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STR(Arm64RegisterS St, Arm64BaseMemoryAccessor dst, long simm)
    {
        uint raw = 0xBC000400U; // Encoding for: STR_s_ldst_immpost
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_d_ldst_immpost), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STR(Arm64RegisterD Dt, Arm64BaseMemoryAccessor dst, long simm)
    {
        uint raw = 0xFC000400U; // Encoding for: STR_d_ldst_immpost
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_q_ldst_immpost), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STR(Arm64RegisterQ Qt, Arm64BaseMemoryAccessor dst, long simm)
    {
        uint raw = 0x3C800400U; // Encoding for: STR_q_ldst_immpost
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_b_ldst_immpre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STR(Arm64RegisterB Bt, Arm64ImmediateMemoryAccessorPreIncrement dst)
    {
        uint raw = 0x3C000C00U; // Encoding for: STR_b_ldst_immpre
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_h_ldst_immpre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STR(Arm64RegisterH Ht, Arm64ImmediateMemoryAccessorPreIncrement dst)
    {
        uint raw = 0x7C000C00U; // Encoding for: STR_h_ldst_immpre
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_s_ldst_immpre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STR(Arm64RegisterS St, Arm64ImmediateMemoryAccessorPreIncrement dst)
    {
        uint raw = 0xBC000C00U; // Encoding for: STR_s_ldst_immpre
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_d_ldst_immpre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STR(Arm64RegisterD Dt, Arm64ImmediateMemoryAccessorPreIncrement dst)
    {
        uint raw = 0xFC000C00U; // Encoding for: STR_d_ldst_immpre
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_q_ldst_immpre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STR(Arm64RegisterQ Qt, Arm64ImmediateMemoryAccessorPreIncrement dst)
    {
        uint raw = 0x3C800C00U; // Encoding for: STR_q_ldst_immpre
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_b_ldst_pos), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STR(Arm64RegisterB Bt, Arm64OptionalImmediateMemoryAccessor dst)
    {
        uint raw = 0x3D000000U; // Encoding for: STR_b_ldst_pos
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_h_ldst_pos), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STR(Arm64RegisterH Ht, Arm64OptionalImmediateMemoryAccessor dst)
    {
        uint raw = 0x7D000000U; // Encoding for: STR_h_ldst_pos
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_s_ldst_pos), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STR(Arm64RegisterS St, Arm64OptionalImmediateMemoryAccessor dst)
    {
        uint raw = 0xBD000000U; // Encoding for: STR_s_ldst_pos
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_d_ldst_pos), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STR(Arm64RegisterD Dt, Arm64OptionalImmediateMemoryAccessor dst)
    {
        uint raw = 0xFD000000U; // Encoding for: STR_d_ldst_pos
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (immediate offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_q_ldst_pos), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STR(Arm64RegisterQ Qt, Arm64OptionalImmediateMemoryAccessor dst)
    {
        uint raw = 0x3D800000U; // Encoding for: STR_q_ldst_pos
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (register offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_b_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STR(Arm64RegisterB Bt, Arm64RegisterExtendMemoryAccessor dst)
    {
        uint raw = 0x3C200800U; // Encoding for: STR_b_ldst_regoff
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (register offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_bl_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STR(Arm64RegisterB Bt, Arm64RegisterExtendMemoryAccessor dst)
    {
        uint raw = 0x3C206800U; // Encoding for: STR_bl_ldst_regoff
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (register offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_h_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STR(Arm64RegisterH Ht, Arm64OptionalRegisterExtendMemoryAccessor dst)
    {
        uint raw = 0x7C200800U; // Encoding for: STR_h_ldst_regoff
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (register offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_s_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STR(Arm64RegisterS St, Arm64OptionalRegisterExtendMemoryAccessor dst)
    {
        uint raw = 0xBC200800U; // Encoding for: STR_s_ldst_regoff
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (register offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_d_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STR(Arm64RegisterD Dt, Arm64OptionalRegisterExtendMemoryAccessor dst)
    {
        uint raw = 0xFC200800U; // Encoding for: STR_d_ldst_regoff
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (register offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_q_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STR(Arm64RegisterQ Qt, Arm64OptionalRegisterExtendMemoryAccessor dst)
    {
        uint raw = 0x3CA00800U; // Encoding for: STR_q_ldst_regoff
        return raw;
    }
    /// <summary>
    /// Store unprivileged pair of SIMD&amp;FP registers, with non-temporal hint
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STTNP_q_ldstnapair_offs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STTNP(Arm64RegisterQ Qt1, Arm64RegisterQ Qt2, Arm64OptionalImmediateMemoryAccessor dst)
    {
        uint raw = 0xEC000000U; // Encoding for: STTNP_q_ldstnapair_offs
        return raw;
    }
    /// <summary>
    /// Store unprivileged pair of SIMD&amp;FP registers
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STTP_q_ldstpair_post), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STTP(Arm64RegisterQ Qt1, Arm64RegisterQ Qt2, Arm64BaseMemoryAccessor dst, long imm)
    {
        uint raw = 0xEC800000U; // Encoding for: STTP_q_ldstpair_post
        return raw;
    }
    /// <summary>
    /// Store unprivileged pair of SIMD&amp;FP registers
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STTP_q_ldstpair_pre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STTP(Arm64RegisterQ Qt1, Arm64RegisterQ Qt2, Arm64ImmediateMemoryAccessorPreIncrement dst)
    {
        uint raw = 0xED800000U; // Encoding for: STTP_q_ldstpair_pre
        return raw;
    }
    /// <summary>
    /// Store unprivileged pair of SIMD&amp;FP registers
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STTP_q_ldstpair_off), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STTP(Arm64RegisterQ Qt1, Arm64RegisterQ Qt2, Arm64OptionalImmediateMemoryAccessor dst)
    {
        uint raw = 0xED000000U; // Encoding for: STTP_q_ldstpair_off
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (unscaled offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STUR_b_ldst_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STUR(Arm64RegisterB Bt, Arm64OptionalImmediateMemoryAccessor dst)
    {
        uint raw = 0x3C000000U; // Encoding for: STUR_b_ldst_unscaled
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (unscaled offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STUR_h_ldst_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STUR(Arm64RegisterH Ht, Arm64OptionalImmediateMemoryAccessor dst)
    {
        uint raw = 0x7C000000U; // Encoding for: STUR_h_ldst_unscaled
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (unscaled offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STUR_s_ldst_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STUR(Arm64RegisterS St, Arm64OptionalImmediateMemoryAccessor dst)
    {
        uint raw = 0xBC000000U; // Encoding for: STUR_s_ldst_unscaled
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (unscaled offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STUR_d_ldst_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STUR(Arm64RegisterD Dt, Arm64OptionalImmediateMemoryAccessor dst)
    {
        uint raw = 0xFC000000U; // Encoding for: STUR_d_ldst_unscaled
        return raw;
    }
    /// <summary>
    /// Store SIMD&amp;FP register (unscaled offset)
    /// </summary>
    [Arm64LinkInstructionId(Arm64InstructionId.STUR_q_ldst_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STUR(Arm64RegisterQ Qt, Arm64OptionalImmediateMemoryAccessor dst)
    {
        uint raw = 0x3C800000U; // Encoding for: STUR_q_ldst_unscaled
        return raw;
    }
}
