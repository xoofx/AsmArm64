// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
using System.Runtime.CompilerServices;
namespace AsmArm64;
partial class Arm64Assembler
{
    /// <summary>
    /// Absolute value.
    /// </summary>
    /// <remarks><code>ABS Wd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ABS_32_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ABS(Arm64RegisterW Wd, Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.ABS(Wd, Wn));
    /// <summary>
    /// Absolute value.
    /// </summary>
    /// <remarks><code>ABS Xd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ABS_64_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ABS(Arm64RegisterX Xd, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.ABS(Xd, Xn));
    /// <summary>
    /// Add with carry.
    /// </summary>
    /// <remarks><code>ADC Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADC_32_addsub_carry), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADC(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.ADC(Wd, Wn, Wm));
    /// <summary>
    /// Add with carry.
    /// </summary>
    /// <remarks><code>ADC Xd, Xn, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADC_64_addsub_carry), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADC(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ADC(Xd, Xn, Xm));
    /// <summary>
    /// Add with carry, setting flags.
    /// </summary>
    /// <remarks><code>ADCS Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADCS_32_addsub_carry), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADCS(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.ADCS(Wd, Wn, Wm));
    /// <summary>
    /// Add with carry, setting flags.
    /// </summary>
    /// <remarks><code>ADCS Xd, Xn, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADCS_64_addsub_carry), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADCS(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ADCS(Xd, Xn, Xm));
    /// <summary>
    /// Add extended and scaled register.
    /// </summary>
    /// <remarks><code>ADD Wd|WSP, Wn|WSP, Wm {, extend, {#amount}}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADD_32_addsub_ext), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADD(Arm64RegisterWOrWSP Wd_WSP, Arm64RegisterWOrWSP Wn_WSP, Arm64RegisterW Wm, Arm64ExtendKind extend = Arm64ExtendKind.LSL, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.ADD(Wd_WSP, Wn_WSP, Wm, extend, amount));
    /// <summary>
    /// Add extended and scaled register.
    /// </summary>
    /// <remarks><code>ADD Xd|SP, Xn|SP, Rm {, extend, {#amount}}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADD_64_addsub_ext), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADD(Arm64RegisterXOrSP Xd_SP, Arm64RegisterXOrSP Xn_SP, Arm64RegisterX Rm, Arm64ExtendXKind extend = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.ADD(Xd_SP, Xn_SP, Rm, extend, amount));
    /// <summary>
    /// Add extended and scaled register.
    /// </summary>
    /// <remarks><code>ADD Xd|SP, Xn|SP, Rm {, extend, {#amount}}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADD_64_addsub_ext), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADD(Arm64RegisterXOrSP Xd_SP, Arm64RegisterXOrSP Xn_SP, Arm64RegisterW Rm, Arm64ExtendWKind extend = default, int amount = default)
         => AddInstruction(Arm64InstructionFactory.ADD(Xd_SP, Xn_SP, Rm, extend, amount));
    /// <summary>
    /// Add immediate value.
    /// </summary>
    /// <remarks><code>ADD Wd|WSP, Wn|WSP, #imm {, shift}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADD_32_addsub_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADD(Arm64RegisterWOrWSP Wd_WSP, Arm64RegisterWOrWSP Wn_WSP, ushort imm, IArm64ShiftKind.LSL shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.ADD(Wd_WSP, Wn_WSP, imm, shift, amount));
    /// <summary>
    /// Add immediate value.
    /// </summary>
    /// <remarks><code>ADD Xd|SP, Xn|SP, #imm {, shift}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADD_64_addsub_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADD(Arm64RegisterXOrSP Xd_SP, Arm64RegisterXOrSP Xn_SP, ushort imm, IArm64ShiftKind.LSL shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.ADD(Xd_SP, Xn_SP, imm, shift, amount));
    /// <summary>
    /// Add optionally-shifted register.
    /// </summary>
    /// <remarks><code>ADD Wd, Wn, Wm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADD_32_addsub_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADD(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64ShiftKind3 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.ADD(Wd, Wn, Wm, shift, amount));
    /// <summary>
    /// Add optionally-shifted register.
    /// </summary>
    /// <remarks><code>ADD Xd, Xn, Xm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADD_64_addsub_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADD(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm, Arm64ShiftKind3 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.ADD(Xd, Xn, Xm, shift, amount));
    /// <summary>
    /// Add with tag.
    /// </summary>
    /// <remarks><code>ADDG Xd|SP, Xn|SP, #uimm6, #uimm4</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDG_64_addsub_immtags), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDG(Arm64RegisterXOrSP Xd_SP, Arm64RegisterXOrSP Xn_SP, uint uimm6, byte uimm4)
         => AddInstruction(Arm64InstructionFactory.ADDG(Xd_SP, Xn_SP, uimm6, uimm4));
    /// <summary>
    /// Add checked pointer.
    /// </summary>
    /// <remarks><code>ADDPT Xd|SP, Xn|SP, Xm {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDPT_64_addsub_pt), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDPT(Arm64RegisterXOrSP Xd_SP, Arm64RegisterXOrSP Xn_SP, Arm64RegisterX Xm, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.ADDPT(Xd_SP, Xn_SP, Xm, LSL, amount));
    /// <summary>
    /// Add extended and scaled register, setting flags.
    /// </summary>
    /// <remarks><code>ADDS Wd, Wn|WSP, Wm {, extend, {#amount}}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDS_32s_addsub_ext), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDS(Arm64RegisterW Wd, Arm64RegisterWOrWSP Wn_WSP, Arm64RegisterW Wm, Arm64ExtendKind extend = Arm64ExtendKind.LSL, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.ADDS(Wd, Wn_WSP, Wm, extend, amount));
    /// <summary>
    /// Add extended and scaled register, setting flags.
    /// </summary>
    /// <remarks><code>ADDS Xd, Xn|SP, Rm {, extend, {#amount}}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDS_64s_addsub_ext), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDS(Arm64RegisterX Xd, Arm64RegisterXOrSP Xn_SP, Arm64RegisterX Rm, Arm64ExtendXKind extend = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.ADDS(Xd, Xn_SP, Rm, extend, amount));
    /// <summary>
    /// Add extended and scaled register, setting flags.
    /// </summary>
    /// <remarks><code>ADDS Xd, Xn|SP, Rm {, extend, {#amount}}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDS_64s_addsub_ext), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDS(Arm64RegisterX Xd, Arm64RegisterXOrSP Xn_SP, Arm64RegisterW Rm, Arm64ExtendWKind extend = default, int amount = default)
         => AddInstruction(Arm64InstructionFactory.ADDS(Xd, Xn_SP, Rm, extend, amount));
    /// <summary>
    /// Add immediate value, setting flags.
    /// </summary>
    /// <remarks><code>ADDS Wd, Wn|WSP, #imm {, shift}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDS_32s_addsub_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDS(Arm64RegisterW Wd, Arm64RegisterWOrWSP Wn_WSP, ushort imm, IArm64ShiftKind.LSL shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.ADDS(Wd, Wn_WSP, imm, shift, amount));
    /// <summary>
    /// Add immediate value, setting flags.
    /// </summary>
    /// <remarks><code>ADDS Xd, Xn|SP, #imm {, shift}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDS_64s_addsub_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDS(Arm64RegisterX Xd, Arm64RegisterXOrSP Xn_SP, ushort imm, IArm64ShiftKind.LSL shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.ADDS(Xd, Xn_SP, imm, shift, amount));
    /// <summary>
    /// Add optionally-shifted register, setting flags.
    /// </summary>
    /// <remarks><code>ADDS Wd, Wn, Wm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDS_32_addsub_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDS(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64ShiftKind3 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.ADDS(Wd, Wn, Wm, shift, amount));
    /// <summary>
    /// Add optionally-shifted register, setting flags.
    /// </summary>
    /// <remarks><code>ADDS Xd, Xn, Xm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDS_64_addsub_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDS(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm, Arm64ShiftKind3 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.ADDS(Xd, Xn, Xm, shift, amount));
    /// <summary>
    /// Form PC-relative address.
    /// </summary>
    /// <remarks><code>ADR Xd, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADR_only_pcreladdr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADR(Arm64RegisterX Xd, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.ADR(Xd, RecordLabelOffset(label, 584)));
    /// <summary>
    /// Form PC-relative address to 4KB page.
    /// </summary>
    /// <remarks><code>ADRP Xd, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADRP_only_pcreladdr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADRP(Arm64RegisterX Xd, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.ADRP(Xd, RecordLabelOffset(label, 608)));
    /// <summary>
    /// Bitwise AND (immediate).
    /// </summary>
    /// <remarks><code>AND Wd|WSP, Wn, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AND_32_log_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AND(Arm64RegisterWOrWSP Wd_WSP, Arm64RegisterW Wn, Arm64LogicalImmediate32 imm)
         => AddInstruction(Arm64InstructionFactory.AND(Wd_WSP, Wn, imm));
    /// <summary>
    /// Bitwise AND (immediate).
    /// </summary>
    /// <remarks><code>AND Xd|SP, Xn, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AND_64_log_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AND(Arm64RegisterXOrSP Xd_SP, Arm64RegisterX Xn, Arm64LogicalImmediate64 imm)
         => AddInstruction(Arm64InstructionFactory.AND(Xd_SP, Xn, imm));
    /// <summary>
    /// Bitwise AND (shifted register).
    /// </summary>
    /// <remarks><code>AND Wd, Wn, Wm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AND_32_log_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AND(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64ShiftKind4 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.AND(Wd, Wn, Wm, shift, amount));
    /// <summary>
    /// Bitwise AND (shifted register).
    /// </summary>
    /// <remarks><code>AND Xd, Xn, Xm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AND_64_log_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AND(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm, Arm64ShiftKind4 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.AND(Xd, Xn, Xm, shift, amount));
    /// <summary>
    /// Bitwise AND (immediate), setting flags.
    /// </summary>
    /// <remarks><code>ANDS Wd, Wn, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ANDS_32s_log_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ANDS(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64LogicalImmediate32 imm)
         => AddInstruction(Arm64InstructionFactory.ANDS(Wd, Wn, imm));
    /// <summary>
    /// Bitwise AND (immediate), setting flags.
    /// </summary>
    /// <remarks><code>ANDS Xd, Xn, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ANDS_64s_log_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ANDS(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64LogicalImmediate64 imm)
         => AddInstruction(Arm64InstructionFactory.ANDS(Xd, Xn, imm));
    /// <summary>
    /// Bitwise AND (shifted register), setting flags.
    /// </summary>
    /// <remarks><code>ANDS Wd, Wn, Wm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ANDS_32_log_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ANDS(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64ShiftKind4 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.ANDS(Wd, Wn, Wm, shift, amount));
    /// <summary>
    /// Bitwise AND (shifted register), setting flags.
    /// </summary>
    /// <remarks><code>ANDS Xd, Xn, Xm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ANDS_64_log_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ANDS(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm, Arm64ShiftKind4 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.ANDS(Xd, Xn, Xm, shift, amount));
    /// <summary>
    /// Arithmetic shift right (immediate).
    /// </summary>
    /// <remarks><code>ASR Wd, Wn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ASR_sbfm_32m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ASR(Arm64RegisterW Wd, Arm64RegisterW Wn, byte shift)
         => AddInstruction(Arm64InstructionFactory.ASR(Wd, Wn, shift));
    /// <summary>
    /// Arithmetic shift right (immediate).
    /// </summary>
    /// <remarks><code>ASR Xd, Xn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ASR_sbfm_64m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ASR(Arm64RegisterX Xd, Arm64RegisterX Xn, byte shift)
         => AddInstruction(Arm64InstructionFactory.ASR(Xd, Xn, shift));
    /// <summary>
    /// Arithmetic shift right (register).
    /// </summary>
    /// <remarks><code>ASR Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ASR_asrv_32_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ASR(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.ASR(Wd, Wn, Wm));
    /// <summary>
    /// Arithmetic shift right (register).
    /// </summary>
    /// <remarks><code>ASR Xd, Xn, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ASR_asrv_64_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ASR(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ASR(Xd, Xn, Xm));
    /// <summary>
    /// Arithmetic shift right variable.
    /// </summary>
    /// <remarks><code>ASRV Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ASRV_32_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ASRV(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.ASRV(Wd, Wn, Wm));
    /// <summary>
    /// Arithmetic shift right variable.
    /// </summary>
    /// <remarks><code>ASRV Xd, Xn, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ASRV_64_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ASRV(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ASRV(Xd, Xn, Xm));
    /// <summary>
    /// Authenticate data address, using key A.
    /// </summary>
    /// <remarks><code>AUTDA Xd, Xn|SP</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AUTDA_64p_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AUTDA(Arm64RegisterX Xd, Arm64RegisterXOrSP Xn_SP)
         => AddInstruction(Arm64InstructionFactory.AUTDA(Xd, Xn_SP));
    /// <summary>
    /// Authenticate data address, using key B.
    /// </summary>
    /// <remarks><code>AUTDB Xd, Xn|SP</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AUTDB_64p_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AUTDB(Arm64RegisterX Xd, Arm64RegisterXOrSP Xn_SP)
         => AddInstruction(Arm64InstructionFactory.AUTDB(Xd, Xn_SP));
    /// <summary>
    /// Authenticate data address, using key A.
    /// </summary>
    /// <remarks><code>AUTDZA Xd</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AUTDZA_64z_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AUTDZA(Arm64RegisterX Xd)
         => AddInstruction(Arm64InstructionFactory.AUTDZA(Xd));
    /// <summary>
    /// Authenticate data address, using key B.
    /// </summary>
    /// <remarks><code>AUTDZB Xd</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AUTDZB_64z_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AUTDZB(Arm64RegisterX Xd)
         => AddInstruction(Arm64InstructionFactory.AUTDZB(Xd));
    /// <summary>
    /// Authenticate instruction address, using key A.
    /// </summary>
    /// <remarks><code>AUTIA Xd, Xn|SP</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AUTIA_64p_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AUTIA(Arm64RegisterX Xd, Arm64RegisterXOrSP Xn_SP)
         => AddInstruction(Arm64InstructionFactory.AUTIA(Xd, Xn_SP));
    /// <summary>
    /// Authenticate instruction address, using key A.
    /// </summary>
    /// <remarks><code>AUTIA171615 </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AUTIA171615_64lr_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AUTIA171615()
         => AddInstruction(Arm64InstructionFactory.AUTIA171615());
    /// <summary>
    /// Authenticate return address using key A, using an immediate offset.
    /// </summary>
    /// <remarks><code>AUTIASPPC label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AUTIASPPC_only_dp_1src_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AUTIASPPC(Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.AUTIASPPC(RecordLabelOffset(label, 1136)));
    /// <summary>
    /// Authenticate return address using key A, using a register.
    /// </summary>
    /// <remarks><code>AUTIASPPCR Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AUTIASPPCR_64lrr_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AUTIASPPCR(Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.AUTIASPPCR(Xn));
    /// <summary>
    /// Authenticate instruction address, using key B.
    /// </summary>
    /// <remarks><code>AUTIB Xd, Xn|SP</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AUTIB_64p_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AUTIB(Arm64RegisterX Xd, Arm64RegisterXOrSP Xn_SP)
         => AddInstruction(Arm64InstructionFactory.AUTIB(Xd, Xn_SP));
    /// <summary>
    /// Authenticate instruction address, using key B.
    /// </summary>
    /// <remarks><code>AUTIB171615 </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AUTIB171615_64lr_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AUTIB171615()
         => AddInstruction(Arm64InstructionFactory.AUTIB171615());
    /// <summary>
    /// Authenticate return address using key B, using an immediate offset.
    /// </summary>
    /// <remarks><code>AUTIBSPPC label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AUTIBSPPC_only_dp_1src_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AUTIBSPPC(Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.AUTIBSPPC(RecordLabelOffset(label, 1224)));
    /// <summary>
    /// Authenticate return address using key B, using a register.
    /// </summary>
    /// <remarks><code>AUTIBSPPCR Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AUTIBSPPCR_64lrr_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AUTIBSPPCR(Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.AUTIBSPPCR(Xn));
    /// <summary>
    /// Authenticate instruction address, using key A.
    /// </summary>
    /// <remarks><code>AUTIZA Xd</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AUTIZA_64z_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AUTIZA(Arm64RegisterX Xd)
         => AddInstruction(Arm64InstructionFactory.AUTIZA(Xd));
    /// <summary>
    /// Authenticate instruction address, using key B.
    /// </summary>
    /// <remarks><code>AUTIZB Xd</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AUTIZB_64z_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AUTIZB(Arm64RegisterX Xd)
         => AddInstruction(Arm64InstructionFactory.AUTIZB(Xd));
    /// <summary>
    /// Branch.
    /// </summary>
    /// <remarks><code>B label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.B_only_branch_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void B(Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.B(RecordLabelOffset(label, 1260)));
    /// <summary>
    /// Branch conditionally.
    /// </summary>
    /// <remarks><code>B cond, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.B_only_condbranch), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void B(Arm64ConditionalKind cond, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.B(cond, RecordLabelOffset(label, 1284)));
    /// <summary>
    /// Branch consistent conditionally.
    /// </summary>
    /// <remarks><code>BC cond, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BC_only_condbranch), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BC(Arm64ConditionalKind cond, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.BC(cond, RecordLabelOffset(label, 1308)));
    /// <summary>
    /// Bitfield clear.
    /// </summary>
    /// <remarks><code>BFC Wd, #lsb, #width</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFC_bfm_32m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BFC(Arm64RegisterW Wd, uint lsb, byte width)
         => AddInstruction(Arm64InstructionFactory.BFC(Wd, lsb, width));
    /// <summary>
    /// Bitfield clear.
    /// </summary>
    /// <remarks><code>BFC Xd, #lsb, #width</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFC_bfm_64m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BFC(Arm64RegisterX Xd, uint lsb, byte width)
         => AddInstruction(Arm64InstructionFactory.BFC(Xd, lsb, width));
    /// <summary>
    /// Bitfield insert.
    /// </summary>
    /// <remarks><code>BFI Wd, Wn, #lsb, #width</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFI_bfm_32m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BFI(Arm64RegisterW Wd, Arm64RegisterW Wn, uint lsb, byte width)
         => AddInstruction(Arm64InstructionFactory.BFI(Wd, Wn, lsb, width));
    /// <summary>
    /// Bitfield insert.
    /// </summary>
    /// <remarks><code>BFI Xd, Xn, #lsb, #width</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFI_bfm_64m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BFI(Arm64RegisterX Xd, Arm64RegisterX Xn, uint lsb, byte width)
         => AddInstruction(Arm64InstructionFactory.BFI(Xd, Xn, lsb, width));
    /// <summary>
    /// Bitfield move.
    /// </summary>
    /// <remarks><code>BFM Wd, Wn, #immr, #imms</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFM_32m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BFM(Arm64RegisterW Wd, Arm64RegisterW Wn, byte immr, byte imms)
         => AddInstruction(Arm64InstructionFactory.BFM(Wd, Wn, immr, imms));
    /// <summary>
    /// Bitfield move.
    /// </summary>
    /// <remarks><code>BFM Xd, Xn, #immr, #imms</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFM_64m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BFM(Arm64RegisterX Xd, Arm64RegisterX Xn, byte immr, byte imms)
         => AddInstruction(Arm64InstructionFactory.BFM(Xd, Xn, immr, imms));
    /// <summary>
    /// Bitfield extract and insert at low end.
    /// </summary>
    /// <remarks><code>BFXIL Wd, Wn, #lsb, #width</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFXIL_bfm_32m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BFXIL(Arm64RegisterW Wd, Arm64RegisterW Wn, byte lsb, byte width)
         => AddInstruction(Arm64InstructionFactory.BFXIL(Wd, Wn, lsb, width));
    /// <summary>
    /// Bitfield extract and insert at low end.
    /// </summary>
    /// <remarks><code>BFXIL Xd, Xn, #lsb, #width</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFXIL_bfm_64m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BFXIL(Arm64RegisterX Xd, Arm64RegisterX Xn, byte lsb, byte width)
         => AddInstruction(Arm64InstructionFactory.BFXIL(Xd, Xn, lsb, width));
    /// <summary>
    /// Bitwise bit clear (shifted register).
    /// </summary>
    /// <remarks><code>BIC Wd, Wn, Wm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BIC_32_log_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BIC(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64ShiftKind4 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.BIC(Wd, Wn, Wm, shift, amount));
    /// <summary>
    /// Bitwise bit clear (shifted register).
    /// </summary>
    /// <remarks><code>BIC Xd, Xn, Xm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BIC_64_log_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BIC(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm, Arm64ShiftKind4 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.BIC(Xd, Xn, Xm, shift, amount));
    /// <summary>
    /// Bitwise bit clear (shifted register), setting flags.
    /// </summary>
    /// <remarks><code>BICS Wd, Wn, Wm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BICS_32_log_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BICS(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64ShiftKind4 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.BICS(Wd, Wn, Wm, shift, amount));
    /// <summary>
    /// Bitwise bit clear (shifted register), setting flags.
    /// </summary>
    /// <remarks><code>BICS Xd, Xn, Xm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BICS_64_log_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BICS(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm, Arm64ShiftKind4 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.BICS(Xd, Xn, Xm, shift, amount));
    /// <summary>
    /// Branch with link.
    /// </summary>
    /// <remarks><code>BL label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BL_only_branch_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BL(Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.BL(RecordLabelOffset(label, 1724)));
    /// <summary>
    /// Branch with link to register.
    /// </summary>
    /// <remarks><code>BLR Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BLR_64_branch_reg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BLR(Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.BLR(Xn));
    /// <summary>
    /// Branch with link to register, with pointer authentication.
    /// </summary>
    /// <remarks><code>BLRAA Xn, Xm|SP</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BLRAA_64p_branch_reg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BLRAA(Arm64RegisterX Xn, Arm64RegisterXOrSP Xm_SP)
         => AddInstruction(Arm64InstructionFactory.BLRAA(Xn, Xm_SP));
    /// <summary>
    /// Branch with link to register, with pointer authentication.
    /// </summary>
    /// <remarks><code>BLRAAZ Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BLRAAZ_64_branch_reg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BLRAAZ(Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.BLRAAZ(Xn));
    /// <summary>
    /// Branch with link to register, with pointer authentication.
    /// </summary>
    /// <remarks><code>BLRAB Xn, Xm|SP</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BLRAB_64p_branch_reg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BLRAB(Arm64RegisterX Xn, Arm64RegisterXOrSP Xm_SP)
         => AddInstruction(Arm64InstructionFactory.BLRAB(Xn, Xm_SP));
    /// <summary>
    /// Branch with link to register, with pointer authentication.
    /// </summary>
    /// <remarks><code>BLRABZ Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BLRABZ_64_branch_reg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BLRABZ(Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.BLRABZ(Xn));
    /// <summary>
    /// Branch to register.
    /// </summary>
    /// <remarks><code>BR Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BR_64_branch_reg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BR(Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.BR(Xn));
    /// <summary>
    /// Branch to register, with pointer authentication.
    /// </summary>
    /// <remarks><code>BRAA Xn, Xm|SP</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BRAA_64p_branch_reg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BRAA(Arm64RegisterX Xn, Arm64RegisterXOrSP Xm_SP)
         => AddInstruction(Arm64InstructionFactory.BRAA(Xn, Xm_SP));
    /// <summary>
    /// Branch to register, with pointer authentication.
    /// </summary>
    /// <remarks><code>BRAAZ Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BRAAZ_64_branch_reg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BRAAZ(Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.BRAAZ(Xn));
    /// <summary>
    /// Branch to register, with pointer authentication.
    /// </summary>
    /// <remarks><code>BRAB Xn, Xm|SP</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BRAB_64p_branch_reg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BRAB(Arm64RegisterX Xn, Arm64RegisterXOrSP Xm_SP)
         => AddInstruction(Arm64InstructionFactory.BRAB(Xn, Xm_SP));
    /// <summary>
    /// Branch to register, with pointer authentication.
    /// </summary>
    /// <remarks><code>BRABZ Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BRABZ_64_branch_reg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BRABZ(Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.BRABZ(Xn));
    /// <summary>
    /// Compare and swap word or doubleword in memory.
    /// </summary>
    /// <remarks><code>CAS Ws, Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CAS_c32_comswap), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CAS(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CAS(Ws, Wt, mem));
    /// <summary>
    /// Compare and swap word or doubleword in memory.
    /// </summary>
    /// <remarks><code>CAS Xs, Xt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CAS_c64_comswap), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CAS(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CAS(Xs, Xt, mem));
    /// <summary>
    /// Compare and swap word or doubleword in memory.
    /// </summary>
    /// <remarks><code>CASA Ws, Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASA_c32_comswap), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASA(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASA(Ws, Wt, mem));
    /// <summary>
    /// Compare and swap word or doubleword in memory.
    /// </summary>
    /// <remarks><code>CASA Xs, Xt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASA_c64_comswap), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASA(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASA(Xs, Xt, mem));
    /// <summary>
    /// Compare and swap byte in memory.
    /// </summary>
    /// <remarks><code>CASAB Ws, Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASAB_c32_comswap), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASAB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASAB(Ws, Wt, mem));
    /// <summary>
    /// Compare and swap halfword in memory.
    /// </summary>
    /// <remarks><code>CASAH Ws, Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASAH_c32_comswap), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASAH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASAH(Ws, Wt, mem));
    /// <summary>
    /// Compare and swap word or doubleword in memory.
    /// </summary>
    /// <remarks><code>CASAL Ws, Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASAL_c32_comswap), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASAL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASAL(Ws, Wt, mem));
    /// <summary>
    /// Compare and swap word or doubleword in memory.
    /// </summary>
    /// <remarks><code>CASAL Xs, Xt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASAL_c64_comswap), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASAL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASAL(Xs, Xt, mem));
    /// <summary>
    /// Compare and swap byte in memory.
    /// </summary>
    /// <remarks><code>CASALB Ws, Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASALB_c32_comswap), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASALB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASALB(Ws, Wt, mem));
    /// <summary>
    /// Compare and swap halfword in memory.
    /// </summary>
    /// <remarks><code>CASALH Ws, Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASALH_c32_comswap), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASALH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASALH(Ws, Wt, mem));
    /// <summary>
    /// Compare and swap unprivileged.
    /// </summary>
    /// <remarks><code>CASALT Xs, Xt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASALT_c64_comswap_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASALT(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASALT(Xs, Xt, mem));
    /// <summary>
    /// Compare and swap unprivileged.
    /// </summary>
    /// <remarks><code>CASAT Xs, Xt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASAT_c64_comswap_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASAT(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASAT(Xs, Xt, mem));
    /// <summary>
    /// Compare and swap byte in memory.
    /// </summary>
    /// <remarks><code>CASB Ws, Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASB_c32_comswap), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASB(Ws, Wt, mem));
    /// <summary>
    /// Compare and swap halfword in memory.
    /// </summary>
    /// <remarks><code>CASH Ws, Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASH_c32_comswap), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASH(Ws, Wt, mem));
    /// <summary>
    /// Compare and swap word or doubleword in memory.
    /// </summary>
    /// <remarks><code>CASL Ws, Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASL_c32_comswap), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASL(Ws, Wt, mem));
    /// <summary>
    /// Compare and swap word or doubleword in memory.
    /// </summary>
    /// <remarks><code>CASL Xs, Xt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASL_c64_comswap), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASL(Xs, Xt, mem));
    /// <summary>
    /// Compare and swap byte in memory.
    /// </summary>
    /// <remarks><code>CASLB Ws, Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASLB_c32_comswap), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASLB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASLB(Ws, Wt, mem));
    /// <summary>
    /// Compare and swap halfword in memory.
    /// </summary>
    /// <remarks><code>CASLH Ws, Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASLH_c32_comswap), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASLH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASLH(Ws, Wt, mem));
    /// <summary>
    /// Compare and swap unprivileged.
    /// </summary>
    /// <remarks><code>CASLT Xs, Xt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASLT_c64_comswap_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASLT(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASLT(Xs, Xt, mem));
    /// <summary>
    /// Compare and swap pair of words or doublewords in memory.
    /// </summary>
    /// <remarks><code>CASP Ws, W(s+1), Wt, W(t+1), [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASP_cp32_comswappr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASP(Arm64RegisterW Ws, Arm64RegisterW W_s_1, Arm64RegisterW Wt, Arm64RegisterW W_t_1, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASP(Ws, W_s_1, Wt, W_t_1, mem));
    /// <summary>
    /// Compare and swap pair of words or doublewords in memory.
    /// </summary>
    /// <remarks><code>CASP Xs, X(s+1), Xt, X(t+1), [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASP_cp64_comswappr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASP(Arm64RegisterX Xs, Arm64RegisterX X_s_1, Arm64RegisterX Xt, Arm64RegisterX X_t_1, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASP(Xs, X_s_1, Xt, X_t_1, mem));
    /// <summary>
    /// Compare and swap pair of words or doublewords in memory.
    /// </summary>
    /// <remarks><code>CASPA Ws, W(s+1), Wt, W(t+1), [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASPA_cp32_comswappr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASPA(Arm64RegisterW Ws, Arm64RegisterW W_s_1, Arm64RegisterW Wt, Arm64RegisterW W_t_1, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASPA(Ws, W_s_1, Wt, W_t_1, mem));
    /// <summary>
    /// Compare and swap pair of words or doublewords in memory.
    /// </summary>
    /// <remarks><code>CASPA Xs, X(s+1), Xt, X(t+1), [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASPA_cp64_comswappr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASPA(Arm64RegisterX Xs, Arm64RegisterX X_s_1, Arm64RegisterX Xt, Arm64RegisterX X_t_1, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASPA(Xs, X_s_1, Xt, X_t_1, mem));
    /// <summary>
    /// Compare and swap pair of words or doublewords in memory.
    /// </summary>
    /// <remarks><code>CASPAL Ws, W(s+1), Wt, W(t+1), [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASPAL_cp32_comswappr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASPAL(Arm64RegisterW Ws, Arm64RegisterW W_s_1, Arm64RegisterW Wt, Arm64RegisterW W_t_1, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASPAL(Ws, W_s_1, Wt, W_t_1, mem));
    /// <summary>
    /// Compare and swap pair of words or doublewords in memory.
    /// </summary>
    /// <remarks><code>CASPAL Xs, X(s+1), Xt, X(t+1), [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASPAL_cp64_comswappr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASPAL(Arm64RegisterX Xs, Arm64RegisterX X_s_1, Arm64RegisterX Xt, Arm64RegisterX X_t_1, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASPAL(Xs, X_s_1, Xt, X_t_1, mem));
    /// <summary>
    /// Compare and swap pair unprivileged.
    /// </summary>
    /// <remarks><code>CASPALT Xs, X(s+1), Xt, X(t+1), [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASPALT_cp64_comswappr_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASPALT(Arm64RegisterX Xs, Arm64RegisterX X_s_1, Arm64RegisterX Xt, Arm64RegisterX X_t_1, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASPALT(Xs, X_s_1, Xt, X_t_1, mem));
    /// <summary>
    /// Compare and swap pair unprivileged.
    /// </summary>
    /// <remarks><code>CASPAT Xs, X(s+1), Xt, X(t+1), [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASPAT_cp64_comswappr_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASPAT(Arm64RegisterX Xs, Arm64RegisterX X_s_1, Arm64RegisterX Xt, Arm64RegisterX X_t_1, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASPAT(Xs, X_s_1, Xt, X_t_1, mem));
    /// <summary>
    /// Compare and swap pair of words or doublewords in memory.
    /// </summary>
    /// <remarks><code>CASPL Ws, W(s+1), Wt, W(t+1), [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASPL_cp32_comswappr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASPL(Arm64RegisterW Ws, Arm64RegisterW W_s_1, Arm64RegisterW Wt, Arm64RegisterW W_t_1, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASPL(Ws, W_s_1, Wt, W_t_1, mem));
    /// <summary>
    /// Compare and swap pair of words or doublewords in memory.
    /// </summary>
    /// <remarks><code>CASPL Xs, X(s+1), Xt, X(t+1), [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASPL_cp64_comswappr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASPL(Arm64RegisterX Xs, Arm64RegisterX X_s_1, Arm64RegisterX Xt, Arm64RegisterX X_t_1, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASPL(Xs, X_s_1, Xt, X_t_1, mem));
    /// <summary>
    /// Compare and swap pair unprivileged.
    /// </summary>
    /// <remarks><code>CASPLT Xs, X(s+1), Xt, X(t+1), [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASPLT_cp64_comswappr_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASPLT(Arm64RegisterX Xs, Arm64RegisterX X_s_1, Arm64RegisterX Xt, Arm64RegisterX X_t_1, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASPLT(Xs, X_s_1, Xt, X_t_1, mem));
    /// <summary>
    /// Compare and swap pair unprivileged.
    /// </summary>
    /// <remarks><code>CASPT Xs, X(s+1), Xt, X(t+1), [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CASPT_cp64_comswappr_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CASPT(Arm64RegisterX Xs, Arm64RegisterX X_s_1, Arm64RegisterX Xt, Arm64RegisterX X_t_1, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CASPT(Xs, X_s_1, Xt, X_t_1, mem));
    /// <summary>
    /// Compare and swap unprivileged.
    /// </summary>
    /// <remarks><code>CAST Xs, Xt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CAST_c64_comswap_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CAST(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.CAST(Xs, Xt, mem));
    /// <summary>
    /// Compare bytes and branch.
    /// </summary>
    /// <remarks><code>CBBEQ Wt, Wm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBBEQ_8_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBBEQ(Arm64RegisterW Wt, Arm64RegisterW Wm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBBEQ(Wt, Wm, RecordLabelOffset(label, 3564)));
    /// <summary>
    /// Compare bytes and branch.
    /// </summary>
    /// <remarks><code>CBBGE Wt, Wm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBBGE_8_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBBGE(Arm64RegisterW Wt, Arm64RegisterW Wm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBBGE(Wt, Wm, RecordLabelOffset(label, 3468)));
    /// <summary>
    /// Compare bytes and branch.
    /// </summary>
    /// <remarks><code>CBBGT Wt, Wm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBBGT_8_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBBGT(Arm64RegisterW Wt, Arm64RegisterW Wm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBBGT(Wt, Wm, RecordLabelOffset(label, 3436)));
    /// <summary>
    /// Compare bytes and branch.
    /// </summary>
    /// <remarks><code>CBBHI Wt, Wm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBBHI_8_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBBHI(Arm64RegisterW Wt, Arm64RegisterW Wm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBBHI(Wt, Wm, RecordLabelOffset(label, 3500)));
    /// <summary>
    /// Compare bytes and branch.
    /// </summary>
    /// <remarks><code>CBBHS Wt, Wm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBBHS_8_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBBHS(Arm64RegisterW Wt, Arm64RegisterW Wm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBBHS(Wt, Wm, RecordLabelOffset(label, 3532)));
    /// <summary>
    /// Compare signed less than or equal bytes and branch.
    /// </summary>
    /// <remarks><code>CBBLE Wm, Wt, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBBLE_cbbge_8_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBBLE(Arm64RegisterW Wm, Arm64RegisterW Wt, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBBLE(Wm, Wt, RecordLabelOffset(label, 3628)));
    /// <summary>
    /// Compare unsigned lower than bytes and branch.
    /// </summary>
    /// <remarks><code>CBBLO Wm, Wt, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBBLO_cbbhi_8_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBBLO(Arm64RegisterW Wm, Arm64RegisterW Wt, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBBLO(Wm, Wt, RecordLabelOffset(label, 3660)));
    /// <summary>
    /// Compare unsigned lower than or equal bytes and branch.
    /// </summary>
    /// <remarks><code>CBBLS Wm, Wt, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBBLS_cbbhs_8_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBBLS(Arm64RegisterW Wm, Arm64RegisterW Wt, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBBLS(Wm, Wt, RecordLabelOffset(label, 3692)));
    /// <summary>
    /// Compare signed less than bytes and branch.
    /// </summary>
    /// <remarks><code>CBBLT Wm, Wt, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBBLT_cbbgt_8_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBBLT(Arm64RegisterW Wm, Arm64RegisterW Wt, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBBLT(Wm, Wt, RecordLabelOffset(label, 3724)));
    /// <summary>
    /// Compare bytes and branch.
    /// </summary>
    /// <remarks><code>CBBNE Wt, Wm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBBNE_8_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBBNE(Arm64RegisterW Wt, Arm64RegisterW Wm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBBNE(Wt, Wm, RecordLabelOffset(label, 3596)));
    /// <summary>
    /// Compare register with immediate and branch.
    /// </summary>
    /// <remarks><code>CBEQ Wt, #imm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBEQ_32_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBEQ(Arm64RegisterW Wt, byte imm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBEQ(Wt, imm, RecordLabelOffset(label, 2796)));
    /// <summary>
    /// Compare register with immediate and branch.
    /// </summary>
    /// <remarks><code>CBEQ Xt, #imm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBEQ_64_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBEQ(Arm64RegisterX Xt, byte imm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBEQ(Xt, imm, RecordLabelOffset(label, 2988)));
    /// <summary>
    /// Compare registers and branch.
    /// </summary>
    /// <remarks><code>CBEQ Wt, Wm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBEQ_32_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBEQ(Arm64RegisterW Wt, Arm64RegisterW Wm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBEQ(Wt, Wm, RecordLabelOffset(label, 3180)));
    /// <summary>
    /// Compare registers and branch.
    /// </summary>
    /// <remarks><code>CBEQ Xt, Xm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBEQ_64_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBEQ(Arm64RegisterX Xt, Arm64RegisterX Xm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBEQ(Xt, Xm, RecordLabelOffset(label, 3372)));
    /// <summary>
    /// Compare registers and branch.
    /// </summary>
    /// <remarks><code>CBGE Wt, Wm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBGE_32_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBGE(Arm64RegisterW Wt, Arm64RegisterW Wm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBGE(Wt, Wm, RecordLabelOffset(label, 3084)));
    /// <summary>
    /// Compare registers and branch.
    /// </summary>
    /// <remarks><code>CBGE Xt, Xm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBGE_64_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBGE(Arm64RegisterX Xt, Arm64RegisterX Xm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBGE(Xt, Xm, RecordLabelOffset(label, 3276)));
    /// <summary>
    /// Compare signed greater than or equal immediate and branch.
    /// </summary>
    /// <remarks><code>CBGE Wt, #immp1, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBGE_cbgt_32_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBGE(Arm64RegisterW Wt, byte immp1, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBGE(Wt, immp1, RecordLabelOffset(label, 3756)));
    /// <summary>
    /// Compare signed greater than or equal immediate and branch.
    /// </summary>
    /// <remarks><code>CBGE Xt, #immp1, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBGE_cbgt_64_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBGE(Arm64RegisterX Xt, byte immp1, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBGE(Xt, immp1, RecordLabelOffset(label, 3788)));
    /// <summary>
    /// Compare register with immediate and branch.
    /// </summary>
    /// <remarks><code>CBGT Wt, #imm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBGT_32_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBGT(Arm64RegisterW Wt, byte imm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBGT(Wt, imm, RecordLabelOffset(label, 2668)));
    /// <summary>
    /// Compare register with immediate and branch.
    /// </summary>
    /// <remarks><code>CBGT Xt, #imm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBGT_64_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBGT(Arm64RegisterX Xt, byte imm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBGT(Xt, imm, RecordLabelOffset(label, 2860)));
    /// <summary>
    /// Compare registers and branch.
    /// </summary>
    /// <remarks><code>CBGT Wt, Wm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBGT_32_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBGT(Arm64RegisterW Wt, Arm64RegisterW Wm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBGT(Wt, Wm, RecordLabelOffset(label, 3052)));
    /// <summary>
    /// Compare registers and branch.
    /// </summary>
    /// <remarks><code>CBGT Xt, Xm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBGT_64_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBGT(Arm64RegisterX Xt, Arm64RegisterX Xm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBGT(Xt, Xm, RecordLabelOffset(label, 3244)));
    /// <summary>
    /// Compare halfwords and branch.
    /// </summary>
    /// <remarks><code>CBHEQ Wt, Wm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBHEQ_16_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBHEQ(Arm64RegisterW Wt, Arm64RegisterW Wm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBHEQ(Wt, Wm, RecordLabelOffset(label, 3948)));
    /// <summary>
    /// Compare halfwords and branch.
    /// </summary>
    /// <remarks><code>CBHGE Wt, Wm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBHGE_16_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBHGE(Arm64RegisterW Wt, Arm64RegisterW Wm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBHGE(Wt, Wm, RecordLabelOffset(label, 3852)));
    /// <summary>
    /// Compare halfwords and branch.
    /// </summary>
    /// <remarks><code>CBHGT Wt, Wm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBHGT_16_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBHGT(Arm64RegisterW Wt, Arm64RegisterW Wm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBHGT(Wt, Wm, RecordLabelOffset(label, 3820)));
    /// <summary>
    /// Compare halfwords and branch.
    /// </summary>
    /// <remarks><code>CBHHI Wt, Wm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBHHI_16_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBHHI(Arm64RegisterW Wt, Arm64RegisterW Wm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBHHI(Wt, Wm, RecordLabelOffset(label, 3884)));
    /// <summary>
    /// Compare halfwords and branch.
    /// </summary>
    /// <remarks><code>CBHHS Wt, Wm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBHHS_16_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBHHS(Arm64RegisterW Wt, Arm64RegisterW Wm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBHHS(Wt, Wm, RecordLabelOffset(label, 3916)));
    /// <summary>
    /// Compare register with immediate and branch.
    /// </summary>
    /// <remarks><code>CBHI Wt, #imm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBHI_32_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBHI(Arm64RegisterW Wt, byte imm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBHI(Wt, imm, RecordLabelOffset(label, 2732)));
    /// <summary>
    /// Compare register with immediate and branch.
    /// </summary>
    /// <remarks><code>CBHI Xt, #imm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBHI_64_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBHI(Arm64RegisterX Xt, byte imm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBHI(Xt, imm, RecordLabelOffset(label, 2924)));
    /// <summary>
    /// Compare registers and branch.
    /// </summary>
    /// <remarks><code>CBHI Wt, Wm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBHI_32_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBHI(Arm64RegisterW Wt, Arm64RegisterW Wm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBHI(Wt, Wm, RecordLabelOffset(label, 3116)));
    /// <summary>
    /// Compare registers and branch.
    /// </summary>
    /// <remarks><code>CBHI Xt, Xm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBHI_64_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBHI(Arm64RegisterX Xt, Arm64RegisterX Xm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBHI(Xt, Xm, RecordLabelOffset(label, 3308)));
    /// <summary>
    /// Compare signed less than or equal halfwords and branch.
    /// </summary>
    /// <remarks><code>CBHLE Wm, Wt, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBHLE_cbhge_16_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBHLE(Arm64RegisterW Wm, Arm64RegisterW Wt, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBHLE(Wm, Wt, RecordLabelOffset(label, 4012)));
    /// <summary>
    /// Compare unsigned lower than halfwords and branch.
    /// </summary>
    /// <remarks><code>CBHLO Wm, Wt, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBHLO_cbhhi_16_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBHLO(Arm64RegisterW Wm, Arm64RegisterW Wt, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBHLO(Wm, Wt, RecordLabelOffset(label, 4044)));
    /// <summary>
    /// Compare unsigned lower than or equal halfwords and branch.
    /// </summary>
    /// <remarks><code>CBHLS Wm, Wt, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBHLS_cbhhs_16_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBHLS(Arm64RegisterW Wm, Arm64RegisterW Wt, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBHLS(Wm, Wt, RecordLabelOffset(label, 4076)));
    /// <summary>
    /// Compare signed less than halfwords and branch.
    /// </summary>
    /// <remarks><code>CBHLT Wm, Wt, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBHLT_cbhgt_16_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBHLT(Arm64RegisterW Wm, Arm64RegisterW Wt, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBHLT(Wm, Wt, RecordLabelOffset(label, 4108)));
    /// <summary>
    /// Compare halfwords and branch.
    /// </summary>
    /// <remarks><code>CBHNE Wt, Wm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBHNE_16_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBHNE(Arm64RegisterW Wt, Arm64RegisterW Wm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBHNE(Wt, Wm, RecordLabelOffset(label, 3980)));
    /// <summary>
    /// Compare registers and branch.
    /// </summary>
    /// <remarks><code>CBHS Wt, Wm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBHS_32_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBHS(Arm64RegisterW Wt, Arm64RegisterW Wm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBHS(Wt, Wm, RecordLabelOffset(label, 3148)));
    /// <summary>
    /// Compare registers and branch.
    /// </summary>
    /// <remarks><code>CBHS Xt, Xm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBHS_64_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBHS(Arm64RegisterX Xt, Arm64RegisterX Xm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBHS(Xt, Xm, RecordLabelOffset(label, 3340)));
    /// <summary>
    /// Compare unsigned greater than or equal immediate and branch.
    /// </summary>
    /// <remarks><code>CBHS Wt, #immp1, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBHS_cbhi_32_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBHS(Arm64RegisterW Wt, byte immp1, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBHS(Wt, immp1, RecordLabelOffset(label, 4140)));
    /// <summary>
    /// Compare unsigned greater than or equal immediate and branch.
    /// </summary>
    /// <remarks><code>CBHS Xt, #immp1, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBHS_cbhi_64_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBHS(Arm64RegisterX Xt, byte immp1, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBHS(Xt, immp1, RecordLabelOffset(label, 4172)));
    /// <summary>
    /// Compare signed less than or equal immediate and branch.
    /// </summary>
    /// <remarks><code>CBLE Wt, #imms1, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBLE_cblt_32_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBLE(Arm64RegisterW Wt, sbyte imms1, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBLE(Wt, imms1, RecordLabelOffset(label, 4204)));
    /// <summary>
    /// Compare signed less than or equal immediate and branch.
    /// </summary>
    /// <remarks><code>CBLE Xt, #imms1, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBLE_cblt_64_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBLE(Arm64RegisterX Xt, sbyte imms1, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBLE(Xt, imms1, RecordLabelOffset(label, 4236)));
    /// <summary>
    /// Compare signed less than or equal register and branch.
    /// </summary>
    /// <remarks><code>CBLE Wm, Wt, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBLE_cbge_32_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBLE(Arm64RegisterW Wm, Arm64RegisterW Wt, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBLE(Wm, Wt, RecordLabelOffset(label, 4268)));
    /// <summary>
    /// Compare signed less than or equal register and branch.
    /// </summary>
    /// <remarks><code>CBLE Xm, Xt, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBLE_cbge_64_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBLE(Arm64RegisterX Xm, Arm64RegisterX Xt, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBLE(Xm, Xt, RecordLabelOffset(label, 4300)));
    /// <summary>
    /// Compare register with immediate and branch.
    /// </summary>
    /// <remarks><code>CBLO Wt, #imm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBLO_32_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBLO(Arm64RegisterW Wt, byte imm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBLO(Wt, imm, RecordLabelOffset(label, 2764)));
    /// <summary>
    /// Compare register with immediate and branch.
    /// </summary>
    /// <remarks><code>CBLO Xt, #imm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBLO_64_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBLO(Arm64RegisterX Xt, byte imm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBLO(Xt, imm, RecordLabelOffset(label, 2956)));
    /// <summary>
    /// Compare unsigned lower than register and branch.
    /// </summary>
    /// <remarks><code>CBLO Wm, Wt, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBLO_cbhi_32_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBLO(Arm64RegisterW Wm, Arm64RegisterW Wt, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBLO(Wm, Wt, RecordLabelOffset(label, 4332)));
    /// <summary>
    /// Compare unsigned lower than register and branch.
    /// </summary>
    /// <remarks><code>CBLO Xm, Xt, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBLO_cbhi_64_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBLO(Arm64RegisterX Xm, Arm64RegisterX Xt, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBLO(Xm, Xt, RecordLabelOffset(label, 4364)));
    /// <summary>
    /// Compare unsigned lower than or equal immediate and branch.
    /// </summary>
    /// <remarks><code>CBLS Wt, #imms1, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBLS_cblo_32_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBLS(Arm64RegisterW Wt, sbyte imms1, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBLS(Wt, imms1, RecordLabelOffset(label, 4396)));
    /// <summary>
    /// Compare unsigned lower than or equal immediate and branch.
    /// </summary>
    /// <remarks><code>CBLS Xt, #imms1, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBLS_cblo_64_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBLS(Arm64RegisterX Xt, sbyte imms1, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBLS(Xt, imms1, RecordLabelOffset(label, 4428)));
    /// <summary>
    /// Compare unsigned lower than or equal register and branch.
    /// </summary>
    /// <remarks><code>CBLS Wm, Wt, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBLS_cbhs_32_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBLS(Arm64RegisterW Wm, Arm64RegisterW Wt, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBLS(Wm, Wt, RecordLabelOffset(label, 4460)));
    /// <summary>
    /// Compare unsigned lower than or equal register and branch.
    /// </summary>
    /// <remarks><code>CBLS Xm, Xt, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBLS_cbhs_64_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBLS(Arm64RegisterX Xm, Arm64RegisterX Xt, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBLS(Xm, Xt, RecordLabelOffset(label, 4492)));
    /// <summary>
    /// Compare register with immediate and branch.
    /// </summary>
    /// <remarks><code>CBLT Wt, #imm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBLT_32_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBLT(Arm64RegisterW Wt, byte imm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBLT(Wt, imm, RecordLabelOffset(label, 2700)));
    /// <summary>
    /// Compare register with immediate and branch.
    /// </summary>
    /// <remarks><code>CBLT Xt, #imm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBLT_64_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBLT(Arm64RegisterX Xt, byte imm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBLT(Xt, imm, RecordLabelOffset(label, 2892)));
    /// <summary>
    /// Compare signed less than register and branch.
    /// </summary>
    /// <remarks><code>CBLT Wm, Wt, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBLT_cbgt_32_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBLT(Arm64RegisterW Wm, Arm64RegisterW Wt, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBLT(Wm, Wt, RecordLabelOffset(label, 4524)));
    /// <summary>
    /// Compare signed less than register and branch.
    /// </summary>
    /// <remarks><code>CBLT Xm, Xt, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBLT_cbgt_64_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBLT(Arm64RegisterX Xm, Arm64RegisterX Xt, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBLT(Xm, Xt, RecordLabelOffset(label, 4556)));
    /// <summary>
    /// Compare register with immediate and branch.
    /// </summary>
    /// <remarks><code>CBNE Wt, #imm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBNE_32_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBNE(Arm64RegisterW Wt, byte imm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBNE(Wt, imm, RecordLabelOffset(label, 2828)));
    /// <summary>
    /// Compare register with immediate and branch.
    /// </summary>
    /// <remarks><code>CBNE Xt, #imm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBNE_64_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBNE(Arm64RegisterX Xt, byte imm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBNE(Xt, imm, RecordLabelOffset(label, 3020)));
    /// <summary>
    /// Compare registers and branch.
    /// </summary>
    /// <remarks><code>CBNE Wt, Wm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBNE_32_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBNE(Arm64RegisterW Wt, Arm64RegisterW Wm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBNE(Wt, Wm, RecordLabelOffset(label, 3212)));
    /// <summary>
    /// Compare registers and branch.
    /// </summary>
    /// <remarks><code>CBNE Xt, Xm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBNE_64_regs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBNE(Arm64RegisterX Xt, Arm64RegisterX Xm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBNE(Xt, Xm, RecordLabelOffset(label, 3404)));
    /// <summary>
    /// Compare and branch on nonzero.
    /// </summary>
    /// <remarks><code>CBNZ Wt, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBNZ_32_compbranch), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBNZ(Arm64RegisterW Wt, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBNZ(Wt, RecordLabelOffset(label, 4580)));
    /// <summary>
    /// Compare and branch on nonzero.
    /// </summary>
    /// <remarks><code>CBNZ Xt, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBNZ_64_compbranch), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBNZ(Arm64RegisterX Xt, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBNZ(Xt, RecordLabelOffset(label, 4604)));
    /// <summary>
    /// Compare and branch on zero.
    /// </summary>
    /// <remarks><code>CBZ Wt, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBZ_32_compbranch), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBZ(Arm64RegisterW Wt, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBZ(Wt, RecordLabelOffset(label, 4628)));
    /// <summary>
    /// Compare and branch on zero.
    /// </summary>
    /// <remarks><code>CBZ Xt, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CBZ_64_compbranch), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CBZ(Arm64RegisterX Xt, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.CBZ(Xt, RecordLabelOffset(label, 4652)));
    /// <summary>
    /// Conditional compare negative (immediate).
    /// </summary>
    /// <remarks><code>CCMN Wn, #imm, #nzcv, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CCMN_32_condcmp_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CCMN(Arm64RegisterW Wn, byte imm, byte nzcv, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.CCMN(Wn, imm, nzcv, cond));
    /// <summary>
    /// Conditional compare negative (immediate).
    /// </summary>
    /// <remarks><code>CCMN Xn, #imm, #nzcv, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CCMN_64_condcmp_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CCMN(Arm64RegisterX Xn, byte imm, byte nzcv, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.CCMN(Xn, imm, nzcv, cond));
    /// <summary>
    /// Conditional compare negative (register).
    /// </summary>
    /// <remarks><code>CCMN Wn, Wm, #nzcv, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CCMN_32_condcmp_reg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CCMN(Arm64RegisterW Wn, Arm64RegisterW Wm, byte nzcv, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.CCMN(Wn, Wm, nzcv, cond));
    /// <summary>
    /// Conditional compare negative (register).
    /// </summary>
    /// <remarks><code>CCMN Xn, Xm, #nzcv, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CCMN_64_condcmp_reg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CCMN(Arm64RegisterX Xn, Arm64RegisterX Xm, byte nzcv, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.CCMN(Xn, Xm, nzcv, cond));
    /// <summary>
    /// Conditional compare (immediate).
    /// </summary>
    /// <remarks><code>CCMP Wn, #imm, #nzcv, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CCMP_32_condcmp_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CCMP(Arm64RegisterW Wn, byte imm, byte nzcv, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.CCMP(Wn, imm, nzcv, cond));
    /// <summary>
    /// Conditional compare (immediate).
    /// </summary>
    /// <remarks><code>CCMP Xn, #imm, #nzcv, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CCMP_64_condcmp_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CCMP(Arm64RegisterX Xn, byte imm, byte nzcv, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.CCMP(Xn, imm, nzcv, cond));
    /// <summary>
    /// Conditional compare (register).
    /// </summary>
    /// <remarks><code>CCMP Wn, Wm, #nzcv, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CCMP_32_condcmp_reg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CCMP(Arm64RegisterW Wn, Arm64RegisterW Wm, byte nzcv, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.CCMP(Wn, Wm, nzcv, cond));
    /// <summary>
    /// Conditional compare (register).
    /// </summary>
    /// <remarks><code>CCMP Xn, Xm, #nzcv, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CCMP_64_condcmp_reg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CCMP(Arm64RegisterX Xn, Arm64RegisterX Xm, byte nzcv, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.CCMP(Xn, Xm, nzcv, cond));
    /// <summary>
    /// Conditional increment.
    /// </summary>
    /// <remarks><code>CINC Wd, Wn, invcond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CINC_csinc_32_condsel), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CINC(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64ConditionalKind invcond)
         => AddInstruction(Arm64InstructionFactory.CINC(Wd, Wn, invcond));
    /// <summary>
    /// Conditional increment.
    /// </summary>
    /// <remarks><code>CINC Xd, Xn, invcond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CINC_csinc_64_condsel), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CINC(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64ConditionalKind invcond)
         => AddInstruction(Arm64InstructionFactory.CINC(Xd, Xn, invcond));
    /// <summary>
    /// Conditional invert.
    /// </summary>
    /// <remarks><code>CINV Wd, Wn, invcond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CINV_csinv_32_condsel), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CINV(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64ConditionalKind invcond)
         => AddInstruction(Arm64InstructionFactory.CINV(Wd, Wn, invcond));
    /// <summary>
    /// Conditional invert.
    /// </summary>
    /// <remarks><code>CINV Xd, Xn, invcond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CINV_csinv_64_condsel), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CINV(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64ConditionalKind invcond)
         => AddInstruction(Arm64InstructionFactory.CINV(Xd, Xn, invcond));
    /// <summary>
    /// Count leading sign bits.
    /// </summary>
    /// <remarks><code>CLS Wd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLS_32_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CLS(Arm64RegisterW Wd, Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.CLS(Wd, Wn));
    /// <summary>
    /// Count leading sign bits.
    /// </summary>
    /// <remarks><code>CLS Xd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLS_64_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CLS(Arm64RegisterX Xd, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CLS(Xd, Xn));
    /// <summary>
    /// Count leading zeros.
    /// </summary>
    /// <remarks><code>CLZ Wd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLZ_32_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CLZ(Arm64RegisterW Wd, Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.CLZ(Wd, Wn));
    /// <summary>
    /// Count leading zeros.
    /// </summary>
    /// <remarks><code>CLZ Xd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLZ_64_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CLZ(Arm64RegisterX Xd, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CLZ(Xd, Xn));
    /// <summary>
    /// Compare negative (extended register).
    /// </summary>
    /// <remarks><code>CMN Wn|WSP, Wm {, extend, {#amount}}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMN_adds_32s_addsub_ext), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMN(Arm64RegisterWOrWSP Wn_WSP, Arm64RegisterW Wm, Arm64ExtendKind extend = Arm64ExtendKind.LSL, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.CMN(Wn_WSP, Wm, extend, amount));
    /// <summary>
    /// Compare negative (extended register).
    /// </summary>
    /// <remarks><code>CMN Xn|SP, Rm {, extend, {#amount}}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMN_adds_64s_addsub_ext), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMN(Arm64RegisterXOrSP Xn_SP, Arm64RegisterX Rm, Arm64ExtendXKind extend = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.CMN(Xn_SP, Rm, extend, amount));
    /// <summary>
    /// Compare negative (extended register).
    /// </summary>
    /// <remarks><code>CMN Xn|SP, Rm {, extend, {#amount}}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMN_adds_64s_addsub_ext), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMN(Arm64RegisterXOrSP Xn_SP, Arm64RegisterW Rm, Arm64ExtendWKind extend = default, int amount = default)
         => AddInstruction(Arm64InstructionFactory.CMN(Xn_SP, Rm, extend, amount));
    /// <summary>
    /// Compare negative (immediate).
    /// </summary>
    /// <remarks><code>CMN Wn|WSP, #imm {, shift}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMN_adds_32s_addsub_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMN(Arm64RegisterWOrWSP Wn_WSP, ushort imm, IArm64ShiftKind.LSL shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.CMN(Wn_WSP, imm, shift, amount));
    /// <summary>
    /// Compare negative (immediate).
    /// </summary>
    /// <remarks><code>CMN Xn|SP, #imm {, shift}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMN_adds_64s_addsub_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMN(Arm64RegisterXOrSP Xn_SP, ushort imm, IArm64ShiftKind.LSL shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.CMN(Xn_SP, imm, shift, amount));
    /// <summary>
    /// Compare negative (shifted register).
    /// </summary>
    /// <remarks><code>CMN Wn, Wm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMN_adds_32_addsub_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMN(Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64ShiftKind3 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.CMN(Wn, Wm, shift, amount));
    /// <summary>
    /// Compare negative (shifted register).
    /// </summary>
    /// <remarks><code>CMN Xn, Xm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMN_adds_64_addsub_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMN(Arm64RegisterX Xn, Arm64RegisterX Xm, Arm64ShiftKind3 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.CMN(Xn, Xm, shift, amount));
    /// <summary>
    /// Compare (extended register).
    /// </summary>
    /// <remarks><code>CMP Wn|WSP, Wm {, extend, {#amount}}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMP_subs_32s_addsub_ext), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMP(Arm64RegisterWOrWSP Wn_WSP, Arm64RegisterW Wm, Arm64ExtendKind extend = Arm64ExtendKind.LSL, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.CMP(Wn_WSP, Wm, extend, amount));
    /// <summary>
    /// Compare (extended register).
    /// </summary>
    /// <remarks><code>CMP Xn|SP, Rm {, extend, {#amount}}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMP_subs_64s_addsub_ext), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMP(Arm64RegisterXOrSP Xn_SP, Arm64RegisterX Rm, Arm64ExtendXKind extend = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.CMP(Xn_SP, Rm, extend, amount));
    /// <summary>
    /// Compare (extended register).
    /// </summary>
    /// <remarks><code>CMP Xn|SP, Rm {, extend, {#amount}}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMP_subs_64s_addsub_ext), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMP(Arm64RegisterXOrSP Xn_SP, Arm64RegisterW Rm, Arm64ExtendWKind extend = default, int amount = default)
         => AddInstruction(Arm64InstructionFactory.CMP(Xn_SP, Rm, extend, amount));
    /// <summary>
    /// Compare (immediate).
    /// </summary>
    /// <remarks><code>CMP Wn|WSP, #imm {, shift}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMP_subs_32s_addsub_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMP(Arm64RegisterWOrWSP Wn_WSP, ushort imm, IArm64ShiftKind.LSL shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.CMP(Wn_WSP, imm, shift, amount));
    /// <summary>
    /// Compare (immediate).
    /// </summary>
    /// <remarks><code>CMP Xn|SP, #imm {, shift}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMP_subs_64s_addsub_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMP(Arm64RegisterXOrSP Xn_SP, ushort imm, IArm64ShiftKind.LSL shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.CMP(Xn_SP, imm, shift, amount));
    /// <summary>
    /// Compare (shifted register).
    /// </summary>
    /// <remarks><code>CMP Wn, Wm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMP_subs_32_addsub_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMP(Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64ShiftKind3 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.CMP(Wn, Wm, shift, amount));
    /// <summary>
    /// Compare (shifted register).
    /// </summary>
    /// <remarks><code>CMP Xn, Xm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMP_subs_64_addsub_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMP(Arm64RegisterX Xn, Arm64RegisterX Xm, Arm64ShiftKind3 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.CMP(Xn, Xm, shift, amount));
    /// <summary>
    /// Compare with tag.
    /// </summary>
    /// <remarks><code>CMPP Xn|SP, Xm|SP</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMPP_subps_64s_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMPP(Arm64RegisterXOrSP Xn_SP, Arm64RegisterXOrSP Xm_SP)
         => AddInstruction(Arm64InstructionFactory.CMPP(Xn_SP, Xm_SP));
    /// <summary>
    /// Conditional negate.
    /// </summary>
    /// <remarks><code>CNEG Wd, Wn, invcond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CNEG_csneg_32_condsel), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CNEG(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64ConditionalKind invcond)
         => AddInstruction(Arm64InstructionFactory.CNEG(Wd, Wn, invcond));
    /// <summary>
    /// Conditional negate.
    /// </summary>
    /// <remarks><code>CNEG Xd, Xn, invcond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CNEG_csneg_64_condsel), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CNEG(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64ConditionalKind invcond)
         => AddInstruction(Arm64InstructionFactory.CNEG(Xd, Xn, invcond));
    /// <summary>
    /// Count bits.
    /// </summary>
    /// <remarks><code>CNT Wd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CNT_32_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CNT(Arm64RegisterW Wd, Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.CNT(Wd, Wn));
    /// <summary>
    /// Count bits.
    /// </summary>
    /// <remarks><code>CNT Xd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CNT_64_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CNT(Arm64RegisterX Xd, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CNT(Xd, Xn));
    /// <summary>
    /// Memory copy.
    /// </summary>
    /// <remarks><code>CPYE [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYE_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYE(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYE(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads and writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYEN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYEN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYEN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYEN(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads non-temporal.
    /// </summary>
    /// <remarks><code>CPYERN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYERN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYERN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYERN(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads unprivileged.
    /// </summary>
    /// <remarks><code>CPYERT [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYERT_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYERT(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYERT(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads unprivileged, reads and writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYERTN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYERTN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYERTN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYERTN(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads unprivileged and non-temporal.
    /// </summary>
    /// <remarks><code>CPYERTRN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYERTRN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYERTRN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYERTRN(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads unprivileged, writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYERTWN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYERTWN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYERTWN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYERTWN(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads and writes unprivileged.
    /// </summary>
    /// <remarks><code>CPYET [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYET_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYET(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYET(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads and writes unprivileged and non-temporal.
    /// </summary>
    /// <remarks><code>CPYETN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYETN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYETN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYETN(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads and writes unprivileged, reads non-temporal.
    /// </summary>
    /// <remarks><code>CPYETRN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYETRN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYETRN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYETRN(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads and writes unprivileged, writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYETWN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYETWN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYETWN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYETWN(dst, src, Xn));
    /// <summary>
    /// Memory copy, writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYEWN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYEWN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYEWN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYEWN(dst, src, Xn));
    /// <summary>
    /// Memory copy, writes unprivileged.
    /// </summary>
    /// <remarks><code>CPYEWT [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYEWT_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYEWT(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYEWT(dst, src, Xn));
    /// <summary>
    /// Memory copy, writes unprivileged, reads and writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYEWTN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYEWTN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYEWTN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYEWTN(dst, src, Xn));
    /// <summary>
    /// Memory copy, writes unprivileged, reads non-temporal.
    /// </summary>
    /// <remarks><code>CPYEWTRN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYEWTRN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYEWTRN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYEWTRN(dst, src, Xn));
    /// <summary>
    /// Memory copy, writes unprivileged and non-temporal.
    /// </summary>
    /// <remarks><code>CPYEWTWN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYEWTWN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYEWTWN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYEWTWN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only.
    /// </summary>
    /// <remarks><code>CPYFE [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFE_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFE(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFE(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads and writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYFEN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFEN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFEN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFEN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads non-temporal.
    /// </summary>
    /// <remarks><code>CPYFERN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFERN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFERN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFERN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads unprivileged.
    /// </summary>
    /// <remarks><code>CPYFERT [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFERT_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFERT(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFERT(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads unprivileged, reads and writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYFERTN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFERTN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFERTN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFERTN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads unprivileged and non-temporal.
    /// </summary>
    /// <remarks><code>CPYFERTRN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFERTRN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFERTRN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFERTRN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads unprivileged, writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYFERTWN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFERTWN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFERTWN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFERTWN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads and writes unprivileged.
    /// </summary>
    /// <remarks><code>CPYFET [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFET_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFET(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFET(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads and writes unprivileged and non-temporal.
    /// </summary>
    /// <remarks><code>CPYFETN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFETN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFETN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFETN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads and writes unprivileged, reads non-temporal.
    /// </summary>
    /// <remarks><code>CPYFETRN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFETRN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFETRN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFETRN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads and writes unprivileged, writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYFETWN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFETWN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFETWN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFETWN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYFEWN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFEWN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFEWN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFEWN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, writes unprivileged.
    /// </summary>
    /// <remarks><code>CPYFEWT [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFEWT_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFEWT(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFEWT(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, writes unprivileged, reads and writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYFEWTN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFEWTN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFEWTN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFEWTN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, writes unprivileged, reads non-temporal.
    /// </summary>
    /// <remarks><code>CPYFEWTRN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFEWTRN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFEWTRN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFEWTRN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, writes unprivileged and non-temporal.
    /// </summary>
    /// <remarks><code>CPYFEWTWN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFEWTWN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFEWTWN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFEWTWN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only.
    /// </summary>
    /// <remarks><code>CPYFM [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFM_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFM(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFM(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads and writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYFMN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFMN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFMN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFMN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads non-temporal.
    /// </summary>
    /// <remarks><code>CPYFMRN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFMRN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFMRN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFMRN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads unprivileged.
    /// </summary>
    /// <remarks><code>CPYFMRT [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFMRT_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFMRT(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFMRT(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads unprivileged, reads and writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYFMRTN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFMRTN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFMRTN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFMRTN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads unprivileged and non-temporal.
    /// </summary>
    /// <remarks><code>CPYFMRTRN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFMRTRN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFMRTRN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFMRTRN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads unprivileged, writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYFMRTWN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFMRTWN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFMRTWN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFMRTWN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads and writes unprivileged.
    /// </summary>
    /// <remarks><code>CPYFMT [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFMT_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFMT(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFMT(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads and writes unprivileged and non-temporal.
    /// </summary>
    /// <remarks><code>CPYFMTN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFMTN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFMTN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFMTN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads and writes unprivileged, reads non-temporal.
    /// </summary>
    /// <remarks><code>CPYFMTRN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFMTRN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFMTRN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFMTRN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads and writes unprivileged, writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYFMTWN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFMTWN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFMTWN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFMTWN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYFMWN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFMWN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFMWN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFMWN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, writes unprivileged.
    /// </summary>
    /// <remarks><code>CPYFMWT [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFMWT_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFMWT(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFMWT(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, writes unprivileged, reads and writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYFMWTN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFMWTN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFMWTN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFMWTN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, writes unprivileged, reads non-temporal.
    /// </summary>
    /// <remarks><code>CPYFMWTRN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFMWTRN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFMWTRN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFMWTRN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, writes unprivileged and non-temporal.
    /// </summary>
    /// <remarks><code>CPYFMWTWN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFMWTWN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFMWTWN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFMWTWN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only.
    /// </summary>
    /// <remarks><code>CPYFP [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFP_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFP(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFP(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads and writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYFPN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFPN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFPN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFPN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads non-temporal.
    /// </summary>
    /// <remarks><code>CPYFPRN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFPRN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFPRN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFPRN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads unprivileged.
    /// </summary>
    /// <remarks><code>CPYFPRT [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFPRT_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFPRT(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFPRT(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads unprivileged, reads and writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYFPRTN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFPRTN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFPRTN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFPRTN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads unprivileged and non-temporal.
    /// </summary>
    /// <remarks><code>CPYFPRTRN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFPRTRN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFPRTRN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFPRTRN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads unprivileged, writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYFPRTWN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFPRTWN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFPRTWN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFPRTWN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads and writes unprivileged.
    /// </summary>
    /// <remarks><code>CPYFPT [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFPT_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFPT(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFPT(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads and writes unprivileged and non-temporal.
    /// </summary>
    /// <remarks><code>CPYFPTN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFPTN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFPTN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFPTN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads and writes unprivileged, reads non-temporal.
    /// </summary>
    /// <remarks><code>CPYFPTRN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFPTRN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFPTRN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFPTRN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, reads and writes unprivileged, writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYFPTWN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFPTWN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFPTWN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFPTWN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYFPWN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFPWN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFPWN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFPWN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, writes unprivileged.
    /// </summary>
    /// <remarks><code>CPYFPWT [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFPWT_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFPWT(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFPWT(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, writes unprivileged, reads and writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYFPWTN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFPWTN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFPWTN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFPWTN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, writes unprivileged, reads non-temporal.
    /// </summary>
    /// <remarks><code>CPYFPWTRN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFPWTRN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFPWTRN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFPWTRN(dst, src, Xn));
    /// <summary>
    /// Memory copy forward-only, writes unprivileged and non-temporal.
    /// </summary>
    /// <remarks><code>CPYFPWTWN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYFPWTWN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYFPWTWN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYFPWTWN(dst, src, Xn));
    /// <summary>
    /// Memory copy.
    /// </summary>
    /// <remarks><code>CPYM [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYM_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYM(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYM(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads and writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYMN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYMN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYMN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYMN(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads non-temporal.
    /// </summary>
    /// <remarks><code>CPYMRN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYMRN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYMRN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYMRN(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads unprivileged.
    /// </summary>
    /// <remarks><code>CPYMRT [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYMRT_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYMRT(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYMRT(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads unprivileged, reads and writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYMRTN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYMRTN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYMRTN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYMRTN(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads unprivileged and non-temporal.
    /// </summary>
    /// <remarks><code>CPYMRTRN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYMRTRN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYMRTRN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYMRTRN(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads unprivileged, writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYMRTWN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYMRTWN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYMRTWN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYMRTWN(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads and writes unprivileged.
    /// </summary>
    /// <remarks><code>CPYMT [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYMT_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYMT(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYMT(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads and writes unprivileged and non-temporal.
    /// </summary>
    /// <remarks><code>CPYMTN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYMTN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYMTN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYMTN(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads and writes unprivileged, reads non-temporal.
    /// </summary>
    /// <remarks><code>CPYMTRN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYMTRN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYMTRN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYMTRN(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads and writes unprivileged, writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYMTWN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYMTWN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYMTWN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYMTWN(dst, src, Xn));
    /// <summary>
    /// Memory copy, writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYMWN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYMWN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYMWN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYMWN(dst, src, Xn));
    /// <summary>
    /// Memory copy, writes unprivileged.
    /// </summary>
    /// <remarks><code>CPYMWT [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYMWT_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYMWT(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYMWT(dst, src, Xn));
    /// <summary>
    /// Memory copy, writes unprivileged, reads and writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYMWTN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYMWTN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYMWTN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYMWTN(dst, src, Xn));
    /// <summary>
    /// Memory copy, writes unprivileged, reads non-temporal.
    /// </summary>
    /// <remarks><code>CPYMWTRN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYMWTRN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYMWTRN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYMWTRN(dst, src, Xn));
    /// <summary>
    /// Memory copy, writes unprivileged and non-temporal.
    /// </summary>
    /// <remarks><code>CPYMWTWN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYMWTWN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYMWTWN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYMWTWN(dst, src, Xn));
    /// <summary>
    /// Memory copy.
    /// </summary>
    /// <remarks><code>CPYP [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYP_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYP(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYP(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads and writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYPN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYPN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYPN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYPN(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads non-temporal.
    /// </summary>
    /// <remarks><code>CPYPRN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYPRN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYPRN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYPRN(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads unprivileged.
    /// </summary>
    /// <remarks><code>CPYPRT [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYPRT_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYPRT(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYPRT(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads unprivileged, reads and writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYPRTN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYPRTN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYPRTN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYPRTN(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads unprivileged and non-temporal.
    /// </summary>
    /// <remarks><code>CPYPRTRN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYPRTRN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYPRTRN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYPRTRN(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads unprivileged, writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYPRTWN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYPRTWN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYPRTWN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYPRTWN(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads and writes unprivileged.
    /// </summary>
    /// <remarks><code>CPYPT [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYPT_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYPT(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYPT(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads and writes unprivileged and non-temporal.
    /// </summary>
    /// <remarks><code>CPYPTN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYPTN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYPTN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYPTN(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads and writes unprivileged, reads non-temporal.
    /// </summary>
    /// <remarks><code>CPYPTRN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYPTRN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYPTRN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYPTRN(dst, src, Xn));
    /// <summary>
    /// Memory copy, reads and writes unprivileged, writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYPTWN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYPTWN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYPTWN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYPTWN(dst, src, Xn));
    /// <summary>
    /// Memory copy, writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYPWN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYPWN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYPWN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYPWN(dst, src, Xn));
    /// <summary>
    /// Memory copy, writes unprivileged.
    /// </summary>
    /// <remarks><code>CPYPWT [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYPWT_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYPWT(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYPWT(dst, src, Xn));
    /// <summary>
    /// Memory copy, writes unprivileged, reads and writes non-temporal.
    /// </summary>
    /// <remarks><code>CPYPWTN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYPWTN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYPWTN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYPWTN(dst, src, Xn));
    /// <summary>
    /// Memory copy, writes unprivileged, reads non-temporal.
    /// </summary>
    /// <remarks><code>CPYPWTRN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYPWTRN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYPWTRN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYPWTRN(dst, src, Xn));
    /// <summary>
    /// Memory copy, writes unprivileged and non-temporal.
    /// </summary>
    /// <remarks><code>CPYPWTWN [Xd]!, [Xs]!, Xn!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPYPWTWN_cpy_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CPYPWTWN(Arm64BaseXMemoryAccessor.PreIncrement dst, Arm64BaseXMemoryAccessor.PreIncrement src, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CPYPWTWN(dst, src, Xn));
    /// <summary>
    /// CRC32 checksum.
    /// </summary>
    /// <remarks><code>CRC32B Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CRC32B_32c_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CRC32B(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.CRC32B(Wd, Wn, Wm));
    /// <summary>
    /// CRC32C checksum.
    /// </summary>
    /// <remarks><code>CRC32CB Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CRC32CB_32c_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CRC32CB(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.CRC32CB(Wd, Wn, Wm));
    /// <summary>
    /// CRC32C checksum.
    /// </summary>
    /// <remarks><code>CRC32CH Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CRC32CH_32c_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CRC32CH(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.CRC32CH(Wd, Wn, Wm));
    /// <summary>
    /// CRC32C checksum.
    /// </summary>
    /// <remarks><code>CRC32CW Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CRC32CW_32c_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CRC32CW(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.CRC32CW(Wd, Wn, Wm));
    /// <summary>
    /// CRC32C checksum.
    /// </summary>
    /// <remarks><code>CRC32CX Wd, Wn, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CRC32CX_64c_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CRC32CX(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.CRC32CX(Wd, Wn, Xm));
    /// <summary>
    /// CRC32 checksum.
    /// </summary>
    /// <remarks><code>CRC32H Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CRC32H_32c_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CRC32H(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.CRC32H(Wd, Wn, Wm));
    /// <summary>
    /// CRC32 checksum.
    /// </summary>
    /// <remarks><code>CRC32W Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CRC32W_32c_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CRC32W(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.CRC32W(Wd, Wn, Wm));
    /// <summary>
    /// CRC32 checksum.
    /// </summary>
    /// <remarks><code>CRC32X Wd, Wn, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CRC32X_64c_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CRC32X(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.CRC32X(Wd, Wn, Xm));
    /// <summary>
    /// Conditional select.
    /// </summary>
    /// <remarks><code>CSEL Wd, Wn, Wm, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CSEL_32_condsel), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CSEL(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.CSEL(Wd, Wn, Wm, cond));
    /// <summary>
    /// Conditional select.
    /// </summary>
    /// <remarks><code>CSEL Xd, Xn, Xm, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CSEL_64_condsel), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CSEL(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.CSEL(Xd, Xn, Xm, cond));
    /// <summary>
    /// Conditional set.
    /// </summary>
    /// <remarks><code>CSET Wd, invcond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CSET_csinc_32_condsel), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CSET(Arm64RegisterW Wd, Arm64ConditionalKind invcond)
         => AddInstruction(Arm64InstructionFactory.CSET(Wd, invcond));
    /// <summary>
    /// Conditional set.
    /// </summary>
    /// <remarks><code>CSET Xd, invcond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CSET_csinc_64_condsel), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CSET(Arm64RegisterX Xd, Arm64ConditionalKind invcond)
         => AddInstruction(Arm64InstructionFactory.CSET(Xd, invcond));
    /// <summary>
    /// Conditional set mask.
    /// </summary>
    /// <remarks><code>CSETM Wd, invcond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CSETM_csinv_32_condsel), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CSETM(Arm64RegisterW Wd, Arm64ConditionalKind invcond)
         => AddInstruction(Arm64InstructionFactory.CSETM(Wd, invcond));
    /// <summary>
    /// Conditional set mask.
    /// </summary>
    /// <remarks><code>CSETM Xd, invcond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CSETM_csinv_64_condsel), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CSETM(Arm64RegisterX Xd, Arm64ConditionalKind invcond)
         => AddInstruction(Arm64InstructionFactory.CSETM(Xd, invcond));
    /// <summary>
    /// Conditional select increment.
    /// </summary>
    /// <remarks><code>CSINC Wd, Wn, Wm, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CSINC_32_condsel), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CSINC(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.CSINC(Wd, Wn, Wm, cond));
    /// <summary>
    /// Conditional select increment.
    /// </summary>
    /// <remarks><code>CSINC Xd, Xn, Xm, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CSINC_64_condsel), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CSINC(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.CSINC(Xd, Xn, Xm, cond));
    /// <summary>
    /// Conditional select invert.
    /// </summary>
    /// <remarks><code>CSINV Wd, Wn, Wm, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CSINV_32_condsel), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CSINV(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.CSINV(Wd, Wn, Wm, cond));
    /// <summary>
    /// Conditional select invert.
    /// </summary>
    /// <remarks><code>CSINV Xd, Xn, Xm, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CSINV_64_condsel), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CSINV(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.CSINV(Xd, Xn, Xm, cond));
    /// <summary>
    /// Conditional select negation.
    /// </summary>
    /// <remarks><code>CSNEG Wd, Wn, Wm, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CSNEG_32_condsel), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CSNEG(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.CSNEG(Wd, Wn, Wm, cond));
    /// <summary>
    /// Conditional select negation.
    /// </summary>
    /// <remarks><code>CSNEG Xd, Xn, Xm, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CSNEG_64_condsel), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CSNEG(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.CSNEG(Xd, Xn, Xm, cond));
    /// <summary>
    /// Count trailing zeros.
    /// </summary>
    /// <remarks><code>CTZ Wd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CTZ_32_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CTZ(Arm64RegisterW Wd, Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.CTZ(Wd, Wn));
    /// <summary>
    /// Count trailing zeros.
    /// </summary>
    /// <remarks><code>CTZ Xd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CTZ_64_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CTZ(Arm64RegisterX Xd, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.CTZ(Xd, Xn));
    /// <summary>
    /// Bitwise exclusive-OR NOT (shifted register).
    /// </summary>
    /// <remarks><code>EON Wd, Wn, Wm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.EON_32_log_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void EON(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64ShiftKind4 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.EON(Wd, Wn, Wm, shift, amount));
    /// <summary>
    /// Bitwise exclusive-OR NOT (shifted register).
    /// </summary>
    /// <remarks><code>EON Xd, Xn, Xm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.EON_64_log_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void EON(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm, Arm64ShiftKind4 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.EON(Xd, Xn, Xm, shift, amount));
    /// <summary>
    /// Bitwise exclusive-OR (immediate).
    /// </summary>
    /// <remarks><code>EOR Wd|WSP, Wn, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.EOR_32_log_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void EOR(Arm64RegisterWOrWSP Wd_WSP, Arm64RegisterW Wn, Arm64LogicalImmediate32 imm)
         => AddInstruction(Arm64InstructionFactory.EOR(Wd_WSP, Wn, imm));
    /// <summary>
    /// Bitwise exclusive-OR (immediate).
    /// </summary>
    /// <remarks><code>EOR Xd|SP, Xn, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.EOR_64_log_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void EOR(Arm64RegisterXOrSP Xd_SP, Arm64RegisterX Xn, Arm64LogicalImmediate64 imm)
         => AddInstruction(Arm64InstructionFactory.EOR(Xd_SP, Xn, imm));
    /// <summary>
    /// Bitwise exclusive-OR (shifted register).
    /// </summary>
    /// <remarks><code>EOR Wd, Wn, Wm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.EOR_32_log_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void EOR(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64ShiftKind4 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.EOR(Wd, Wn, Wm, shift, amount));
    /// <summary>
    /// Bitwise exclusive-OR (shifted register).
    /// </summary>
    /// <remarks><code>EOR Xd, Xn, Xm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.EOR_64_log_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void EOR(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm, Arm64ShiftKind4 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.EOR(Xd, Xn, Xm, shift, amount));
    /// <summary>
    /// Exception return, with pointer authentication.
    /// </summary>
    /// <remarks><code>ERETAA </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ERETAA_64e_branch_reg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ERETAA()
         => AddInstruction(Arm64InstructionFactory.ERETAA());
    /// <summary>
    /// Exception return, with pointer authentication.
    /// </summary>
    /// <remarks><code>ERETAB </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ERETAB_64e_branch_reg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ERETAB()
         => AddInstruction(Arm64InstructionFactory.ERETAB());
    /// <summary>
    /// Extract register.
    /// </summary>
    /// <remarks><code>EXTR Wd, Wn, Wm, #lsb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.EXTR_32_extract), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void EXTR(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm, byte lsb)
         => AddInstruction(Arm64InstructionFactory.EXTR(Wd, Wn, Wm, lsb));
    /// <summary>
    /// Extract register.
    /// </summary>
    /// <remarks><code>EXTR Xd, Xn, Xm, #lsb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.EXTR_64_extract), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void EXTR(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm, byte lsb)
         => AddInstruction(Arm64InstructionFactory.EXTR(Xd, Xn, Xm, lsb));
    /// <summary>
    /// Guarded Control Stack store register.
    /// </summary>
    /// <remarks><code>GCSSTR Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.GCSSTR_64_ldst_gcs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void GCSSTR(Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.GCSSTR(Xt, mem));
    /// <summary>
    /// Guarded Control Stack store register (unprivileged).
    /// </summary>
    /// <remarks><code>GCSSTTR Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.GCSSTTR_64_ldst_gcs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void GCSSTTR(Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.GCSSTTR(Xt, mem));
    /// <summary>
    /// Tag mask insert.
    /// </summary>
    /// <remarks><code>GMI Xd, Xn|SP, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.GMI_64g_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void GMI(Arm64RegisterX Xd, Arm64RegisterXOrSP Xn_SP, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.GMI(Xd, Xn_SP, Xm));
    /// <summary>
    /// Insert random tag.
    /// </summary>
    /// <remarks><code>IRG Xd|SP, Xn|SP {, Xm}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.IRG_64i_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void IRG(Arm64RegisterXOrSP Xd_SP, Arm64RegisterXOrSP Xn_SP, Arm64RegisterX Xm = default)
         => AddInstruction(Arm64InstructionFactory.IRG(Xd_SP, Xn_SP, Xm));
    /// <summary>
    /// Single-copy atomic 64-byte Load.
    /// </summary>
    /// <remarks><code>LD64B Xt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD64B_64l_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD64B(Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD64B(Xt, src));
    /// <summary>
    /// Atomic add on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDADD Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDADD_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDADD(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDADD(Ws, Wt, src));
    /// <summary>
    /// Atomic add on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDADD Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDADD_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDADD(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDADD(Xs, Xt, src));
    /// <summary>
    /// Atomic add on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDADDA Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDADDA_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDADDA(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDADDA(Ws, Wt, src));
    /// <summary>
    /// Atomic add on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDADDA Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDADDA_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDADDA(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDADDA(Xs, Xt, src));
    /// <summary>
    /// Atomic add on byte in memory.
    /// </summary>
    /// <remarks><code>LDADDAB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDADDAB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDADDAB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDADDAB(Ws, Wt, src));
    /// <summary>
    /// Atomic add on halfword in memory.
    /// </summary>
    /// <remarks><code>LDADDAH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDADDAH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDADDAH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDADDAH(Ws, Wt, src));
    /// <summary>
    /// Atomic add on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDADDAL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDADDAL_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDADDAL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDADDAL(Ws, Wt, src));
    /// <summary>
    /// Atomic add on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDADDAL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDADDAL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDADDAL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDADDAL(Xs, Xt, src));
    /// <summary>
    /// Atomic add on byte in memory.
    /// </summary>
    /// <remarks><code>LDADDALB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDADDALB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDADDALB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDADDALB(Ws, Wt, src));
    /// <summary>
    /// Atomic add on halfword in memory.
    /// </summary>
    /// <remarks><code>LDADDALH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDADDALH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDADDALH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDADDALH(Ws, Wt, src));
    /// <summary>
    /// Atomic add on byte in memory.
    /// </summary>
    /// <remarks><code>LDADDB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDADDB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDADDB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDADDB(Ws, Wt, src));
    /// <summary>
    /// Atomic add on halfword in memory.
    /// </summary>
    /// <remarks><code>LDADDH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDADDH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDADDH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDADDH(Ws, Wt, src));
    /// <summary>
    /// Atomic add on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDADDL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDADDL_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDADDL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDADDL(Ws, Wt, src));
    /// <summary>
    /// Atomic add on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDADDL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDADDL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDADDL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDADDL(Xs, Xt, src));
    /// <summary>
    /// Atomic add on byte in memory.
    /// </summary>
    /// <remarks><code>LDADDLB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDADDLB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDADDLB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDADDLB(Ws, Wt, src));
    /// <summary>
    /// Atomic add on halfword in memory.
    /// </summary>
    /// <remarks><code>LDADDLH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDADDLH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDADDLH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDADDLH(Ws, Wt, src));
    /// <summary>
    /// Load-acquire RCpc register.
    /// </summary>
    /// <remarks><code>LDAPR Wt, [Xn|SP], #4</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAPR_32l_ldapstl_writeback), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDAPR(Arm64RegisterW Wt, Arm64BaseMemoryAccessor src, byte value4 = 4)
         => AddInstruction(Arm64InstructionFactory.LDAPR(Wt, src, value4));
    /// <summary>
    /// Load-acquire RCpc register.
    /// </summary>
    /// <remarks><code>LDAPR Xt, [Xn|SP], #8</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAPR_64l_ldapstl_writeback), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDAPR(Arm64RegisterX Xt, Arm64BaseMemoryAccessor src, byte value8 = 8)
         => AddInstruction(Arm64InstructionFactory.LDAPR(Xt, src, value8));
    /// <summary>
    /// Load-acquire RCpc register.
    /// </summary>
    /// <remarks><code>LDAPR Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAPR_32l_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDAPR(Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDAPR(Wt, src));
    /// <summary>
    /// Load-acquire RCpc register.
    /// </summary>
    /// <remarks><code>LDAPR Xt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAPR_64l_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDAPR(Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDAPR(Xt, src));
    /// <summary>
    /// Load-acquire RCpc register byte.
    /// </summary>
    /// <remarks><code>LDAPRB Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAPRB_32l_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDAPRB(Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDAPRB(Wt, src));
    /// <summary>
    /// Load-acquire RCpc register halfword.
    /// </summary>
    /// <remarks><code>LDAPRH Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAPRH_32l_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDAPRH(Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDAPRH(Wt, src));
    /// <summary>
    /// Load-acquire RCpc register (unscaled).
    /// </summary>
    /// <remarks><code>LDAPUR Wt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAPUR_32_ldapstl_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDAPUR(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDAPUR(Wt, src));
    /// <summary>
    /// Load-acquire RCpc register (unscaled).
    /// </summary>
    /// <remarks><code>LDAPUR Xt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAPUR_64_ldapstl_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDAPUR(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDAPUR(Xt, src));
    /// <summary>
    /// Load-acquire RCpc register byte (unscaled).
    /// </summary>
    /// <remarks><code>LDAPURB Wt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAPURB_32_ldapstl_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDAPURB(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDAPURB(Wt, src));
    /// <summary>
    /// Load-acquire RCpc register halfword (unscaled).
    /// </summary>
    /// <remarks><code>LDAPURH Wt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAPURH_32_ldapstl_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDAPURH(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDAPURH(Wt, src));
    /// <summary>
    /// Load-acquire RCpc register signed byte (unscaled).
    /// </summary>
    /// <remarks><code>LDAPURSB Wt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAPURSB_32_ldapstl_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDAPURSB(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDAPURSB(Wt, src));
    /// <summary>
    /// Load-acquire RCpc register signed byte (unscaled).
    /// </summary>
    /// <remarks><code>LDAPURSB Xt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAPURSB_64_ldapstl_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDAPURSB(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDAPURSB(Xt, src));
    /// <summary>
    /// Load-acquire RCpc register signed halfword (unscaled).
    /// </summary>
    /// <remarks><code>LDAPURSH Wt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAPURSH_32_ldapstl_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDAPURSH(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDAPURSH(Wt, src));
    /// <summary>
    /// Load-acquire RCpc register signed halfword (unscaled).
    /// </summary>
    /// <remarks><code>LDAPURSH Xt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAPURSH_64_ldapstl_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDAPURSH(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDAPURSH(Xt, src));
    /// <summary>
    /// Load-acquire RCpc register signed word (unscaled).
    /// </summary>
    /// <remarks><code>LDAPURSW Xt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAPURSW_64_ldapstl_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDAPURSW(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDAPURSW(Xt, src));
    /// <summary>
    /// Load-acquire register.
    /// </summary>
    /// <remarks><code>LDAR Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAR_lr32_ldstord), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDAR(Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDAR(Wt, src));
    /// <summary>
    /// Load-acquire register.
    /// </summary>
    /// <remarks><code>LDAR Xt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAR_lr64_ldstord), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDAR(Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDAR(Xt, src));
    /// <summary>
    /// Load-acquire register byte.
    /// </summary>
    /// <remarks><code>LDARB Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDARB_lr32_ldstord), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDARB(Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDARB(Wt, src));
    /// <summary>
    /// Load-acquire register halfword.
    /// </summary>
    /// <remarks><code>LDARH Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDARH_lr32_ldstord), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDARH(Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDARH(Wt, src));
    /// <summary>
    /// Load-acquire unprivileged exclusive register.
    /// </summary>
    /// <remarks><code>LDATXR Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDATXR_lr32_ldstexclr_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDATXR(Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDATXR(Wt, src));
    /// <summary>
    /// Load-acquire unprivileged exclusive register.
    /// </summary>
    /// <remarks><code>LDATXR Xt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDATXR_lr64_ldstexclr_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDATXR(Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDATXR(Xt, src));
    /// <summary>
    /// Load-acquire exclusive pair of registers.
    /// </summary>
    /// <remarks><code>LDAXP Wt1, Wt2, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAXP_lp32_ldstexclp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDAXP(Arm64RegisterW Wt1, Arm64RegisterW Wt2, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDAXP(Wt1, Wt2, src));
    /// <summary>
    /// Load-acquire exclusive pair of registers.
    /// </summary>
    /// <remarks><code>LDAXP Xt1, Xt2, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAXP_lp64_ldstexclp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDAXP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDAXP(Xt1, Xt2, src));
    /// <summary>
    /// Load-acquire exclusive register.
    /// </summary>
    /// <remarks><code>LDAXR Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAXR_lr32_ldstexclr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDAXR(Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDAXR(Wt, src));
    /// <summary>
    /// Load-acquire exclusive register.
    /// </summary>
    /// <remarks><code>LDAXR Xt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAXR_lr64_ldstexclr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDAXR(Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDAXR(Xt, src));
    /// <summary>
    /// Load-acquire exclusive register byte.
    /// </summary>
    /// <remarks><code>LDAXRB Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAXRB_lr32_ldstexclr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDAXRB(Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDAXRB(Wt, src));
    /// <summary>
    /// Load-acquire exclusive register halfword.
    /// </summary>
    /// <remarks><code>LDAXRH Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAXRH_lr32_ldstexclr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDAXRH(Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDAXRH(Wt, src));
    /// <summary>
    /// Atomic bit clear on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDCLR Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDCLR_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDCLR(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDCLR(Ws, Wt, src));
    /// <summary>
    /// Atomic bit clear on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDCLR Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDCLR_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDCLR(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDCLR(Xs, Xt, src));
    /// <summary>
    /// Atomic bit clear on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDCLRA Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDCLRA_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDCLRA(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDCLRA(Ws, Wt, src));
    /// <summary>
    /// Atomic bit clear on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDCLRA Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDCLRA_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDCLRA(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDCLRA(Xs, Xt, src));
    /// <summary>
    /// Atomic bit clear on byte in memory.
    /// </summary>
    /// <remarks><code>LDCLRAB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDCLRAB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDCLRAB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDCLRAB(Ws, Wt, src));
    /// <summary>
    /// Atomic bit clear on halfword in memory.
    /// </summary>
    /// <remarks><code>LDCLRAH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDCLRAH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDCLRAH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDCLRAH(Ws, Wt, src));
    /// <summary>
    /// Atomic bit clear on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDCLRAL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDCLRAL_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDCLRAL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDCLRAL(Ws, Wt, src));
    /// <summary>
    /// Atomic bit clear on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDCLRAL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDCLRAL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDCLRAL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDCLRAL(Xs, Xt, src));
    /// <summary>
    /// Atomic bit clear on byte in memory.
    /// </summary>
    /// <remarks><code>LDCLRALB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDCLRALB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDCLRALB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDCLRALB(Ws, Wt, src));
    /// <summary>
    /// Atomic bit clear on halfword in memory.
    /// </summary>
    /// <remarks><code>LDCLRALH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDCLRALH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDCLRALH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDCLRALH(Ws, Wt, src));
    /// <summary>
    /// Atomic bit clear on byte in memory.
    /// </summary>
    /// <remarks><code>LDCLRB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDCLRB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDCLRB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDCLRB(Ws, Wt, src));
    /// <summary>
    /// Atomic bit clear on halfword in memory.
    /// </summary>
    /// <remarks><code>LDCLRH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDCLRH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDCLRH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDCLRH(Ws, Wt, src));
    /// <summary>
    /// Atomic bit clear on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDCLRL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDCLRL_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDCLRL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDCLRL(Ws, Wt, src));
    /// <summary>
    /// Atomic bit clear on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDCLRL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDCLRL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDCLRL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDCLRL(Xs, Xt, src));
    /// <summary>
    /// Atomic bit clear on byte in memory.
    /// </summary>
    /// <remarks><code>LDCLRLB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDCLRLB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDCLRLB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDCLRLB(Ws, Wt, src));
    /// <summary>
    /// Atomic bit clear on halfword in memory.
    /// </summary>
    /// <remarks><code>LDCLRLH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDCLRLH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDCLRLH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDCLRLH(Ws, Wt, src));
    /// <summary>
    /// Atomic bit clear on quadword in memory.
    /// </summary>
    /// <remarks><code>LDCLRP Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDCLRP_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDCLRP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDCLRP(Xt1, Xt2, src));
    /// <summary>
    /// Atomic bit clear on quadword in memory.
    /// </summary>
    /// <remarks><code>LDCLRPA Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDCLRPA_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDCLRPA(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDCLRPA(Xt1, Xt2, src));
    /// <summary>
    /// Atomic bit clear on quadword in memory.
    /// </summary>
    /// <remarks><code>LDCLRPAL Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDCLRPAL_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDCLRPAL(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDCLRPAL(Xt1, Xt2, src));
    /// <summary>
    /// Atomic bit clear on quadword in memory.
    /// </summary>
    /// <remarks><code>LDCLRPL Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDCLRPL_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDCLRPL(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDCLRPL(Xt1, Xt2, src));
    /// <summary>
    /// Atomic exclusive-OR on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDEOR Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDEOR_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDEOR(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDEOR(Ws, Wt, src));
    /// <summary>
    /// Atomic exclusive-OR on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDEOR Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDEOR_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDEOR(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDEOR(Xs, Xt, src));
    /// <summary>
    /// Atomic exclusive-OR on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDEORA Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDEORA_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDEORA(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDEORA(Ws, Wt, src));
    /// <summary>
    /// Atomic exclusive-OR on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDEORA Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDEORA_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDEORA(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDEORA(Xs, Xt, src));
    /// <summary>
    /// Atomic exclusive-OR on byte in memory.
    /// </summary>
    /// <remarks><code>LDEORAB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDEORAB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDEORAB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDEORAB(Ws, Wt, src));
    /// <summary>
    /// Atomic exclusive-OR on halfword in memory.
    /// </summary>
    /// <remarks><code>LDEORAH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDEORAH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDEORAH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDEORAH(Ws, Wt, src));
    /// <summary>
    /// Atomic exclusive-OR on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDEORAL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDEORAL_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDEORAL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDEORAL(Ws, Wt, src));
    /// <summary>
    /// Atomic exclusive-OR on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDEORAL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDEORAL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDEORAL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDEORAL(Xs, Xt, src));
    /// <summary>
    /// Atomic exclusive-OR on byte in memory.
    /// </summary>
    /// <remarks><code>LDEORALB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDEORALB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDEORALB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDEORALB(Ws, Wt, src));
    /// <summary>
    /// Atomic exclusive-OR on halfword in memory.
    /// </summary>
    /// <remarks><code>LDEORALH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDEORALH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDEORALH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDEORALH(Ws, Wt, src));
    /// <summary>
    /// Atomic exclusive-OR on byte in memory.
    /// </summary>
    /// <remarks><code>LDEORB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDEORB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDEORB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDEORB(Ws, Wt, src));
    /// <summary>
    /// Atomic exclusive-OR on halfword in memory.
    /// </summary>
    /// <remarks><code>LDEORH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDEORH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDEORH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDEORH(Ws, Wt, src));
    /// <summary>
    /// Atomic exclusive-OR on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDEORL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDEORL_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDEORL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDEORL(Ws, Wt, src));
    /// <summary>
    /// Atomic exclusive-OR on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDEORL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDEORL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDEORL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDEORL(Xs, Xt, src));
    /// <summary>
    /// Atomic exclusive-OR on byte in memory.
    /// </summary>
    /// <remarks><code>LDEORLB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDEORLB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDEORLB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDEORLB(Ws, Wt, src));
    /// <summary>
    /// Atomic exclusive-OR on halfword in memory.
    /// </summary>
    /// <remarks><code>LDEORLH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDEORLH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDEORLH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDEORLH(Ws, Wt, src));
    /// <summary>
    /// Load Allocation Tag.
    /// </summary>
    /// <remarks><code>LDG Xt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDG_64loffset_ldsttags), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDG(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDG(Xt, src));
    /// <summary>
    /// Load tag multiple.
    /// </summary>
    /// <remarks><code>LDGM Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDGM_64bulk_ldsttags), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDGM(Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDGM(Xt, src));
    /// <summary>
    /// Load-Acquire RCpc ordered pair of registers.
    /// </summary>
    /// <remarks><code>LDIAPP Wt1, Wt2, [Xn|SP], #8</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDIAPP_32le_ldiappstilp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDIAPP(Arm64RegisterW Wt1, Arm64RegisterW Wt2, Arm64BaseMemoryAccessor src, byte value8 = 8)
         => AddInstruction(Arm64InstructionFactory.LDIAPP(Wt1, Wt2, src, value8));
    /// <summary>
    /// Load-Acquire RCpc ordered pair of registers.
    /// </summary>
    /// <remarks><code>LDIAPP Wt1, Wt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDIAPP_32l_ldiappstilp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDIAPP(Arm64RegisterW Wt1, Arm64RegisterW Wt2, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDIAPP(Wt1, Wt2, src));
    /// <summary>
    /// Load-Acquire RCpc ordered pair of registers.
    /// </summary>
    /// <remarks><code>LDIAPP Xt1, Xt2, [Xn|SP], #16</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDIAPP_64ls_ldiappstilp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDIAPP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor src, byte value16 = 16)
         => AddInstruction(Arm64InstructionFactory.LDIAPP(Xt1, Xt2, src, value16));
    /// <summary>
    /// Load-Acquire RCpc ordered pair of registers.
    /// </summary>
    /// <remarks><code>LDIAPP Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDIAPP_64l_ldiappstilp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDIAPP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDIAPP(Xt1, Xt2, src));
    /// <summary>
    /// Load LOAcquire register.
    /// </summary>
    /// <remarks><code>LDLAR Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDLAR_lr32_ldstord), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDLAR(Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDLAR(Wt, src));
    /// <summary>
    /// Load LOAcquire register.
    /// </summary>
    /// <remarks><code>LDLAR Xt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDLAR_lr64_ldstord), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDLAR(Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDLAR(Xt, src));
    /// <summary>
    /// Load LOAcquire register byte.
    /// </summary>
    /// <remarks><code>LDLARB Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDLARB_lr32_ldstord), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDLARB(Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDLARB(Wt, src));
    /// <summary>
    /// Load LOAcquire register halfword.
    /// </summary>
    /// <remarks><code>LDLARH Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDLARH_lr32_ldstord), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDLARH(Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDLARH(Wt, src));
    /// <summary>
    /// Load pair of registers, with non-temporal hint.
    /// </summary>
    /// <remarks><code>LDNP Wt1, Wt2, [Xn|SP{, #imm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDNP_32_ldstnapair_offs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDNP(Arm64RegisterW Wt1, Arm64RegisterW Wt2, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDNP(Wt1, Wt2, src));
    /// <summary>
    /// Load pair of registers, with non-temporal hint.
    /// </summary>
    /// <remarks><code>LDNP Xt1, Xt2, [Xn|SP{, #imm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDNP_64_ldstnapair_offs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDNP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDNP(Xt1, Xt2, src));
    /// <summary>
    /// Load pair of registers.
    /// </summary>
    /// <remarks><code>LDP Wt1, Wt2, [Xn|SP], #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDP_32_ldstpair_post), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDP(Arm64RegisterW Wt1, Arm64RegisterW Wt2, Arm64BaseMemoryAccessor src, int imm)
         => AddInstruction(Arm64InstructionFactory.LDP(Wt1, Wt2, src, imm));
    /// <summary>
    /// Load pair of registers.
    /// </summary>
    /// <remarks><code>LDP Xt1, Xt2, [Xn|SP], #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDP_64_ldstpair_post), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor src, int imm)
         => AddInstruction(Arm64InstructionFactory.LDP(Xt1, Xt2, src, imm));
    /// <summary>
    /// Load pair of registers.
    /// </summary>
    /// <remarks><code>LDP Wt1, Wt2, [Xn|SP, #imm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDP_32_ldstpair_pre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDP(Arm64RegisterW Wt1, Arm64RegisterW Wt2, Arm64ImmediateMemoryAccessor.PreIncrement src)
         => AddInstruction(Arm64InstructionFactory.LDP(Wt1, Wt2, src));
    /// <summary>
    /// Load pair of registers.
    /// </summary>
    /// <remarks><code>LDP Xt1, Xt2, [Xn|SP, #imm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDP_64_ldstpair_pre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64ImmediateMemoryAccessor.PreIncrement src)
         => AddInstruction(Arm64InstructionFactory.LDP(Xt1, Xt2, src));
    /// <summary>
    /// Load pair of registers.
    /// </summary>
    /// <remarks><code>LDP Wt1, Wt2, [Xn|SP{, #imm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDP_32_ldstpair_off), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDP(Arm64RegisterW Wt1, Arm64RegisterW Wt2, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDP(Wt1, Wt2, src));
    /// <summary>
    /// Load pair of registers.
    /// </summary>
    /// <remarks><code>LDP Xt1, Xt2, [Xn|SP{, #imm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDP_64_ldstpair_off), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDP(Xt1, Xt2, src));
    /// <summary>
    /// Load pair of registers signed word.
    /// </summary>
    /// <remarks><code>LDPSW Xt1, Xt2, [Xn|SP], #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDPSW_64_ldstpair_post), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDPSW(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor src, int imm)
         => AddInstruction(Arm64InstructionFactory.LDPSW(Xt1, Xt2, src, imm));
    /// <summary>
    /// Load pair of registers signed word.
    /// </summary>
    /// <remarks><code>LDPSW Xt1, Xt2, [Xn|SP, #imm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDPSW_64_ldstpair_pre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDPSW(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64ImmediateMemoryAccessor.PreIncrement src)
         => AddInstruction(Arm64InstructionFactory.LDPSW(Xt1, Xt2, src));
    /// <summary>
    /// Load pair of registers signed word.
    /// </summary>
    /// <remarks><code>LDPSW Xt1, Xt2, [Xn|SP{, #imm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDPSW_64_ldstpair_off), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDPSW(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDPSW(Xt1, Xt2, src));
    /// <summary>
    /// Load register (immediate).
    /// </summary>
    /// <remarks><code>LDR Wt, [Xn|SP], #simm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_32_ldst_immpost), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDR(Arm64RegisterW Wt, Arm64BaseMemoryAccessor src, short simm)
         => AddInstruction(Arm64InstructionFactory.LDR(Wt, src, simm));
    /// <summary>
    /// Load register (immediate).
    /// </summary>
    /// <remarks><code>LDR Xt, [Xn|SP], #simm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_64_ldst_immpost), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDR(Arm64RegisterX Xt, Arm64BaseMemoryAccessor src, short simm)
         => AddInstruction(Arm64InstructionFactory.LDR(Xt, src, simm));
    /// <summary>
    /// Load register (immediate).
    /// </summary>
    /// <remarks><code>LDR Wt, [Xn|SP, #simm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_32_ldst_immpre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDR(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor.PreIncrement src)
         => AddInstruction(Arm64InstructionFactory.LDR(Wt, src));
    /// <summary>
    /// Load register (immediate).
    /// </summary>
    /// <remarks><code>LDR Xt, [Xn|SP, #simm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_64_ldst_immpre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDR(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor.PreIncrement src)
         => AddInstruction(Arm64InstructionFactory.LDR(Xt, src));
    /// <summary>
    /// Load register (immediate).
    /// </summary>
    /// <remarks><code>LDR Wt, [Xn|SP{, #pimm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_32_ldst_pos), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDR(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDR(Wt, src));
    /// <summary>
    /// Load register (immediate).
    /// </summary>
    /// <remarks><code>LDR Xt, [Xn|SP{, #pimm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_64_ldst_pos), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDR(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDR(Xt, src));
    /// <summary>
    /// Load register (literal).
    /// </summary>
    /// <remarks><code>LDR Wt, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_32_loadlit), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDR(Arm64RegisterW Wt, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.LDR(Wt, RecordLabelOffset(label, 10952)));
    /// <summary>
    /// Load register (literal).
    /// </summary>
    /// <remarks><code>LDR Xt, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_64_loadlit), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDR(Arm64RegisterX Xt, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.LDR(Xt, RecordLabelOffset(label, 10976)));
    /// <summary>
    /// Load register (register).
    /// </summary>
    /// <remarks><code>LDR Wt, [Xn|SP, (Wm|Xm){, extend, {amount}}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_32_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDR(Arm64RegisterW Wt, Arm64RegisterXExtendMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDR(Wt, src));
    /// <summary>
    /// Load register (register).
    /// </summary>
    /// <remarks><code>LDR Wt, [Xn|SP, (Wm|Xm){, extend, {amount}}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_32_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDR(Arm64RegisterW Wt, Arm64RegisterWExtendMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDR(Wt, src));
    /// <summary>
    /// Load register (register).
    /// </summary>
    /// <remarks><code>LDR Xt, [Xn|SP, (Wm|Xm){, extend, {amount}}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_64_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDR(Arm64RegisterX Xt, Arm64RegisterXExtendMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDR(Xt, src));
    /// <summary>
    /// Load register (register).
    /// </summary>
    /// <remarks><code>LDR Xt, [Xn|SP, (Wm|Xm){, extend, {amount}}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDR_64_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDR(Arm64RegisterX Xt, Arm64RegisterWExtendMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDR(Xt, src));
    /// <summary>
    /// Load register byte (register).
    /// </summary>
    /// <remarks><code>LDRB Wt, [Xn|SP, (Wm|Xm), extend{, amount}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRB_32b_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRB(Arm64RegisterW Wt, Arm64RegisterXExtendMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDRB(Wt, src));
    /// <summary>
    /// Load register byte (register).
    /// </summary>
    /// <remarks><code>LDRB Wt, [Xn|SP, (Wm|Xm), extend{, amount}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRB_32b_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRB(Arm64RegisterW Wt, Arm64RegisterWExtendMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDRB(Wt, src));
    /// <summary>
    /// Load register byte (immediate).
    /// </summary>
    /// <remarks><code>LDRB Wt, [Xn|SP], #simm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRB_32_ldst_immpost), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRB(Arm64RegisterW Wt, Arm64BaseMemoryAccessor src, short simm)
         => AddInstruction(Arm64InstructionFactory.LDRB(Wt, src, simm));
    /// <summary>
    /// Load register byte (immediate).
    /// </summary>
    /// <remarks><code>LDRB Wt, [Xn|SP, #simm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRB_32_ldst_immpre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRB(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor.PreIncrement src)
         => AddInstruction(Arm64InstructionFactory.LDRB(Wt, src));
    /// <summary>
    /// Load register byte (immediate).
    /// </summary>
    /// <remarks><code>LDRB Wt, [Xn|SP{, #pimm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRB_32_ldst_pos), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRB(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDRB(Wt, src));
    /// <summary>
    /// Load register halfword (immediate).
    /// </summary>
    /// <remarks><code>LDRH Wt, [Xn|SP], #simm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRH_32_ldst_immpost), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRH(Arm64RegisterW Wt, Arm64BaseMemoryAccessor src, short simm)
         => AddInstruction(Arm64InstructionFactory.LDRH(Wt, src, simm));
    /// <summary>
    /// Load register halfword (immediate).
    /// </summary>
    /// <remarks><code>LDRH Wt, [Xn|SP, #simm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRH_32_ldst_immpre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRH(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor.PreIncrement src)
         => AddInstruction(Arm64InstructionFactory.LDRH(Wt, src));
    /// <summary>
    /// Load register halfword (immediate).
    /// </summary>
    /// <remarks><code>LDRH Wt, [Xn|SP{, #pimm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRH_32_ldst_pos), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRH(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDRH(Wt, src));
    /// <summary>
    /// Load register halfword (register).
    /// </summary>
    /// <remarks><code>LDRH Wt, [Xn|SP, (Wm|Xm){, extend, {amount}}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRH_32_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRH(Arm64RegisterW Wt, Arm64RegisterXExtendMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDRH(Wt, src));
    /// <summary>
    /// Load register halfword (register).
    /// </summary>
    /// <remarks><code>LDRH Wt, [Xn|SP, (Wm|Xm){, extend, {amount}}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRH_32_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRH(Arm64RegisterW Wt, Arm64RegisterWExtendMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDRH(Wt, src));
    /// <summary>
    /// Load register signed byte (register).
    /// </summary>
    /// <remarks><code>LDRSB Wt, [Xn|SP, (Wm|Xm), extend{, amount}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSB_32b_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSB(Arm64RegisterW Wt, Arm64RegisterXExtendMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDRSB(Wt, src));
    /// <summary>
    /// Load register signed byte (register).
    /// </summary>
    /// <remarks><code>LDRSB Wt, [Xn|SP, (Wm|Xm), extend{, amount}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSB_32b_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSB(Arm64RegisterW Wt, Arm64RegisterWExtendMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDRSB(Wt, src));
    /// <summary>
    /// Load register signed byte (register).
    /// </summary>
    /// <remarks><code>LDRSB Xt, [Xn|SP, (Wm|Xm), extend{, amount}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSB_64b_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSB(Arm64RegisterX Xt, Arm64RegisterXExtendMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDRSB(Xt, src));
    /// <summary>
    /// Load register signed byte (register).
    /// </summary>
    /// <remarks><code>LDRSB Xt, [Xn|SP, (Wm|Xm), extend{, amount}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSB_64b_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSB(Arm64RegisterX Xt, Arm64RegisterWExtendMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDRSB(Xt, src));
    /// <summary>
    /// Load register signed byte (immediate).
    /// </summary>
    /// <remarks><code>LDRSB Wt, [Xn|SP], #simm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSB_32_ldst_immpost), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSB(Arm64RegisterW Wt, Arm64BaseMemoryAccessor src, short simm)
         => AddInstruction(Arm64InstructionFactory.LDRSB(Wt, src, simm));
    /// <summary>
    /// Load register signed byte (immediate).
    /// </summary>
    /// <remarks><code>LDRSB Xt, [Xn|SP], #simm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSB_64_ldst_immpost), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSB(Arm64RegisterX Xt, Arm64BaseMemoryAccessor src, short simm)
         => AddInstruction(Arm64InstructionFactory.LDRSB(Xt, src, simm));
    /// <summary>
    /// Load register signed byte (immediate).
    /// </summary>
    /// <remarks><code>LDRSB Wt, [Xn|SP, #simm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSB_32_ldst_immpre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSB(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor.PreIncrement src)
         => AddInstruction(Arm64InstructionFactory.LDRSB(Wt, src));
    /// <summary>
    /// Load register signed byte (immediate).
    /// </summary>
    /// <remarks><code>LDRSB Xt, [Xn|SP, #simm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSB_64_ldst_immpre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSB(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor.PreIncrement src)
         => AddInstruction(Arm64InstructionFactory.LDRSB(Xt, src));
    /// <summary>
    /// Load register signed byte (immediate).
    /// </summary>
    /// <remarks><code>LDRSB Wt, [Xn|SP{, #pimm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSB_32_ldst_pos), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSB(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDRSB(Wt, src));
    /// <summary>
    /// Load register signed byte (immediate).
    /// </summary>
    /// <remarks><code>LDRSB Xt, [Xn|SP{, #pimm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSB_64_ldst_pos), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSB(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDRSB(Xt, src));
    /// <summary>
    /// Load register signed halfword (immediate).
    /// </summary>
    /// <remarks><code>LDRSH Wt, [Xn|SP], #simm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSH_32_ldst_immpost), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSH(Arm64RegisterW Wt, Arm64BaseMemoryAccessor src, short simm)
         => AddInstruction(Arm64InstructionFactory.LDRSH(Wt, src, simm));
    /// <summary>
    /// Load register signed halfword (immediate).
    /// </summary>
    /// <remarks><code>LDRSH Xt, [Xn|SP], #simm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSH_64_ldst_immpost), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSH(Arm64RegisterX Xt, Arm64BaseMemoryAccessor src, short simm)
         => AddInstruction(Arm64InstructionFactory.LDRSH(Xt, src, simm));
    /// <summary>
    /// Load register signed halfword (immediate).
    /// </summary>
    /// <remarks><code>LDRSH Wt, [Xn|SP, #simm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSH_32_ldst_immpre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSH(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor.PreIncrement src)
         => AddInstruction(Arm64InstructionFactory.LDRSH(Wt, src));
    /// <summary>
    /// Load register signed halfword (immediate).
    /// </summary>
    /// <remarks><code>LDRSH Xt, [Xn|SP, #simm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSH_64_ldst_immpre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSH(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor.PreIncrement src)
         => AddInstruction(Arm64InstructionFactory.LDRSH(Xt, src));
    /// <summary>
    /// Load register signed halfword (immediate).
    /// </summary>
    /// <remarks><code>LDRSH Wt, [Xn|SP{, #pimm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSH_32_ldst_pos), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSH(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDRSH(Wt, src));
    /// <summary>
    /// Load register signed halfword (immediate).
    /// </summary>
    /// <remarks><code>LDRSH Xt, [Xn|SP{, #pimm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSH_64_ldst_pos), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSH(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDRSH(Xt, src));
    /// <summary>
    /// Load register signed halfword (register).
    /// </summary>
    /// <remarks><code>LDRSH Wt, [Xn|SP, (Wm|Xm){, extend, {amount}}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSH_32_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSH(Arm64RegisterW Wt, Arm64RegisterXExtendMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDRSH(Wt, src));
    /// <summary>
    /// Load register signed halfword (register).
    /// </summary>
    /// <remarks><code>LDRSH Wt, [Xn|SP, (Wm|Xm){, extend, {amount}}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSH_32_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSH(Arm64RegisterW Wt, Arm64RegisterWExtendMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDRSH(Wt, src));
    /// <summary>
    /// Load register signed halfword (register).
    /// </summary>
    /// <remarks><code>LDRSH Xt, [Xn|SP, (Wm|Xm){, extend, {amount}}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSH_64_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSH(Arm64RegisterX Xt, Arm64RegisterXExtendMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDRSH(Xt, src));
    /// <summary>
    /// Load register signed halfword (register).
    /// </summary>
    /// <remarks><code>LDRSH Xt, [Xn|SP, (Wm|Xm){, extend, {amount}}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSH_64_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSH(Arm64RegisterX Xt, Arm64RegisterWExtendMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDRSH(Xt, src));
    /// <summary>
    /// Load register signed word (immediate).
    /// </summary>
    /// <remarks><code>LDRSW Xt, [Xn|SP], #simm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSW_64_ldst_immpost), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSW(Arm64RegisterX Xt, Arm64BaseMemoryAccessor src, short simm)
         => AddInstruction(Arm64InstructionFactory.LDRSW(Xt, src, simm));
    /// <summary>
    /// Load register signed word (immediate).
    /// </summary>
    /// <remarks><code>LDRSW Xt, [Xn|SP, #simm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSW_64_ldst_immpre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSW(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor.PreIncrement src)
         => AddInstruction(Arm64InstructionFactory.LDRSW(Xt, src));
    /// <summary>
    /// Load register signed word (immediate).
    /// </summary>
    /// <remarks><code>LDRSW Xt, [Xn|SP{, #pimm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSW_64_ldst_pos), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSW(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDRSW(Xt, src));
    /// <summary>
    /// Load register signed word (literal).
    /// </summary>
    /// <remarks><code>LDRSW Xt, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSW_64_loadlit), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSW(Arm64RegisterX Xt, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.LDRSW(Xt, RecordLabelOffset(label, 11920)));
    /// <summary>
    /// Load register signed word (register).
    /// </summary>
    /// <remarks><code>LDRSW Xt, [Xn|SP, (Wm|Xm){, extend, {amount}}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSW_64_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSW(Arm64RegisterX Xt, Arm64RegisterXExtendMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDRSW(Xt, src));
    /// <summary>
    /// Load register signed word (register).
    /// </summary>
    /// <remarks><code>LDRSW Xt, [Xn|SP, (Wm|Xm){, extend, {amount}}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRSW_64_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDRSW(Arm64RegisterX Xt, Arm64RegisterWExtendMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDRSW(Xt, src));
    /// <summary>
    /// Atomic bit set on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDSET Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSET_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSET(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSET(Ws, Wt, src));
    /// <summary>
    /// Atomic bit set on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDSET Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSET_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSET(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSET(Xs, Xt, src));
    /// <summary>
    /// Atomic bit set on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDSETA Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSETA_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSETA(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSETA(Ws, Wt, src));
    /// <summary>
    /// Atomic bit set on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDSETA Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSETA_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSETA(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSETA(Xs, Xt, src));
    /// <summary>
    /// Atomic bit set on byte in memory.
    /// </summary>
    /// <remarks><code>LDSETAB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSETAB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSETAB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSETAB(Ws, Wt, src));
    /// <summary>
    /// Atomic bit set on halfword in memory.
    /// </summary>
    /// <remarks><code>LDSETAH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSETAH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSETAH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSETAH(Ws, Wt, src));
    /// <summary>
    /// Atomic bit set on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDSETAL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSETAL_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSETAL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSETAL(Ws, Wt, src));
    /// <summary>
    /// Atomic bit set on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDSETAL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSETAL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSETAL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSETAL(Xs, Xt, src));
    /// <summary>
    /// Atomic bit set on byte in memory.
    /// </summary>
    /// <remarks><code>LDSETALB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSETALB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSETALB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSETALB(Ws, Wt, src));
    /// <summary>
    /// Atomic bit set on halfword in memory.
    /// </summary>
    /// <remarks><code>LDSETALH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSETALH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSETALH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSETALH(Ws, Wt, src));
    /// <summary>
    /// Atomic bit set on byte in memory.
    /// </summary>
    /// <remarks><code>LDSETB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSETB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSETB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSETB(Ws, Wt, src));
    /// <summary>
    /// Atomic bit set on halfword in memory.
    /// </summary>
    /// <remarks><code>LDSETH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSETH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSETH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSETH(Ws, Wt, src));
    /// <summary>
    /// Atomic bit set on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDSETL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSETL_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSETL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSETL(Ws, Wt, src));
    /// <summary>
    /// Atomic bit set on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDSETL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSETL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSETL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSETL(Xs, Xt, src));
    /// <summary>
    /// Atomic bit set on byte in memory.
    /// </summary>
    /// <remarks><code>LDSETLB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSETLB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSETLB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSETLB(Ws, Wt, src));
    /// <summary>
    /// Atomic bit set on halfword in memory.
    /// </summary>
    /// <remarks><code>LDSETLH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSETLH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSETLH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSETLH(Ws, Wt, src));
    /// <summary>
    /// Atomic bit set on quadword in memory.
    /// </summary>
    /// <remarks><code>LDSETP Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSETP_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSETP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSETP(Xt1, Xt2, src));
    /// <summary>
    /// Atomic bit set on quadword in memory.
    /// </summary>
    /// <remarks><code>LDSETPA Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSETPA_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSETPA(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSETPA(Xt1, Xt2, src));
    /// <summary>
    /// Atomic bit set on quadword in memory.
    /// </summary>
    /// <remarks><code>LDSETPAL Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSETPAL_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSETPAL(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSETPAL(Xt1, Xt2, src));
    /// <summary>
    /// Atomic bit set on quadword in memory.
    /// </summary>
    /// <remarks><code>LDSETPL Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSETPL_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSETPL(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSETPL(Xt1, Xt2, src));
    /// <summary>
    /// Atomic signed maximum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDSMAX Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMAX_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMAX(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMAX(Ws, Wt, src));
    /// <summary>
    /// Atomic signed maximum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDSMAX Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMAX_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMAX(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMAX(Xs, Xt, src));
    /// <summary>
    /// Atomic signed maximum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDSMAXA Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMAXA_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMAXA(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMAXA(Ws, Wt, src));
    /// <summary>
    /// Atomic signed maximum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDSMAXA Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMAXA_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMAXA(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMAXA(Xs, Xt, src));
    /// <summary>
    /// Atomic signed maximum on byte in memory.
    /// </summary>
    /// <remarks><code>LDSMAXAB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMAXAB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMAXAB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMAXAB(Ws, Wt, src));
    /// <summary>
    /// Atomic signed maximum on halfword in memory.
    /// </summary>
    /// <remarks><code>LDSMAXAH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMAXAH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMAXAH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMAXAH(Ws, Wt, src));
    /// <summary>
    /// Atomic signed maximum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDSMAXAL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMAXAL_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMAXAL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMAXAL(Ws, Wt, src));
    /// <summary>
    /// Atomic signed maximum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDSMAXAL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMAXAL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMAXAL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMAXAL(Xs, Xt, src));
    /// <summary>
    /// Atomic signed maximum on byte in memory.
    /// </summary>
    /// <remarks><code>LDSMAXALB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMAXALB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMAXALB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMAXALB(Ws, Wt, src));
    /// <summary>
    /// Atomic signed maximum on halfword in memory.
    /// </summary>
    /// <remarks><code>LDSMAXALH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMAXALH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMAXALH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMAXALH(Ws, Wt, src));
    /// <summary>
    /// Atomic signed maximum on byte in memory.
    /// </summary>
    /// <remarks><code>LDSMAXB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMAXB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMAXB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMAXB(Ws, Wt, src));
    /// <summary>
    /// Atomic signed maximum on halfword in memory.
    /// </summary>
    /// <remarks><code>LDSMAXH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMAXH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMAXH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMAXH(Ws, Wt, src));
    /// <summary>
    /// Atomic signed maximum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDSMAXL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMAXL_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMAXL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMAXL(Ws, Wt, src));
    /// <summary>
    /// Atomic signed maximum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDSMAXL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMAXL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMAXL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMAXL(Xs, Xt, src));
    /// <summary>
    /// Atomic signed maximum on byte in memory.
    /// </summary>
    /// <remarks><code>LDSMAXLB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMAXLB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMAXLB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMAXLB(Ws, Wt, src));
    /// <summary>
    /// Atomic signed maximum on halfword in memory.
    /// </summary>
    /// <remarks><code>LDSMAXLH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMAXLH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMAXLH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMAXLH(Ws, Wt, src));
    /// <summary>
    /// Atomic signed minimum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDSMIN Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMIN_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMIN(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMIN(Ws, Wt, src));
    /// <summary>
    /// Atomic signed minimum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDSMIN Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMIN_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMIN(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMIN(Xs, Xt, src));
    /// <summary>
    /// Atomic signed minimum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDSMINA Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMINA_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMINA(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMINA(Ws, Wt, src));
    /// <summary>
    /// Atomic signed minimum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDSMINA Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMINA_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMINA(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMINA(Xs, Xt, src));
    /// <summary>
    /// Atomic signed minimum on byte in memory.
    /// </summary>
    /// <remarks><code>LDSMINAB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMINAB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMINAB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMINAB(Ws, Wt, src));
    /// <summary>
    /// Atomic signed minimum on halfword in memory.
    /// </summary>
    /// <remarks><code>LDSMINAH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMINAH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMINAH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMINAH(Ws, Wt, src));
    /// <summary>
    /// Atomic signed minimum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDSMINAL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMINAL_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMINAL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMINAL(Ws, Wt, src));
    /// <summary>
    /// Atomic signed minimum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDSMINAL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMINAL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMINAL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMINAL(Xs, Xt, src));
    /// <summary>
    /// Atomic signed minimum on byte in memory.
    /// </summary>
    /// <remarks><code>LDSMINALB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMINALB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMINALB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMINALB(Ws, Wt, src));
    /// <summary>
    /// Atomic signed minimum on halfword in memory.
    /// </summary>
    /// <remarks><code>LDSMINALH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMINALH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMINALH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMINALH(Ws, Wt, src));
    /// <summary>
    /// Atomic signed minimum on byte in memory.
    /// </summary>
    /// <remarks><code>LDSMINB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMINB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMINB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMINB(Ws, Wt, src));
    /// <summary>
    /// Atomic signed minimum on halfword in memory.
    /// </summary>
    /// <remarks><code>LDSMINH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMINH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMINH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMINH(Ws, Wt, src));
    /// <summary>
    /// Atomic signed minimum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDSMINL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMINL_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMINL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMINL(Ws, Wt, src));
    /// <summary>
    /// Atomic signed minimum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDSMINL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMINL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMINL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMINL(Xs, Xt, src));
    /// <summary>
    /// Atomic signed minimum on byte in memory.
    /// </summary>
    /// <remarks><code>LDSMINLB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMINLB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMINLB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMINLB(Ws, Wt, src));
    /// <summary>
    /// Atomic signed minimum on halfword in memory.
    /// </summary>
    /// <remarks><code>LDSMINLH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDSMINLH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDSMINLH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDSMINLH(Ws, Wt, src));
    /// <summary>
    /// Atomic add unprivileged.
    /// </summary>
    /// <remarks><code>LDTADD Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTADD_32_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTADD(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTADD(Ws, Wt, src));
    /// <summary>
    /// Atomic add unprivileged.
    /// </summary>
    /// <remarks><code>LDTADD Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTADD_64_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTADD(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTADD(Xs, Xt, src));
    /// <summary>
    /// Atomic add unprivileged.
    /// </summary>
    /// <remarks><code>LDTADDA Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTADDA_32_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTADDA(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTADDA(Ws, Wt, src));
    /// <summary>
    /// Atomic add unprivileged.
    /// </summary>
    /// <remarks><code>LDTADDA Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTADDA_64_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTADDA(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTADDA(Xs, Xt, src));
    /// <summary>
    /// Atomic add unprivileged.
    /// </summary>
    /// <remarks><code>LDTADDAL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTADDAL_32_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTADDAL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTADDAL(Ws, Wt, src));
    /// <summary>
    /// Atomic add unprivileged.
    /// </summary>
    /// <remarks><code>LDTADDAL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTADDAL_64_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTADDAL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTADDAL(Xs, Xt, src));
    /// <summary>
    /// Atomic add unprivileged.
    /// </summary>
    /// <remarks><code>LDTADDL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTADDL_32_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTADDL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTADDL(Ws, Wt, src));
    /// <summary>
    /// Atomic add unprivileged.
    /// </summary>
    /// <remarks><code>LDTADDL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTADDL_64_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTADDL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTADDL(Xs, Xt, src));
    /// <summary>
    /// Atomic bit clear unprivileged.
    /// </summary>
    /// <remarks><code>LDTCLR Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTCLR_32_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTCLR(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTCLR(Ws, Wt, src));
    /// <summary>
    /// Atomic bit clear unprivileged.
    /// </summary>
    /// <remarks><code>LDTCLR Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTCLR_64_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTCLR(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTCLR(Xs, Xt, src));
    /// <summary>
    /// Atomic bit clear unprivileged.
    /// </summary>
    /// <remarks><code>LDTCLRA Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTCLRA_32_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTCLRA(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTCLRA(Ws, Wt, src));
    /// <summary>
    /// Atomic bit clear unprivileged.
    /// </summary>
    /// <remarks><code>LDTCLRA Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTCLRA_64_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTCLRA(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTCLRA(Xs, Xt, src));
    /// <summary>
    /// Atomic bit clear unprivileged.
    /// </summary>
    /// <remarks><code>LDTCLRAL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTCLRAL_32_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTCLRAL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTCLRAL(Ws, Wt, src));
    /// <summary>
    /// Atomic bit clear unprivileged.
    /// </summary>
    /// <remarks><code>LDTCLRAL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTCLRAL_64_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTCLRAL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTCLRAL(Xs, Xt, src));
    /// <summary>
    /// Atomic bit clear unprivileged.
    /// </summary>
    /// <remarks><code>LDTCLRL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTCLRL_32_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTCLRL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTCLRL(Ws, Wt, src));
    /// <summary>
    /// Atomic bit clear unprivileged.
    /// </summary>
    /// <remarks><code>LDTCLRL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTCLRL_64_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTCLRL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTCLRL(Xs, Xt, src));
    /// <summary>
    /// Load unprivileged pair of registers, with non-temporal hint.
    /// </summary>
    /// <remarks><code>LDTNP Xt1, Xt2, [Xn|SP{, #imm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTNP_64_ldstnapair_offs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTNP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTNP(Xt1, Xt2, src));
    /// <summary>
    /// Load unprivileged pair of registers.
    /// </summary>
    /// <remarks><code>LDTP Xt1, Xt2, [Xn|SP], #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTP_64_ldstpair_post), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor src, int imm)
         => AddInstruction(Arm64InstructionFactory.LDTP(Xt1, Xt2, src, imm));
    /// <summary>
    /// Load unprivileged pair of registers.
    /// </summary>
    /// <remarks><code>LDTP Xt1, Xt2, [Xn|SP, #imm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTP_64_ldstpair_pre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64ImmediateMemoryAccessor.PreIncrement src)
         => AddInstruction(Arm64InstructionFactory.LDTP(Xt1, Xt2, src));
    /// <summary>
    /// Load unprivileged pair of registers.
    /// </summary>
    /// <remarks><code>LDTP Xt1, Xt2, [Xn|SP{, #imm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTP_64_ldstpair_off), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTP(Xt1, Xt2, src));
    /// <summary>
    /// Load register (unprivileged).
    /// </summary>
    /// <remarks><code>LDTR Wt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTR_32_ldst_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTR(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTR(Wt, src));
    /// <summary>
    /// Load register (unprivileged).
    /// </summary>
    /// <remarks><code>LDTR Xt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTR_64_ldst_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTR(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTR(Xt, src));
    /// <summary>
    /// Load register byte (unprivileged).
    /// </summary>
    /// <remarks><code>LDTRB Wt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTRB_32_ldst_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTRB(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTRB(Wt, src));
    /// <summary>
    /// Load register halfword (unprivileged).
    /// </summary>
    /// <remarks><code>LDTRH Wt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTRH_32_ldst_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTRH(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTRH(Wt, src));
    /// <summary>
    /// Load register signed byte (unprivileged).
    /// </summary>
    /// <remarks><code>LDTRSB Wt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTRSB_32_ldst_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTRSB(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTRSB(Wt, src));
    /// <summary>
    /// Load register signed byte (unprivileged).
    /// </summary>
    /// <remarks><code>LDTRSB Xt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTRSB_64_ldst_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTRSB(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTRSB(Xt, src));
    /// <summary>
    /// Load register signed halfword (unprivileged).
    /// </summary>
    /// <remarks><code>LDTRSH Wt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTRSH_32_ldst_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTRSH(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTRSH(Wt, src));
    /// <summary>
    /// Load register signed halfword (unprivileged).
    /// </summary>
    /// <remarks><code>LDTRSH Xt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTRSH_64_ldst_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTRSH(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTRSH(Xt, src));
    /// <summary>
    /// Load register signed word (unprivileged).
    /// </summary>
    /// <remarks><code>LDTRSW Xt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTRSW_64_ldst_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTRSW(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTRSW(Xt, src));
    /// <summary>
    /// Atomic bit set unprivileged.
    /// </summary>
    /// <remarks><code>LDTSET Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTSET_32_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTSET(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTSET(Ws, Wt, src));
    /// <summary>
    /// Atomic bit set unprivileged.
    /// </summary>
    /// <remarks><code>LDTSET Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTSET_64_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTSET(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTSET(Xs, Xt, src));
    /// <summary>
    /// Atomic bit set unprivileged.
    /// </summary>
    /// <remarks><code>LDTSETA Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTSETA_32_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTSETA(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTSETA(Ws, Wt, src));
    /// <summary>
    /// Atomic bit set unprivileged.
    /// </summary>
    /// <remarks><code>LDTSETA Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTSETA_64_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTSETA(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTSETA(Xs, Xt, src));
    /// <summary>
    /// Atomic bit set unprivileged.
    /// </summary>
    /// <remarks><code>LDTSETAL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTSETAL_32_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTSETAL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTSETAL(Ws, Wt, src));
    /// <summary>
    /// Atomic bit set unprivileged.
    /// </summary>
    /// <remarks><code>LDTSETAL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTSETAL_64_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTSETAL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTSETAL(Xs, Xt, src));
    /// <summary>
    /// Atomic bit set unprivileged.
    /// </summary>
    /// <remarks><code>LDTSETL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTSETL_32_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTSETL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTSETL(Ws, Wt, src));
    /// <summary>
    /// Atomic bit set unprivileged.
    /// </summary>
    /// <remarks><code>LDTSETL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTSETL_64_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTSETL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTSETL(Xs, Xt, src));
    /// <summary>
    /// Load unprivileged exclusive register.
    /// </summary>
    /// <remarks><code>LDTXR Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTXR_lr32_ldstexclr_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTXR(Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTXR(Wt, src));
    /// <summary>
    /// Load unprivileged exclusive register.
    /// </summary>
    /// <remarks><code>LDTXR Xt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDTXR_lr64_ldstexclr_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDTXR(Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDTXR(Xt, src));
    /// <summary>
    /// Atomic unsigned maximum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDUMAX Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMAX_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMAX(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMAX(Ws, Wt, src));
    /// <summary>
    /// Atomic unsigned maximum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDUMAX Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMAX_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMAX(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMAX(Xs, Xt, src));
    /// <summary>
    /// Atomic unsigned maximum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDUMAXA Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMAXA_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMAXA(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMAXA(Ws, Wt, src));
    /// <summary>
    /// Atomic unsigned maximum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDUMAXA Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMAXA_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMAXA(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMAXA(Xs, Xt, src));
    /// <summary>
    /// Atomic unsigned maximum on byte in memory.
    /// </summary>
    /// <remarks><code>LDUMAXAB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMAXAB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMAXAB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMAXAB(Ws, Wt, src));
    /// <summary>
    /// Atomic unsigned maximum on halfword in memory.
    /// </summary>
    /// <remarks><code>LDUMAXAH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMAXAH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMAXAH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMAXAH(Ws, Wt, src));
    /// <summary>
    /// Atomic unsigned maximum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDUMAXAL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMAXAL_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMAXAL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMAXAL(Ws, Wt, src));
    /// <summary>
    /// Atomic unsigned maximum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDUMAXAL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMAXAL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMAXAL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMAXAL(Xs, Xt, src));
    /// <summary>
    /// Atomic unsigned maximum on byte in memory.
    /// </summary>
    /// <remarks><code>LDUMAXALB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMAXALB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMAXALB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMAXALB(Ws, Wt, src));
    /// <summary>
    /// Atomic unsigned maximum on halfword in memory.
    /// </summary>
    /// <remarks><code>LDUMAXALH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMAXALH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMAXALH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMAXALH(Ws, Wt, src));
    /// <summary>
    /// Atomic unsigned maximum on byte in memory.
    /// </summary>
    /// <remarks><code>LDUMAXB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMAXB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMAXB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMAXB(Ws, Wt, src));
    /// <summary>
    /// Atomic unsigned maximum on halfword in memory.
    /// </summary>
    /// <remarks><code>LDUMAXH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMAXH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMAXH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMAXH(Ws, Wt, src));
    /// <summary>
    /// Atomic unsigned maximum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDUMAXL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMAXL_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMAXL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMAXL(Ws, Wt, src));
    /// <summary>
    /// Atomic unsigned maximum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDUMAXL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMAXL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMAXL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMAXL(Xs, Xt, src));
    /// <summary>
    /// Atomic unsigned maximum on byte in memory.
    /// </summary>
    /// <remarks><code>LDUMAXLB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMAXLB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMAXLB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMAXLB(Ws, Wt, src));
    /// <summary>
    /// Atomic unsigned maximum on halfword in memory.
    /// </summary>
    /// <remarks><code>LDUMAXLH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMAXLH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMAXLH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMAXLH(Ws, Wt, src));
    /// <summary>
    /// Atomic unsigned minimum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDUMIN Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMIN_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMIN(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMIN(Ws, Wt, src));
    /// <summary>
    /// Atomic unsigned minimum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDUMIN Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMIN_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMIN(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMIN(Xs, Xt, src));
    /// <summary>
    /// Atomic unsigned minimum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDUMINA Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMINA_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMINA(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMINA(Ws, Wt, src));
    /// <summary>
    /// Atomic unsigned minimum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDUMINA Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMINA_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMINA(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMINA(Xs, Xt, src));
    /// <summary>
    /// Atomic unsigned minimum on byte in memory.
    /// </summary>
    /// <remarks><code>LDUMINAB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMINAB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMINAB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMINAB(Ws, Wt, src));
    /// <summary>
    /// Atomic unsigned minimum on halfword in memory.
    /// </summary>
    /// <remarks><code>LDUMINAH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMINAH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMINAH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMINAH(Ws, Wt, src));
    /// <summary>
    /// Atomic unsigned minimum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDUMINAL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMINAL_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMINAL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMINAL(Ws, Wt, src));
    /// <summary>
    /// Atomic unsigned minimum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDUMINAL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMINAL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMINAL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMINAL(Xs, Xt, src));
    /// <summary>
    /// Atomic unsigned minimum on byte in memory.
    /// </summary>
    /// <remarks><code>LDUMINALB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMINALB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMINALB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMINALB(Ws, Wt, src));
    /// <summary>
    /// Atomic unsigned minimum on halfword in memory.
    /// </summary>
    /// <remarks><code>LDUMINALH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMINALH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMINALH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMINALH(Ws, Wt, src));
    /// <summary>
    /// Atomic unsigned minimum on byte in memory.
    /// </summary>
    /// <remarks><code>LDUMINB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMINB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMINB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMINB(Ws, Wt, src));
    /// <summary>
    /// Atomic unsigned minimum on halfword in memory.
    /// </summary>
    /// <remarks><code>LDUMINH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMINH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMINH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMINH(Ws, Wt, src));
    /// <summary>
    /// Atomic unsigned minimum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDUMINL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMINL_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMINL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMINL(Ws, Wt, src));
    /// <summary>
    /// Atomic unsigned minimum on word or doubleword in memory.
    /// </summary>
    /// <remarks><code>LDUMINL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMINL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMINL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMINL(Xs, Xt, src));
    /// <summary>
    /// Atomic unsigned minimum on byte in memory.
    /// </summary>
    /// <remarks><code>LDUMINLB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMINLB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMINLB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMINLB(Ws, Wt, src));
    /// <summary>
    /// Atomic unsigned minimum on halfword in memory.
    /// </summary>
    /// <remarks><code>LDUMINLH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUMINLH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUMINLH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUMINLH(Ws, Wt, src));
    /// <summary>
    /// Load register (unscaled).
    /// </summary>
    /// <remarks><code>LDUR Wt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUR_32_ldst_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUR(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUR(Wt, src));
    /// <summary>
    /// Load register (unscaled).
    /// </summary>
    /// <remarks><code>LDUR Xt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDUR_64_ldst_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDUR(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDUR(Xt, src));
    /// <summary>
    /// Load register byte (unscaled).
    /// </summary>
    /// <remarks><code>LDURB Wt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDURB_32_ldst_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDURB(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDURB(Wt, src));
    /// <summary>
    /// Load register halfword (unscaled).
    /// </summary>
    /// <remarks><code>LDURH Wt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDURH_32_ldst_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDURH(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDURH(Wt, src));
    /// <summary>
    /// Load register signed byte (unscaled).
    /// </summary>
    /// <remarks><code>LDURSB Wt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDURSB_32_ldst_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDURSB(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDURSB(Wt, src));
    /// <summary>
    /// Load register signed byte (unscaled).
    /// </summary>
    /// <remarks><code>LDURSB Xt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDURSB_64_ldst_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDURSB(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDURSB(Xt, src));
    /// <summary>
    /// Load register signed halfword (unscaled).
    /// </summary>
    /// <remarks><code>LDURSH Wt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDURSH_32_ldst_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDURSH(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDURSH(Wt, src));
    /// <summary>
    /// Load register signed halfword (unscaled).
    /// </summary>
    /// <remarks><code>LDURSH Xt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDURSH_64_ldst_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDURSH(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDURSH(Xt, src));
    /// <summary>
    /// Load register signed word (unscaled).
    /// </summary>
    /// <remarks><code>LDURSW Xt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDURSW_64_ldst_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDURSW(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDURSW(Xt, src));
    /// <summary>
    /// Load exclusive pair of registers.
    /// </summary>
    /// <remarks><code>LDXP Wt1, Wt2, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDXP_lp32_ldstexclp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDXP(Arm64RegisterW Wt1, Arm64RegisterW Wt2, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDXP(Wt1, Wt2, src));
    /// <summary>
    /// Load exclusive pair of registers.
    /// </summary>
    /// <remarks><code>LDXP Xt1, Xt2, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDXP_lp64_ldstexclp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDXP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDXP(Xt1, Xt2, src));
    /// <summary>
    /// Load exclusive register.
    /// </summary>
    /// <remarks><code>LDXR Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDXR_lr32_ldstexclr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDXR(Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDXR(Wt, src));
    /// <summary>
    /// Load exclusive register.
    /// </summary>
    /// <remarks><code>LDXR Xt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDXR_lr64_ldstexclr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDXR(Arm64RegisterX Xt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDXR(Xt, src));
    /// <summary>
    /// Load exclusive register byte.
    /// </summary>
    /// <remarks><code>LDXRB Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDXRB_lr32_ldstexclr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDXRB(Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDXRB(Wt, src));
    /// <summary>
    /// Load exclusive register halfword.
    /// </summary>
    /// <remarks><code>LDXRH Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDXRH_lr32_ldstexclr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDXRH(Arm64RegisterW Wt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDXRH(Wt, src));
    /// <summary>
    /// Logical shift left (immediate).
    /// </summary>
    /// <remarks><code>LSL Wd, Wn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LSL_ubfm_32m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LSL(Arm64RegisterW Wd, Arm64RegisterW Wn, uint shift)
         => AddInstruction(Arm64InstructionFactory.LSL(Wd, Wn, shift));
    /// <summary>
    /// Logical shift left (immediate).
    /// </summary>
    /// <remarks><code>LSL Xd, Xn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LSL_ubfm_64m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LSL(Arm64RegisterX Xd, Arm64RegisterX Xn, uint shift)
         => AddInstruction(Arm64InstructionFactory.LSL(Xd, Xn, shift));
    /// <summary>
    /// Logical shift left (register).
    /// </summary>
    /// <remarks><code>LSL Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LSL_lslv_32_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LSL(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.LSL(Wd, Wn, Wm));
    /// <summary>
    /// Logical shift left (register).
    /// </summary>
    /// <remarks><code>LSL Xd, Xn, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LSL_lslv_64_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LSL(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LSL(Xd, Xn, Xm));
    /// <summary>
    /// Logical shift left variable.
    /// </summary>
    /// <remarks><code>LSLV Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LSLV_32_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LSLV(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.LSLV(Wd, Wn, Wm));
    /// <summary>
    /// Logical shift left variable.
    /// </summary>
    /// <remarks><code>LSLV Xd, Xn, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LSLV_64_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LSLV(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LSLV(Xd, Xn, Xm));
    /// <summary>
    /// Logical shift right (immediate).
    /// </summary>
    /// <remarks><code>LSR Wd, Wn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LSR_ubfm_32m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LSR(Arm64RegisterW Wd, Arm64RegisterW Wn, byte shift)
         => AddInstruction(Arm64InstructionFactory.LSR(Wd, Wn, shift));
    /// <summary>
    /// Logical shift right (immediate).
    /// </summary>
    /// <remarks><code>LSR Xd, Xn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LSR_ubfm_64m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LSR(Arm64RegisterX Xd, Arm64RegisterX Xn, byte shift)
         => AddInstruction(Arm64InstructionFactory.LSR(Xd, Xn, shift));
    /// <summary>
    /// Logical shift right (register).
    /// </summary>
    /// <remarks><code>LSR Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LSR_lsrv_32_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LSR(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.LSR(Wd, Wn, Wm));
    /// <summary>
    /// Logical shift right (register).
    /// </summary>
    /// <remarks><code>LSR Xd, Xn, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LSR_lsrv_64_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LSR(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LSR(Xd, Xn, Xm));
    /// <summary>
    /// Logical shift right variable.
    /// </summary>
    /// <remarks><code>LSRV Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LSRV_32_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LSRV(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.LSRV(Wd, Wn, Wm));
    /// <summary>
    /// Logical shift right variable.
    /// </summary>
    /// <remarks><code>LSRV Xd, Xn, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LSRV_64_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LSRV(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LSRV(Xd, Xn, Xm));
    /// <summary>
    /// Multiply-add.
    /// </summary>
    /// <remarks><code>MADD Wd, Wn, Wm, Wa</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MADD_32a_dp_3src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MADD(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64RegisterW Wa)
         => AddInstruction(Arm64InstructionFactory.MADD(Wd, Wn, Wm, Wa));
    /// <summary>
    /// Multiply-add.
    /// </summary>
    /// <remarks><code>MADD Xd, Xn, Xm, Xa</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MADD_64a_dp_3src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MADD(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm, Arm64RegisterX Xa)
         => AddInstruction(Arm64InstructionFactory.MADD(Xd, Xn, Xm, Xa));
    /// <summary>
    /// Multiply-add checked pointer.
    /// </summary>
    /// <remarks><code>MADDPT Xd, Xn, Xm, Xa</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MADDPT_64a_dp_3src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MADDPT(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm, Arm64RegisterX Xa)
         => AddInstruction(Arm64InstructionFactory.MADDPT(Xd, Xn, Xm, Xa));
    /// <summary>
    /// Multiply-negate.
    /// </summary>
    /// <remarks><code>MNEG Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MNEG_msub_32a_dp_3src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MNEG(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.MNEG(Wd, Wn, Wm));
    /// <summary>
    /// Multiply-negate.
    /// </summary>
    /// <remarks><code>MNEG Xd, Xn, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MNEG_msub_64a_dp_3src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MNEG(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.MNEG(Xd, Xn, Xm));
    /// <summary>
    /// Move bitmask immediate value.
    /// </summary>
    /// <remarks><code>MOV Wd|WSP, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_orr_32_log_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV(Arm64RegisterWOrWSP Wd_WSP, Arm64LogicalImmediate32 imm)
         => AddInstruction(Arm64InstructionFactory.MOV(Wd_WSP, imm));
    /// <summary>
    /// Move bitmask immediate value.
    /// </summary>
    /// <remarks><code>MOV Xd|SP, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_orr_64_log_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV(Arm64RegisterXOrSP Xd_SP, Arm64LogicalImmediate64 imm)
         => AddInstruction(Arm64InstructionFactory.MOV(Xd_SP, imm));
    /// <summary>
    /// Move register value.
    /// </summary>
    /// <remarks><code>MOV Wd, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_orr_32_log_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV(Arm64RegisterW Wd, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.MOV(Wd, Wm));
    /// <summary>
    /// Move register value.
    /// </summary>
    /// <remarks><code>MOV Xd, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_orr_64_log_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV(Arm64RegisterX Xd, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.MOV(Xd, Xm));
    /// <summary>
    /// Move register value to or from SP.
    /// </summary>
    /// <remarks><code>MOV Wd|WSP, Wn|WSP</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_add_32_addsub_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV(Arm64RegisterWOrWSP Wd_WSP, Arm64RegisterWOrWSP Wn_WSP)
         => AddInstruction(Arm64InstructionFactory.MOV(Wd_WSP, Wn_WSP));
    /// <summary>
    /// Move register value to or from SP.
    /// </summary>
    /// <remarks><code>MOV Xd|SP, Xn|SP</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_add_64_addsub_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV(Arm64RegisterXOrSP Xd_SP, Arm64RegisterXOrSP Xn_SP)
         => AddInstruction(Arm64InstructionFactory.MOV(Xd_SP, Xn_SP));
    /// <summary>
    /// Move wide immediate value.
    /// </summary>
    /// <remarks><code>MOV Wd, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_movz_32_movewide), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV(Arm64RegisterW Wd, Arm64ShiftedImmediate32 imm)
         => AddInstruction(Arm64InstructionFactory.MOV(Wd, imm));
    /// <summary>
    /// Move wide immediate value.
    /// </summary>
    /// <remarks><code>MOV Xd, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_movz_64_movewide), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV(Arm64RegisterX Xd, Arm64ShiftedImmediate64 imm)
         => AddInstruction(Arm64InstructionFactory.MOV(Xd, imm));
    /// <summary>
    /// Move inverted wide immediate value.
    /// </summary>
    /// <remarks><code>MOV Wd, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_movn_32_movewide), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV_MOVN(Arm64RegisterW Wd, Arm64InvertedShiftedImmediate32 imm)
         => AddInstruction(Arm64InstructionFactory.MOV_MOVN(Wd, imm));
    /// <summary>
    /// Move inverted wide immediate value.
    /// </summary>
    /// <remarks><code>MOV Xd, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_movn_64_movewide), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV_MOVN(Arm64RegisterX Xd, Arm64InvertedShiftedImmediate64 imm)
         => AddInstruction(Arm64InstructionFactory.MOV_MOVN(Xd, imm));
    /// <summary>
    /// Move wide with keep.
    /// </summary>
    /// <remarks><code>MOVK Wd, #imm {, LSL #shift}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVK_32_movewide), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOVK(Arm64RegisterW Wd, ushort imm, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.MOVK(Wd, imm, LSL, amount));
    /// <summary>
    /// Move wide with keep.
    /// </summary>
    /// <remarks><code>MOVK Xd, #imm {, LSL #shift}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVK_64_movewide), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOVK(Arm64RegisterX Xd, ushort imm, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.MOVK(Xd, imm, LSL, amount));
    /// <summary>
    /// Move wide with NOT.
    /// </summary>
    /// <remarks><code>MOVN Wd, #imm {, LSL #shift}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVN_32_movewide), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOVN(Arm64RegisterW Wd, ushort imm, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.MOVN(Wd, imm, LSL, amount));
    /// <summary>
    /// Move wide with NOT.
    /// </summary>
    /// <remarks><code>MOVN Xd, #imm {, LSL #shift}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVN_64_movewide), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOVN(Arm64RegisterX Xd, ushort imm, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.MOVN(Xd, imm, LSL, amount));
    /// <summary>
    /// Move wide with zero.
    /// </summary>
    /// <remarks><code>MOVZ Wd, #imm {, LSL #shift}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVZ_32_movewide), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOVZ(Arm64RegisterW Wd, ushort imm, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.MOVZ(Wd, imm, LSL, amount));
    /// <summary>
    /// Move wide with zero.
    /// </summary>
    /// <remarks><code>MOVZ Xd, #imm {, LSL #shift}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVZ_64_movewide), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOVZ(Arm64RegisterX Xd, ushort imm, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.MOVZ(Xd, imm, LSL, amount));
    /// <summary>
    /// Multiply-subtract.
    /// </summary>
    /// <remarks><code>MSUB Wd, Wn, Wm, Wa</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MSUB_32a_dp_3src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MSUB(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64RegisterW Wa)
         => AddInstruction(Arm64InstructionFactory.MSUB(Wd, Wn, Wm, Wa));
    /// <summary>
    /// Multiply-subtract.
    /// </summary>
    /// <remarks><code>MSUB Xd, Xn, Xm, Xa</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MSUB_64a_dp_3src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MSUB(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm, Arm64RegisterX Xa)
         => AddInstruction(Arm64InstructionFactory.MSUB(Xd, Xn, Xm, Xa));
    /// <summary>
    /// Multiply-subtract checked pointer.
    /// </summary>
    /// <remarks><code>MSUBPT Xd, Xn, Xm, Xa</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MSUBPT_64a_dp_3src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MSUBPT(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm, Arm64RegisterX Xa)
         => AddInstruction(Arm64InstructionFactory.MSUBPT(Xd, Xn, Xm, Xa));
    /// <summary>
    /// Multiply.
    /// </summary>
    /// <remarks><code>MUL Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MUL_madd_32a_dp_3src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MUL(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.MUL(Wd, Wn, Wm));
    /// <summary>
    /// Multiply.
    /// </summary>
    /// <remarks><code>MUL Xd, Xn, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MUL_madd_64a_dp_3src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MUL(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.MUL(Xd, Xn, Xm));
    /// <summary>
    /// Bitwise NOT.
    /// </summary>
    /// <remarks><code>MVN Wd, Wm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MVN_orn_32_log_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MVN(Arm64RegisterW Wd, Arm64RegisterW Wm, Arm64ShiftKind4 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.MVN(Wd, Wm, shift, amount));
    /// <summary>
    /// Bitwise NOT.
    /// </summary>
    /// <remarks><code>MVN Xd, Xm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MVN_orn_64_log_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MVN(Arm64RegisterX Xd, Arm64RegisterX Xm, Arm64ShiftKind4 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.MVN(Xd, Xm, shift, amount));
    /// <summary>
    /// Negate (shifted register).
    /// </summary>
    /// <remarks><code>NEG Wd, Wm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NEG_sub_32_addsub_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void NEG(Arm64RegisterW Wd, Arm64RegisterW Wm, Arm64ShiftKind3 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.NEG(Wd, Wm, shift, amount));
    /// <summary>
    /// Negate (shifted register).
    /// </summary>
    /// <remarks><code>NEG Xd, Xm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NEG_sub_64_addsub_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void NEG(Arm64RegisterX Xd, Arm64RegisterX Xm, Arm64ShiftKind3 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.NEG(Xd, Xm, shift, amount));
    /// <summary>
    /// Negate, setting flags.
    /// </summary>
    /// <remarks><code>NEGS Wd, Wm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NEGS_subs_32_addsub_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void NEGS(Arm64RegisterW Wd, Arm64RegisterW Wm, Arm64ShiftKind3 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.NEGS(Wd, Wm, shift, amount));
    /// <summary>
    /// Negate, setting flags.
    /// </summary>
    /// <remarks><code>NEGS Xd, Xm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NEGS_subs_64_addsub_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void NEGS(Arm64RegisterX Xd, Arm64RegisterX Xm, Arm64ShiftKind3 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.NEGS(Xd, Xm, shift, amount));
    /// <summary>
    /// Negate with carry.
    /// </summary>
    /// <remarks><code>NGC Wd, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NGC_sbc_32_addsub_carry), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void NGC(Arm64RegisterW Wd, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.NGC(Wd, Wm));
    /// <summary>
    /// Negate with carry.
    /// </summary>
    /// <remarks><code>NGC Xd, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NGC_sbc_64_addsub_carry), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void NGC(Arm64RegisterX Xd, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.NGC(Xd, Xm));
    /// <summary>
    /// Negate with carry, setting flags.
    /// </summary>
    /// <remarks><code>NGCS Wd, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NGCS_sbcs_32_addsub_carry), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void NGCS(Arm64RegisterW Wd, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.NGCS(Wd, Wm));
    /// <summary>
    /// Negate with carry, setting flags.
    /// </summary>
    /// <remarks><code>NGCS Xd, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NGCS_sbcs_64_addsub_carry), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void NGCS(Arm64RegisterX Xd, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.NGCS(Xd, Xm));
    /// <summary>
    /// Bitwise OR NOT (shifted register).
    /// </summary>
    /// <remarks><code>ORN Wd, Wn, Wm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ORN_32_log_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ORN(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64ShiftKind4 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.ORN(Wd, Wn, Wm, shift, amount));
    /// <summary>
    /// Bitwise OR NOT (shifted register).
    /// </summary>
    /// <remarks><code>ORN Xd, Xn, Xm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ORN_64_log_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ORN(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm, Arm64ShiftKind4 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.ORN(Xd, Xn, Xm, shift, amount));
    /// <summary>
    /// Bitwise OR (immediate).
    /// </summary>
    /// <remarks><code>ORR Wd|WSP, Wn, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ORR_32_log_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ORR(Arm64RegisterWOrWSP Wd_WSP, Arm64RegisterW Wn, Arm64LogicalImmediate32 imm)
         => AddInstruction(Arm64InstructionFactory.ORR(Wd_WSP, Wn, imm));
    /// <summary>
    /// Bitwise OR (immediate).
    /// </summary>
    /// <remarks><code>ORR Xd|SP, Xn, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ORR_64_log_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ORR(Arm64RegisterXOrSP Xd_SP, Arm64RegisterX Xn, Arm64LogicalImmediate64 imm)
         => AddInstruction(Arm64InstructionFactory.ORR(Xd_SP, Xn, imm));
    /// <summary>
    /// Bitwise OR (shifted register).
    /// </summary>
    /// <remarks><code>ORR Wd, Wn, Wm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ORR_32_log_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ORR(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64ShiftKind4 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.ORR(Wd, Wn, Wm, shift, amount));
    /// <summary>
    /// Bitwise OR (shifted register).
    /// </summary>
    /// <remarks><code>ORR Xd, Xn, Xm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ORR_64_log_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ORR(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm, Arm64ShiftKind4 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.ORR(Xd, Xn, Xm, shift, amount));
    /// <summary>
    /// Pointer Authentication Code for data address, using key A.
    /// </summary>
    /// <remarks><code>PACDA Xd, Xn|SP</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PACDA_64p_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PACDA(Arm64RegisterX Xd, Arm64RegisterXOrSP Xn_SP)
         => AddInstruction(Arm64InstructionFactory.PACDA(Xd, Xn_SP));
    /// <summary>
    /// Pointer Authentication Code for data address, using key B.
    /// </summary>
    /// <remarks><code>PACDB Xd, Xn|SP</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PACDB_64p_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PACDB(Arm64RegisterX Xd, Arm64RegisterXOrSP Xn_SP)
         => AddInstruction(Arm64InstructionFactory.PACDB(Xd, Xn_SP));
    /// <summary>
    /// Pointer Authentication Code for data address, using key A.
    /// </summary>
    /// <remarks><code>PACDZA Xd</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PACDZA_64z_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PACDZA(Arm64RegisterX Xd)
         => AddInstruction(Arm64InstructionFactory.PACDZA(Xd));
    /// <summary>
    /// Pointer Authentication Code for data address, using key B.
    /// </summary>
    /// <remarks><code>PACDZB Xd</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PACDZB_64z_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PACDZB(Arm64RegisterX Xd)
         => AddInstruction(Arm64InstructionFactory.PACDZB(Xd));
    /// <summary>
    /// Pointer Authentication Code, using generic key.
    /// </summary>
    /// <remarks><code>PACGA Xd, Xn, Xm|SP</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PACGA_64p_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PACGA(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterXOrSP Xm_SP)
         => AddInstruction(Arm64InstructionFactory.PACGA(Xd, Xn, Xm_SP));
    /// <summary>
    /// Pointer Authentication Code for instruction address, using key A.
    /// </summary>
    /// <remarks><code>PACIA Xd, Xn|SP</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PACIA_64p_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PACIA(Arm64RegisterX Xd, Arm64RegisterXOrSP Xn_SP)
         => AddInstruction(Arm64InstructionFactory.PACIA(Xd, Xn_SP));
    /// <summary>
    /// Pointer Authentication Code for instruction address, using key A.
    /// </summary>
    /// <remarks><code>PACIA171615 </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PACIA171615_64lr_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PACIA171615()
         => AddInstruction(Arm64InstructionFactory.PACIA171615());
    /// <summary>
    /// Pointer Authentication Code for return address, using key A.
    /// </summary>
    /// <remarks><code>PACIASPPC </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PACIASPPC_64lr_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PACIASPPC()
         => AddInstruction(Arm64InstructionFactory.PACIASPPC());
    /// <summary>
    /// Pointer Authentication Code for instruction address, using key B.
    /// </summary>
    /// <remarks><code>PACIB Xd, Xn|SP</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PACIB_64p_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PACIB(Arm64RegisterX Xd, Arm64RegisterXOrSP Xn_SP)
         => AddInstruction(Arm64InstructionFactory.PACIB(Xd, Xn_SP));
    /// <summary>
    /// Pointer Authentication Code for instruction address, using key B.
    /// </summary>
    /// <remarks><code>PACIB171615 </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PACIB171615_64lr_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PACIB171615()
         => AddInstruction(Arm64InstructionFactory.PACIB171615());
    /// <summary>
    /// Pointer Authentication Code for return address, using key B.
    /// </summary>
    /// <remarks><code>PACIBSPPC </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PACIBSPPC_64lr_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PACIBSPPC()
         => AddInstruction(Arm64InstructionFactory.PACIBSPPC());
    /// <summary>
    /// Pointer Authentication Code for instruction address, using key A.
    /// </summary>
    /// <remarks><code>PACIZA Xd</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PACIZA_64z_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PACIZA(Arm64RegisterX Xd)
         => AddInstruction(Arm64InstructionFactory.PACIZA(Xd));
    /// <summary>
    /// Pointer Authentication Code for instruction address, using key B.
    /// </summary>
    /// <remarks><code>PACIZB Xd</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PACIZB_64z_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PACIZB(Arm64RegisterX Xd)
         => AddInstruction(Arm64InstructionFactory.PACIZB(Xd));
    /// <summary>
    /// Pointer Authentication Code for return address, using key A, not a branch target.
    /// </summary>
    /// <remarks><code>PACNBIASPPC </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PACNBIASPPC_64lr_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PACNBIASPPC()
         => AddInstruction(Arm64InstructionFactory.PACNBIASPPC());
    /// <summary>
    /// Pointer Authentication Code for return address, using key B, not a branch target.
    /// </summary>
    /// <remarks><code>PACNBIBSPPC </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PACNBIBSPPC_64lr_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PACNBIBSPPC()
         => AddInstruction(Arm64InstructionFactory.PACNBIBSPPC());
    /// <summary>
    /// Prefetch memory (immediate).
    /// </summary>
    /// <remarks><code>PRFM (prfop|#imm5), [Xn|SP{, #pimm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PRFM_p_ldst_pos), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PRFM(Arm64PrefetchOperationKind prfop, Arm64ImmediateMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.PRFM(prfop, mem));
    /// <summary>
    /// Prefetch memory (literal).
    /// </summary>
    /// <remarks><code>PRFM (prfop|#imm5), label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PRFM_p_loadlit), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PRFM(Arm64PrefetchOperationKind prfop, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.PRFM(prfop, RecordLabelOffset(label, 16452)));
    /// <summary>
    /// Prefetch memory (register).
    /// </summary>
    /// <remarks><code>PRFM (prfop|#imm5), [Xn|SP, (Wm|Xm){, extend, {amount}}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PRFM_p_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PRFM(Arm64PrefetchOperationKind prfop, Arm64RegisterXExtendMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.PRFM(prfop, mem));
    /// <summary>
    /// Prefetch memory (register).
    /// </summary>
    /// <remarks><code>PRFM (prfop|#imm5), [Xn|SP, (Wm|Xm){, extend, {amount}}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PRFM_p_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PRFM(Arm64PrefetchOperationKind prfop, Arm64RegisterWExtendMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.PRFM(prfop, mem));
    /// <summary>
    /// Prefetch memory (unscaled offset).
    /// </summary>
    /// <remarks><code>PRFUM (prfop|#imm5), [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PRFUM_p_ldst_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PRFUM(Arm64PrefetchOperationKind prfop, Arm64ImmediateMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.PRFUM(prfop, mem));
    /// <summary>
    /// Reverse bits.
    /// </summary>
    /// <remarks><code>RBIT Wd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RBIT_32_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RBIT(Arm64RegisterW Wd, Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.RBIT(Wd, Wn));
    /// <summary>
    /// Reverse bits.
    /// </summary>
    /// <remarks><code>RBIT Xd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RBIT_64_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RBIT(Arm64RegisterX Xd, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.RBIT(Xd, Xn));
    /// <summary>
    /// Read check write compare and swap doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWCAS Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWCAS_c64_rcwcomswap), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWCAS(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWCAS(Xs, Xt, mem));
    /// <summary>
    /// Read check write compare and swap doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWCASA Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWCASA_c64_rcwcomswap), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWCASA(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWCASA(Xs, Xt, mem));
    /// <summary>
    /// Read check write compare and swap doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWCASAL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWCASAL_c64_rcwcomswap), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWCASAL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWCASAL(Xs, Xt, mem));
    /// <summary>
    /// Read check write compare and swap doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWCASL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWCASL_c64_rcwcomswap), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWCASL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWCASL(Xs, Xt, mem));
    /// <summary>
    /// Read check write compare and swap quadword in memory.
    /// </summary>
    /// <remarks><code>RCWCASP Xs, X(s+1), Xt, X(t+1), [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWCASP_c64_rcwcomswappr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWCASP(Arm64RegisterX Xs, Arm64RegisterX X_s_1, Arm64RegisterX Xt, Arm64RegisterX X_t_1, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWCASP(Xs, X_s_1, Xt, X_t_1, mem));
    /// <summary>
    /// Read check write compare and swap quadword in memory.
    /// </summary>
    /// <remarks><code>RCWCASPA Xs, X(s+1), Xt, X(t+1), [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWCASPA_c64_rcwcomswappr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWCASPA(Arm64RegisterX Xs, Arm64RegisterX X_s_1, Arm64RegisterX Xt, Arm64RegisterX X_t_1, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWCASPA(Xs, X_s_1, Xt, X_t_1, mem));
    /// <summary>
    /// Read check write compare and swap quadword in memory.
    /// </summary>
    /// <remarks><code>RCWCASPAL Xs, X(s+1), Xt, X(t+1), [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWCASPAL_c64_rcwcomswappr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWCASPAL(Arm64RegisterX Xs, Arm64RegisterX X_s_1, Arm64RegisterX Xt, Arm64RegisterX X_t_1, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWCASPAL(Xs, X_s_1, Xt, X_t_1, mem));
    /// <summary>
    /// Read check write compare and swap quadword in memory.
    /// </summary>
    /// <remarks><code>RCWCASPL Xs, X(s+1), Xt, X(t+1), [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWCASPL_c64_rcwcomswappr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWCASPL(Arm64RegisterX Xs, Arm64RegisterX X_s_1, Arm64RegisterX Xt, Arm64RegisterX X_t_1, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWCASPL(Xs, X_s_1, Xt, X_t_1, mem));
    /// <summary>
    /// Read check write atomic bit clear on doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWCLR Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWCLR_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWCLR(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWCLR(Xs, Xt, mem));
    /// <summary>
    /// Read check write atomic bit clear on doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWCLRA Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWCLRA_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWCLRA(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWCLRA(Xs, Xt, mem));
    /// <summary>
    /// Read check write atomic bit clear on doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWCLRAL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWCLRAL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWCLRAL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWCLRAL(Xs, Xt, mem));
    /// <summary>
    /// Read check write atomic bit clear on doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWCLRL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWCLRL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWCLRL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWCLRL(Xs, Xt, mem));
    /// <summary>
    /// Read check write atomic bit clear on quadword in memory.
    /// </summary>
    /// <remarks><code>RCWCLRP Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWCLRP_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWCLRP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWCLRP(Xt1, Xt2, mem));
    /// <summary>
    /// Read check write atomic bit clear on quadword in memory.
    /// </summary>
    /// <remarks><code>RCWCLRPA Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWCLRPA_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWCLRPA(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWCLRPA(Xt1, Xt2, mem));
    /// <summary>
    /// Read check write atomic bit clear on quadword in memory.
    /// </summary>
    /// <remarks><code>RCWCLRPAL Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWCLRPAL_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWCLRPAL(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWCLRPAL(Xt1, Xt2, mem));
    /// <summary>
    /// Read check write atomic bit clear on quadword in memory.
    /// </summary>
    /// <remarks><code>RCWCLRPL Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWCLRPL_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWCLRPL(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWCLRPL(Xt1, Xt2, mem));
    /// <summary>
    /// Read check write software compare and swap doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWSCAS Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSCAS_c64_rcwcomswap), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSCAS(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSCAS(Xs, Xt, mem));
    /// <summary>
    /// Read check write software compare and swap doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWSCASA Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSCASA_c64_rcwcomswap), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSCASA(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSCASA(Xs, Xt, mem));
    /// <summary>
    /// Read check write software compare and swap doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWSCASAL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSCASAL_c64_rcwcomswap), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSCASAL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSCASAL(Xs, Xt, mem));
    /// <summary>
    /// Read check write software compare and swap doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWSCASL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSCASL_c64_rcwcomswap), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSCASL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSCASL(Xs, Xt, mem));
    /// <summary>
    /// Read check write software compare and swap quadword in memory.
    /// </summary>
    /// <remarks><code>RCWSCASP Xs, X(s+1), Xt, X(t+1), [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSCASP_c64_rcwcomswappr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSCASP(Arm64RegisterX Xs, Arm64RegisterX X_s_1, Arm64RegisterX Xt, Arm64RegisterX X_t_1, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSCASP(Xs, X_s_1, Xt, X_t_1, mem));
    /// <summary>
    /// Read check write software compare and swap quadword in memory.
    /// </summary>
    /// <remarks><code>RCWSCASPA Xs, X(s+1), Xt, X(t+1), [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSCASPA_c64_rcwcomswappr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSCASPA(Arm64RegisterX Xs, Arm64RegisterX X_s_1, Arm64RegisterX Xt, Arm64RegisterX X_t_1, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSCASPA(Xs, X_s_1, Xt, X_t_1, mem));
    /// <summary>
    /// Read check write software compare and swap quadword in memory.
    /// </summary>
    /// <remarks><code>RCWSCASPAL Xs, X(s+1), Xt, X(t+1), [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSCASPAL_c64_rcwcomswappr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSCASPAL(Arm64RegisterX Xs, Arm64RegisterX X_s_1, Arm64RegisterX Xt, Arm64RegisterX X_t_1, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSCASPAL(Xs, X_s_1, Xt, X_t_1, mem));
    /// <summary>
    /// Read check write software compare and swap quadword in memory.
    /// </summary>
    /// <remarks><code>RCWSCASPL Xs, X(s+1), Xt, X(t+1), [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSCASPL_c64_rcwcomswappr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSCASPL(Arm64RegisterX Xs, Arm64RegisterX X_s_1, Arm64RegisterX Xt, Arm64RegisterX X_t_1, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSCASPL(Xs, X_s_1, Xt, X_t_1, mem));
    /// <summary>
    /// Read check write software atomic bit clear on doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWSCLR Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSCLR_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSCLR(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSCLR(Xs, Xt, mem));
    /// <summary>
    /// Read check write software atomic bit clear on doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWSCLRA Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSCLRA_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSCLRA(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSCLRA(Xs, Xt, mem));
    /// <summary>
    /// Read check write software atomic bit clear on doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWSCLRAL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSCLRAL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSCLRAL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSCLRAL(Xs, Xt, mem));
    /// <summary>
    /// Read check write software atomic bit clear on doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWSCLRL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSCLRL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSCLRL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSCLRL(Xs, Xt, mem));
    /// <summary>
    /// Read check write software atomic bit clear on quadword in memory.
    /// </summary>
    /// <remarks><code>RCWSCLRP Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSCLRP_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSCLRP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSCLRP(Xt1, Xt2, mem));
    /// <summary>
    /// Read check write software atomic bit clear on quadword in memory.
    /// </summary>
    /// <remarks><code>RCWSCLRPA Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSCLRPA_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSCLRPA(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSCLRPA(Xt1, Xt2, mem));
    /// <summary>
    /// Read check write software atomic bit clear on quadword in memory.
    /// </summary>
    /// <remarks><code>RCWSCLRPAL Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSCLRPAL_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSCLRPAL(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSCLRPAL(Xt1, Xt2, mem));
    /// <summary>
    /// Read check write software atomic bit clear on quadword in memory.
    /// </summary>
    /// <remarks><code>RCWSCLRPL Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSCLRPL_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSCLRPL(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSCLRPL(Xt1, Xt2, mem));
    /// <summary>
    /// Read check write atomic bit set on doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWSET Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSET_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSET(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSET(Xs, Xt, mem));
    /// <summary>
    /// Read check write atomic bit set on doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWSETA Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSETA_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSETA(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSETA(Xs, Xt, mem));
    /// <summary>
    /// Read check write atomic bit set on doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWSETAL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSETAL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSETAL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSETAL(Xs, Xt, mem));
    /// <summary>
    /// Read check write atomic bit set on doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWSETL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSETL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSETL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSETL(Xs, Xt, mem));
    /// <summary>
    /// Read check write atomic bit set on quadword in memory.
    /// </summary>
    /// <remarks><code>RCWSETP Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSETP_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSETP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSETP(Xt1, Xt2, mem));
    /// <summary>
    /// Read check write atomic bit set on quadword in memory.
    /// </summary>
    /// <remarks><code>RCWSETPA Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSETPA_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSETPA(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSETPA(Xt1, Xt2, mem));
    /// <summary>
    /// Read check write atomic bit set on quadword in memory.
    /// </summary>
    /// <remarks><code>RCWSETPAL Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSETPAL_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSETPAL(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSETPAL(Xt1, Xt2, mem));
    /// <summary>
    /// Read check write atomic bit set on quadword in memory.
    /// </summary>
    /// <remarks><code>RCWSETPL Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSETPL_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSETPL(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSETPL(Xt1, Xt2, mem));
    /// <summary>
    /// Read check write software atomic bit set on doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWSSET Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSSET_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSSET(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSSET(Xs, Xt, mem));
    /// <summary>
    /// Read check write software atomic bit set on doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWSSETA Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSSETA_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSSETA(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSSETA(Xs, Xt, mem));
    /// <summary>
    /// Read check write software atomic bit set on doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWSSETAL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSSETAL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSSETAL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSSETAL(Xs, Xt, mem));
    /// <summary>
    /// Read check write software atomic bit set on doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWSSETL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSSETL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSSETL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSSETL(Xs, Xt, mem));
    /// <summary>
    /// Read check write software atomic bit set on quadword in memory.
    /// </summary>
    /// <remarks><code>RCWSSETP Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSSETP_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSSETP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSSETP(Xt1, Xt2, mem));
    /// <summary>
    /// Read check write software atomic bit set on quadword in memory.
    /// </summary>
    /// <remarks><code>RCWSSETPA Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSSETPA_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSSETPA(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSSETPA(Xt1, Xt2, mem));
    /// <summary>
    /// Read check write software atomic bit set on quadword in memory.
    /// </summary>
    /// <remarks><code>RCWSSETPAL Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSSETPAL_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSSETPAL(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSSETPAL(Xt1, Xt2, mem));
    /// <summary>
    /// Read check write software atomic bit set on quadword in memory.
    /// </summary>
    /// <remarks><code>RCWSSETPL Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSSETPL_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSSETPL(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSSETPL(Xt1, Xt2, mem));
    /// <summary>
    /// Read check write software swap doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWSSWP Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSSWP_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSSWP(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSSWP(Xs, Xt, mem));
    /// <summary>
    /// Read check write software swap doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWSSWPA Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSSWPA_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSSWPA(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSSWPA(Xs, Xt, mem));
    /// <summary>
    /// Read check write software swap doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWSSWPAL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSSWPAL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSSWPAL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSSWPAL(Xs, Xt, mem));
    /// <summary>
    /// Read check write software swap doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWSSWPL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSSWPL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSSWPL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSSWPL(Xs, Xt, mem));
    /// <summary>
    /// Read check write software swap quadword in memory.
    /// </summary>
    /// <remarks><code>RCWSSWPP Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSSWPP_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSSWPP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSSWPP(Xt1, Xt2, mem));
    /// <summary>
    /// Read check write software swap quadword in memory.
    /// </summary>
    /// <remarks><code>RCWSSWPPA Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSSWPPA_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSSWPPA(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSSWPPA(Xt1, Xt2, mem));
    /// <summary>
    /// Read check write software swap quadword in memory.
    /// </summary>
    /// <remarks><code>RCWSSWPPAL Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSSWPPAL_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSSWPPAL(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSSWPPAL(Xt1, Xt2, mem));
    /// <summary>
    /// Read check write software swap quadword in memory.
    /// </summary>
    /// <remarks><code>RCWSSWPPL Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSSWPPL_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSSWPPL(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSSWPPL(Xt1, Xt2, mem));
    /// <summary>
    /// Read check write swap doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWSWP Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSWP_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSWP(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSWP(Xs, Xt, mem));
    /// <summary>
    /// Read check write swap doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWSWPA Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSWPA_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSWPA(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSWPA(Xs, Xt, mem));
    /// <summary>
    /// Read check write swap doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWSWPAL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSWPAL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSWPAL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSWPAL(Xs, Xt, mem));
    /// <summary>
    /// Read check write swap doubleword in memory.
    /// </summary>
    /// <remarks><code>RCWSWPL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSWPL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSWPL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSWPL(Xs, Xt, mem));
    /// <summary>
    /// Read check write swap quadword in memory.
    /// </summary>
    /// <remarks><code>RCWSWPP Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSWPP_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSWPP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSWPP(Xt1, Xt2, mem));
    /// <summary>
    /// Read check write swap quadword in memory.
    /// </summary>
    /// <remarks><code>RCWSWPPA Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSWPPA_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSWPPA(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSWPPA(Xt1, Xt2, mem));
    /// <summary>
    /// Read check write swap quadword in memory.
    /// </summary>
    /// <remarks><code>RCWSWPPAL Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSWPPAL_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSWPPAL(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSWPPAL(Xt1, Xt2, mem));
    /// <summary>
    /// Read check write swap quadword in memory.
    /// </summary>
    /// <remarks><code>RCWSWPPL Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RCWSWPPL_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RCWSWPPL(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RCWSWPPL(Xt1, Xt2, mem));
    /// <summary>
    /// Return from subroutine.
    /// </summary>
    /// <remarks><code>RET {Xn}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RET_64r_branch_reg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RET(Arm64RegisterX Xn = default)
         => AddInstruction(Arm64InstructionFactory.RET(Xn));
    /// <summary>
    /// Return from subroutine, with pointer authentication.
    /// </summary>
    /// <remarks><code>RETAA </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RETAA_64e_branch_reg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RETAA()
         => AddInstruction(Arm64InstructionFactory.RETAA());
    /// <summary>
    /// Return from subroutine, with enhanced pointer authentication using an immediate offset.
    /// </summary>
    /// <remarks><code>RETAASPPC label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RETAASPPC_only_miscbranch), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RETAASPPC(Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.RETAASPPC(RecordLabelOffset(label, 17940)));
    /// <summary>
    /// Return from subroutine, with enhanced pointer authentication using a register.
    /// </summary>
    /// <remarks><code>RETAASPPCR Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RETAASPPCR_64m_branch_reg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RETAASPPCR(Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.RETAASPPCR(Xm));
    /// <summary>
    /// Return from subroutine, with pointer authentication.
    /// </summary>
    /// <remarks><code>RETAB </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RETAB_64e_branch_reg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RETAB()
         => AddInstruction(Arm64InstructionFactory.RETAB());
    /// <summary>
    /// Return from subroutine, with enhanced pointer authentication using an immediate offset.
    /// </summary>
    /// <remarks><code>RETABSPPC label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RETABSPPC_only_miscbranch), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RETABSPPC(Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.RETABSPPC(RecordLabelOffset(label, 17956)));
    /// <summary>
    /// Return from subroutine, with enhanced pointer authentication using a register.
    /// </summary>
    /// <remarks><code>RETABSPPCR Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RETABSPPCR_64m_branch_reg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RETABSPPCR(Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.RETABSPPCR(Xm));
    /// <summary>
    /// Reverse bytes.
    /// </summary>
    /// <remarks><code>REV Wd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV_32_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void REV(Arm64RegisterW Wd, Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.REV(Wd, Wn));
    /// <summary>
    /// Reverse bytes.
    /// </summary>
    /// <remarks><code>REV Xd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV_64_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void REV(Arm64RegisterX Xd, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.REV(Xd, Xn));
    /// <summary>
    /// Reverse bytes in 16-bit halfwords.
    /// </summary>
    /// <remarks><code>REV16 Wd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV16_32_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void REV16(Arm64RegisterW Wd, Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.REV16(Wd, Wn));
    /// <summary>
    /// Reverse bytes in 16-bit halfwords.
    /// </summary>
    /// <remarks><code>REV16 Xd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV16_64_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void REV16(Arm64RegisterX Xd, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.REV16(Xd, Xn));
    /// <summary>
    /// Reverse bytes in 32-bit words.
    /// </summary>
    /// <remarks><code>REV32 Xd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV32_64_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void REV32(Arm64RegisterX Xd, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.REV32(Xd, Xn));
    /// <summary>
    /// Reverse bytes.
    /// </summary>
    /// <remarks><code>REV64 Xd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV64_rev_64_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void REV64(Arm64RegisterX Xd, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.REV64(Xd, Xn));
    /// <summary>
    /// Rotate, mask insert flags.
    /// </summary>
    /// <remarks><code>RMIF Xn, #shift, #mask</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RMIF_only_rmif), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RMIF(Arm64RegisterX Xn, byte shift, byte mask)
         => AddInstruction(Arm64InstructionFactory.RMIF(Xn, shift, mask));
    /// <summary>
    /// Rotate right (immediate).
    /// </summary>
    /// <remarks><code>ROR Wd, Ws, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ROR_extr_32_extract), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ROR(Arm64RegisterW Wd, Arm64RegisterW Ws, byte shift)
         => AddInstruction(Arm64InstructionFactory.ROR(Wd, Ws, shift));
    /// <summary>
    /// Rotate right (immediate).
    /// </summary>
    /// <remarks><code>ROR Xd, Xs, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ROR_extr_64_extract), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ROR(Arm64RegisterX Xd, Arm64RegisterX Xs, byte shift)
         => AddInstruction(Arm64InstructionFactory.ROR(Xd, Xs, shift));
    /// <summary>
    /// Rotate right (register).
    /// </summary>
    /// <remarks><code>ROR Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ROR_rorv_32_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ROR(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.ROR(Wd, Wn, Wm));
    /// <summary>
    /// Rotate right (register).
    /// </summary>
    /// <remarks><code>ROR Xd, Xn, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ROR_rorv_64_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ROR(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ROR(Xd, Xn, Xm));
    /// <summary>
    /// Rotate right variable.
    /// </summary>
    /// <remarks><code>RORV Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RORV_32_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RORV(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.RORV(Wd, Wn, Wm));
    /// <summary>
    /// Rotate right variable.
    /// </summary>
    /// <remarks><code>RORV Xd, Xn, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RORV_64_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RORV(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.RORV(Xd, Xn, Xm));
    /// <summary>
    /// Range prefetch memory.
    /// </summary>
    /// <remarks><code>RPRFM (rprfop|#imm6), Xm, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RPRFM_r_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RPRFM(Arm64RangePrefetchOperationKind rprfop, Arm64RegisterX Xm, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.RPRFM(rprfop, Xm, mem));
    /// <summary>
    /// Subtract with carry.
    /// </summary>
    /// <remarks><code>SBC Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SBC_32_addsub_carry), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SBC(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.SBC(Wd, Wn, Wm));
    /// <summary>
    /// Subtract with carry.
    /// </summary>
    /// <remarks><code>SBC Xd, Xn, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SBC_64_addsub_carry), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SBC(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.SBC(Xd, Xn, Xm));
    /// <summary>
    /// Subtract with carry, setting flags.
    /// </summary>
    /// <remarks><code>SBCS Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SBCS_32_addsub_carry), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SBCS(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.SBCS(Wd, Wn, Wm));
    /// <summary>
    /// Subtract with carry, setting flags.
    /// </summary>
    /// <remarks><code>SBCS Xd, Xn, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SBCS_64_addsub_carry), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SBCS(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.SBCS(Xd, Xn, Xm));
    /// <summary>
    /// Signed bitfield insert in zeros.
    /// </summary>
    /// <remarks><code>SBFIZ Wd, Wn, #lsb, #width</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SBFIZ_sbfm_32m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SBFIZ(Arm64RegisterW Wd, Arm64RegisterW Wn, uint lsb, byte width)
         => AddInstruction(Arm64InstructionFactory.SBFIZ(Wd, Wn, lsb, width));
    /// <summary>
    /// Signed bitfield insert in zeros.
    /// </summary>
    /// <remarks><code>SBFIZ Xd, Xn, #lsb, #width</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SBFIZ_sbfm_64m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SBFIZ(Arm64RegisterX Xd, Arm64RegisterX Xn, uint lsb, byte width)
         => AddInstruction(Arm64InstructionFactory.SBFIZ(Xd, Xn, lsb, width));
    /// <summary>
    /// Signed bitfield move.
    /// </summary>
    /// <remarks><code>SBFM Wd, Wn, #immr, #imms</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SBFM_32m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SBFM(Arm64RegisterW Wd, Arm64RegisterW Wn, byte immr, byte imms)
         => AddInstruction(Arm64InstructionFactory.SBFM(Wd, Wn, immr, imms));
    /// <summary>
    /// Signed bitfield move.
    /// </summary>
    /// <remarks><code>SBFM Xd, Xn, #immr, #imms</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SBFM_64m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SBFM(Arm64RegisterX Xd, Arm64RegisterX Xn, byte immr, byte imms)
         => AddInstruction(Arm64InstructionFactory.SBFM(Xd, Xn, immr, imms));
    /// <summary>
    /// Signed bitfield extract.
    /// </summary>
    /// <remarks><code>SBFX Wd, Wn, #lsb, #width</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SBFX_sbfm_32m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SBFX(Arm64RegisterW Wd, Arm64RegisterW Wn, byte lsb, byte width)
         => AddInstruction(Arm64InstructionFactory.SBFX(Wd, Wn, lsb, width));
    /// <summary>
    /// Signed bitfield extract.
    /// </summary>
    /// <remarks><code>SBFX Xd, Xn, #lsb, #width</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SBFX_sbfm_64m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SBFX(Arm64RegisterX Xd, Arm64RegisterX Xn, byte lsb, byte width)
         => AddInstruction(Arm64InstructionFactory.SBFX(Xd, Xn, lsb, width));
    /// <summary>
    /// Signed divide.
    /// </summary>
    /// <remarks><code>SDIV Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SDIV_32_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SDIV(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.SDIV(Wd, Wn, Wm));
    /// <summary>
    /// Signed divide.
    /// </summary>
    /// <remarks><code>SDIV Xd, Xn, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SDIV_64_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SDIV(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.SDIV(Xd, Xn, Xm));
    /// <summary>
    /// Memory set.
    /// </summary>
    /// <remarks><code>SETE [Xd]!, Xn!, Xs</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETE_set_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETE(Arm64BaseXMemoryAccessor.PreIncrement mem, Arm64RegisterX Xn, Arm64RegisterX Xs)
         => AddInstruction(Arm64InstructionFactory.SETE(mem, Xn, Xs));
    /// <summary>
    /// Memory set, non-temporal.
    /// </summary>
    /// <remarks><code>SETEN [Xd]!, Xn!, Xs</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETEN_set_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETEN(Arm64BaseXMemoryAccessor.PreIncrement mem, Arm64RegisterX Xn, Arm64RegisterX Xs)
         => AddInstruction(Arm64InstructionFactory.SETEN(mem, Xn, Xs));
    /// <summary>
    /// Memory set, unprivileged.
    /// </summary>
    /// <remarks><code>SETET [Xd]!, Xn!, Xs</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETET_set_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETET(Arm64BaseXMemoryAccessor.PreIncrement mem, Arm64RegisterX Xn, Arm64RegisterX Xs)
         => AddInstruction(Arm64InstructionFactory.SETET(mem, Xn, Xs));
    /// <summary>
    /// Memory set, unprivileged and non-temporal.
    /// </summary>
    /// <remarks><code>SETETN [Xd]!, Xn!, Xs</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETETN_set_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETETN(Arm64BaseXMemoryAccessor.PreIncrement mem, Arm64RegisterX Xn, Arm64RegisterX Xs)
         => AddInstruction(Arm64InstructionFactory.SETETN(mem, Xn, Xs));
    /// <summary>
    /// Evaluation of 8-bit or 16-bit flag values.
    /// </summary>
    /// <remarks><code>SETF16 Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETF16_only_setf), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETF16(Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.SETF16(Wn));
    /// <summary>
    /// Evaluation of 8-bit or 16-bit flag values.
    /// </summary>
    /// <remarks><code>SETF8 Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETF8_only_setf), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETF8(Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.SETF8(Wn));
    /// <summary>
    /// Memory set with tag setting.
    /// </summary>
    /// <remarks><code>SETGE [Xd]!, Xn!, Xs</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETGE_set_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETGE(Arm64BaseXMemoryAccessor.PreIncrement mem, Arm64RegisterX Xn, Arm64RegisterX Xs)
         => AddInstruction(Arm64InstructionFactory.SETGE(mem, Xn, Xs));
    /// <summary>
    /// Memory set with tag setting, non-temporal.
    /// </summary>
    /// <remarks><code>SETGEN [Xd]!, Xn!, Xs</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETGEN_set_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETGEN(Arm64BaseXMemoryAccessor.PreIncrement mem, Arm64RegisterX Xn, Arm64RegisterX Xs)
         => AddInstruction(Arm64InstructionFactory.SETGEN(mem, Xn, Xs));
    /// <summary>
    /// Memory set with tag setting, unprivileged.
    /// </summary>
    /// <remarks><code>SETGET [Xd]!, Xn!, Xs</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETGET_set_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETGET(Arm64BaseXMemoryAccessor.PreIncrement mem, Arm64RegisterX Xn, Arm64RegisterX Xs)
         => AddInstruction(Arm64InstructionFactory.SETGET(mem, Xn, Xs));
    /// <summary>
    /// Memory set with tag setting, unprivileged and non-temporal.
    /// </summary>
    /// <remarks><code>SETGETN [Xd]!, Xn!, Xs</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETGETN_set_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETGETN(Arm64BaseXMemoryAccessor.PreIncrement mem, Arm64RegisterX Xn, Arm64RegisterX Xs)
         => AddInstruction(Arm64InstructionFactory.SETGETN(mem, Xn, Xs));
    /// <summary>
    /// Memory set with tag setting.
    /// </summary>
    /// <remarks><code>SETGM [Xd]!, Xn!, Xs</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETGM_set_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETGM(Arm64BaseXMemoryAccessor.PreIncrement mem, Arm64RegisterX Xn, Arm64RegisterX Xs)
         => AddInstruction(Arm64InstructionFactory.SETGM(mem, Xn, Xs));
    /// <summary>
    /// Memory set with tag setting, non-temporal.
    /// </summary>
    /// <remarks><code>SETGMN [Xd]!, Xn!, Xs</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETGMN_set_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETGMN(Arm64BaseXMemoryAccessor.PreIncrement mem, Arm64RegisterX Xn, Arm64RegisterX Xs)
         => AddInstruction(Arm64InstructionFactory.SETGMN(mem, Xn, Xs));
    /// <summary>
    /// Memory set with tag setting, unprivileged.
    /// </summary>
    /// <remarks><code>SETGMT [Xd]!, Xn!, Xs</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETGMT_set_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETGMT(Arm64BaseXMemoryAccessor.PreIncrement mem, Arm64RegisterX Xn, Arm64RegisterX Xs)
         => AddInstruction(Arm64InstructionFactory.SETGMT(mem, Xn, Xs));
    /// <summary>
    /// Memory set with tag setting, unprivileged and non-temporal.
    /// </summary>
    /// <remarks><code>SETGMTN [Xd]!, Xn!, Xs</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETGMTN_set_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETGMTN(Arm64BaseXMemoryAccessor.PreIncrement mem, Arm64RegisterX Xn, Arm64RegisterX Xs)
         => AddInstruction(Arm64InstructionFactory.SETGMTN(mem, Xn, Xs));
    /// <summary>
    /// Memory set with tag setting.
    /// </summary>
    /// <remarks><code>SETGP [Xd]!, Xn!, Xs</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETGP_set_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETGP(Arm64BaseXMemoryAccessor.PreIncrement mem, Arm64RegisterX Xn, Arm64RegisterX Xs)
         => AddInstruction(Arm64InstructionFactory.SETGP(mem, Xn, Xs));
    /// <summary>
    /// Memory set with tag setting, non-temporal.
    /// </summary>
    /// <remarks><code>SETGPN [Xd]!, Xn!, Xs</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETGPN_set_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETGPN(Arm64BaseXMemoryAccessor.PreIncrement mem, Arm64RegisterX Xn, Arm64RegisterX Xs)
         => AddInstruction(Arm64InstructionFactory.SETGPN(mem, Xn, Xs));
    /// <summary>
    /// Memory set with tag setting, unprivileged.
    /// </summary>
    /// <remarks><code>SETGPT [Xd]!, Xn!, Xs</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETGPT_set_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETGPT(Arm64BaseXMemoryAccessor.PreIncrement mem, Arm64RegisterX Xn, Arm64RegisterX Xs)
         => AddInstruction(Arm64InstructionFactory.SETGPT(mem, Xn, Xs));
    /// <summary>
    /// Memory set with tag setting, unprivileged and non-temporal.
    /// </summary>
    /// <remarks><code>SETGPTN [Xd]!, Xn!, Xs</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETGPTN_set_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETGPTN(Arm64BaseXMemoryAccessor.PreIncrement mem, Arm64RegisterX Xn, Arm64RegisterX Xs)
         => AddInstruction(Arm64InstructionFactory.SETGPTN(mem, Xn, Xs));
    /// <summary>
    /// Memory set.
    /// </summary>
    /// <remarks><code>SETM [Xd]!, Xn!, Xs</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETM_set_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETM(Arm64BaseXMemoryAccessor.PreIncrement mem, Arm64RegisterX Xn, Arm64RegisterX Xs)
         => AddInstruction(Arm64InstructionFactory.SETM(mem, Xn, Xs));
    /// <summary>
    /// Memory set, non-temporal.
    /// </summary>
    /// <remarks><code>SETMN [Xd]!, Xn!, Xs</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETMN_set_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETMN(Arm64BaseXMemoryAccessor.PreIncrement mem, Arm64RegisterX Xn, Arm64RegisterX Xs)
         => AddInstruction(Arm64InstructionFactory.SETMN(mem, Xn, Xs));
    /// <summary>
    /// Memory set, unprivileged.
    /// </summary>
    /// <remarks><code>SETMT [Xd]!, Xn!, Xs</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETMT_set_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETMT(Arm64BaseXMemoryAccessor.PreIncrement mem, Arm64RegisterX Xn, Arm64RegisterX Xs)
         => AddInstruction(Arm64InstructionFactory.SETMT(mem, Xn, Xs));
    /// <summary>
    /// Memory set, unprivileged and non-temporal.
    /// </summary>
    /// <remarks><code>SETMTN [Xd]!, Xn!, Xs</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETMTN_set_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETMTN(Arm64BaseXMemoryAccessor.PreIncrement mem, Arm64RegisterX Xn, Arm64RegisterX Xs)
         => AddInstruction(Arm64InstructionFactory.SETMTN(mem, Xn, Xs));
    /// <summary>
    /// Memory set.
    /// </summary>
    /// <remarks><code>SETP [Xd]!, Xn!, Xs</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETP_set_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETP(Arm64BaseXMemoryAccessor.PreIncrement mem, Arm64RegisterX Xn, Arm64RegisterX Xs)
         => AddInstruction(Arm64InstructionFactory.SETP(mem, Xn, Xs));
    /// <summary>
    /// Memory set, non-temporal.
    /// </summary>
    /// <remarks><code>SETPN [Xd]!, Xn!, Xs</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETPN_set_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETPN(Arm64BaseXMemoryAccessor.PreIncrement mem, Arm64RegisterX Xn, Arm64RegisterX Xs)
         => AddInstruction(Arm64InstructionFactory.SETPN(mem, Xn, Xs));
    /// <summary>
    /// Memory set, unprivileged.
    /// </summary>
    /// <remarks><code>SETPT [Xd]!, Xn!, Xs</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETPT_set_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETPT(Arm64BaseXMemoryAccessor.PreIncrement mem, Arm64RegisterX Xn, Arm64RegisterX Xs)
         => AddInstruction(Arm64InstructionFactory.SETPT(mem, Xn, Xs));
    /// <summary>
    /// Memory set, unprivileged and non-temporal.
    /// </summary>
    /// <remarks><code>SETPTN [Xd]!, Xn!, Xs</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SETPTN_set_memcms), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SETPTN(Arm64BaseXMemoryAccessor.PreIncrement mem, Arm64RegisterX Xn, Arm64RegisterX Xs)
         => AddInstruction(Arm64InstructionFactory.SETPTN(mem, Xn, Xs));
    /// <summary>
    /// Signed multiply-add long.
    /// </summary>
    /// <remarks><code>SMADDL Xd, Wn, Wm, Xa</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMADDL_64wa_dp_3src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMADDL(Arm64RegisterX Xd, Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64RegisterX Xa)
         => AddInstruction(Arm64InstructionFactory.SMADDL(Xd, Wn, Wm, Xa));
    /// <summary>
    /// Signed maximum (immediate).
    /// </summary>
    /// <remarks><code>SMAX Wd, Wn, #simm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAX_32_minmax_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMAX(Arm64RegisterW Wd, Arm64RegisterW Wn, sbyte simm)
         => AddInstruction(Arm64InstructionFactory.SMAX(Wd, Wn, simm));
    /// <summary>
    /// Signed maximum (immediate).
    /// </summary>
    /// <remarks><code>SMAX Xd, Xn, #simm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAX_64_minmax_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMAX(Arm64RegisterX Xd, Arm64RegisterX Xn, sbyte simm)
         => AddInstruction(Arm64InstructionFactory.SMAX(Xd, Xn, simm));
    /// <summary>
    /// Signed maximum (register).
    /// </summary>
    /// <remarks><code>SMAX Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAX_32_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMAX(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.SMAX(Wd, Wn, Wm));
    /// <summary>
    /// Signed maximum (register).
    /// </summary>
    /// <remarks><code>SMAX Xd, Xn, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAX_64_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMAX(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.SMAX(Xd, Xn, Xm));
    /// <summary>
    /// Signed minimum (immediate).
    /// </summary>
    /// <remarks><code>SMIN Wd, Wn, #simm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMIN_32_minmax_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMIN(Arm64RegisterW Wd, Arm64RegisterW Wn, sbyte simm)
         => AddInstruction(Arm64InstructionFactory.SMIN(Wd, Wn, simm));
    /// <summary>
    /// Signed minimum (immediate).
    /// </summary>
    /// <remarks><code>SMIN Xd, Xn, #simm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMIN_64_minmax_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMIN(Arm64RegisterX Xd, Arm64RegisterX Xn, sbyte simm)
         => AddInstruction(Arm64InstructionFactory.SMIN(Xd, Xn, simm));
    /// <summary>
    /// Signed minimum (register).
    /// </summary>
    /// <remarks><code>SMIN Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMIN_32_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMIN(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.SMIN(Wd, Wn, Wm));
    /// <summary>
    /// Signed minimum (register).
    /// </summary>
    /// <remarks><code>SMIN Xd, Xn, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMIN_64_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMIN(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.SMIN(Xd, Xn, Xm));
    /// <summary>
    /// Signed multiply-negate long.
    /// </summary>
    /// <remarks><code>SMNEGL Xd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMNEGL_smsubl_64wa_dp_3src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMNEGL(Arm64RegisterX Xd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.SMNEGL(Xd, Wn, Wm));
    /// <summary>
    /// Signed multiply-subtract long.
    /// </summary>
    /// <remarks><code>SMSUBL Xd, Wn, Wm, Xa</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMSUBL_64wa_dp_3src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMSUBL(Arm64RegisterX Xd, Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64RegisterX Xa)
         => AddInstruction(Arm64InstructionFactory.SMSUBL(Xd, Wn, Wm, Xa));
    /// <summary>
    /// Signed multiply high.
    /// </summary>
    /// <remarks><code>SMULH Xd, Xn, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULH_64_dp_3src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMULH(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.SMULH(Xd, Xn, Xm));
    /// <summary>
    /// Signed multiply long.
    /// </summary>
    /// <remarks><code>SMULL Xd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL_smaddl_64wa_dp_3src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMULL(Arm64RegisterX Xd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.SMULL(Xd, Wn, Wm));
    /// <summary>
    /// Store Allocation Tags.
    /// </summary>
    /// <remarks><code>ST2G Xt|SP, [Xn|SP], #simm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2G_64spost_ldsttags), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2G(Arm64RegisterXOrSP Xt_SP, Arm64BaseMemoryAccessor dst, int simm)
         => AddInstruction(Arm64InstructionFactory.ST2G(Xt_SP, dst, simm));
    /// <summary>
    /// Store Allocation Tags.
    /// </summary>
    /// <remarks><code>ST2G Xt|SP, [Xn|SP, #simm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2G_64spre_ldsttags), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2G(Arm64RegisterXOrSP Xt_SP, Arm64ImmediateMemoryAccessor.PreIncrement dst)
         => AddInstruction(Arm64InstructionFactory.ST2G(Xt_SP, dst));
    /// <summary>
    /// Store Allocation Tags.
    /// </summary>
    /// <remarks><code>ST2G Xt|SP, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2G_64soffset_ldsttags), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2G(Arm64RegisterXOrSP Xt_SP, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST2G(Xt_SP, dst));
    /// <summary>
    /// Single-copy atomic 64-byte store without status result.
    /// </summary>
    /// <remarks><code>ST64B Xt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST64B_64l_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST64B(Arm64RegisterX Xt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST64B(Xt, dst));
    /// <summary>
    /// Single-copy atomic 64-byte store with status result.
    /// </summary>
    /// <remarks><code>ST64BV Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST64BV_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST64BV(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST64BV(Xs, Xt, dst));
    /// <summary>
    /// Single-copy atomic 64-byte EL0 store with status result.
    /// </summary>
    /// <remarks><code>ST64BV0 Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST64BV0_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST64BV0(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST64BV0(Xs, Xt, dst));
    /// <summary>
    /// Atomic add on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STADD Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STADD_ldadd_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STADD(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STADD(Ws, dst));
    /// <summary>
    /// Atomic add on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STADD Xs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STADD_ldadd_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STADD(Arm64RegisterX Xs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STADD(Xs, dst));
    /// <summary>
    /// Atomic add on byte in memory, without return.
    /// </summary>
    /// <remarks><code>STADDB Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STADDB_ldaddb_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STADDB(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STADDB(Ws, dst));
    /// <summary>
    /// Atomic add on halfword in memory, without return.
    /// </summary>
    /// <remarks><code>STADDH Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STADDH_ldaddh_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STADDH(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STADDH(Ws, dst));
    /// <summary>
    /// Atomic add on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STADDL Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STADDL_ldaddl_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STADDL(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STADDL(Ws, dst));
    /// <summary>
    /// Atomic add on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STADDL Xs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STADDL_ldaddl_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STADDL(Arm64RegisterX Xs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STADDL(Xs, dst));
    /// <summary>
    /// Atomic add on byte in memory, without return.
    /// </summary>
    /// <remarks><code>STADDLB Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STADDLB_ldaddlb_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STADDLB(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STADDLB(Ws, dst));
    /// <summary>
    /// Atomic add on halfword in memory, without return.
    /// </summary>
    /// <remarks><code>STADDLH Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STADDLH_ldaddlh_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STADDLH(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STADDLH(Ws, dst));
    /// <summary>
    /// Atomic bit clear on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STCLR Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STCLR_ldclr_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STCLR(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STCLR(Ws, dst));
    /// <summary>
    /// Atomic bit clear on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STCLR Xs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STCLR_ldclr_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STCLR(Arm64RegisterX Xs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STCLR(Xs, dst));
    /// <summary>
    /// Atomic bit clear on byte in memory, without return.
    /// </summary>
    /// <remarks><code>STCLRB Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STCLRB_ldclrb_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STCLRB(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STCLRB(Ws, dst));
    /// <summary>
    /// Atomic bit clear on halfword in memory, without return.
    /// </summary>
    /// <remarks><code>STCLRH Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STCLRH_ldclrh_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STCLRH(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STCLRH(Ws, dst));
    /// <summary>
    /// Atomic bit clear on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STCLRL Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STCLRL_ldclrl_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STCLRL(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STCLRL(Ws, dst));
    /// <summary>
    /// Atomic bit clear on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STCLRL Xs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STCLRL_ldclrl_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STCLRL(Arm64RegisterX Xs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STCLRL(Xs, dst));
    /// <summary>
    /// Atomic bit clear on byte in memory, without return.
    /// </summary>
    /// <remarks><code>STCLRLB Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STCLRLB_ldclrlb_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STCLRLB(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STCLRLB(Ws, dst));
    /// <summary>
    /// Atomic bit clear on halfword in memory, without return.
    /// </summary>
    /// <remarks><code>STCLRLH Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STCLRLH_ldclrlh_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STCLRLH(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STCLRLH(Ws, dst));
    /// <summary>
    /// Atomic exclusive-OR on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STEOR Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STEOR_ldeor_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STEOR(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STEOR(Ws, dst));
    /// <summary>
    /// Atomic exclusive-OR on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STEOR Xs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STEOR_ldeor_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STEOR(Arm64RegisterX Xs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STEOR(Xs, dst));
    /// <summary>
    /// Atomic exclusive-OR on byte in memory, without return.
    /// </summary>
    /// <remarks><code>STEORB Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STEORB_ldeorb_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STEORB(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STEORB(Ws, dst));
    /// <summary>
    /// Atomic exclusive-OR on halfword in memory, without return.
    /// </summary>
    /// <remarks><code>STEORH Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STEORH_ldeorh_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STEORH(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STEORH(Ws, dst));
    /// <summary>
    /// Atomic exclusive-OR on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STEORL Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STEORL_ldeorl_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STEORL(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STEORL(Ws, dst));
    /// <summary>
    /// Atomic exclusive-OR on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STEORL Xs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STEORL_ldeorl_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STEORL(Arm64RegisterX Xs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STEORL(Xs, dst));
    /// <summary>
    /// Atomic exclusive-OR on byte in memory, without return.
    /// </summary>
    /// <remarks><code>STEORLB Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STEORLB_ldeorlb_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STEORLB(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STEORLB(Ws, dst));
    /// <summary>
    /// Atomic exclusive-OR on halfword in memory, without return.
    /// </summary>
    /// <remarks><code>STEORLH Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STEORLH_ldeorlh_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STEORLH(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STEORLH(Ws, dst));
    /// <summary>
    /// Store Allocation Tag.
    /// </summary>
    /// <remarks><code>STG Xt|SP, [Xn|SP], #simm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STG_64spost_ldsttags), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STG(Arm64RegisterXOrSP Xt_SP, Arm64BaseMemoryAccessor dst, int simm)
         => AddInstruction(Arm64InstructionFactory.STG(Xt_SP, dst, simm));
    /// <summary>
    /// Store Allocation Tag.
    /// </summary>
    /// <remarks><code>STG Xt|SP, [Xn|SP, #simm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STG_64spre_ldsttags), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STG(Arm64RegisterXOrSP Xt_SP, Arm64ImmediateMemoryAccessor.PreIncrement dst)
         => AddInstruction(Arm64InstructionFactory.STG(Xt_SP, dst));
    /// <summary>
    /// Store Allocation Tag.
    /// </summary>
    /// <remarks><code>STG Xt|SP, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STG_64soffset_ldsttags), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STG(Arm64RegisterXOrSP Xt_SP, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STG(Xt_SP, dst));
    /// <summary>
    /// Store Allocation Tag multiple.
    /// </summary>
    /// <remarks><code>STGM Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STGM_64bulk_ldsttags), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STGM(Arm64RegisterX Xt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STGM(Xt, dst));
    /// <summary>
    /// Store Allocation Tag and pair of registers.
    /// </summary>
    /// <remarks><code>STGP Xt1, Xt2, [Xn|SP], #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STGP_64_ldstpair_post), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STGP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor dst, int imm)
         => AddInstruction(Arm64InstructionFactory.STGP(Xt1, Xt2, dst, imm));
    /// <summary>
    /// Store Allocation Tag and pair of registers.
    /// </summary>
    /// <remarks><code>STGP Xt1, Xt2, [Xn|SP, #imm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STGP_64_ldstpair_pre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STGP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64ImmediateMemoryAccessor.PreIncrement dst)
         => AddInstruction(Arm64InstructionFactory.STGP(Xt1, Xt2, dst));
    /// <summary>
    /// Store Allocation Tag and pair of registers.
    /// </summary>
    /// <remarks><code>STGP Xt1, Xt2, [Xn|SP{, #imm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STGP_64_ldstpair_off), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STGP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STGP(Xt1, Xt2, dst));
    /// <summary>
    /// Store-release ordered pair of registers.
    /// </summary>
    /// <remarks><code>STILP Wt1, Wt2, [Xn|SP, #-8]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STILP_32se_ldiappstilp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STILP(Arm64RegisterW Wt1, Arm64RegisterW Wt2, Arm64ImmediateMemoryAccessor.PreIncrement dst)
         => AddInstruction(Arm64InstructionFactory.STILP(Wt1, Wt2, dst));
    /// <summary>
    /// Store-release ordered pair of registers.
    /// </summary>
    /// <remarks><code>STILP Wt1, Wt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STILP_32s_ldiappstilp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STILP(Arm64RegisterW Wt1, Arm64RegisterW Wt2, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STILP(Wt1, Wt2, dst));
    /// <summary>
    /// Store-release ordered pair of registers.
    /// </summary>
    /// <remarks><code>STILP Xt1, Xt2, [Xn|SP, #-16]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STILP_64ss_ldiappstilp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STILP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64ImmediateMemoryAccessor.PreIncrement dst)
         => AddInstruction(Arm64InstructionFactory.STILP(Xt1, Xt2, dst));
    /// <summary>
    /// Store-release ordered pair of registers.
    /// </summary>
    /// <remarks><code>STILP Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STILP_64s_ldiappstilp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STILP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STILP(Xt1, Xt2, dst));
    /// <summary>
    /// Store LORelease register.
    /// </summary>
    /// <remarks><code>STLLR Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STLLR_sl32_ldstord), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STLLR(Arm64RegisterW Wt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STLLR(Wt, dst));
    /// <summary>
    /// Store LORelease register.
    /// </summary>
    /// <remarks><code>STLLR Xt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STLLR_sl64_ldstord), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STLLR(Arm64RegisterX Xt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STLLR(Xt, dst));
    /// <summary>
    /// Store LORelease register byte.
    /// </summary>
    /// <remarks><code>STLLRB Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STLLRB_sl32_ldstord), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STLLRB(Arm64RegisterW Wt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STLLRB(Wt, dst));
    /// <summary>
    /// Store LORelease register halfword.
    /// </summary>
    /// <remarks><code>STLLRH Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STLLRH_sl32_ldstord), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STLLRH(Arm64RegisterW Wt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STLLRH(Wt, dst));
    /// <summary>
    /// Store-release register.
    /// </summary>
    /// <remarks><code>STLR Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STLR_sl32_ldstord), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STLR(Arm64RegisterW Wt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STLR(Wt, dst));
    /// <summary>
    /// Store-release register.
    /// </summary>
    /// <remarks><code>STLR Xt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STLR_sl64_ldstord), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STLR(Arm64RegisterX Xt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STLR(Xt, dst));
    /// <summary>
    /// Store-release register.
    /// </summary>
    /// <remarks><code>STLR Wt, [Xn|SP, #-4]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STLR_32s_ldapstl_writeback), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STLR(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor.PreIncrement dst)
         => AddInstruction(Arm64InstructionFactory.STLR(Wt, dst));
    /// <summary>
    /// Store-release register.
    /// </summary>
    /// <remarks><code>STLR Xt, [Xn|SP, #-8]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STLR_64s_ldapstl_writeback), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STLR(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor.PreIncrement dst)
         => AddInstruction(Arm64InstructionFactory.STLR(Xt, dst));
    /// <summary>
    /// Store-release register byte.
    /// </summary>
    /// <remarks><code>STLRB Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STLRB_sl32_ldstord), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STLRB(Arm64RegisterW Wt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STLRB(Wt, dst));
    /// <summary>
    /// Store-release register halfword.
    /// </summary>
    /// <remarks><code>STLRH Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STLRH_sl32_ldstord), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STLRH(Arm64RegisterW Wt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STLRH(Wt, dst));
    /// <summary>
    /// Store-release unprivileged exclusive register.
    /// </summary>
    /// <remarks><code>STLTXR Ws, Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STLTXR_sr32_ldstexclr_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STLTXR(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STLTXR(Ws, Wt, dst));
    /// <summary>
    /// Store-release unprivileged exclusive register.
    /// </summary>
    /// <remarks><code>STLTXR Ws, Xt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STLTXR_sr64_ldstexclr_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STLTXR(Arm64RegisterW Ws, Arm64RegisterX Xt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STLTXR(Ws, Xt, dst));
    /// <summary>
    /// Store-release register (unscaled).
    /// </summary>
    /// <remarks><code>STLUR Wt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STLUR_32_ldapstl_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STLUR(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STLUR(Wt, dst));
    /// <summary>
    /// Store-release register (unscaled).
    /// </summary>
    /// <remarks><code>STLUR Xt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STLUR_64_ldapstl_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STLUR(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STLUR(Xt, dst));
    /// <summary>
    /// Store-release register byte (unscaled).
    /// </summary>
    /// <remarks><code>STLURB Wt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STLURB_32_ldapstl_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STLURB(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STLURB(Wt, dst));
    /// <summary>
    /// Store-release register halfword (unscaled).
    /// </summary>
    /// <remarks><code>STLURH Wt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STLURH_32_ldapstl_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STLURH(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STLURH(Wt, dst));
    /// <summary>
    /// Store-release exclusive pair of registers.
    /// </summary>
    /// <remarks><code>STLXP Ws, Wt1, Wt2, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STLXP_sp32_ldstexclp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STLXP(Arm64RegisterW Ws, Arm64RegisterW Wt1, Arm64RegisterW Wt2, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STLXP(Ws, Wt1, Wt2, dst));
    /// <summary>
    /// Store-release exclusive pair of registers.
    /// </summary>
    /// <remarks><code>STLXP Ws, Xt1, Xt2, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STLXP_sp64_ldstexclp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STLXP(Arm64RegisterW Ws, Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STLXP(Ws, Xt1, Xt2, dst));
    /// <summary>
    /// Store-release exclusive register.
    /// </summary>
    /// <remarks><code>STLXR Ws, Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STLXR_sr32_ldstexclr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STLXR(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STLXR(Ws, Wt, dst));
    /// <summary>
    /// Store-release exclusive register.
    /// </summary>
    /// <remarks><code>STLXR Ws, Xt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STLXR_sr64_ldstexclr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STLXR(Arm64RegisterW Ws, Arm64RegisterX Xt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STLXR(Ws, Xt, dst));
    /// <summary>
    /// Store-release exclusive register byte.
    /// </summary>
    /// <remarks><code>STLXRB Ws, Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STLXRB_sr32_ldstexclr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STLXRB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STLXRB(Ws, Wt, dst));
    /// <summary>
    /// Store-release exclusive register halfword.
    /// </summary>
    /// <remarks><code>STLXRH Ws, Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STLXRH_sr32_ldstexclr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STLXRH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STLXRH(Ws, Wt, dst));
    /// <summary>
    /// Store pair of registers, with non-temporal hint.
    /// </summary>
    /// <remarks><code>STNP Wt1, Wt2, [Xn|SP{, #imm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STNP_32_ldstnapair_offs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STNP(Arm64RegisterW Wt1, Arm64RegisterW Wt2, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STNP(Wt1, Wt2, dst));
    /// <summary>
    /// Store pair of registers, with non-temporal hint.
    /// </summary>
    /// <remarks><code>STNP Xt1, Xt2, [Xn|SP{, #imm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STNP_64_ldstnapair_offs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STNP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STNP(Xt1, Xt2, dst));
    /// <summary>
    /// Store pair of registers.
    /// </summary>
    /// <remarks><code>STP Wt1, Wt2, [Xn|SP], #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STP_32_ldstpair_post), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STP(Arm64RegisterW Wt1, Arm64RegisterW Wt2, Arm64BaseMemoryAccessor dst, int imm)
         => AddInstruction(Arm64InstructionFactory.STP(Wt1, Wt2, dst, imm));
    /// <summary>
    /// Store pair of registers.
    /// </summary>
    /// <remarks><code>STP Xt1, Xt2, [Xn|SP], #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STP_64_ldstpair_post), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor dst, int imm)
         => AddInstruction(Arm64InstructionFactory.STP(Xt1, Xt2, dst, imm));
    /// <summary>
    /// Store pair of registers.
    /// </summary>
    /// <remarks><code>STP Wt1, Wt2, [Xn|SP, #imm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STP_32_ldstpair_pre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STP(Arm64RegisterW Wt1, Arm64RegisterW Wt2, Arm64ImmediateMemoryAccessor.PreIncrement dst)
         => AddInstruction(Arm64InstructionFactory.STP(Wt1, Wt2, dst));
    /// <summary>
    /// Store pair of registers.
    /// </summary>
    /// <remarks><code>STP Xt1, Xt2, [Xn|SP, #imm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STP_64_ldstpair_pre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64ImmediateMemoryAccessor.PreIncrement dst)
         => AddInstruction(Arm64InstructionFactory.STP(Xt1, Xt2, dst));
    /// <summary>
    /// Store pair of registers.
    /// </summary>
    /// <remarks><code>STP Wt1, Wt2, [Xn|SP{, #imm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STP_32_ldstpair_off), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STP(Arm64RegisterW Wt1, Arm64RegisterW Wt2, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STP(Wt1, Wt2, dst));
    /// <summary>
    /// Store pair of registers.
    /// </summary>
    /// <remarks><code>STP Xt1, Xt2, [Xn|SP{, #imm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STP_64_ldstpair_off), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STP(Xt1, Xt2, dst));
    /// <summary>
    /// Store register (immediate).
    /// </summary>
    /// <remarks><code>STR Wt, [Xn|SP], #simm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_32_ldst_immpost), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STR(Arm64RegisterW Wt, Arm64BaseMemoryAccessor dst, short simm)
         => AddInstruction(Arm64InstructionFactory.STR(Wt, dst, simm));
    /// <summary>
    /// Store register (immediate).
    /// </summary>
    /// <remarks><code>STR Xt, [Xn|SP], #simm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_64_ldst_immpost), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STR(Arm64RegisterX Xt, Arm64BaseMemoryAccessor dst, short simm)
         => AddInstruction(Arm64InstructionFactory.STR(Xt, dst, simm));
    /// <summary>
    /// Store register (immediate).
    /// </summary>
    /// <remarks><code>STR Wt, [Xn|SP, #simm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_32_ldst_immpre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STR(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor.PreIncrement dst)
         => AddInstruction(Arm64InstructionFactory.STR(Wt, dst));
    /// <summary>
    /// Store register (immediate).
    /// </summary>
    /// <remarks><code>STR Xt, [Xn|SP, #simm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_64_ldst_immpre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STR(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor.PreIncrement dst)
         => AddInstruction(Arm64InstructionFactory.STR(Xt, dst));
    /// <summary>
    /// Store register (immediate).
    /// </summary>
    /// <remarks><code>STR Wt, [Xn|SP{, #pimm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_32_ldst_pos), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STR(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STR(Wt, dst));
    /// <summary>
    /// Store register (immediate).
    /// </summary>
    /// <remarks><code>STR Xt, [Xn|SP{, #pimm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_64_ldst_pos), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STR(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STR(Xt, dst));
    /// <summary>
    /// Store register (register).
    /// </summary>
    /// <remarks><code>STR Wt, [Xn|SP, (Wm|Xm){, extend, {amount}}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_32_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STR(Arm64RegisterW Wt, Arm64RegisterXExtendMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STR(Wt, dst));
    /// <summary>
    /// Store register (register).
    /// </summary>
    /// <remarks><code>STR Wt, [Xn|SP, (Wm|Xm){, extend, {amount}}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_32_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STR(Arm64RegisterW Wt, Arm64RegisterWExtendMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STR(Wt, dst));
    /// <summary>
    /// Store register (register).
    /// </summary>
    /// <remarks><code>STR Xt, [Xn|SP, (Wm|Xm){, extend, {amount}}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_64_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STR(Arm64RegisterX Xt, Arm64RegisterXExtendMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STR(Xt, dst));
    /// <summary>
    /// Store register (register).
    /// </summary>
    /// <remarks><code>STR Xt, [Xn|SP, (Wm|Xm){, extend, {amount}}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STR_64_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STR(Arm64RegisterX Xt, Arm64RegisterWExtendMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STR(Xt, dst));
    /// <summary>
    /// Store register byte (register).
    /// </summary>
    /// <remarks><code>STRB Wt, [Xn|SP, (Wm|Xm), extend{, amount}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STRB_32b_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STRB(Arm64RegisterW Wt, Arm64RegisterXExtendMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STRB(Wt, dst));
    /// <summary>
    /// Store register byte (register).
    /// </summary>
    /// <remarks><code>STRB Wt, [Xn|SP, (Wm|Xm), extend{, amount}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STRB_32b_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STRB(Arm64RegisterW Wt, Arm64RegisterWExtendMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STRB(Wt, dst));
    /// <summary>
    /// Store register byte (immediate).
    /// </summary>
    /// <remarks><code>STRB Wt, [Xn|SP], #simm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STRB_32_ldst_immpost), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STRB(Arm64RegisterW Wt, Arm64BaseMemoryAccessor dst, short simm)
         => AddInstruction(Arm64InstructionFactory.STRB(Wt, dst, simm));
    /// <summary>
    /// Store register byte (immediate).
    /// </summary>
    /// <remarks><code>STRB Wt, [Xn|SP, #simm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STRB_32_ldst_immpre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STRB(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor.PreIncrement dst)
         => AddInstruction(Arm64InstructionFactory.STRB(Wt, dst));
    /// <summary>
    /// Store register byte (immediate).
    /// </summary>
    /// <remarks><code>STRB Wt, [Xn|SP{, #pimm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STRB_32_ldst_pos), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STRB(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STRB(Wt, dst));
    /// <summary>
    /// Store register halfword (immediate).
    /// </summary>
    /// <remarks><code>STRH Wt, [Xn|SP], #simm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STRH_32_ldst_immpost), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STRH(Arm64RegisterW Wt, Arm64BaseMemoryAccessor dst, short simm)
         => AddInstruction(Arm64InstructionFactory.STRH(Wt, dst, simm));
    /// <summary>
    /// Store register halfword (immediate).
    /// </summary>
    /// <remarks><code>STRH Wt, [Xn|SP, #simm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STRH_32_ldst_immpre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STRH(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor.PreIncrement dst)
         => AddInstruction(Arm64InstructionFactory.STRH(Wt, dst));
    /// <summary>
    /// Store register halfword (immediate).
    /// </summary>
    /// <remarks><code>STRH Wt, [Xn|SP{, #pimm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STRH_32_ldst_pos), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STRH(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STRH(Wt, dst));
    /// <summary>
    /// Store register halfword (register).
    /// </summary>
    /// <remarks><code>STRH Wt, [Xn|SP, (Wm|Xm){, extend, {amount}}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STRH_32_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STRH(Arm64RegisterW Wt, Arm64RegisterXExtendMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STRH(Wt, dst));
    /// <summary>
    /// Store register halfword (register).
    /// </summary>
    /// <remarks><code>STRH Wt, [Xn|SP, (Wm|Xm){, extend, {amount}}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STRH_32_ldst_regoff), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STRH(Arm64RegisterW Wt, Arm64RegisterWExtendMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STRH(Wt, dst));
    /// <summary>
    /// Atomic bit set on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STSET Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSET_ldset_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STSET(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STSET(Ws, dst));
    /// <summary>
    /// Atomic bit set on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STSET Xs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSET_ldset_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STSET(Arm64RegisterX Xs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STSET(Xs, dst));
    /// <summary>
    /// Atomic bit set on byte in memory, without return.
    /// </summary>
    /// <remarks><code>STSETB Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSETB_ldsetb_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STSETB(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STSETB(Ws, dst));
    /// <summary>
    /// Atomic bit set on halfword in memory, without return.
    /// </summary>
    /// <remarks><code>STSETH Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSETH_ldseth_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STSETH(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STSETH(Ws, dst));
    /// <summary>
    /// Atomic bit set on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STSETL Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSETL_ldsetl_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STSETL(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STSETL(Ws, dst));
    /// <summary>
    /// Atomic bit set on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STSETL Xs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSETL_ldsetl_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STSETL(Arm64RegisterX Xs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STSETL(Xs, dst));
    /// <summary>
    /// Atomic bit set on byte in memory, without return.
    /// </summary>
    /// <remarks><code>STSETLB Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSETLB_ldsetlb_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STSETLB(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STSETLB(Ws, dst));
    /// <summary>
    /// Atomic bit set on halfword in memory, without return.
    /// </summary>
    /// <remarks><code>STSETLH Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSETLH_ldsetlh_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STSETLH(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STSETLH(Ws, dst));
    /// <summary>
    /// Atomic signed maximum on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STSMAX Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSMAX_ldsmax_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STSMAX(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STSMAX(Ws, dst));
    /// <summary>
    /// Atomic signed maximum on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STSMAX Xs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSMAX_ldsmax_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STSMAX(Arm64RegisterX Xs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STSMAX(Xs, dst));
    /// <summary>
    /// Atomic signed maximum on byte in memory, without return.
    /// </summary>
    /// <remarks><code>STSMAXB Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSMAXB_ldsmaxb_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STSMAXB(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STSMAXB(Ws, dst));
    /// <summary>
    /// Atomic signed maximum on halfword in memory, without return.
    /// </summary>
    /// <remarks><code>STSMAXH Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSMAXH_ldsmaxh_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STSMAXH(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STSMAXH(Ws, dst));
    /// <summary>
    /// Atomic signed maximum on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STSMAXL Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSMAXL_ldsmaxl_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STSMAXL(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STSMAXL(Ws, dst));
    /// <summary>
    /// Atomic signed maximum on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STSMAXL Xs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSMAXL_ldsmaxl_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STSMAXL(Arm64RegisterX Xs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STSMAXL(Xs, dst));
    /// <summary>
    /// Atomic signed maximum on byte in memory, without return.
    /// </summary>
    /// <remarks><code>STSMAXLB Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSMAXLB_ldsmaxlb_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STSMAXLB(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STSMAXLB(Ws, dst));
    /// <summary>
    /// Atomic signed maximum on halfword in memory, without return.
    /// </summary>
    /// <remarks><code>STSMAXLH Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSMAXLH_ldsmaxlh_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STSMAXLH(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STSMAXLH(Ws, dst));
    /// <summary>
    /// Atomic signed minimum on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STSMIN Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSMIN_ldsmin_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STSMIN(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STSMIN(Ws, dst));
    /// <summary>
    /// Atomic signed minimum on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STSMIN Xs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSMIN_ldsmin_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STSMIN(Arm64RegisterX Xs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STSMIN(Xs, dst));
    /// <summary>
    /// Atomic signed minimum on byte in memory, without return.
    /// </summary>
    /// <remarks><code>STSMINB Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSMINB_ldsminb_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STSMINB(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STSMINB(Ws, dst));
    /// <summary>
    /// Atomic signed minimum on halfword in memory, without return.
    /// </summary>
    /// <remarks><code>STSMINH Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSMINH_ldsminh_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STSMINH(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STSMINH(Ws, dst));
    /// <summary>
    /// Atomic signed minimum on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STSMINL Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSMINL_ldsminl_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STSMINL(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STSMINL(Ws, dst));
    /// <summary>
    /// Atomic signed minimum on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STSMINL Xs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSMINL_ldsminl_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STSMINL(Arm64RegisterX Xs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STSMINL(Xs, dst));
    /// <summary>
    /// Atomic signed minimum on byte in memory, without return.
    /// </summary>
    /// <remarks><code>STSMINLB Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSMINLB_ldsminlb_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STSMINLB(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STSMINLB(Ws, dst));
    /// <summary>
    /// Atomic signed minimum on halfword in memory, without return.
    /// </summary>
    /// <remarks><code>STSMINLH Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSMINLH_ldsminlh_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STSMINLH(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STSMINLH(Ws, dst));
    /// <summary>
    /// Atomic add unprivileged, without return.
    /// </summary>
    /// <remarks><code>STTADD Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STTADD_ldtadd_32_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STTADD(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STTADD(Ws, dst));
    /// <summary>
    /// Atomic add unprivileged, without return.
    /// </summary>
    /// <remarks><code>STTADD Xs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STTADD_ldtadd_64_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STTADD(Arm64RegisterX Xs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STTADD(Xs, dst));
    /// <summary>
    /// Atomic add unprivileged, without return.
    /// </summary>
    /// <remarks><code>STTADDL Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STTADDL_ldtaddl_32_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STTADDL(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STTADDL(Ws, dst));
    /// <summary>
    /// Atomic add unprivileged, without return.
    /// </summary>
    /// <remarks><code>STTADDL Xs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STTADDL_ldtaddl_64_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STTADDL(Arm64RegisterX Xs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STTADDL(Xs, dst));
    /// <summary>
    /// Atomic bit clear unprivileged, without return.
    /// </summary>
    /// <remarks><code>STTCLR Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STTCLR_ldtclr_32_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STTCLR(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STTCLR(Ws, dst));
    /// <summary>
    /// Atomic bit clear unprivileged, without return.
    /// </summary>
    /// <remarks><code>STTCLR Xs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STTCLR_ldtclr_64_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STTCLR(Arm64RegisterX Xs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STTCLR(Xs, dst));
    /// <summary>
    /// Atomic bit clear unprivileged, without return.
    /// </summary>
    /// <remarks><code>STTCLRL Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STTCLRL_ldtclrl_32_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STTCLRL(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STTCLRL(Ws, dst));
    /// <summary>
    /// Atomic bit clear unprivileged, without return.
    /// </summary>
    /// <remarks><code>STTCLRL Xs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STTCLRL_ldtclrl_64_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STTCLRL(Arm64RegisterX Xs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STTCLRL(Xs, dst));
    /// <summary>
    /// Store unprivileged pair of registers, with non-temporal hint.
    /// </summary>
    /// <remarks><code>STTNP Xt1, Xt2, [Xn|SP{, #imm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STTNP_64_ldstnapair_offs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STTNP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STTNP(Xt1, Xt2, dst));
    /// <summary>
    /// Store unprivileged pair of registers.
    /// </summary>
    /// <remarks><code>STTP Xt1, Xt2, [Xn|SP], #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STTP_64_ldstpair_post), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STTP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor dst, int imm)
         => AddInstruction(Arm64InstructionFactory.STTP(Xt1, Xt2, dst, imm));
    /// <summary>
    /// Store unprivileged pair of registers.
    /// </summary>
    /// <remarks><code>STTP Xt1, Xt2, [Xn|SP, #imm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STTP_64_ldstpair_pre), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STTP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64ImmediateMemoryAccessor.PreIncrement dst)
         => AddInstruction(Arm64InstructionFactory.STTP(Xt1, Xt2, dst));
    /// <summary>
    /// Store unprivileged pair of registers.
    /// </summary>
    /// <remarks><code>STTP Xt1, Xt2, [Xn|SP{, #imm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STTP_64_ldstpair_off), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STTP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STTP(Xt1, Xt2, dst));
    /// <summary>
    /// Store register (unprivileged).
    /// </summary>
    /// <remarks><code>STTR Wt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STTR_32_ldst_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STTR(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STTR(Wt, dst));
    /// <summary>
    /// Store register (unprivileged).
    /// </summary>
    /// <remarks><code>STTR Xt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STTR_64_ldst_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STTR(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STTR(Xt, dst));
    /// <summary>
    /// Store register byte (unprivileged).
    /// </summary>
    /// <remarks><code>STTRB Wt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STTRB_32_ldst_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STTRB(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STTRB(Wt, dst));
    /// <summary>
    /// Store register halfword (unprivileged).
    /// </summary>
    /// <remarks><code>STTRH Wt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STTRH_32_ldst_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STTRH(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STTRH(Wt, dst));
    /// <summary>
    /// Atomic bit set unprivileged, without return.
    /// </summary>
    /// <remarks><code>STTSET Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STTSET_ldtset_32_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STTSET(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STTSET(Ws, dst));
    /// <summary>
    /// Atomic bit set unprivileged, without return.
    /// </summary>
    /// <remarks><code>STTSET Xs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STTSET_ldtset_64_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STTSET(Arm64RegisterX Xs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STTSET(Xs, dst));
    /// <summary>
    /// Atomic bit set unprivileged, without return.
    /// </summary>
    /// <remarks><code>STTSETL Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STTSETL_ldtsetl_32_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STTSETL(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STTSETL(Ws, dst));
    /// <summary>
    /// Atomic bit set unprivileged, without return.
    /// </summary>
    /// <remarks><code>STTSETL Xs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STTSETL_ldtsetl_64_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STTSETL(Arm64RegisterX Xs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STTSETL(Xs, dst));
    /// <summary>
    /// Store unprivileged exclusive register.
    /// </summary>
    /// <remarks><code>STTXR Ws, Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STTXR_sr32_ldstexclr_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STTXR(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STTXR(Ws, Wt, dst));
    /// <summary>
    /// Store unprivileged exclusive register.
    /// </summary>
    /// <remarks><code>STTXR Ws, Xt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STTXR_sr64_ldstexclr_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STTXR(Arm64RegisterW Ws, Arm64RegisterX Xt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STTXR(Ws, Xt, dst));
    /// <summary>
    /// Atomic unsigned maximum on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STUMAX Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STUMAX_ldumax_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STUMAX(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STUMAX(Ws, dst));
    /// <summary>
    /// Atomic unsigned maximum on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STUMAX Xs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STUMAX_ldumax_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STUMAX(Arm64RegisterX Xs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STUMAX(Xs, dst));
    /// <summary>
    /// Atomic unsigned maximum on byte in memory, without return.
    /// </summary>
    /// <remarks><code>STUMAXB Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STUMAXB_ldumaxb_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STUMAXB(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STUMAXB(Ws, dst));
    /// <summary>
    /// Atomic unsigned maximum on halfword in memory, without return.
    /// </summary>
    /// <remarks><code>STUMAXH Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STUMAXH_ldumaxh_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STUMAXH(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STUMAXH(Ws, dst));
    /// <summary>
    /// Atomic unsigned maximum on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STUMAXL Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STUMAXL_ldumaxl_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STUMAXL(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STUMAXL(Ws, dst));
    /// <summary>
    /// Atomic unsigned maximum on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STUMAXL Xs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STUMAXL_ldumaxl_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STUMAXL(Arm64RegisterX Xs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STUMAXL(Xs, dst));
    /// <summary>
    /// Atomic unsigned maximum on byte in memory, without return.
    /// </summary>
    /// <remarks><code>STUMAXLB Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STUMAXLB_ldumaxlb_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STUMAXLB(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STUMAXLB(Ws, dst));
    /// <summary>
    /// Atomic unsigned maximum on halfword in memory, without return.
    /// </summary>
    /// <remarks><code>STUMAXLH Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STUMAXLH_ldumaxlh_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STUMAXLH(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STUMAXLH(Ws, dst));
    /// <summary>
    /// Atomic unsigned minimum on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STUMIN Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STUMIN_ldumin_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STUMIN(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STUMIN(Ws, dst));
    /// <summary>
    /// Atomic unsigned minimum on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STUMIN Xs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STUMIN_ldumin_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STUMIN(Arm64RegisterX Xs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STUMIN(Xs, dst));
    /// <summary>
    /// Atomic unsigned minimum on byte in memory, without return.
    /// </summary>
    /// <remarks><code>STUMINB Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STUMINB_lduminb_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STUMINB(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STUMINB(Ws, dst));
    /// <summary>
    /// Atomic unsigned minimum on halfword in memory, without return.
    /// </summary>
    /// <remarks><code>STUMINH Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STUMINH_lduminh_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STUMINH(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STUMINH(Ws, dst));
    /// <summary>
    /// Atomic unsigned minimum on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STUMINL Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STUMINL_lduminl_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STUMINL(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STUMINL(Ws, dst));
    /// <summary>
    /// Atomic unsigned minimum on word or doubleword in memory, without return.
    /// </summary>
    /// <remarks><code>STUMINL Xs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STUMINL_lduminl_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STUMINL(Arm64RegisterX Xs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STUMINL(Xs, dst));
    /// <summary>
    /// Atomic unsigned minimum on byte in memory, without return.
    /// </summary>
    /// <remarks><code>STUMINLB Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STUMINLB_lduminlb_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STUMINLB(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STUMINLB(Ws, dst));
    /// <summary>
    /// Atomic unsigned minimum on halfword in memory, without return.
    /// </summary>
    /// <remarks><code>STUMINLH Ws, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STUMINLH_lduminlh_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STUMINLH(Arm64RegisterW Ws, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STUMINLH(Ws, dst));
    /// <summary>
    /// Store register (unscaled).
    /// </summary>
    /// <remarks><code>STUR Wt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STUR_32_ldst_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STUR(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STUR(Wt, dst));
    /// <summary>
    /// Store register (unscaled).
    /// </summary>
    /// <remarks><code>STUR Xt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STUR_64_ldst_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STUR(Arm64RegisterX Xt, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STUR(Xt, dst));
    /// <summary>
    /// Store register byte (unscaled).
    /// </summary>
    /// <remarks><code>STURB Wt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STURB_32_ldst_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STURB(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STURB(Wt, dst));
    /// <summary>
    /// Store register halfword (unscaled).
    /// </summary>
    /// <remarks><code>STURH Wt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STURH_32_ldst_unscaled), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STURH(Arm64RegisterW Wt, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STURH(Wt, dst));
    /// <summary>
    /// Store exclusive pair of registers.
    /// </summary>
    /// <remarks><code>STXP Ws, Wt1, Wt2, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STXP_sp32_ldstexclp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STXP(Arm64RegisterW Ws, Arm64RegisterW Wt1, Arm64RegisterW Wt2, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STXP(Ws, Wt1, Wt2, dst));
    /// <summary>
    /// Store exclusive pair of registers.
    /// </summary>
    /// <remarks><code>STXP Ws, Xt1, Xt2, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STXP_sp64_ldstexclp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STXP(Arm64RegisterW Ws, Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STXP(Ws, Xt1, Xt2, dst));
    /// <summary>
    /// Store exclusive register.
    /// </summary>
    /// <remarks><code>STXR Ws, Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STXR_sr32_ldstexclr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STXR(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STXR(Ws, Wt, dst));
    /// <summary>
    /// Store exclusive register.
    /// </summary>
    /// <remarks><code>STXR Ws, Xt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STXR_sr64_ldstexclr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STXR(Arm64RegisterW Ws, Arm64RegisterX Xt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STXR(Ws, Xt, dst));
    /// <summary>
    /// Store exclusive register byte.
    /// </summary>
    /// <remarks><code>STXRB Ws, Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STXRB_sr32_ldstexclr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STXRB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STXRB(Ws, Wt, dst));
    /// <summary>
    /// Store exclusive register halfword.
    /// </summary>
    /// <remarks><code>STXRH Ws, Wt, [Xn|SP{, #0}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STXRH_sr32_ldstexclr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STXRH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STXRH(Ws, Wt, dst));
    /// <summary>
    /// Store Allocation Tags, zeroing.
    /// </summary>
    /// <remarks><code>STZ2G Xt|SP, [Xn|SP], #simm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STZ2G_64spost_ldsttags), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STZ2G(Arm64RegisterXOrSP Xt_SP, Arm64BaseMemoryAccessor dst, int simm)
         => AddInstruction(Arm64InstructionFactory.STZ2G(Xt_SP, dst, simm));
    /// <summary>
    /// Store Allocation Tags, zeroing.
    /// </summary>
    /// <remarks><code>STZ2G Xt|SP, [Xn|SP, #simm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STZ2G_64spre_ldsttags), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STZ2G(Arm64RegisterXOrSP Xt_SP, Arm64ImmediateMemoryAccessor.PreIncrement dst)
         => AddInstruction(Arm64InstructionFactory.STZ2G(Xt_SP, dst));
    /// <summary>
    /// Store Allocation Tags, zeroing.
    /// </summary>
    /// <remarks><code>STZ2G Xt|SP, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STZ2G_64soffset_ldsttags), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STZ2G(Arm64RegisterXOrSP Xt_SP, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STZ2G(Xt_SP, dst));
    /// <summary>
    /// Store Allocation Tag, zeroing.
    /// </summary>
    /// <remarks><code>STZG Xt|SP, [Xn|SP], #simm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STZG_64spost_ldsttags), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STZG(Arm64RegisterXOrSP Xt_SP, Arm64BaseMemoryAccessor dst, int simm)
         => AddInstruction(Arm64InstructionFactory.STZG(Xt_SP, dst, simm));
    /// <summary>
    /// Store Allocation Tag, zeroing.
    /// </summary>
    /// <remarks><code>STZG Xt|SP, [Xn|SP, #simm]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STZG_64spre_ldsttags), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STZG(Arm64RegisterXOrSP Xt_SP, Arm64ImmediateMemoryAccessor.PreIncrement dst)
         => AddInstruction(Arm64InstructionFactory.STZG(Xt_SP, dst));
    /// <summary>
    /// Store Allocation Tag, zeroing.
    /// </summary>
    /// <remarks><code>STZG Xt|SP, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STZG_64soffset_ldsttags), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STZG(Arm64RegisterXOrSP Xt_SP, Arm64ImmediateMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STZG(Xt_SP, dst));
    /// <summary>
    /// Store Allocation Tag and zero multiple.
    /// </summary>
    /// <remarks><code>STZGM Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STZGM_64bulk_ldsttags), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STZGM(Arm64RegisterX Xt, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STZGM(Xt, dst));
    /// <summary>
    /// Subtract extended and scaled register.
    /// </summary>
    /// <remarks><code>SUB Wd|WSP, Wn|WSP, Wm {, extend, {#amount}}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUB_32_addsub_ext), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUB(Arm64RegisterWOrWSP Wd_WSP, Arm64RegisterWOrWSP Wn_WSP, Arm64RegisterW Wm, Arm64ExtendKind extend = Arm64ExtendKind.LSL, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.SUB(Wd_WSP, Wn_WSP, Wm, extend, amount));
    /// <summary>
    /// Subtract extended and scaled register.
    /// </summary>
    /// <remarks><code>SUB Xd|SP, Xn|SP, Rm {, extend, {#amount}}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUB_64_addsub_ext), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUB(Arm64RegisterXOrSP Xd_SP, Arm64RegisterXOrSP Xn_SP, Arm64RegisterX Rm, Arm64ExtendXKind extend = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.SUB(Xd_SP, Xn_SP, Rm, extend, amount));
    /// <summary>
    /// Subtract extended and scaled register.
    /// </summary>
    /// <remarks><code>SUB Xd|SP, Xn|SP, Rm {, extend, {#amount}}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUB_64_addsub_ext), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUB(Arm64RegisterXOrSP Xd_SP, Arm64RegisterXOrSP Xn_SP, Arm64RegisterW Rm, Arm64ExtendWKind extend = default, int amount = default)
         => AddInstruction(Arm64InstructionFactory.SUB(Xd_SP, Xn_SP, Rm, extend, amount));
    /// <summary>
    /// Subtract immediate value.
    /// </summary>
    /// <remarks><code>SUB Wd|WSP, Wn|WSP, #imm {, shift}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUB_32_addsub_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUB(Arm64RegisterWOrWSP Wd_WSP, Arm64RegisterWOrWSP Wn_WSP, ushort imm, IArm64ShiftKind.LSL shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.SUB(Wd_WSP, Wn_WSP, imm, shift, amount));
    /// <summary>
    /// Subtract immediate value.
    /// </summary>
    /// <remarks><code>SUB Xd|SP, Xn|SP, #imm {, shift}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUB_64_addsub_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUB(Arm64RegisterXOrSP Xd_SP, Arm64RegisterXOrSP Xn_SP, ushort imm, IArm64ShiftKind.LSL shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.SUB(Xd_SP, Xn_SP, imm, shift, amount));
    /// <summary>
    /// Subtract optionally-shifted register.
    /// </summary>
    /// <remarks><code>SUB Wd, Wn, Wm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUB_32_addsub_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUB(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64ShiftKind3 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.SUB(Wd, Wn, Wm, shift, amount));
    /// <summary>
    /// Subtract optionally-shifted register.
    /// </summary>
    /// <remarks><code>SUB Xd, Xn, Xm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUB_64_addsub_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUB(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm, Arm64ShiftKind3 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.SUB(Xd, Xn, Xm, shift, amount));
    /// <summary>
    /// Subtract with tag.
    /// </summary>
    /// <remarks><code>SUBG Xd|SP, Xn|SP, #uimm6, #uimm4</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBG_64_addsub_immtags), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUBG(Arm64RegisterXOrSP Xd_SP, Arm64RegisterXOrSP Xn_SP, uint uimm6, byte uimm4)
         => AddInstruction(Arm64InstructionFactory.SUBG(Xd_SP, Xn_SP, uimm6, uimm4));
    /// <summary>
    /// Subtract pointer.
    /// </summary>
    /// <remarks><code>SUBP Xd, Xn|SP, Xm|SP</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBP_64s_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUBP(Arm64RegisterX Xd, Arm64RegisterXOrSP Xn_SP, Arm64RegisterXOrSP Xm_SP)
         => AddInstruction(Arm64InstructionFactory.SUBP(Xd, Xn_SP, Xm_SP));
    /// <summary>
    /// Subtract pointer, setting flags.
    /// </summary>
    /// <remarks><code>SUBPS Xd, Xn|SP, Xm|SP</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBPS_64s_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUBPS(Arm64RegisterX Xd, Arm64RegisterXOrSP Xn_SP, Arm64RegisterXOrSP Xm_SP)
         => AddInstruction(Arm64InstructionFactory.SUBPS(Xd, Xn_SP, Xm_SP));
    /// <summary>
    /// Subtract checked pointer.
    /// </summary>
    /// <remarks><code>SUBPT Xd|SP, Xn|SP, Xm {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBPT_64_addsub_pt), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUBPT(Arm64RegisterXOrSP Xd_SP, Arm64RegisterXOrSP Xn_SP, Arm64RegisterX Xm, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.SUBPT(Xd_SP, Xn_SP, Xm, LSL, amount));
    /// <summary>
    /// Subtract extended and scaled register, setting flags.
    /// </summary>
    /// <remarks><code>SUBS Wd, Wn|WSP, Wm {, extend, {#amount}}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBS_32s_addsub_ext), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUBS(Arm64RegisterW Wd, Arm64RegisterWOrWSP Wn_WSP, Arm64RegisterW Wm, Arm64ExtendKind extend = Arm64ExtendKind.LSL, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.SUBS(Wd, Wn_WSP, Wm, extend, amount));
    /// <summary>
    /// Subtract extended and scaled register, setting flags.
    /// </summary>
    /// <remarks><code>SUBS Xd, Xn|SP, Rm {, extend, {#amount}}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBS_64s_addsub_ext), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUBS(Arm64RegisterX Xd, Arm64RegisterXOrSP Xn_SP, Arm64RegisterX Rm, Arm64ExtendXKind extend = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.SUBS(Xd, Xn_SP, Rm, extend, amount));
    /// <summary>
    /// Subtract extended and scaled register, setting flags.
    /// </summary>
    /// <remarks><code>SUBS Xd, Xn|SP, Rm {, extend, {#amount}}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBS_64s_addsub_ext), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUBS(Arm64RegisterX Xd, Arm64RegisterXOrSP Xn_SP, Arm64RegisterW Rm, Arm64ExtendWKind extend = default, int amount = default)
         => AddInstruction(Arm64InstructionFactory.SUBS(Xd, Xn_SP, Rm, extend, amount));
    /// <summary>
    /// Subtract immediate value, setting flags.
    /// </summary>
    /// <remarks><code>SUBS Wd, Wn|WSP, #imm {, shift}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBS_32s_addsub_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUBS(Arm64RegisterW Wd, Arm64RegisterWOrWSP Wn_WSP, ushort imm, IArm64ShiftKind.LSL shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.SUBS(Wd, Wn_WSP, imm, shift, amount));
    /// <summary>
    /// Subtract immediate value, setting flags.
    /// </summary>
    /// <remarks><code>SUBS Xd, Xn|SP, #imm {, shift}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBS_64s_addsub_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUBS(Arm64RegisterX Xd, Arm64RegisterXOrSP Xn_SP, ushort imm, IArm64ShiftKind.LSL shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.SUBS(Xd, Xn_SP, imm, shift, amount));
    /// <summary>
    /// Subtract optionally-shifted register, setting flags.
    /// </summary>
    /// <remarks><code>SUBS Wd, Wn, Wm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBS_32_addsub_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUBS(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64ShiftKind3 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.SUBS(Wd, Wn, Wm, shift, amount));
    /// <summary>
    /// Subtract optionally-shifted register, setting flags.
    /// </summary>
    /// <remarks><code>SUBS Xd, Xn, Xm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBS_64_addsub_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUBS(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm, Arm64ShiftKind3 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.SUBS(Xd, Xn, Xm, shift, amount));
    /// <summary>
    /// Swap word or doubleword in memory.
    /// </summary>
    /// <remarks><code>SWP Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWP_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWP(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWP(Ws, Wt, mem));
    /// <summary>
    /// Swap word or doubleword in memory.
    /// </summary>
    /// <remarks><code>SWP Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWP_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWP(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWP(Xs, Xt, mem));
    /// <summary>
    /// Swap word or doubleword in memory.
    /// </summary>
    /// <remarks><code>SWPA Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPA_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPA(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPA(Ws, Wt, mem));
    /// <summary>
    /// Swap word or doubleword in memory.
    /// </summary>
    /// <remarks><code>SWPA Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPA_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPA(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPA(Xs, Xt, mem));
    /// <summary>
    /// Swap byte in memory.
    /// </summary>
    /// <remarks><code>SWPAB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPAB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPAB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPAB(Ws, Wt, mem));
    /// <summary>
    /// Swap halfword in memory.
    /// </summary>
    /// <remarks><code>SWPAH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPAH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPAH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPAH(Ws, Wt, mem));
    /// <summary>
    /// Swap word or doubleword in memory.
    /// </summary>
    /// <remarks><code>SWPAL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPAL_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPAL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPAL(Ws, Wt, mem));
    /// <summary>
    /// Swap word or doubleword in memory.
    /// </summary>
    /// <remarks><code>SWPAL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPAL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPAL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPAL(Xs, Xt, mem));
    /// <summary>
    /// Swap byte in memory.
    /// </summary>
    /// <remarks><code>SWPALB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPALB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPALB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPALB(Ws, Wt, mem));
    /// <summary>
    /// Swap halfword in memory.
    /// </summary>
    /// <remarks><code>SWPALH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPALH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPALH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPALH(Ws, Wt, mem));
    /// <summary>
    /// Swap byte in memory.
    /// </summary>
    /// <remarks><code>SWPB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPB(Ws, Wt, mem));
    /// <summary>
    /// Swap halfword in memory.
    /// </summary>
    /// <remarks><code>SWPH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPH(Ws, Wt, mem));
    /// <summary>
    /// Swap word or doubleword in memory.
    /// </summary>
    /// <remarks><code>SWPL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPL_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPL(Ws, Wt, mem));
    /// <summary>
    /// Swap word or doubleword in memory.
    /// </summary>
    /// <remarks><code>SWPL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPL_64_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPL(Xs, Xt, mem));
    /// <summary>
    /// Swap byte in memory.
    /// </summary>
    /// <remarks><code>SWPLB Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPLB_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPLB(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPLB(Ws, Wt, mem));
    /// <summary>
    /// Swap halfword in memory.
    /// </summary>
    /// <remarks><code>SWPLH Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPLH_32_memop), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPLH(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPLH(Ws, Wt, mem));
    /// <summary>
    /// Swap quadword in memory.
    /// </summary>
    /// <remarks><code>SWPP Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPP_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPP(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPP(Xt1, Xt2, mem));
    /// <summary>
    /// Swap quadword in memory.
    /// </summary>
    /// <remarks><code>SWPPA Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPPA_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPPA(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPPA(Xt1, Xt2, mem));
    /// <summary>
    /// Swap quadword in memory.
    /// </summary>
    /// <remarks><code>SWPPAL Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPPAL_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPPAL(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPPAL(Xt1, Xt2, mem));
    /// <summary>
    /// Swap quadword in memory.
    /// </summary>
    /// <remarks><code>SWPPL Xt1, Xt2, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPPL_128_memop_128), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPPL(Arm64RegisterX Xt1, Arm64RegisterX Xt2, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPPL(Xt1, Xt2, mem));
    /// <summary>
    /// Swap unprivileged.
    /// </summary>
    /// <remarks><code>SWPT Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPT_32_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPT(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPT(Ws, Wt, mem));
    /// <summary>
    /// Swap unprivileged.
    /// </summary>
    /// <remarks><code>SWPT Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPT_64_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPT(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPT(Xs, Xt, mem));
    /// <summary>
    /// Swap unprivileged.
    /// </summary>
    /// <remarks><code>SWPTA Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPTA_32_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPTA(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPTA(Ws, Wt, mem));
    /// <summary>
    /// Swap unprivileged.
    /// </summary>
    /// <remarks><code>SWPTA Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPTA_64_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPTA(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPTA(Xs, Xt, mem));
    /// <summary>
    /// Swap unprivileged.
    /// </summary>
    /// <remarks><code>SWPTAL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPTAL_32_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPTAL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPTAL(Ws, Wt, mem));
    /// <summary>
    /// Swap unprivileged.
    /// </summary>
    /// <remarks><code>SWPTAL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPTAL_64_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPTAL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPTAL(Xs, Xt, mem));
    /// <summary>
    /// Swap unprivileged.
    /// </summary>
    /// <remarks><code>SWPTL Ws, Wt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPTL_32_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPTL(Arm64RegisterW Ws, Arm64RegisterW Wt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPTL(Ws, Wt, mem));
    /// <summary>
    /// Swap unprivileged.
    /// </summary>
    /// <remarks><code>SWPTL Xs, Xt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SWPTL_64_memop_unpriv), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SWPTL(Arm64RegisterX Xs, Arm64RegisterX Xt, Arm64BaseMemoryAccessor mem)
         => AddInstruction(Arm64InstructionFactory.SWPTL(Xs, Xt, mem));
    /// <summary>
    /// Signed extend byte.
    /// </summary>
    /// <remarks><code>SXTB Wd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SXTB_sbfm_32m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SXTB(Arm64RegisterW Wd, Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.SXTB(Wd, Wn));
    /// <summary>
    /// Signed extend byte.
    /// </summary>
    /// <remarks><code>SXTB Xd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SXTB_sbfm_64m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SXTB(Arm64RegisterX Xd, Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.SXTB(Xd, Wn));
    /// <summary>
    /// Sign extend halfword.
    /// </summary>
    /// <remarks><code>SXTH Wd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SXTH_sbfm_32m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SXTH(Arm64RegisterW Wd, Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.SXTH(Wd, Wn));
    /// <summary>
    /// Sign extend halfword.
    /// </summary>
    /// <remarks><code>SXTH Xd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SXTH_sbfm_64m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SXTH(Arm64RegisterX Xd, Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.SXTH(Xd, Wn));
    /// <summary>
    /// Sign extend word.
    /// </summary>
    /// <remarks><code>SXTW Xd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SXTW_sbfm_64m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SXTW(Arm64RegisterX Xd, Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.SXTW(Xd, Wn));
    /// <summary>
    /// Test bit and branch if nonzero.
    /// </summary>
    /// <remarks><code>TBNZ Rt, #imm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBNZ_only_testbranch), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TBNZ(Arm64RegisterXOrW Rt, byte imm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.TBNZ(Rt, imm, RecordLabelOffset(label, 24336)));
    /// <summary>
    /// Test bit and branch if zero.
    /// </summary>
    /// <remarks><code>TBZ Rt, #imm, label</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBZ_only_testbranch), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TBZ(Arm64RegisterXOrW Rt, byte imm, Arm64LabelId label)
         => AddInstruction(Arm64InstructionFactory.TBZ(Rt, imm, RecordLabelOffset(label, 24368)));
    /// <summary>
    /// Test bits (immediate).
    /// </summary>
    /// <remarks><code>TST Wn, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TST_ands_32s_log_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TST(Arm64RegisterW Wn, Arm64LogicalImmediate32 imm)
         => AddInstruction(Arm64InstructionFactory.TST(Wn, imm));
    /// <summary>
    /// Test bits (immediate).
    /// </summary>
    /// <remarks><code>TST Xn, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TST_ands_64s_log_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TST(Arm64RegisterX Xn, Arm64LogicalImmediate64 imm)
         => AddInstruction(Arm64InstructionFactory.TST(Xn, imm));
    /// <summary>
    /// Test (shifted register).
    /// </summary>
    /// <remarks><code>TST Wn, Wm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TST_ands_32_log_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TST(Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64ShiftKind4 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.TST(Wn, Wm, shift, amount));
    /// <summary>
    /// Test (shifted register).
    /// </summary>
    /// <remarks><code>TST Xn, Xm {, shift, #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TST_ands_64_log_shift), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TST(Arm64RegisterX Xn, Arm64RegisterX Xm, Arm64ShiftKind4 shift = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.TST(Xn, Xm, shift, amount));
    /// <summary>
    /// Unsigned bitfield insert in zeros.
    /// </summary>
    /// <remarks><code>UBFIZ Wd, Wn, #lsb, #width</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UBFIZ_ubfm_32m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UBFIZ(Arm64RegisterW Wd, Arm64RegisterW Wn, uint lsb, byte width)
         => AddInstruction(Arm64InstructionFactory.UBFIZ(Wd, Wn, lsb, width));
    /// <summary>
    /// Unsigned bitfield insert in zeros.
    /// </summary>
    /// <remarks><code>UBFIZ Xd, Xn, #lsb, #width</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UBFIZ_ubfm_64m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UBFIZ(Arm64RegisterX Xd, Arm64RegisterX Xn, uint lsb, byte width)
         => AddInstruction(Arm64InstructionFactory.UBFIZ(Xd, Xn, lsb, width));
    /// <summary>
    /// Unsigned bitfield move.
    /// </summary>
    /// <remarks><code>UBFM Wd, Wn, #immr, #imms</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UBFM_32m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UBFM(Arm64RegisterW Wd, Arm64RegisterW Wn, byte immr, byte imms)
         => AddInstruction(Arm64InstructionFactory.UBFM(Wd, Wn, immr, imms));
    /// <summary>
    /// Unsigned bitfield move.
    /// </summary>
    /// <remarks><code>UBFM Xd, Xn, #immr, #imms</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UBFM_64m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UBFM(Arm64RegisterX Xd, Arm64RegisterX Xn, byte immr, byte imms)
         => AddInstruction(Arm64InstructionFactory.UBFM(Xd, Xn, immr, imms));
    /// <summary>
    /// Unsigned bitfield extract.
    /// </summary>
    /// <remarks><code>UBFX Wd, Wn, #lsb, #width</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UBFX_ubfm_32m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UBFX(Arm64RegisterW Wd, Arm64RegisterW Wn, byte lsb, byte width)
         => AddInstruction(Arm64InstructionFactory.UBFX(Wd, Wn, lsb, width));
    /// <summary>
    /// Unsigned bitfield extract.
    /// </summary>
    /// <remarks><code>UBFX Xd, Xn, #lsb, #width</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UBFX_ubfm_64m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UBFX(Arm64RegisterX Xd, Arm64RegisterX Xn, byte lsb, byte width)
         => AddInstruction(Arm64InstructionFactory.UBFX(Xd, Xn, lsb, width));
    /// <summary>
    /// Permanently undefined.
    /// </summary>
    /// <remarks><code>UDF #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UDF_only_perm_undef), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UDF(ushort imm)
         => AddInstruction(Arm64InstructionFactory.UDF(imm));
    /// <summary>
    /// Unsigned divide.
    /// </summary>
    /// <remarks><code>UDIV Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UDIV_32_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UDIV(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.UDIV(Wd, Wn, Wm));
    /// <summary>
    /// Unsigned divide.
    /// </summary>
    /// <remarks><code>UDIV Xd, Xn, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UDIV_64_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UDIV(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.UDIV(Xd, Xn, Xm));
    /// <summary>
    /// Unsigned multiply-add long.
    /// </summary>
    /// <remarks><code>UMADDL Xd, Wn, Wm, Xa</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMADDL_64wa_dp_3src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMADDL(Arm64RegisterX Xd, Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64RegisterX Xa)
         => AddInstruction(Arm64InstructionFactory.UMADDL(Xd, Wn, Wm, Xa));
    /// <summary>
    /// Unsigned maximum (immediate).
    /// </summary>
    /// <remarks><code>UMAX Wd, Wn, #uimm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAX_32u_minmax_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMAX(Arm64RegisterW Wd, Arm64RegisterW Wn, byte uimm)
         => AddInstruction(Arm64InstructionFactory.UMAX(Wd, Wn, uimm));
    /// <summary>
    /// Unsigned maximum (immediate).
    /// </summary>
    /// <remarks><code>UMAX Xd, Xn, #uimm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAX_64u_minmax_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMAX(Arm64RegisterX Xd, Arm64RegisterX Xn, byte uimm)
         => AddInstruction(Arm64InstructionFactory.UMAX(Xd, Xn, uimm));
    /// <summary>
    /// Unsigned maximum (register).
    /// </summary>
    /// <remarks><code>UMAX Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAX_32_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMAX(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.UMAX(Wd, Wn, Wm));
    /// <summary>
    /// Unsigned maximum (register).
    /// </summary>
    /// <remarks><code>UMAX Xd, Xn, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAX_64_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMAX(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.UMAX(Xd, Xn, Xm));
    /// <summary>
    /// Unsigned minimum (immediate).
    /// </summary>
    /// <remarks><code>UMIN Wd, Wn, #uimm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMIN_32u_minmax_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMIN(Arm64RegisterW Wd, Arm64RegisterW Wn, byte uimm)
         => AddInstruction(Arm64InstructionFactory.UMIN(Wd, Wn, uimm));
    /// <summary>
    /// Unsigned minimum (immediate).
    /// </summary>
    /// <remarks><code>UMIN Xd, Xn, #uimm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMIN_64u_minmax_imm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMIN(Arm64RegisterX Xd, Arm64RegisterX Xn, byte uimm)
         => AddInstruction(Arm64InstructionFactory.UMIN(Xd, Xn, uimm));
    /// <summary>
    /// Unsigned minimum (register).
    /// </summary>
    /// <remarks><code>UMIN Wd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMIN_32_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMIN(Arm64RegisterW Wd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.UMIN(Wd, Wn, Wm));
    /// <summary>
    /// Unsigned minimum (register).
    /// </summary>
    /// <remarks><code>UMIN Xd, Xn, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMIN_64_dp_2src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMIN(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.UMIN(Xd, Xn, Xm));
    /// <summary>
    /// Unsigned multiply-negate long.
    /// </summary>
    /// <remarks><code>UMNEGL Xd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMNEGL(Arm64RegisterX Xd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.UMNEGL(Xd, Wn, Wm));
    /// <summary>
    /// Unsigned multiply-subtract long.
    /// </summary>
    /// <remarks><code>UMSUBL Xd, Wn, Wm, Xa</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMSUBL_64wa_dp_3src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMSUBL(Arm64RegisterX Xd, Arm64RegisterW Wn, Arm64RegisterW Wm, Arm64RegisterX Xa)
         => AddInstruction(Arm64InstructionFactory.UMSUBL(Xd, Wn, Wm, Xa));
    /// <summary>
    /// Unsigned multiply high.
    /// </summary>
    /// <remarks><code>UMULH Xd, Xn, Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULH_64_dp_3src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMULH(Arm64RegisterX Xd, Arm64RegisterX Xn, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.UMULH(Xd, Xn, Xm));
    /// <summary>
    /// Unsigned multiply long.
    /// </summary>
    /// <remarks><code>UMULL Xd, Wn, Wm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL_umaddl_64wa_dp_3src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMULL(Arm64RegisterX Xd, Arm64RegisterW Wn, Arm64RegisterW Wm)
         => AddInstruction(Arm64InstructionFactory.UMULL(Xd, Wn, Wm));
    /// <summary>
    /// Unsigned extend byte.
    /// </summary>
    /// <remarks><code>UXTB Wd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UXTB_ubfm_32m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UXTB(Arm64RegisterW Wd, Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.UXTB(Wd, Wn));
    /// <summary>
    /// Unsigned extend halfword.
    /// </summary>
    /// <remarks><code>UXTH Wd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UXTH_ubfm_32m_bitfield), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UXTH(Arm64RegisterW Wd, Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.UXTH(Wd, Wn));
    /// <summary>
    /// Strip Pointer Authentication Code.
    /// </summary>
    /// <remarks><code>XPACD Xd</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.XPACD_64z_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void XPACD(Arm64RegisterX Xd)
         => AddInstruction(Arm64InstructionFactory.XPACD(Xd));
    /// <summary>
    /// Strip Pointer Authentication Code.
    /// </summary>
    /// <remarks><code>XPACI Xd</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.XPACI_64z_dp_1src), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void XPACI(Arm64RegisterX Xd)
         => AddInstruction(Arm64InstructionFactory.XPACI(Xd));
}
