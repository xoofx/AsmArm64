// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
namespace AsmArm64;
static partial class Arm64InstructionFactory
{
    /// <summary>
    /// Absolute value (vector).
    /// </summary>
    /// <remarks><code>ABS Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ABS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ABS(Arm64RegisterD Dd, Arm64RegisterD Dn)
    {
        uint raw = 0x5EE0B800U; // Encoding for: ABS_asisdmisc_r
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Absolute value (vector).
    /// </summary>
    /// <remarks><code>ABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ABS(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
    {
        uint raw = 0x0E20B800U; // Encoding for: ABS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Absolute value (vector).
    /// </summary>
    /// <remarks><code>ABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ABS(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
    {
        uint raw = 0x4E20B800U; // Encoding for: ABS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Absolute value (vector).
    /// </summary>
    /// <remarks><code>ABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ABS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0E60B800U; // Encoding for: ABS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Absolute value (vector).
    /// </summary>
    /// <remarks><code>ABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ABS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4E60B800U; // Encoding for: ABS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Absolute value (vector).
    /// </summary>
    /// <remarks><code>ABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ABS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x0EA0B800U; // Encoding for: ABS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Absolute value (vector).
    /// </summary>
    /// <remarks><code>ABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ABS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x4EA0B800U; // Encoding for: ABS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Absolute value (vector).
    /// </summary>
    /// <remarks><code>ABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ABS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x4EE0B800U; // Encoding for: ABS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Add (vector).
    /// </summary>
    /// <remarks><code>ADD Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADD_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADD(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
    {
        uint raw = 0x5EE08400U; // Encoding for: ADD_asisdsame_only
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add (vector).
    /// </summary>
    /// <remarks><code>ADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADD(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E208400U; // Encoding for: ADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add (vector).
    /// </summary>
    /// <remarks><code>ADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADD(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E208400U; // Encoding for: ADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add (vector).
    /// </summary>
    /// <remarks><code>ADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E608400U; // Encoding for: ADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add (vector).
    /// </summary>
    /// <remarks><code>ADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E608400U; // Encoding for: ADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add (vector).
    /// </summary>
    /// <remarks><code>ADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA08400U; // Encoding for: ADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add (vector).
    /// </summary>
    /// <remarks><code>ADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA08400U; // Encoding for: ADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add (vector).
    /// </summary>
    /// <remarks><code>ADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADD(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4EE08400U; // Encoding for: ADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add returning high narrow.
    /// </summary>
    /// <remarks><code>ADDHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDHN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8H Vm_Ta)
    {
        uint raw = 0x0E204000U; // Encoding for: ADDHN_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add returning high narrow.
    /// </summary>
    /// <remarks><code>ADDHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDHN(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8H Vm_Ta)
    {
        uint raw = 0x4E204000U; // Encoding for: ADDHN_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add returning high narrow.
    /// </summary>
    /// <remarks><code>ADDHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDHN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4S Vm_Ta)
    {
        uint raw = 0x0E604000U; // Encoding for: ADDHN_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add returning high narrow.
    /// </summary>
    /// <remarks><code>ADDHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDHN(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4S Vm_Ta)
    {
        uint raw = 0x4E604000U; // Encoding for: ADDHN_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add returning high narrow.
    /// </summary>
    /// <remarks><code>ADDHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDHN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2D Vm_Ta)
    {
        uint raw = 0x0EA04000U; // Encoding for: ADDHN_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add returning high narrow.
    /// </summary>
    /// <remarks><code>ADDHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDHN(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2D Vm_Ta)
    {
        uint raw = 0x4EA04000U; // Encoding for: ADDHN_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add returning high narrow.
    /// </summary>
    /// <remarks><code>ADDHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDHN2(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8H Vm_Ta)
    {
        uint raw = 0x4E204000U; // Encoding for: ADDHN2_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add returning high narrow.
    /// </summary>
    /// <remarks><code>ADDHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDHN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8H Vm_Ta)
    {
        uint raw = 0x4E204000U; // Encoding for: ADDHN2_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add returning high narrow.
    /// </summary>
    /// <remarks><code>ADDHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDHN2(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4S Vm_Ta)
    {
        uint raw = 0x4E604000U; // Encoding for: ADDHN2_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add returning high narrow.
    /// </summary>
    /// <remarks><code>ADDHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDHN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4S Vm_Ta)
    {
        uint raw = 0x4E604000U; // Encoding for: ADDHN2_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add returning high narrow.
    /// </summary>
    /// <remarks><code>ADDHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDHN2(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2D Vm_Ta)
    {
        uint raw = 0x4EA04000U; // Encoding for: ADDHN2_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add returning high narrow.
    /// </summary>
    /// <remarks><code>ADDHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDHN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2D Vm_Ta)
    {
        uint raw = 0x4EA04000U; // Encoding for: ADDHN2_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add pair of elements (scalar).
    /// </summary>
    /// <remarks><code>ADDP Dd, Vn.2D</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDP_asisdpair_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDP(Arm64RegisterD Dd, Arm64RegisterV_2D Vn_2D)
    {
        uint raw = 0x5EF1B800U; // Encoding for: ADDP_asisdpair_only
        raw |= (uint)Dd.Index;
        raw |= (uint)Vn_2D.Index << 5;
        return raw;
    }
    /// <summary>
    /// Add pairwise (vector).
    /// </summary>
    /// <remarks><code>ADDP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDP(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E20BC00U; // Encoding for: ADDP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add pairwise (vector).
    /// </summary>
    /// <remarks><code>ADDP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDP(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E20BC00U; // Encoding for: ADDP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add pairwise (vector).
    /// </summary>
    /// <remarks><code>ADDP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDP(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E60BC00U; // Encoding for: ADDP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add pairwise (vector).
    /// </summary>
    /// <remarks><code>ADDP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDP(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E60BC00U; // Encoding for: ADDP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add pairwise (vector).
    /// </summary>
    /// <remarks><code>ADDP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDP(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA0BC00U; // Encoding for: ADDP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add pairwise (vector).
    /// </summary>
    /// <remarks><code>ADDP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDP(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA0BC00U; // Encoding for: ADDP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add pairwise (vector).
    /// </summary>
    /// <remarks><code>ADDP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDP(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4EE0BC00U; // Encoding for: ADDP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Add across vector.
    /// </summary>
    /// <remarks><code>ADDV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDV(Arm64RegisterB Vd, Arm64RegisterV_8B Vn_T)
    {
        uint raw = 0x0E31B800U; // Encoding for: ADDV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Add across vector.
    /// </summary>
    /// <remarks><code>ADDV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDV(Arm64RegisterB Vd, Arm64RegisterV_16B Vn_T)
    {
        uint raw = 0x4E31B800U; // Encoding for: ADDV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Add across vector.
    /// </summary>
    /// <remarks><code>ADDV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDV(Arm64RegisterH Vd, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0E71B800U; // Encoding for: ADDV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Add across vector.
    /// </summary>
    /// <remarks><code>ADDV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDV(Arm64RegisterH Vd, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4E71B800U; // Encoding for: ADDV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Add across vector.
    /// </summary>
    /// <remarks><code>ADDV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ADDV(Arm64RegisterS Vd, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x4EB1B800U; // Encoding for: ADDV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// AES single round decryption.
    /// </summary>
    /// <remarks><code>AESD Vd.16B, Vn.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AESD_b_cryptoaes), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint AESD(Arm64RegisterV_16B Vd_16B, Arm64RegisterV_16B Vn_16B)
    {
        uint raw = 0x4E285800U; // Encoding for: AESD_b_cryptoaes
        raw |= (uint)Vd_16B.Index;
        raw |= (uint)Vn_16B.Index << 5;
        return raw;
    }
    /// <summary>
    /// AES single round encryption.
    /// </summary>
    /// <remarks><code>AESE Vd.16B, Vn.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AESE_b_cryptoaes), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint AESE(Arm64RegisterV_16B Vd_16B, Arm64RegisterV_16B Vn_16B)
    {
        uint raw = 0x4E284800U; // Encoding for: AESE_b_cryptoaes
        raw |= (uint)Vd_16B.Index;
        raw |= (uint)Vn_16B.Index << 5;
        return raw;
    }
    /// <summary>
    /// AES inverse mix columns.
    /// </summary>
    /// <remarks><code>AESIMC Vd.16B, Vn.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AESIMC_b_cryptoaes), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint AESIMC(Arm64RegisterV_16B Vd_16B, Arm64RegisterV_16B Vn_16B)
    {
        uint raw = 0x4E287800U; // Encoding for: AESIMC_b_cryptoaes
        raw |= (uint)Vd_16B.Index;
        raw |= (uint)Vn_16B.Index << 5;
        return raw;
    }
    /// <summary>
    /// AES mix columns.
    /// </summary>
    /// <remarks><code>AESMC Vd.16B, Vn.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AESMC_b_cryptoaes), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint AESMC(Arm64RegisterV_16B Vd_16B, Arm64RegisterV_16B Vn_16B)
    {
        uint raw = 0x4E286800U; // Encoding for: AESMC_b_cryptoaes
        raw |= (uint)Vd_16B.Index;
        raw |= (uint)Vn_16B.Index << 5;
        return raw;
    }
    /// <summary>
    /// Bitwise AND (vector).
    /// </summary>
    /// <remarks><code>AND Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AND_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint AND(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E201C00U; // Encoding for: AND_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Bitwise AND (vector).
    /// </summary>
    /// <remarks><code>AND Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AND_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint AND(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E201C00U; // Encoding for: AND_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Bit clear and exclusive-OR.
    /// </summary>
    /// <remarks><code>BCAX Vd.16B, Vn.16B, Vm.16B, Va.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BCAX_vvv16_crypto4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BCAX(Arm64RegisterV_16B Vd_16B, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B, Arm64RegisterV_16B Va_16B)
    {
        uint raw = 0xCE200000U; // Encoding for: BCAX_vvv16_crypto4
        raw |= (uint)Vd_16B.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_16B.Index << 16;
        raw |= (uint)Va_16B.Index << 10;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point convert to BFloat16 (vector).
    /// </summary>
    /// <remarks><code>BF1CVTL Vd.8H, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BF1CVTL_asimdmisc_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BF1CVTL(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_8B Vn_Ta)
    {
        uint raw = 0x2EA17800U; // Encoding for: BF1CVTL_asimdmisc_v
        raw |= (uint)Vd_8H.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point convert to BFloat16 (vector).
    /// </summary>
    /// <remarks><code>BF1CVTL Vd.8H, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BF1CVTL_asimdmisc_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BF1CVTL(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_16B Vn_Ta)
    {
        uint raw = 0x6EA17800U; // Encoding for: BF1CVTL_asimdmisc_v
        raw |= (uint)Vd_8H.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point convert to BFloat16 (vector).
    /// </summary>
    /// <remarks><code>BF1CVTL2 Vd.8H, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BF1CVTL2_asimdmisc_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BF1CVTL2(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_8B Vn_Ta)
    {
        uint raw = 0x6EA17800U; // Encoding for: BF1CVTL2_asimdmisc_v
        raw |= (uint)Vd_8H.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point convert to BFloat16 (vector).
    /// </summary>
    /// <remarks><code>BF1CVTL2 Vd.8H, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BF1CVTL2_asimdmisc_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BF1CVTL2(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_16B Vn_Ta)
    {
        uint raw = 0x6EA17800U; // Encoding for: BF1CVTL2_asimdmisc_v
        raw |= (uint)Vd_8H.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point convert to BFloat16 (vector).
    /// </summary>
    /// <remarks><code>BF2CVTL Vd.8H, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BF2CVTL_asimdmisc_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BF2CVTL(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_8B Vn_Ta)
    {
        uint raw = 0x2EE17800U; // Encoding for: BF2CVTL_asimdmisc_v
        raw |= (uint)Vd_8H.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point convert to BFloat16 (vector).
    /// </summary>
    /// <remarks><code>BF2CVTL Vd.8H, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BF2CVTL_asimdmisc_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BF2CVTL(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_16B Vn_Ta)
    {
        uint raw = 0x6EE17800U; // Encoding for: BF2CVTL_asimdmisc_v
        raw |= (uint)Vd_8H.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point convert to BFloat16 (vector).
    /// </summary>
    /// <remarks><code>BF2CVTL2 Vd.8H, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BF2CVTL2_asimdmisc_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BF2CVTL2(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_8B Vn_Ta)
    {
        uint raw = 0x6EE17800U; // Encoding for: BF2CVTL2_asimdmisc_v
        raw |= (uint)Vd_8H.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point convert to BFloat16 (vector).
    /// </summary>
    /// <remarks><code>BF2CVTL2 Vd.8H, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BF2CVTL2_asimdmisc_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BF2CVTL2(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_16B Vn_Ta)
    {
        uint raw = 0x6EE17800U; // Encoding for: BF2CVTL2_asimdmisc_v
        raw |= (uint)Vd_8H.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert from single-precision to BFloat16 format (vector).
    /// </summary>
    /// <remarks><code>BFCVTN Vd.Ta, Vn.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFCVTN_asimdmisc_4s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BFCVTN(Arm64RegisterV_4H Vd_Ta, Arm64RegisterV_4S Vn_4S)
    {
        uint raw = 0x0EA16800U; // Encoding for: BFCVTN_asimdmisc_4s
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_4S.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert from single-precision to BFloat16 format (vector).
    /// </summary>
    /// <remarks><code>BFCVTN Vd.Ta, Vn.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFCVTN_asimdmisc_4s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BFCVTN(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_4S Vn_4S)
    {
        uint raw = 0x4EA16800U; // Encoding for: BFCVTN_asimdmisc_4s
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_4S.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert from single-precision to BFloat16 format (vector).
    /// </summary>
    /// <remarks><code>BFCVTN2 Vd.Ta, Vn.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFCVTN2_asimdmisc_4s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BFCVTN2(Arm64RegisterV_4H Vd_Ta, Arm64RegisterV_4S Vn_4S)
    {
        uint raw = 0x4EA16800U; // Encoding for: BFCVTN2_asimdmisc_4s
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_4S.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert from single-precision to BFloat16 format (vector).
    /// </summary>
    /// <remarks><code>BFCVTN2 Vd.Ta, Vn.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFCVTN2_asimdmisc_4s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BFCVTN2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_4S Vn_4S)
    {
        uint raw = 0x4EA16800U; // Encoding for: BFCVTN2_asimdmisc_4s
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_4S.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point dot product (vector, by element).
    /// </summary>
    /// <remarks><code>BFDOT Vd.Ta, Vn.Tb, Vm.2H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFDOT_asimdelem_e), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BFDOT(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_2H.Indexed Vm_2H)
    {
        uint raw = 0x0F40F000U; // Encoding for: BFDOT_asimdelem_e
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_2H.Index << 16;
        {
            // Write the element indexer for Vm_2H.ElementIndex
            var _i_ = Vm_2H.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point dot product (vector, by element).
    /// </summary>
    /// <remarks><code>BFDOT Vd.Ta, Vn.Tb, Vm.2H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFDOT_asimdelem_e), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BFDOT(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_2H.Indexed Vm_2H)
    {
        uint raw = 0x4F40F000U; // Encoding for: BFDOT_asimdelem_e
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_2H.Index << 16;
        {
            // Write the element indexer for Vm_2H.ElementIndex
            var _i_ = Vm_2H.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point dot product (vector).
    /// </summary>
    /// <remarks><code>BFDOT Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFDOT_asimdsame2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BFDOT(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x2E40FC00U; // Encoding for: BFDOT_asimdsame2_d
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point dot product (vector).
    /// </summary>
    /// <remarks><code>BFDOT Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFDOT_asimdsame2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BFDOT(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x6E40FC00U; // Encoding for: BFDOT_asimdsame2_d
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point widening multiply-add long (by element).
    /// </summary>
    /// <remarks><code>BFMLALB Vd.4S, Vn.8H, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFMLALB_asimdelem_f), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BFMLALB(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_8H Vn_8H, Arm64RegisterV_H.Indexed Vm_H)
    {
        uint raw = 0x0FC0F000U; // Encoding for: BFMLALB_asimdelem_f
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_8H.Index << 5;
        raw |= (uint)(Vm_H.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_H.ElementIndex
            var _i_ = Vm_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point widening multiply-add long (vector).
    /// </summary>
    /// <remarks><code>BFMLALB Vd.4S, Vn.8H, Vm.8H</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFMLALB_asimdsame2_f), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BFMLALB(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_8H Vn_8H, Arm64RegisterV_8H Vm_8H)
    {
        uint raw = 0x2EC0FC00U; // Encoding for: BFMLALB_asimdsame2_f
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_8H.Index << 5;
        raw |= (uint)Vm_8H.Index << 16;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point widening multiply-add long (by element).
    /// </summary>
    /// <remarks><code>BFMLALT Vd.4S, Vn.8H, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFMLALT_asimdelem_f), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BFMLALT(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_8H Vn_8H, Arm64RegisterV_H.Indexed Vm_H)
    {
        uint raw = 0x4FC0F000U; // Encoding for: BFMLALT_asimdelem_f
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_8H.Index << 5;
        raw |= (uint)(Vm_H.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_H.ElementIndex
            var _i_ = Vm_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point widening multiply-add long (vector).
    /// </summary>
    /// <remarks><code>BFMLALT Vd.4S, Vn.8H, Vm.8H</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFMLALT_asimdsame2_f), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BFMLALT(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_8H Vn_8H, Arm64RegisterV_8H Vm_8H)
    {
        uint raw = 0x6EC0FC00U; // Encoding for: BFMLALT_asimdsame2_f
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_8H.Index << 5;
        raw |= (uint)Vm_8H.Index << 16;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point matrix multiply-accumulate into 2x2 matrix.
    /// </summary>
    /// <remarks><code>BFMMLA Vd.4S, Vn.8H, Vm.8H</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFMMLA_asimdsame2_e), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BFMMLA(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_8H Vn_8H, Arm64RegisterV_8H Vm_8H)
    {
        uint raw = 0x6E40EC00U; // Encoding for: BFMMLA_asimdsame2_e
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_8H.Index << 5;
        raw |= (uint)Vm_8H.Index << 16;
        return raw;
    }
    /// <summary>
    /// Bitwise bit clear (vector, immediate).
    /// </summary>
    /// <remarks><code>BIC Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BIC_asimdimm_l_hl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BIC(Arm64RegisterV_4H Vd_T, byte imm8, LSLShiftKind LSL = default, int amount = 0)
    {
        uint raw = 0x2F009400U; // Encoding for: BIC_asimdimm_l_hl
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm8
            var _i_ = imm8 & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        raw |= (uint)((amount >> 3) & 0x1) << 13;
        return raw;
    }
    /// <summary>
    /// Bitwise bit clear (vector, immediate).
    /// </summary>
    /// <remarks><code>BIC Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BIC_asimdimm_l_hl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BIC(Arm64RegisterV_8H Vd_T, byte imm8, LSLShiftKind LSL = default, int amount = 0)
    {
        uint raw = 0x6F009400U; // Encoding for: BIC_asimdimm_l_hl
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm8
            var _i_ = imm8 & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        raw |= (uint)((amount >> 3) & 0x1) << 13;
        return raw;
    }
    /// <summary>
    /// Bitwise bit clear (vector, immediate).
    /// </summary>
    /// <remarks><code>BIC Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BIC_asimdimm_l_sl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BIC(Arm64RegisterV_2S Vd_T, byte imm8, LSLShiftKind LSL = default, int amount = 0)
    {
        uint raw = 0x2F001400U; // Encoding for: BIC_asimdimm_l_sl
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm8
            var _i_ = imm8 & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        raw |= (uint)((amount >> 3) & 0x3) << 13;
        return raw;
    }
    /// <summary>
    /// Bitwise bit clear (vector, immediate).
    /// </summary>
    /// <remarks><code>BIC Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BIC_asimdimm_l_sl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BIC(Arm64RegisterV_4S Vd_T, byte imm8, LSLShiftKind LSL = default, int amount = 0)
    {
        uint raw = 0x6F001400U; // Encoding for: BIC_asimdimm_l_sl
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm8
            var _i_ = imm8 & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        raw |= (uint)((amount >> 3) & 0x3) << 13;
        return raw;
    }
    /// <summary>
    /// Bitwise bit clear (vector, register).
    /// </summary>
    /// <remarks><code>BIC Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BIC_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BIC(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E601C00U; // Encoding for: BIC_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Bitwise bit clear (vector, register).
    /// </summary>
    /// <remarks><code>BIC Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BIC_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BIC(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E601C00U; // Encoding for: BIC_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Bitwise insert if false.
    /// </summary>
    /// <remarks><code>BIF Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BIF_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BIF(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2EE01C00U; // Encoding for: BIF_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Bitwise insert if false.
    /// </summary>
    /// <remarks><code>BIF Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BIF_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BIF(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6EE01C00U; // Encoding for: BIF_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Bitwise insert if true.
    /// </summary>
    /// <remarks><code>BIT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BIT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BIT(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2EA01C00U; // Encoding for: BIT_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Bitwise insert if true.
    /// </summary>
    /// <remarks><code>BIT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BIT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BIT(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6EA01C00U; // Encoding for: BIT_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Bitwise select.
    /// </summary>
    /// <remarks><code>BSL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BSL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BSL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2E601C00U; // Encoding for: BSL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Bitwise select.
    /// </summary>
    /// <remarks><code>BSL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BSL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BSL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6E601C00U; // Encoding for: BSL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Count leading sign bits (vector).
    /// </summary>
    /// <remarks><code>CLS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CLS(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
    {
        uint raw = 0x0E204800U; // Encoding for: CLS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Count leading sign bits (vector).
    /// </summary>
    /// <remarks><code>CLS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CLS(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
    {
        uint raw = 0x4E204800U; // Encoding for: CLS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Count leading sign bits (vector).
    /// </summary>
    /// <remarks><code>CLS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CLS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0E604800U; // Encoding for: CLS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Count leading sign bits (vector).
    /// </summary>
    /// <remarks><code>CLS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CLS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4E604800U; // Encoding for: CLS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Count leading sign bits (vector).
    /// </summary>
    /// <remarks><code>CLS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CLS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x0EA04800U; // Encoding for: CLS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Count leading sign bits (vector).
    /// </summary>
    /// <remarks><code>CLS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CLS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x4EA04800U; // Encoding for: CLS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Count leading zero bits (vector).
    /// </summary>
    /// <remarks><code>CLZ Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLZ_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CLZ(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
    {
        uint raw = 0x2E204800U; // Encoding for: CLZ_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Count leading zero bits (vector).
    /// </summary>
    /// <remarks><code>CLZ Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLZ_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CLZ(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
    {
        uint raw = 0x6E204800U; // Encoding for: CLZ_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Count leading zero bits (vector).
    /// </summary>
    /// <remarks><code>CLZ Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLZ_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CLZ(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x2E604800U; // Encoding for: CLZ_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Count leading zero bits (vector).
    /// </summary>
    /// <remarks><code>CLZ Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLZ_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CLZ(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x6E604800U; // Encoding for: CLZ_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Count leading zero bits (vector).
    /// </summary>
    /// <remarks><code>CLZ Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLZ_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CLZ(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x2EA04800U; // Encoding for: CLZ_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Count leading zero bits (vector).
    /// </summary>
    /// <remarks><code>CLZ Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLZ_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CLZ(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x6EA04800U; // Encoding for: CLZ_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Compare bitwise equal (vector).
    /// </summary>
    /// <remarks><code>CMEQ Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMEQ(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
    {
        uint raw = 0x7EE08C00U; // Encoding for: CMEQ_asisdsame_only
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare bitwise equal (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMEQ(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2E208C00U; // Encoding for: CMEQ_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare bitwise equal (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMEQ(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6E208C00U; // Encoding for: CMEQ_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare bitwise equal (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMEQ(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E608C00U; // Encoding for: CMEQ_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare bitwise equal (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMEQ(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E608C00U; // Encoding for: CMEQ_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare bitwise equal (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMEQ(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA08C00U; // Encoding for: CMEQ_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare bitwise equal (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMEQ(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA08C00U; // Encoding for: CMEQ_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare bitwise equal (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMEQ(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x6EE08C00U; // Encoding for: CMEQ_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare bitwise equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMEQ Dd, Dn, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asisdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMEQ(Arm64RegisterD Dd, Arm64RegisterD Dn, byte value0 = 0)
    {
        uint raw = 0x5EE09800U; // Encoding for: CMEQ_asisdmisc_z
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare bitwise equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMEQ(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte value0 = 0)
    {
        uint raw = 0x0E209800U; // Encoding for: CMEQ_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare bitwise equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMEQ(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte value0 = 0)
    {
        uint raw = 0x4E209800U; // Encoding for: CMEQ_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare bitwise equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMEQ(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte value0 = 0)
    {
        uint raw = 0x0E609800U; // Encoding for: CMEQ_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare bitwise equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMEQ(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte value0 = 0)
    {
        uint raw = 0x4E609800U; // Encoding for: CMEQ_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare bitwise equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMEQ(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte value0 = 0)
    {
        uint raw = 0x0EA09800U; // Encoding for: CMEQ_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare bitwise equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMEQ(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte value0 = 0)
    {
        uint raw = 0x4EA09800U; // Encoding for: CMEQ_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare bitwise equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMEQ(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte value0 = 0)
    {
        uint raw = 0x4EE09800U; // Encoding for: CMEQ_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed greater than or equal (vector).
    /// </summary>
    /// <remarks><code>CMGE Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGE(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
    {
        uint raw = 0x5EE03C00U; // Encoding for: CMGE_asisdsame_only
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare signed greater than or equal (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGE(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E203C00U; // Encoding for: CMGE_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare signed greater than or equal (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGE(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E203C00U; // Encoding for: CMGE_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare signed greater than or equal (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGE(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E603C00U; // Encoding for: CMGE_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare signed greater than or equal (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGE(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E603C00U; // Encoding for: CMGE_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare signed greater than or equal (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGE(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA03C00U; // Encoding for: CMGE_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare signed greater than or equal (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGE(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA03C00U; // Encoding for: CMGE_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare signed greater than or equal (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGE(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4EE03C00U; // Encoding for: CMGE_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare signed greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMGE Dd, Dn, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asisdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGE(Arm64RegisterD Dd, Arm64RegisterD Dn, byte value0 = 0)
    {
        uint raw = 0x7EE08800U; // Encoding for: CMGE_asisdmisc_z
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGE(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte value0 = 0)
    {
        uint raw = 0x2E208800U; // Encoding for: CMGE_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGE(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte value0 = 0)
    {
        uint raw = 0x6E208800U; // Encoding for: CMGE_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGE(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte value0 = 0)
    {
        uint raw = 0x2E608800U; // Encoding for: CMGE_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGE(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte value0 = 0)
    {
        uint raw = 0x6E608800U; // Encoding for: CMGE_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGE(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte value0 = 0)
    {
        uint raw = 0x2EA08800U; // Encoding for: CMGE_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGE(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte value0 = 0)
    {
        uint raw = 0x6EA08800U; // Encoding for: CMGE_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGE(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte value0 = 0)
    {
        uint raw = 0x6EE08800U; // Encoding for: CMGE_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed greater than (vector).
    /// </summary>
    /// <remarks><code>CMGT Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGT(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
    {
        uint raw = 0x5EE03400U; // Encoding for: CMGT_asisdsame_only
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare signed greater than (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGT(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E203400U; // Encoding for: CMGT_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare signed greater than (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGT(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E203400U; // Encoding for: CMGT_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare signed greater than (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGT(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E603400U; // Encoding for: CMGT_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare signed greater than (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGT(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E603400U; // Encoding for: CMGT_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare signed greater than (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGT(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA03400U; // Encoding for: CMGT_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare signed greater than (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGT(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA03400U; // Encoding for: CMGT_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare signed greater than (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGT(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4EE03400U; // Encoding for: CMGT_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare signed greater than zero (vector).
    /// </summary>
    /// <remarks><code>CMGT Dd, Dn, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asisdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGT(Arm64RegisterD Dd, Arm64RegisterD Dn, byte value0 = 0)
    {
        uint raw = 0x5EE08800U; // Encoding for: CMGT_asisdmisc_z
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed greater than zero (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGT(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte value0 = 0)
    {
        uint raw = 0x0E208800U; // Encoding for: CMGT_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed greater than zero (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGT(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte value0 = 0)
    {
        uint raw = 0x4E208800U; // Encoding for: CMGT_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed greater than zero (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGT(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte value0 = 0)
    {
        uint raw = 0x0E608800U; // Encoding for: CMGT_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed greater than zero (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGT(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte value0 = 0)
    {
        uint raw = 0x4E608800U; // Encoding for: CMGT_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed greater than zero (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGT(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte value0 = 0)
    {
        uint raw = 0x0EA08800U; // Encoding for: CMGT_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed greater than zero (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGT(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte value0 = 0)
    {
        uint raw = 0x4EA08800U; // Encoding for: CMGT_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed greater than zero (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMGT(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte value0 = 0)
    {
        uint raw = 0x4EE08800U; // Encoding for: CMGT_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare unsigned higher (vector).
    /// </summary>
    /// <remarks><code>CMHI Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHI_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMHI(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
    {
        uint raw = 0x7EE03400U; // Encoding for: CMHI_asisdsame_only
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare unsigned higher (vector).
    /// </summary>
    /// <remarks><code>CMHI Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHI_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMHI(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2E203400U; // Encoding for: CMHI_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare unsigned higher (vector).
    /// </summary>
    /// <remarks><code>CMHI Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHI_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMHI(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6E203400U; // Encoding for: CMHI_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare unsigned higher (vector).
    /// </summary>
    /// <remarks><code>CMHI Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHI_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMHI(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E603400U; // Encoding for: CMHI_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare unsigned higher (vector).
    /// </summary>
    /// <remarks><code>CMHI Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHI_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMHI(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E603400U; // Encoding for: CMHI_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare unsigned higher (vector).
    /// </summary>
    /// <remarks><code>CMHI Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHI_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMHI(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA03400U; // Encoding for: CMHI_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare unsigned higher (vector).
    /// </summary>
    /// <remarks><code>CMHI Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHI_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMHI(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA03400U; // Encoding for: CMHI_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare unsigned higher (vector).
    /// </summary>
    /// <remarks><code>CMHI Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHI_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMHI(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x6EE03400U; // Encoding for: CMHI_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare unsigned higher or same (vector).
    /// </summary>
    /// <remarks><code>CMHS Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHS_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMHS(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
    {
        uint raw = 0x7EE03C00U; // Encoding for: CMHS_asisdsame_only
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare unsigned higher or same (vector).
    /// </summary>
    /// <remarks><code>CMHS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMHS(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2E203C00U; // Encoding for: CMHS_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare unsigned higher or same (vector).
    /// </summary>
    /// <remarks><code>CMHS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMHS(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6E203C00U; // Encoding for: CMHS_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare unsigned higher or same (vector).
    /// </summary>
    /// <remarks><code>CMHS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMHS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E603C00U; // Encoding for: CMHS_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare unsigned higher or same (vector).
    /// </summary>
    /// <remarks><code>CMHS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMHS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E603C00U; // Encoding for: CMHS_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare unsigned higher or same (vector).
    /// </summary>
    /// <remarks><code>CMHS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMHS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA03C00U; // Encoding for: CMHS_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare unsigned higher or same (vector).
    /// </summary>
    /// <remarks><code>CMHS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMHS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA03C00U; // Encoding for: CMHS_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare unsigned higher or same (vector).
    /// </summary>
    /// <remarks><code>CMHS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMHS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x6EE03C00U; // Encoding for: CMHS_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare signed less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMLE Dd, Dn, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLE_asisdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMLE(Arm64RegisterD Dd, Arm64RegisterD Dn, byte value0 = 0)
    {
        uint raw = 0x7EE09800U; // Encoding for: CMLE_asisdmisc_z
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMLE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMLE(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte value0 = 0)
    {
        uint raw = 0x2E209800U; // Encoding for: CMLE_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMLE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMLE(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte value0 = 0)
    {
        uint raw = 0x6E209800U; // Encoding for: CMLE_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMLE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMLE(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte value0 = 0)
    {
        uint raw = 0x2E609800U; // Encoding for: CMLE_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMLE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMLE(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte value0 = 0)
    {
        uint raw = 0x6E609800U; // Encoding for: CMLE_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMLE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMLE(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte value0 = 0)
    {
        uint raw = 0x2EA09800U; // Encoding for: CMLE_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMLE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMLE(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte value0 = 0)
    {
        uint raw = 0x6EA09800U; // Encoding for: CMLE_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMLE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMLE(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte value0 = 0)
    {
        uint raw = 0x6EE09800U; // Encoding for: CMLE_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed less than zero (vector).
    /// </summary>
    /// <remarks><code>CMLT Dd, Dn, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLT_asisdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMLT(Arm64RegisterD Dd, Arm64RegisterD Dn, byte value0 = 0)
    {
        uint raw = 0x5EE0A800U; // Encoding for: CMLT_asisdmisc_z
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed less than zero (vector).
    /// </summary>
    /// <remarks><code>CMLT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMLT(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte value0 = 0)
    {
        uint raw = 0x0E20A800U; // Encoding for: CMLT_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed less than zero (vector).
    /// </summary>
    /// <remarks><code>CMLT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMLT(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte value0 = 0)
    {
        uint raw = 0x4E20A800U; // Encoding for: CMLT_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed less than zero (vector).
    /// </summary>
    /// <remarks><code>CMLT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMLT(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte value0 = 0)
    {
        uint raw = 0x0E60A800U; // Encoding for: CMLT_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed less than zero (vector).
    /// </summary>
    /// <remarks><code>CMLT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMLT(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte value0 = 0)
    {
        uint raw = 0x4E60A800U; // Encoding for: CMLT_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed less than zero (vector).
    /// </summary>
    /// <remarks><code>CMLT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMLT(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte value0 = 0)
    {
        uint raw = 0x0EA0A800U; // Encoding for: CMLT_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed less than zero (vector).
    /// </summary>
    /// <remarks><code>CMLT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMLT(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte value0 = 0)
    {
        uint raw = 0x4EA0A800U; // Encoding for: CMLT_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare signed less than zero (vector).
    /// </summary>
    /// <remarks><code>CMLT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMLT(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte value0 = 0)
    {
        uint raw = 0x4EE0A800U; // Encoding for: CMLT_asimdmisc_z
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (value0 != 0) throw new ArgumentOutOfRangeException(nameof(value0), $"Invalid Immediate. Expecting the fixed value 0 instead of {value0}");
        return raw;
    }
    /// <summary>
    /// Compare bitwise test bits nonzero (vector).
    /// </summary>
    /// <remarks><code>CMTST Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMTST_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMTST(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
    {
        uint raw = 0x5EE08C00U; // Encoding for: CMTST_asisdsame_only
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare bitwise test bits nonzero (vector).
    /// </summary>
    /// <remarks><code>CMTST Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMTST_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMTST(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E208C00U; // Encoding for: CMTST_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare bitwise test bits nonzero (vector).
    /// </summary>
    /// <remarks><code>CMTST Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMTST_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMTST(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E208C00U; // Encoding for: CMTST_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare bitwise test bits nonzero (vector).
    /// </summary>
    /// <remarks><code>CMTST Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMTST_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMTST(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E608C00U; // Encoding for: CMTST_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare bitwise test bits nonzero (vector).
    /// </summary>
    /// <remarks><code>CMTST Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMTST_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMTST(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E608C00U; // Encoding for: CMTST_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare bitwise test bits nonzero (vector).
    /// </summary>
    /// <remarks><code>CMTST Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMTST_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMTST(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA08C00U; // Encoding for: CMTST_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare bitwise test bits nonzero (vector).
    /// </summary>
    /// <remarks><code>CMTST Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMTST_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMTST(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA08C00U; // Encoding for: CMTST_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Compare bitwise test bits nonzero (vector).
    /// </summary>
    /// <remarks><code>CMTST Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMTST_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CMTST(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4EE08C00U; // Encoding for: CMTST_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Population count per byte.
    /// </summary>
    /// <remarks><code>CNT Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CNT_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CNT(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
    {
        uint raw = 0x0E205800U; // Encoding for: CNT_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Population count per byte.
    /// </summary>
    /// <remarks><code>CNT Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CNT_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CNT(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
    {
        uint raw = 0x4E205800U; // Encoding for: CNT_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Duplicate vector element to vector or scalar.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint DUP(Arm64RegisterV_8B Vd_T, Arm64RegisterV_B.Indexed Vn_Ts)
    {
        uint raw = 0x0E010400U; // Encoding for: DUP_asimdins_dv_v
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_Ts.Index << 5;
        raw |= (uint)(Vn_Ts.ElementIndex & 0xF) << 17;
        return raw;
    }
    /// <summary>
    /// Duplicate vector element to vector or scalar.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint DUP(Arm64RegisterV_16B Vd_T, Arm64RegisterV_B.Indexed Vn_Ts)
    {
        uint raw = 0x4E010400U; // Encoding for: DUP_asimdins_dv_v
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_Ts.Index << 5;
        raw |= (uint)(Vn_Ts.ElementIndex & 0xF) << 17;
        return raw;
    }
    /// <summary>
    /// Duplicate vector element to vector or scalar.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint DUP(Arm64RegisterV_4H Vd_T, Arm64RegisterV_H.Indexed Vn_Ts)
    {
        uint raw = 0x0E020400U; // Encoding for: DUP_asimdins_dv_v
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_Ts.Index << 5;
        raw |= (uint)(Vn_Ts.ElementIndex & 0x7) << 18;
        return raw;
    }
    /// <summary>
    /// Duplicate vector element to vector or scalar.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint DUP(Arm64RegisterV_8H Vd_T, Arm64RegisterV_H.Indexed Vn_Ts)
    {
        uint raw = 0x4E020400U; // Encoding for: DUP_asimdins_dv_v
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_Ts.Index << 5;
        raw |= (uint)(Vn_Ts.ElementIndex & 0x7) << 18;
        return raw;
    }
    /// <summary>
    /// Duplicate vector element to vector or scalar.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint DUP(Arm64RegisterV_2S Vd_T, Arm64RegisterV_S.Indexed Vn_Ts)
    {
        uint raw = 0x0E040400U; // Encoding for: DUP_asimdins_dv_v
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_Ts.Index << 5;
        raw |= (uint)(Vn_Ts.ElementIndex & 0x3) << 19;
        return raw;
    }
    /// <summary>
    /// Duplicate vector element to vector or scalar.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint DUP(Arm64RegisterV_4S Vd_T, Arm64RegisterV_S.Indexed Vn_Ts)
    {
        uint raw = 0x4E040400U; // Encoding for: DUP_asimdins_dv_v
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_Ts.Index << 5;
        raw |= (uint)(Vn_Ts.ElementIndex & 0x3) << 19;
        return raw;
    }
    /// <summary>
    /// Duplicate vector element to vector or scalar.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint DUP(Arm64RegisterV_2D Vd_T, Arm64RegisterV_D.Indexed Vn_Ts)
    {
        uint raw = 0x4E080400U; // Encoding for: DUP_asimdins_dv_v
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_Ts.Index << 5;
        raw |= (uint)(Vn_Ts.ElementIndex & 0x1) << 20;
        return raw;
    }
    /// <summary>
    /// Duplicate general-purpose register to vector.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dr_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint DUP(Arm64RegisterV_8B Vd_T, Arm64RegisterXOrW Rn)
    {
        uint raw = 0x0E010C00U; // Encoding for: DUP_asimdins_dr_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Rn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Duplicate general-purpose register to vector.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dr_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint DUP(Arm64RegisterV_16B Vd_T, Arm64RegisterXOrW Rn)
    {
        uint raw = 0x4E010C00U; // Encoding for: DUP_asimdins_dr_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Rn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Duplicate general-purpose register to vector.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dr_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint DUP(Arm64RegisterV_4H Vd_T, Arm64RegisterXOrW Rn)
    {
        uint raw = 0x0E020C00U; // Encoding for: DUP_asimdins_dr_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Rn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Duplicate general-purpose register to vector.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dr_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint DUP(Arm64RegisterV_8H Vd_T, Arm64RegisterXOrW Rn)
    {
        uint raw = 0x4E020C00U; // Encoding for: DUP_asimdins_dr_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Rn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Duplicate general-purpose register to vector.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dr_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint DUP(Arm64RegisterV_2S Vd_T, Arm64RegisterXOrW Rn)
    {
        uint raw = 0x0E040C00U; // Encoding for: DUP_asimdins_dr_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Rn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Duplicate general-purpose register to vector.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dr_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint DUP(Arm64RegisterV_4S Vd_T, Arm64RegisterXOrW Rn)
    {
        uint raw = 0x4E040C00U; // Encoding for: DUP_asimdins_dr_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Rn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Duplicate general-purpose register to vector.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dr_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint DUP(Arm64RegisterV_2D Vd_T, Arm64RegisterXOrW Rn)
    {
        uint raw = 0x4E080C00U; // Encoding for: DUP_asimdins_dr_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Rn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Bitwise exclusive-OR (vector).
    /// </summary>
    /// <remarks><code>EOR Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.EOR_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint EOR(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2E201C00U; // Encoding for: EOR_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Bitwise exclusive-OR (vector).
    /// </summary>
    /// <remarks><code>EOR Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.EOR_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint EOR(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6E201C00U; // Encoding for: EOR_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Three-way exclusive-OR.
    /// </summary>
    /// <remarks><code>EOR3 Vd.16B, Vn.16B, Vm.16B, Va.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.EOR3_vvv16_crypto4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint EOR3(Arm64RegisterV_16B Vd_16B, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B, Arm64RegisterV_16B Va_16B)
    {
        uint raw = 0xCE000000U; // Encoding for: EOR3_vvv16_crypto4
        raw |= (uint)Vd_16B.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_16B.Index << 16;
        raw |= (uint)Va_16B.Index << 10;
        return raw;
    }
    /// <summary>
    /// Extract vector from pair of vectors.
    /// </summary>
    /// <remarks><code>EXT Vd.T, Vn.T, Vm.T, #index</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.EXT_asimdext_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint EXT(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T, byte index)
    {
        uint raw = 0x2E000000U; // Encoding for: EXT_asimdext_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        raw |= (uint)(index & 0x7) << 11;
        return raw;
    }
    /// <summary>
    /// Extract vector from pair of vectors.
    /// </summary>
    /// <remarks><code>EXT Vd.T, Vn.T, Vm.T, #index</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.EXT_asimdext_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint EXT(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T, byte index)
    {
        uint raw = 0x6E000000U; // Encoding for: EXT_asimdext_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        raw |= (uint)(index & 0xF) << 11;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point convert to half-precision (vector).
    /// </summary>
    /// <remarks><code>F1CVTL Vd.8H, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.F1CVTL_asimdmisc_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint F1CVTL(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_8B Vn_Ta)
    {
        uint raw = 0x2E217800U; // Encoding for: F1CVTL_asimdmisc_v
        raw |= (uint)Vd_8H.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point convert to half-precision (vector).
    /// </summary>
    /// <remarks><code>F1CVTL Vd.8H, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.F1CVTL_asimdmisc_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint F1CVTL(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_16B Vn_Ta)
    {
        uint raw = 0x6E217800U; // Encoding for: F1CVTL_asimdmisc_v
        raw |= (uint)Vd_8H.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point convert to half-precision (vector).
    /// </summary>
    /// <remarks><code>F1CVTL2 Vd.8H, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.F1CVTL2_asimdmisc_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint F1CVTL2(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_8B Vn_Ta)
    {
        uint raw = 0x6E217800U; // Encoding for: F1CVTL2_asimdmisc_v
        raw |= (uint)Vd_8H.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point convert to half-precision (vector).
    /// </summary>
    /// <remarks><code>F1CVTL2 Vd.8H, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.F1CVTL2_asimdmisc_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint F1CVTL2(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_16B Vn_Ta)
    {
        uint raw = 0x6E217800U; // Encoding for: F1CVTL2_asimdmisc_v
        raw |= (uint)Vd_8H.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point convert to half-precision (vector).
    /// </summary>
    /// <remarks><code>F2CVTL Vd.8H, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.F2CVTL_asimdmisc_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint F2CVTL(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_8B Vn_Ta)
    {
        uint raw = 0x2E617800U; // Encoding for: F2CVTL_asimdmisc_v
        raw |= (uint)Vd_8H.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point convert to half-precision (vector).
    /// </summary>
    /// <remarks><code>F2CVTL Vd.8H, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.F2CVTL_asimdmisc_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint F2CVTL(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_16B Vn_Ta)
    {
        uint raw = 0x6E617800U; // Encoding for: F2CVTL_asimdmisc_v
        raw |= (uint)Vd_8H.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point convert to half-precision (vector).
    /// </summary>
    /// <remarks><code>F2CVTL2 Vd.8H, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.F2CVTL2_asimdmisc_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint F2CVTL2(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_8B Vn_Ta)
    {
        uint raw = 0x6E617800U; // Encoding for: F2CVTL2_asimdmisc_v
        raw |= (uint)Vd_8H.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point convert to half-precision (vector).
    /// </summary>
    /// <remarks><code>F2CVTL2 Vd.8H, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.F2CVTL2_asimdmisc_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint F2CVTL2(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_16B Vn_Ta)
    {
        uint raw = 0x6E617800U; // Encoding for: F2CVTL2_asimdmisc_v
        raw |= (uint)Vd_8H.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute difference (vector).
    /// </summary>
    /// <remarks><code>FABD Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABD_asisdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FABD(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
    {
        uint raw = 0x7EC01400U; // Encoding for: FABD_asisdsamefp16_only
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute difference (vector).
    /// </summary>
    /// <remarks><code>FABD Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABD_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FABD(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
    {
        uint raw = 0x7EA0D400U; // Encoding for: FABD_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute difference (vector).
    /// </summary>
    /// <remarks><code>FABD Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABD_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FABD(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
    {
        uint raw = 0x7EE0D400U; // Encoding for: FABD_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute difference (vector).
    /// </summary>
    /// <remarks><code>FABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABD_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FABD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2EC01400U; // Encoding for: FABD_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute difference (vector).
    /// </summary>
    /// <remarks><code>FABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABD_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FABD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6EC01400U; // Encoding for: FABD_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute difference (vector).
    /// </summary>
    /// <remarks><code>FABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FABD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA0D400U; // Encoding for: FABD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute difference (vector).
    /// </summary>
    /// <remarks><code>FABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FABD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA0D400U; // Encoding for: FABD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute difference (vector).
    /// </summary>
    /// <remarks><code>FABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FABD(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x6EE0D400U; // Encoding for: FABD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute value (vector).
    /// </summary>
    /// <remarks><code>FABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABS_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FABS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0EF8F800U; // Encoding for: FABS_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute value (vector).
    /// </summary>
    /// <remarks><code>FABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABS_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FABS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4EF8F800U; // Encoding for: FABS_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute value (vector).
    /// </summary>
    /// <remarks><code>FABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FABS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x0EA0F800U; // Encoding for: FABS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute value (vector).
    /// </summary>
    /// <remarks><code>FABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FABS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x4EA0F800U; // Encoding for: FABS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute value (vector).
    /// </summary>
    /// <remarks><code>FABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FABS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x4EE0F800U; // Encoding for: FABS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FACGE Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGE_asisdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FACGE(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
    {
        uint raw = 0x7E402C00U; // Encoding for: FACGE_asisdsamefp16_only
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FACGE Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGE_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FACGE(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
    {
        uint raw = 0x7E20EC00U; // Encoding for: FACGE_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FACGE Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGE_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FACGE(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
    {
        uint raw = 0x7E60EC00U; // Encoding for: FACGE_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FACGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGE_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FACGE(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E402C00U; // Encoding for: FACGE_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FACGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGE_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FACGE(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E402C00U; // Encoding for: FACGE_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FACGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FACGE(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2E20EC00U; // Encoding for: FACGE_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FACGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FACGE(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6E20EC00U; // Encoding for: FACGE_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FACGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FACGE(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x6E60EC00U; // Encoding for: FACGE_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute compare greater than (vector).
    /// </summary>
    /// <remarks><code>FACGT Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGT_asisdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FACGT(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
    {
        uint raw = 0x7EC02C00U; // Encoding for: FACGT_asisdsamefp16_only
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute compare greater than (vector).
    /// </summary>
    /// <remarks><code>FACGT Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGT_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FACGT(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
    {
        uint raw = 0x7EA0EC00U; // Encoding for: FACGT_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute compare greater than (vector).
    /// </summary>
    /// <remarks><code>FACGT Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGT_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FACGT(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
    {
        uint raw = 0x7EE0EC00U; // Encoding for: FACGT_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute compare greater than (vector).
    /// </summary>
    /// <remarks><code>FACGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGT_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FACGT(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2EC02C00U; // Encoding for: FACGT_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute compare greater than (vector).
    /// </summary>
    /// <remarks><code>FACGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGT_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FACGT(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6EC02C00U; // Encoding for: FACGT_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute compare greater than (vector).
    /// </summary>
    /// <remarks><code>FACGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FACGT(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA0EC00U; // Encoding for: FACGT_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute compare greater than (vector).
    /// </summary>
    /// <remarks><code>FACGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FACGT(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA0EC00U; // Encoding for: FACGT_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute compare greater than (vector).
    /// </summary>
    /// <remarks><code>FACGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FACGT(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x6EE0EC00U; // Encoding for: FACGT_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point add (vector).
    /// </summary>
    /// <remarks><code>FADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADD_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FADD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E401400U; // Encoding for: FADD_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point add (vector).
    /// </summary>
    /// <remarks><code>FADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADD_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FADD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E401400U; // Encoding for: FADD_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point add (vector).
    /// </summary>
    /// <remarks><code>FADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FADD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0E20D400U; // Encoding for: FADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point add (vector).
    /// </summary>
    /// <remarks><code>FADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FADD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4E20D400U; // Encoding for: FADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point add (vector).
    /// </summary>
    /// <remarks><code>FADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FADD(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4E60D400U; // Encoding for: FADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point add pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FADDP Hd, Vn.2H</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADDP_asisdpair_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FADDP(Arm64RegisterH Hd, Arm64RegisterV_2H Vn_2H)
    {
        uint raw = 0x5E30D800U; // Encoding for: FADDP_asisdpair_only_h
        raw |= (uint)Hd.Index;
        raw |= (uint)Vn_2H.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point add pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FADDP Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADDP_asisdpair_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FADDP(Arm64RegisterS Vd, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x7E30D800U; // Encoding for: FADDP_asisdpair_only_sd
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point add pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FADDP Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADDP_asisdpair_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FADDP(Arm64RegisterD Vd, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x7E70D800U; // Encoding for: FADDP_asisdpair_only_sd
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point add pairwise (vector).
    /// </summary>
    /// <remarks><code>FADDP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADDP_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FADDP(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E401400U; // Encoding for: FADDP_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point add pairwise (vector).
    /// </summary>
    /// <remarks><code>FADDP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADDP_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FADDP(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E401400U; // Encoding for: FADDP_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point add pairwise (vector).
    /// </summary>
    /// <remarks><code>FADDP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADDP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FADDP(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2E20D400U; // Encoding for: FADDP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point add pairwise (vector).
    /// </summary>
    /// <remarks><code>FADDP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADDP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FADDP(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6E20D400U; // Encoding for: FADDP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point add pairwise (vector).
    /// </summary>
    /// <remarks><code>FADDP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADDP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FADDP(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x6E60D400U; // Encoding for: FADDP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute maximum.
    /// </summary>
    /// <remarks><code>FAMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FAMAX_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FAMAX(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0EC01C00U; // Encoding for: FAMAX_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute maximum.
    /// </summary>
    /// <remarks><code>FAMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FAMAX_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FAMAX(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4EC01C00U; // Encoding for: FAMAX_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute maximum.
    /// </summary>
    /// <remarks><code>FAMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FAMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FAMAX(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA0DC00U; // Encoding for: FAMAX_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute maximum.
    /// </summary>
    /// <remarks><code>FAMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FAMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FAMAX(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA0DC00U; // Encoding for: FAMAX_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute maximum.
    /// </summary>
    /// <remarks><code>FAMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FAMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FAMAX(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4EE0DC00U; // Encoding for: FAMAX_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute minimum.
    /// </summary>
    /// <remarks><code>FAMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FAMIN_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FAMIN(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2EC01C00U; // Encoding for: FAMIN_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute minimum.
    /// </summary>
    /// <remarks><code>FAMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FAMIN_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FAMIN(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6EC01C00U; // Encoding for: FAMIN_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute minimum.
    /// </summary>
    /// <remarks><code>FAMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FAMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FAMIN(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA0DC00U; // Encoding for: FAMIN_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute minimum.
    /// </summary>
    /// <remarks><code>FAMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FAMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FAMIN(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA0DC00U; // Encoding for: FAMIN_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point absolute minimum.
    /// </summary>
    /// <remarks><code>FAMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FAMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FAMIN(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x6EE0DC00U; // Encoding for: FAMIN_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point complex add.
    /// </summary>
    /// <remarks><code>FCADD Vd.T, Vn.T, Vm.T, #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCADD_asimdsame2_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCADD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T, ushort rotate)
    {
        uint raw = 0x2E40E400U; // Encoding for: FCADD_asimdsame2_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        raw |= rotate switch
        {
            90 => 0x00000000U,
            270 => 0x00001000U,
            _ => throw new ArgumentOutOfRangeException(nameof(rotate), "Invalid immediate `{rotate}`. The value must be in [90, 270]")
        };
        return raw;
    }
    /// <summary>
    /// Floating-point complex add.
    /// </summary>
    /// <remarks><code>FCADD Vd.T, Vn.T, Vm.T, #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCADD_asimdsame2_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCADD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T, ushort rotate)
    {
        uint raw = 0x6E40E400U; // Encoding for: FCADD_asimdsame2_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        raw |= rotate switch
        {
            90 => 0x00000000U,
            270 => 0x00001000U,
            _ => throw new ArgumentOutOfRangeException(nameof(rotate), "Invalid immediate `{rotate}`. The value must be in [90, 270]")
        };
        return raw;
    }
    /// <summary>
    /// Floating-point complex add.
    /// </summary>
    /// <remarks><code>FCADD Vd.T, Vn.T, Vm.T, #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCADD_asimdsame2_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCADD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T, ushort rotate)
    {
        uint raw = 0x2E80E400U; // Encoding for: FCADD_asimdsame2_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        raw |= rotate switch
        {
            90 => 0x00000000U,
            270 => 0x00001000U,
            _ => throw new ArgumentOutOfRangeException(nameof(rotate), "Invalid immediate `{rotate}`. The value must be in [90, 270]")
        };
        return raw;
    }
    /// <summary>
    /// Floating-point complex add.
    /// </summary>
    /// <remarks><code>FCADD Vd.T, Vn.T, Vm.T, #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCADD_asimdsame2_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCADD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T, ushort rotate)
    {
        uint raw = 0x6E80E400U; // Encoding for: FCADD_asimdsame2_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        raw |= rotate switch
        {
            90 => 0x00000000U,
            270 => 0x00001000U,
            _ => throw new ArgumentOutOfRangeException(nameof(rotate), "Invalid immediate `{rotate}`. The value must be in [90, 270]")
        };
        return raw;
    }
    /// <summary>
    /// Floating-point complex add.
    /// </summary>
    /// <remarks><code>FCADD Vd.T, Vn.T, Vm.T, #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCADD_asimdsame2_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCADD(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T, ushort rotate)
    {
        uint raw = 0x6EC0E400U; // Encoding for: FCADD_asimdsame2_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        raw |= rotate switch
        {
            90 => 0x00000000U,
            270 => 0x00001000U,
            _ => throw new ArgumentOutOfRangeException(nameof(rotate), "Invalid immediate `{rotate}`. The value must be in [90, 270]")
        };
        return raw;
    }
    /// <summary>
    /// Floating-point compare equal (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asisdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMEQ(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
    {
        uint raw = 0x5E402400U; // Encoding for: FCMEQ_asisdsamefp16_only
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point compare equal (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMEQ(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
    {
        uint raw = 0x5E20E400U; // Encoding for: FCMEQ_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point compare equal (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMEQ(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
    {
        uint raw = 0x5E60E400U; // Encoding for: FCMEQ_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point compare equal (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMEQ(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E402400U; // Encoding for: FCMEQ_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point compare equal (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMEQ(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E402400U; // Encoding for: FCMEQ_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point compare equal (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMEQ(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0E20E400U; // Encoding for: FCMEQ_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point compare equal (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMEQ(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4E20E400U; // Encoding for: FCMEQ_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point compare equal (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMEQ(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4E60E400U; // Encoding for: FCMEQ_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point compare equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Hd, Hn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asisdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMEQ(Arm64RegisterH Hd, Arm64RegisterH Hn, float zero = 0.0f)
    {
        uint raw = 0x5EF8D800U; // Encoding for: FCMEQ_asisdmiscfp16_fz
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd, Vn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asisdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMEQ(Arm64RegisterS Vd, Arm64RegisterS Vn, float zero = 0.0f)
    {
        uint raw = 0x5EA0D800U; // Encoding for: FCMEQ_asisdmisc_fz
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd, Vn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asisdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMEQ(Arm64RegisterD Vd, Arm64RegisterD Vn, float zero = 0.0f)
    {
        uint raw = 0x5EE0D800U; // Encoding for: FCMEQ_asisdmisc_fz
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asimdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMEQ(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, float zero = 0.0f)
    {
        uint raw = 0x0EF8D800U; // Encoding for: FCMEQ_asimdmiscfp16_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asimdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMEQ(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, float zero = 0.0f)
    {
        uint raw = 0x4EF8D800U; // Encoding for: FCMEQ_asimdmiscfp16_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMEQ(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, float zero = 0.0f)
    {
        uint raw = 0x0EA0D800U; // Encoding for: FCMEQ_asimdmisc_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMEQ(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, float zero = 0.0f)
    {
        uint raw = 0x4EA0D800U; // Encoding for: FCMEQ_asimdmisc_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMEQ(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, float zero = 0.0f)
    {
        uint raw = 0x4EE0D800U; // Encoding for: FCMEQ_asimdmisc_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FCMGE Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asisdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGE(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
    {
        uint raw = 0x7E402400U; // Encoding for: FCMGE_asisdsamefp16_only
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGE(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
    {
        uint raw = 0x7E20E400U; // Encoding for: FCMGE_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGE(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
    {
        uint raw = 0x7E60E400U; // Encoding for: FCMGE_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGE(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E402400U; // Encoding for: FCMGE_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGE(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E402400U; // Encoding for: FCMGE_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGE(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2E20E400U; // Encoding for: FCMGE_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGE(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6E20E400U; // Encoding for: FCMGE_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGE(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x6E60E400U; // Encoding for: FCMGE_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMGE Hd, Hn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asisdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGE(Arm64RegisterH Hd, Arm64RegisterH Hn, float zero = 0.0f)
    {
        uint raw = 0x7EF8C800U; // Encoding for: FCMGE_asisdmiscfp16_fz
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd, Vn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asisdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGE(Arm64RegisterS Vd, Arm64RegisterS Vn, float zero = 0.0f)
    {
        uint raw = 0x7EA0C800U; // Encoding for: FCMGE_asisdmisc_fz
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd, Vn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asisdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGE(Arm64RegisterD Vd, Arm64RegisterD Vn, float zero = 0.0f)
    {
        uint raw = 0x7EE0C800U; // Encoding for: FCMGE_asisdmisc_fz
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asimdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGE(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, float zero = 0.0f)
    {
        uint raw = 0x2EF8C800U; // Encoding for: FCMGE_asimdmiscfp16_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asimdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGE(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, float zero = 0.0f)
    {
        uint raw = 0x6EF8C800U; // Encoding for: FCMGE_asimdmiscfp16_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGE(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, float zero = 0.0f)
    {
        uint raw = 0x2EA0C800U; // Encoding for: FCMGE_asimdmisc_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGE(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, float zero = 0.0f)
    {
        uint raw = 0x6EA0C800U; // Encoding for: FCMGE_asimdmisc_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGE(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, float zero = 0.0f)
    {
        uint raw = 0x6EE0C800U; // Encoding for: FCMGE_asimdmisc_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than (vector).
    /// </summary>
    /// <remarks><code>FCMGT Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asisdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGT(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
    {
        uint raw = 0x7EC02400U; // Encoding for: FCMGT_asisdsamefp16_only
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGT(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
    {
        uint raw = 0x7EA0E400U; // Encoding for: FCMGT_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGT(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
    {
        uint raw = 0x7EE0E400U; // Encoding for: FCMGT_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGT(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2EC02400U; // Encoding for: FCMGT_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGT(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6EC02400U; // Encoding for: FCMGT_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGT(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA0E400U; // Encoding for: FCMGT_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGT(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA0E400U; // Encoding for: FCMGT_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGT(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x6EE0E400U; // Encoding for: FCMGT_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than zero (vector).
    /// </summary>
    /// <remarks><code>FCMGT Hd, Hn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asisdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGT(Arm64RegisterH Hd, Arm64RegisterH Hn, float zero = 0.0f)
    {
        uint raw = 0x5EF8C800U; // Encoding for: FCMGT_asisdmiscfp16_fz
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than zero (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd, Vn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asisdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGT(Arm64RegisterS Vd, Arm64RegisterS Vn, float zero = 0.0f)
    {
        uint raw = 0x5EA0C800U; // Encoding for: FCMGT_asisdmisc_fz
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than zero (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd, Vn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asisdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGT(Arm64RegisterD Vd, Arm64RegisterD Vn, float zero = 0.0f)
    {
        uint raw = 0x5EE0C800U; // Encoding for: FCMGT_asisdmisc_fz
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than zero (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asimdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGT(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, float zero = 0.0f)
    {
        uint raw = 0x0EF8C800U; // Encoding for: FCMGT_asimdmiscfp16_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than zero (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asimdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGT(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, float zero = 0.0f)
    {
        uint raw = 0x4EF8C800U; // Encoding for: FCMGT_asimdmiscfp16_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than zero (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGT(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, float zero = 0.0f)
    {
        uint raw = 0x0EA0C800U; // Encoding for: FCMGT_asimdmisc_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than zero (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGT(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, float zero = 0.0f)
    {
        uint raw = 0x4EA0C800U; // Encoding for: FCMGT_asimdmisc_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare greater than zero (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMGT(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, float zero = 0.0f)
    {
        uint raw = 0x4EE0C800U; // Encoding for: FCMGT_asimdmisc_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point complex multiply accumulate.
    /// </summary>
    /// <remarks><code>FCMLA Vd.T, Vn.T, Vm.T, #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLA_asimdsame2_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMLA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T, ushort rotate)
    {
        uint raw = 0x2E40C400U; // Encoding for: FCMLA_asimdsame2_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        raw |= rotate switch
        {
            0 => 0x00000000U,
            90 => 0x00000800U,
            180 => 0x00001000U,
            270 => 0x00001800U,
            _ => throw new ArgumentOutOfRangeException(nameof(rotate), "Invalid immediate `{rotate}`. The value must be in [0, 90, 180, 270]")
        };
        return raw;
    }
    /// <summary>
    /// Floating-point complex multiply accumulate.
    /// </summary>
    /// <remarks><code>FCMLA Vd.T, Vn.T, Vm.T, #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLA_asimdsame2_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMLA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T, ushort rotate)
    {
        uint raw = 0x6E40C400U; // Encoding for: FCMLA_asimdsame2_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        raw |= rotate switch
        {
            0 => 0x00000000U,
            90 => 0x00000800U,
            180 => 0x00001000U,
            270 => 0x00001800U,
            _ => throw new ArgumentOutOfRangeException(nameof(rotate), "Invalid immediate `{rotate}`. The value must be in [0, 90, 180, 270]")
        };
        return raw;
    }
    /// <summary>
    /// Floating-point complex multiply accumulate.
    /// </summary>
    /// <remarks><code>FCMLA Vd.T, Vn.T, Vm.T, #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLA_asimdsame2_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMLA(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T, ushort rotate)
    {
        uint raw = 0x2E80C400U; // Encoding for: FCMLA_asimdsame2_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        raw |= rotate switch
        {
            0 => 0x00000000U,
            90 => 0x00000800U,
            180 => 0x00001000U,
            270 => 0x00001800U,
            _ => throw new ArgumentOutOfRangeException(nameof(rotate), "Invalid immediate `{rotate}`. The value must be in [0, 90, 180, 270]")
        };
        return raw;
    }
    /// <summary>
    /// Floating-point complex multiply accumulate.
    /// </summary>
    /// <remarks><code>FCMLA Vd.T, Vn.T, Vm.T, #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLA_asimdsame2_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMLA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T, ushort rotate)
    {
        uint raw = 0x6E80C400U; // Encoding for: FCMLA_asimdsame2_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        raw |= rotate switch
        {
            0 => 0x00000000U,
            90 => 0x00000800U,
            180 => 0x00001000U,
            270 => 0x00001800U,
            _ => throw new ArgumentOutOfRangeException(nameof(rotate), "Invalid immediate `{rotate}`. The value must be in [0, 90, 180, 270]")
        };
        return raw;
    }
    /// <summary>
    /// Floating-point complex multiply accumulate.
    /// </summary>
    /// <remarks><code>FCMLA Vd.T, Vn.T, Vm.T, #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLA_asimdsame2_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMLA(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T, ushort rotate)
    {
        uint raw = 0x6EC0C400U; // Encoding for: FCMLA_asimdsame2_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        raw |= rotate switch
        {
            0 => 0x00000000U,
            90 => 0x00000800U,
            180 => 0x00001000U,
            270 => 0x00001800U,
            _ => throw new ArgumentOutOfRangeException(nameof(rotate), "Invalid immediate `{rotate}`. The value must be in [0, 90, 180, 270]")
        };
        return raw;
    }
    /// <summary>
    /// Floating-point complex multiply accumulate (by element).
    /// </summary>
    /// <remarks><code>FCMLA Vd.T, Vn.T, Vm.Ts[index], #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLA_advsimd_elt), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMLA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts, ushort rotate)
    {
        uint raw = 0x2F401000U; // Encoding for: FCMLA_advsimd_elt
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_Ts.Index << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        raw |= rotate switch
        {
            0 => 0x00000000U,
            90 => 0x00002000U,
            180 => 0x00004000U,
            270 => 0x00006000U,
            _ => throw new ArgumentOutOfRangeException(nameof(rotate), "Invalid immediate `{rotate}`. The value must be in [0, 90, 180, 270]")
        };
        return raw;
    }
    /// <summary>
    /// Floating-point complex multiply accumulate (by element).
    /// </summary>
    /// <remarks><code>FCMLA Vd.T, Vn.T, Vm.Ts[index], #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLA_advsimd_elt), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMLA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts, ushort rotate)
    {
        uint raw = 0x6F401000U; // Encoding for: FCMLA_advsimd_elt
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_Ts.Index << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        raw |= rotate switch
        {
            0 => 0x00000000U,
            90 => 0x00002000U,
            180 => 0x00004000U,
            270 => 0x00006000U,
            _ => throw new ArgumentOutOfRangeException(nameof(rotate), "Invalid immediate `{rotate}`. The value must be in [0, 90, 180, 270]")
        };
        return raw;
    }
    /// <summary>
    /// Floating-point complex multiply accumulate (by element).
    /// </summary>
    /// <remarks><code>FCMLA Vd.T, Vn.T, Vm.Ts[index], #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLA_advsimd_elt), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMLA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts, ushort rotate)
    {
        uint raw = 0x6F801000U; // Encoding for: FCMLA_advsimd_elt
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_Ts.Index << 16;
        raw |= (uint)(Vm_Ts.ElementIndex & 0x1) << 11;
        raw |= rotate switch
        {
            0 => 0x00000000U,
            90 => 0x00002000U,
            180 => 0x00004000U,
            270 => 0x00006000U,
            _ => throw new ArgumentOutOfRangeException(nameof(rotate), "Invalid immediate `{rotate}`. The value must be in [0, 90, 180, 270]")
        };
        return raw;
    }
    /// <summary>
    /// Floating-point compare less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMLE Hd, Hn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLE_asisdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMLE(Arm64RegisterH Hd, Arm64RegisterH Hn, float zero = 0.0f)
    {
        uint raw = 0x7EF8D800U; // Encoding for: FCMLE_asisdmiscfp16_fz
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMLE Vd, Vn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLE_asisdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMLE(Arm64RegisterS Vd, Arm64RegisterS Vn, float zero = 0.0f)
    {
        uint raw = 0x7EA0D800U; // Encoding for: FCMLE_asisdmisc_fz
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMLE Vd, Vn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLE_asisdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMLE(Arm64RegisterD Vd, Arm64RegisterD Vn, float zero = 0.0f)
    {
        uint raw = 0x7EE0D800U; // Encoding for: FCMLE_asisdmisc_fz
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMLE Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLE_asimdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMLE(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, float zero = 0.0f)
    {
        uint raw = 0x2EF8D800U; // Encoding for: FCMLE_asimdmiscfp16_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMLE Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLE_asimdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMLE(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, float zero = 0.0f)
    {
        uint raw = 0x6EF8D800U; // Encoding for: FCMLE_asimdmiscfp16_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMLE Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLE_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMLE(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, float zero = 0.0f)
    {
        uint raw = 0x2EA0D800U; // Encoding for: FCMLE_asimdmisc_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMLE Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLE_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMLE(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, float zero = 0.0f)
    {
        uint raw = 0x6EA0D800U; // Encoding for: FCMLE_asimdmisc_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMLE Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLE_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMLE(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, float zero = 0.0f)
    {
        uint raw = 0x6EE0D800U; // Encoding for: FCMLE_asimdmisc_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare less than zero (vector).
    /// </summary>
    /// <remarks><code>FCMLT Hd, Hn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLT_asisdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMLT(Arm64RegisterH Hd, Arm64RegisterH Hn, float zero = 0.0f)
    {
        uint raw = 0x5EF8E800U; // Encoding for: FCMLT_asisdmiscfp16_fz
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare less than zero (vector).
    /// </summary>
    /// <remarks><code>FCMLT Vd, Vn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLT_asisdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMLT(Arm64RegisterS Vd, Arm64RegisterS Vn, float zero = 0.0f)
    {
        uint raw = 0x5EA0E800U; // Encoding for: FCMLT_asisdmisc_fz
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare less than zero (vector).
    /// </summary>
    /// <remarks><code>FCMLT Vd, Vn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLT_asisdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMLT(Arm64RegisterD Vd, Arm64RegisterD Vn, float zero = 0.0f)
    {
        uint raw = 0x5EE0E800U; // Encoding for: FCMLT_asisdmisc_fz
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare less than zero (vector).
    /// </summary>
    /// <remarks><code>FCMLT Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLT_asimdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMLT(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, float zero = 0.0f)
    {
        uint raw = 0x0EF8E800U; // Encoding for: FCMLT_asimdmiscfp16_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare less than zero (vector).
    /// </summary>
    /// <remarks><code>FCMLT Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLT_asimdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMLT(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, float zero = 0.0f)
    {
        uint raw = 0x4EF8E800U; // Encoding for: FCMLT_asimdmiscfp16_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare less than zero (vector).
    /// </summary>
    /// <remarks><code>FCMLT Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLT_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMLT(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, float zero = 0.0f)
    {
        uint raw = 0x0EA0E800U; // Encoding for: FCMLT_asimdmisc_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare less than zero (vector).
    /// </summary>
    /// <remarks><code>FCMLT Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLT_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMLT(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, float zero = 0.0f)
    {
        uint raw = 0x4EA0E800U; // Encoding for: FCMLT_asimdmisc_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point compare less than zero (vector).
    /// </summary>
    /// <remarks><code>FCMLT Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLT_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCMLT(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, float zero = 0.0f)
    {
        uint raw = 0x4EE0E800U; // Encoding for: FCMLT_asimdmisc_fz
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        if (zero != 0.0f) throw new ArgumentOutOfRangeException(nameof(zero), $"Invalid Immediate. Expecting 0.0f instead of {zero}");
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAS Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAS(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x5E79C800U; // Encoding for: FCVTAS_asisdmiscfp16_r
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAS(Arm64RegisterS Vd, Arm64RegisterS Vn)
    {
        uint raw = 0x5E21C800U; // Encoding for: FCVTAS_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAS(Arm64RegisterD Vd, Arm64RegisterD Vn)
    {
        uint raw = 0x5E61C800U; // Encoding for: FCVTAS_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0E79C800U; // Encoding for: FCVTAS_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4E79C800U; // Encoding for: FCVTAS_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x0E21C800U; // Encoding for: FCVTAS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x4E21C800U; // Encoding for: FCVTAS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x4E61C800U; // Encoding for: FCVTAS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAU Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAU(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x7E79C800U; // Encoding for: FCVTAU_asisdmiscfp16_r
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAU Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAU(Arm64RegisterS Vd, Arm64RegisterS Vn)
    {
        uint raw = 0x7E21C800U; // Encoding for: FCVTAU_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAU Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAU(Arm64RegisterD Vd, Arm64RegisterD Vn)
    {
        uint raw = 0x7E61C800U; // Encoding for: FCVTAU_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAU(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x2E79C800U; // Encoding for: FCVTAU_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAU(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x6E79C800U; // Encoding for: FCVTAU_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAU(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x2E21C800U; // Encoding for: FCVTAU_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAU(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x6E21C800U; // Encoding for: FCVTAU_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTAU(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x6E61C800U; // Encoding for: FCVTAU_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to higher precision long (vector).
    /// </summary>
    /// <remarks><code>FCVTL Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTL_asimdmisc_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb)
    {
        uint raw = 0x0E217800U; // Encoding for: FCVTL_asimdmisc_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to higher precision long (vector).
    /// </summary>
    /// <remarks><code>FCVTL Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTL_asimdmisc_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb)
    {
        uint raw = 0x4E217800U; // Encoding for: FCVTL_asimdmisc_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to higher precision long (vector).
    /// </summary>
    /// <remarks><code>FCVTL Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTL_asimdmisc_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb)
    {
        uint raw = 0x0E617800U; // Encoding for: FCVTL_asimdmisc_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to higher precision long (vector).
    /// </summary>
    /// <remarks><code>FCVTL Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTL_asimdmisc_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb)
    {
        uint raw = 0x4E617800U; // Encoding for: FCVTL_asimdmisc_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to higher precision long (vector).
    /// </summary>
    /// <remarks><code>FCVTL2 Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTL2_asimdmisc_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb)
    {
        uint raw = 0x4E217800U; // Encoding for: FCVTL2_asimdmisc_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to higher precision long (vector).
    /// </summary>
    /// <remarks><code>FCVTL2 Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTL2_asimdmisc_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb)
    {
        uint raw = 0x4E217800U; // Encoding for: FCVTL2_asimdmisc_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to higher precision long (vector).
    /// </summary>
    /// <remarks><code>FCVTL2 Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTL2_asimdmisc_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb)
    {
        uint raw = 0x4E617800U; // Encoding for: FCVTL2_asimdmisc_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to higher precision long (vector).
    /// </summary>
    /// <remarks><code>FCVTL2 Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTL2_asimdmisc_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb)
    {
        uint raw = 0x4E617800U; // Encoding for: FCVTL2_asimdmisc_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMS Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMS(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x5E79B800U; // Encoding for: FCVTMS_asisdmiscfp16_r
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMS(Arm64RegisterS Vd, Arm64RegisterS Vn)
    {
        uint raw = 0x5E21B800U; // Encoding for: FCVTMS_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMS(Arm64RegisterD Vd, Arm64RegisterD Vn)
    {
        uint raw = 0x5E61B800U; // Encoding for: FCVTMS_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0E79B800U; // Encoding for: FCVTMS_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4E79B800U; // Encoding for: FCVTMS_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x0E21B800U; // Encoding for: FCVTMS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x4E21B800U; // Encoding for: FCVTMS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x4E61B800U; // Encoding for: FCVTMS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMU Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMU(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x7E79B800U; // Encoding for: FCVTMU_asisdmiscfp16_r
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMU Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMU(Arm64RegisterS Vd, Arm64RegisterS Vn)
    {
        uint raw = 0x7E21B800U; // Encoding for: FCVTMU_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMU Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMU(Arm64RegisterD Vd, Arm64RegisterD Vn)
    {
        uint raw = 0x7E61B800U; // Encoding for: FCVTMU_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMU(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x2E79B800U; // Encoding for: FCVTMU_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMU(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x6E79B800U; // Encoding for: FCVTMU_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMU(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x2E21B800U; // Encoding for: FCVTMU_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMU(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x6E21B800U; // Encoding for: FCVTMU_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTMU(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x6E61B800U; // Encoding for: FCVTMU_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Half-precision to 8-bit floating-point convert and narrow (vector).
    /// </summary>
    /// <remarks><code>FCVTN Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTN_asimdsame2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTN(Arm64RegisterV_8B Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x0E40F400U; // Encoding for: FCVTN_asimdsame2_d
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Half-precision to 8-bit floating-point convert and narrow (vector).
    /// </summary>
    /// <remarks><code>FCVTN Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTN_asimdsame2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTN(Arm64RegisterV_16B Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E40F400U; // Encoding for: FCVTN_asimdsame2_d
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to lower precision narrow (vector).
    /// </summary>
    /// <remarks><code>FCVTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
    {
        uint raw = 0x0E216800U; // Encoding for: FCVTN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to lower precision narrow (vector).
    /// </summary>
    /// <remarks><code>FCVTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTN(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
    {
        uint raw = 0x4E216800U; // Encoding for: FCVTN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to lower precision narrow (vector).
    /// </summary>
    /// <remarks><code>FCVTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
    {
        uint raw = 0x0E616800U; // Encoding for: FCVTN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to lower precision narrow (vector).
    /// </summary>
    /// <remarks><code>FCVTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTN(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
    {
        uint raw = 0x4E616800U; // Encoding for: FCVTN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Single-precision to 8-bit floating-point convert and narrow (vector).
    /// </summary>
    /// <remarks><code>FCVTN Vd.Ta, Vn.4S, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTN_asimdsame2_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTN(Arm64RegisterV_8B Vd_Ta, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_4S Vm_4S)
    {
        uint raw = 0x0E00F400U; // Encoding for: FCVTN_asimdsame2_h
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_4S.Index << 5;
        raw |= (uint)Vm_4S.Index << 16;
        return raw;
    }
    /// <summary>
    /// Single-precision to 8-bit floating-point convert and narrow (vector).
    /// </summary>
    /// <remarks><code>FCVTN Vd.Ta, Vn.4S, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTN_asimdsame2_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTN(Arm64RegisterV_16B Vd_Ta, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_4S Vm_4S)
    {
        uint raw = 0x4E00F400U; // Encoding for: FCVTN_asimdsame2_h
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_4S.Index << 5;
        raw |= (uint)Vm_4S.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to lower precision narrow (vector).
    /// </summary>
    /// <remarks><code>FCVTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTN2(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
    {
        uint raw = 0x4E216800U; // Encoding for: FCVTN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to lower precision narrow (vector).
    /// </summary>
    /// <remarks><code>FCVTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
    {
        uint raw = 0x4E216800U; // Encoding for: FCVTN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to lower precision narrow (vector).
    /// </summary>
    /// <remarks><code>FCVTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTN2(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
    {
        uint raw = 0x4E616800U; // Encoding for: FCVTN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to lower precision narrow (vector).
    /// </summary>
    /// <remarks><code>FCVTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
    {
        uint raw = 0x4E616800U; // Encoding for: FCVTN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Single-precision to 8-bit floating-point convert and narrow (vector).
    /// </summary>
    /// <remarks><code>FCVTN2 Vd.Ta, Vn.4S, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTN2_asimdsame2_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTN2(Arm64RegisterV_8B Vd_Ta, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_4S Vm_4S)
    {
        uint raw = 0x4E00F400U; // Encoding for: FCVTN2_asimdsame2_h
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_4S.Index << 5;
        raw |= (uint)Vm_4S.Index << 16;
        return raw;
    }
    /// <summary>
    /// Single-precision to 8-bit floating-point convert and narrow (vector).
    /// </summary>
    /// <remarks><code>FCVTN2 Vd.Ta, Vn.4S, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTN2_asimdsame2_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTN2(Arm64RegisterV_16B Vd_Ta, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_4S Vm_4S)
    {
        uint raw = 0x4E00F400U; // Encoding for: FCVTN2_asimdsame2_h
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_4S.Index << 5;
        raw |= (uint)Vm_4S.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNS Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNS(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x5E79A800U; // Encoding for: FCVTNS_asisdmiscfp16_r
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNS(Arm64RegisterS Vd, Arm64RegisterS Vn)
    {
        uint raw = 0x5E21A800U; // Encoding for: FCVTNS_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNS(Arm64RegisterD Vd, Arm64RegisterD Vn)
    {
        uint raw = 0x5E61A800U; // Encoding for: FCVTNS_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0E79A800U; // Encoding for: FCVTNS_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4E79A800U; // Encoding for: FCVTNS_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x0E21A800U; // Encoding for: FCVTNS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x4E21A800U; // Encoding for: FCVTNS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x4E61A800U; // Encoding for: FCVTNS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNU Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNU(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x7E79A800U; // Encoding for: FCVTNU_asisdmiscfp16_r
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNU Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNU(Arm64RegisterS Vd, Arm64RegisterS Vn)
    {
        uint raw = 0x7E21A800U; // Encoding for: FCVTNU_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNU Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNU(Arm64RegisterD Vd, Arm64RegisterD Vn)
    {
        uint raw = 0x7E61A800U; // Encoding for: FCVTNU_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNU(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x2E79A800U; // Encoding for: FCVTNU_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNU(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x6E79A800U; // Encoding for: FCVTNU_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNU(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x2E21A800U; // Encoding for: FCVTNU_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNU(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x6E21A800U; // Encoding for: FCVTNU_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTNU(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x6E61A800U; // Encoding for: FCVTNU_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPS Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPS(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x5EF9A800U; // Encoding for: FCVTPS_asisdmiscfp16_r
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPS(Arm64RegisterS Vd, Arm64RegisterS Vn)
    {
        uint raw = 0x5EA1A800U; // Encoding for: FCVTPS_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPS(Arm64RegisterD Vd, Arm64RegisterD Vn)
    {
        uint raw = 0x5EE1A800U; // Encoding for: FCVTPS_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0EF9A800U; // Encoding for: FCVTPS_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4EF9A800U; // Encoding for: FCVTPS_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x0EA1A800U; // Encoding for: FCVTPS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x4EA1A800U; // Encoding for: FCVTPS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x4EE1A800U; // Encoding for: FCVTPS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPU Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPU(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x7EF9A800U; // Encoding for: FCVTPU_asisdmiscfp16_r
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPU Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPU(Arm64RegisterS Vd, Arm64RegisterS Vn)
    {
        uint raw = 0x7EA1A800U; // Encoding for: FCVTPU_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPU Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPU(Arm64RegisterD Vd, Arm64RegisterD Vn)
    {
        uint raw = 0x7EE1A800U; // Encoding for: FCVTPU_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPU(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x2EF9A800U; // Encoding for: FCVTPU_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPU(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x6EF9A800U; // Encoding for: FCVTPU_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPU(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x2EA1A800U; // Encoding for: FCVTPU_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPU(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x6EA1A800U; // Encoding for: FCVTPU_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTPU(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x6EE1A800U; // Encoding for: FCVTPU_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to lower precision narrow, rounding to odd (vector).
    /// </summary>
    /// <remarks><code>FCVTXN Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTXN_asisdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTXN(Arm64RegisterS Sd, Arm64RegisterD Dn)
    {
        uint raw = 0x7E616800U; // Encoding for: FCVTXN_asisdmisc_n
        raw |= (uint)Sd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to lower precision narrow, rounding to odd (vector).
    /// </summary>
    /// <remarks><code>FCVTXN Vd.Tb, Vn.2D</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTXN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTXN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_2D)
    {
        uint raw = 0x2E616800U; // Encoding for: FCVTXN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_2D.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to lower precision narrow, rounding to odd (vector).
    /// </summary>
    /// <remarks><code>FCVTXN Vd.Tb, Vn.2D</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTXN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTXN(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_2D)
    {
        uint raw = 0x6E616800U; // Encoding for: FCVTXN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_2D.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to lower precision narrow, rounding to odd (vector).
    /// </summary>
    /// <remarks><code>FCVTXN2 Vd.Tb, Vn.2D</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTXN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTXN2(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_2D)
    {
        uint raw = 0x6E616800U; // Encoding for: FCVTXN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_2D.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to lower precision narrow, rounding to odd (vector).
    /// </summary>
    /// <remarks><code>FCVTXN2 Vd.Tb, Vn.2D</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTXN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTXN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_2D)
    {
        uint raw = 0x6E616800U; // Encoding for: FCVTXN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_2D.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd, Vn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asisdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterH Vd, Arm64RegisterH Vn, byte fbits)
    {
        uint raw = 0x5F10FC00U; // Encoding for: FCVTZS_asisdshf_c
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd, Vn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asisdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterS Vd, Arm64RegisterS Vn, byte fbits)
    {
        uint raw = 0x5F20FC00U; // Encoding for: FCVTZS_asisdshf_c
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd, Vn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asisdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterD Vd, Arm64RegisterD Vn, byte fbits)
    {
        uint raw = 0x5F40FC00U; // Encoding for: FCVTZS_asisdshf_c
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte fbits)
    {
        uint raw = 0x0F10FC00U; // Encoding for: FCVTZS_asimdshf_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte fbits)
    {
        uint raw = 0x4F10FC00U; // Encoding for: FCVTZS_asimdshf_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte fbits)
    {
        uint raw = 0x0F20FC00U; // Encoding for: FCVTZS_asimdshf_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte fbits)
    {
        uint raw = 0x4F20FC00U; // Encoding for: FCVTZS_asimdshf_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte fbits)
    {
        uint raw = 0x4F40FC00U; // Encoding for: FCVTZS_asimdshf_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x5EF9B800U; // Encoding for: FCVTZS_asisdmiscfp16_r
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterS Vd, Arm64RegisterS Vn)
    {
        uint raw = 0x5EA1B800U; // Encoding for: FCVTZS_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterD Vd, Arm64RegisterD Vn)
    {
        uint raw = 0x5EE1B800U; // Encoding for: FCVTZS_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0EF9B800U; // Encoding for: FCVTZS_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4EF9B800U; // Encoding for: FCVTZS_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x0EA1B800U; // Encoding for: FCVTZS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x4EA1B800U; // Encoding for: FCVTZS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x4EE1B800U; // Encoding for: FCVTZS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd, Vn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asisdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterH Vd, Arm64RegisterH Vn, byte fbits)
    {
        uint raw = 0x7F10FC00U; // Encoding for: FCVTZU_asisdshf_c
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd, Vn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asisdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterS Vd, Arm64RegisterS Vn, byte fbits)
    {
        uint raw = 0x7F20FC00U; // Encoding for: FCVTZU_asisdshf_c
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd, Vn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asisdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterD Vd, Arm64RegisterD Vn, byte fbits)
    {
        uint raw = 0x7F40FC00U; // Encoding for: FCVTZU_asisdshf_c
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte fbits)
    {
        uint raw = 0x2F10FC00U; // Encoding for: FCVTZU_asimdshf_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte fbits)
    {
        uint raw = 0x6F10FC00U; // Encoding for: FCVTZU_asimdshf_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte fbits)
    {
        uint raw = 0x2F20FC00U; // Encoding for: FCVTZU_asimdshf_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte fbits)
    {
        uint raw = 0x6F20FC00U; // Encoding for: FCVTZU_asimdshf_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte fbits)
    {
        uint raw = 0x6F40FC00U; // Encoding for: FCVTZU_asimdshf_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x7EF9B800U; // Encoding for: FCVTZU_asisdmiscfp16_r
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterS Vd, Arm64RegisterS Vn)
    {
        uint raw = 0x7EA1B800U; // Encoding for: FCVTZU_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterD Vd, Arm64RegisterD Vn)
    {
        uint raw = 0x7EE1B800U; // Encoding for: FCVTZU_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x2EF9B800U; // Encoding for: FCVTZU_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x6EF9B800U; // Encoding for: FCVTZU_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x2EA1B800U; // Encoding for: FCVTZU_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x6EA1B800U; // Encoding for: FCVTZU_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FCVTZU(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x6EE1B800U; // Encoding for: FCVTZU_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point divide (vector).
    /// </summary>
    /// <remarks><code>FDIV Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDIV_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FDIV(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E403C00U; // Encoding for: FDIV_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point divide (vector).
    /// </summary>
    /// <remarks><code>FDIV Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDIV_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FDIV(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E403C00U; // Encoding for: FDIV_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point divide (vector).
    /// </summary>
    /// <remarks><code>FDIV Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDIV_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FDIV(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2E20FC00U; // Encoding for: FDIV_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point divide (vector).
    /// </summary>
    /// <remarks><code>FDIV Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDIV_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FDIV(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6E20FC00U; // Encoding for: FDIV_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point divide (vector).
    /// </summary>
    /// <remarks><code>FDIV Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDIV_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FDIV(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x6E60FC00U; // Encoding for: FDIV_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point dot product to half-precision (vector, by element).
    /// </summary>
    /// <remarks><code>FDOT Vd.Ta, Vn.Tb, Vm.2B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDOT_asimdelem_g), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FDOT(Arm64RegisterV_4H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_2B.Indexed Vm_2B)
    {
        uint raw = 0x0F400000U; // Encoding for: FDOT_asimdelem_g
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_2B.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_2B.ElementIndex
            var _i_ = Vm_2B.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point dot product to half-precision (vector, by element).
    /// </summary>
    /// <remarks><code>FDOT Vd.Ta, Vn.Tb, Vm.2B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDOT_asimdelem_g), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FDOT(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_2B.Indexed Vm_2B)
    {
        uint raw = 0x4F400000U; // Encoding for: FDOT_asimdelem_g
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_2B.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_2B.ElementIndex
            var _i_ = Vm_2B.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point dot product to half-precision (vector).
    /// </summary>
    /// <remarks><code>FDOT Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDOT_asimdsame2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FDOT(Arm64RegisterV_4H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x0E40FC00U; // Encoding for: FDOT_asimdsame2_d
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point dot product to half-precision (vector).
    /// </summary>
    /// <remarks><code>FDOT Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDOT_asimdsame2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FDOT(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x4E40FC00U; // Encoding for: FDOT_asimdsame2_d
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point dot product to single-precision (vector, by element).
    /// </summary>
    /// <remarks><code>FDOT Vd.Ta, Vn.Tb, Vm.4B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDOT_asimdelem_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FDOT(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_4B.Indexed Vm_4B)
    {
        uint raw = 0x0F000000U; // Encoding for: FDOT_asimdelem_d
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_4B.Index << 16;
        {
            // Write the element indexer for Vm_4B.ElementIndex
            var _i_ = Vm_4B.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point dot product to single-precision (vector, by element).
    /// </summary>
    /// <remarks><code>FDOT Vd.Ta, Vn.Tb, Vm.4B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDOT_asimdelem_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FDOT(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_4B.Indexed Vm_4B)
    {
        uint raw = 0x4F000000U; // Encoding for: FDOT_asimdelem_d
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_4B.Index << 16;
        {
            // Write the element indexer for Vm_4B.ElementIndex
            var _i_ = Vm_4B.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point dot product to single-precision (vector).
    /// </summary>
    /// <remarks><code>FDOT Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDOT_asimdsame2_dd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FDOT(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x0E00FC00U; // Encoding for: FDOT_asimdsame2_dd
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point dot product to single-precision (vector).
    /// </summary>
    /// <remarks><code>FDOT Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDOT_asimdsame2_dd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FDOT(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x4E00FC00U; // Encoding for: FDOT_asimdsame2_dd
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum (vector).
    /// </summary>
    /// <remarks><code>FMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAX_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAX(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E403400U; // Encoding for: FMAX_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum (vector).
    /// </summary>
    /// <remarks><code>FMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAX_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAX(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E403400U; // Encoding for: FMAX_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum (vector).
    /// </summary>
    /// <remarks><code>FMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAX(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0E20F400U; // Encoding for: FMAX_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum (vector).
    /// </summary>
    /// <remarks><code>FMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAX(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4E20F400U; // Encoding for: FMAX_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum (vector).
    /// </summary>
    /// <remarks><code>FMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAX(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4E60F400U; // Encoding for: FMAX_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum number (vector).
    /// </summary>
    /// <remarks><code>FMAXNM Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNM_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXNM(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E400400U; // Encoding for: FMAXNM_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum number (vector).
    /// </summary>
    /// <remarks><code>FMAXNM Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNM_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXNM(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E400400U; // Encoding for: FMAXNM_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum number (vector).
    /// </summary>
    /// <remarks><code>FMAXNM Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNM_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXNM(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0E20C400U; // Encoding for: FMAXNM_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum number (vector).
    /// </summary>
    /// <remarks><code>FMAXNM Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNM_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXNM(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4E20C400U; // Encoding for: FMAXNM_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum number (vector).
    /// </summary>
    /// <remarks><code>FMAXNM Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNM_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXNM(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4E60C400U; // Encoding for: FMAXNM_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum number of pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FMAXNMP Hd, Vn.2H</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNMP_asisdpair_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXNMP(Arm64RegisterH Hd, Arm64RegisterV_2H Vn_2H)
    {
        uint raw = 0x5E30C800U; // Encoding for: FMAXNMP_asisdpair_only_h
        raw |= (uint)Hd.Index;
        raw |= (uint)Vn_2H.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum number of pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FMAXNMP Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNMP_asisdpair_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXNMP(Arm64RegisterS Vd, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x7E30C800U; // Encoding for: FMAXNMP_asisdpair_only_sd
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum number of pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FMAXNMP Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNMP_asisdpair_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXNMP(Arm64RegisterD Vd, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x7E70C800U; // Encoding for: FMAXNMP_asisdpair_only_sd
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum number pairwise (vector).
    /// </summary>
    /// <remarks><code>FMAXNMP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNMP_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXNMP(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E400400U; // Encoding for: FMAXNMP_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum number pairwise (vector).
    /// </summary>
    /// <remarks><code>FMAXNMP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNMP_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXNMP(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E400400U; // Encoding for: FMAXNMP_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum number pairwise (vector).
    /// </summary>
    /// <remarks><code>FMAXNMP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNMP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXNMP(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2E20C400U; // Encoding for: FMAXNMP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum number pairwise (vector).
    /// </summary>
    /// <remarks><code>FMAXNMP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNMP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXNMP(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6E20C400U; // Encoding for: FMAXNMP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum number pairwise (vector).
    /// </summary>
    /// <remarks><code>FMAXNMP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNMP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXNMP(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x6E60C400U; // Encoding for: FMAXNMP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum number across vector.
    /// </summary>
    /// <remarks><code>FMAXNMV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNMV_asimdall_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXNMV(Arm64RegisterH Vd, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0E30C800U; // Encoding for: FMAXNMV_asimdall_only_h
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum number across vector.
    /// </summary>
    /// <remarks><code>FMAXNMV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNMV_asimdall_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXNMV(Arm64RegisterH Vd, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4E30C800U; // Encoding for: FMAXNMV_asimdall_only_h
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum number across vector.
    /// </summary>
    /// <remarks><code>FMAXNMV Sd, Vn.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNMV_asimdall_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXNMV(Arm64RegisterS Sd, Arm64RegisterV_4S Vn_4S)
    {
        uint raw = 0x6E30C800U; // Encoding for: FMAXNMV_asimdall_only_sd
        raw |= (uint)Sd.Index;
        raw |= (uint)Vn_4S.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum of pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FMAXP Hd, Vn.2H</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXP_asisdpair_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXP(Arm64RegisterH Hd, Arm64RegisterV_2H Vn_2H)
    {
        uint raw = 0x5E30F800U; // Encoding for: FMAXP_asisdpair_only_h
        raw |= (uint)Hd.Index;
        raw |= (uint)Vn_2H.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum of pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FMAXP Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXP_asisdpair_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXP(Arm64RegisterS Vd, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x7E30F800U; // Encoding for: FMAXP_asisdpair_only_sd
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum of pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FMAXP Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXP_asisdpair_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXP(Arm64RegisterD Vd, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x7E70F800U; // Encoding for: FMAXP_asisdpair_only_sd
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum pairwise (vector).
    /// </summary>
    /// <remarks><code>FMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXP_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXP(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E403400U; // Encoding for: FMAXP_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum pairwise (vector).
    /// </summary>
    /// <remarks><code>FMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXP_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXP(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E403400U; // Encoding for: FMAXP_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum pairwise (vector).
    /// </summary>
    /// <remarks><code>FMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXP(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2E20F400U; // Encoding for: FMAXP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum pairwise (vector).
    /// </summary>
    /// <remarks><code>FMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXP(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6E20F400U; // Encoding for: FMAXP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum pairwise (vector).
    /// </summary>
    /// <remarks><code>FMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXP(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x6E60F400U; // Encoding for: FMAXP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum across vector.
    /// </summary>
    /// <remarks><code>FMAXV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXV_asimdall_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXV(Arm64RegisterH Vd, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0E30F800U; // Encoding for: FMAXV_asimdall_only_h
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum across vector.
    /// </summary>
    /// <remarks><code>FMAXV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXV_asimdall_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXV(Arm64RegisterH Vd, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4E30F800U; // Encoding for: FMAXV_asimdall_only_h
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point maximum across vector.
    /// </summary>
    /// <remarks><code>FMAXV Sd, Vn.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXV_asimdall_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMAXV(Arm64RegisterS Sd, Arm64RegisterV_4S Vn_4S)
    {
        uint raw = 0x6E30F800U; // Encoding for: FMAXV_asimdall_only_sd
        raw |= (uint)Sd.Index;
        raw |= (uint)Vn_4S.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum (vector).
    /// </summary>
    /// <remarks><code>FMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMIN_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMIN(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0EC03400U; // Encoding for: FMIN_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum (vector).
    /// </summary>
    /// <remarks><code>FMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMIN_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMIN(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4EC03400U; // Encoding for: FMIN_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum (vector).
    /// </summary>
    /// <remarks><code>FMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMIN(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA0F400U; // Encoding for: FMIN_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum (vector).
    /// </summary>
    /// <remarks><code>FMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMIN(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA0F400U; // Encoding for: FMIN_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum (vector).
    /// </summary>
    /// <remarks><code>FMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMIN(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4EE0F400U; // Encoding for: FMIN_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum number (vector).
    /// </summary>
    /// <remarks><code>FMINNM Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNM_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINNM(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0EC00400U; // Encoding for: FMINNM_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum number (vector).
    /// </summary>
    /// <remarks><code>FMINNM Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNM_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINNM(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4EC00400U; // Encoding for: FMINNM_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum number (vector).
    /// </summary>
    /// <remarks><code>FMINNM Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNM_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINNM(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA0C400U; // Encoding for: FMINNM_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum number (vector).
    /// </summary>
    /// <remarks><code>FMINNM Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNM_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINNM(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA0C400U; // Encoding for: FMINNM_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum number (vector).
    /// </summary>
    /// <remarks><code>FMINNM Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNM_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINNM(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4EE0C400U; // Encoding for: FMINNM_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum number of pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FMINNMP Hd, Vn.2H</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNMP_asisdpair_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINNMP(Arm64RegisterH Hd, Arm64RegisterV_2H Vn_2H)
    {
        uint raw = 0x5EB0C800U; // Encoding for: FMINNMP_asisdpair_only_h
        raw |= (uint)Hd.Index;
        raw |= (uint)Vn_2H.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum number of pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FMINNMP Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNMP_asisdpair_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINNMP(Arm64RegisterS Vd, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x7EB0C800U; // Encoding for: FMINNMP_asisdpair_only_sd
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum number of pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FMINNMP Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNMP_asisdpair_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINNMP(Arm64RegisterD Vd, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x7EF0C800U; // Encoding for: FMINNMP_asisdpair_only_sd
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum number pairwise (vector).
    /// </summary>
    /// <remarks><code>FMINNMP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNMP_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINNMP(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2EC00400U; // Encoding for: FMINNMP_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum number pairwise (vector).
    /// </summary>
    /// <remarks><code>FMINNMP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNMP_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINNMP(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6EC00400U; // Encoding for: FMINNMP_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum number pairwise (vector).
    /// </summary>
    /// <remarks><code>FMINNMP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNMP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINNMP(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA0C400U; // Encoding for: FMINNMP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum number pairwise (vector).
    /// </summary>
    /// <remarks><code>FMINNMP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNMP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINNMP(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA0C400U; // Encoding for: FMINNMP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum number pairwise (vector).
    /// </summary>
    /// <remarks><code>FMINNMP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNMP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINNMP(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x6EE0C400U; // Encoding for: FMINNMP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum number across vector.
    /// </summary>
    /// <remarks><code>FMINNMV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNMV_asimdall_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINNMV(Arm64RegisterH Vd, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0EB0C800U; // Encoding for: FMINNMV_asimdall_only_h
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum number across vector.
    /// </summary>
    /// <remarks><code>FMINNMV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNMV_asimdall_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINNMV(Arm64RegisterH Vd, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4EB0C800U; // Encoding for: FMINNMV_asimdall_only_h
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum number across vector.
    /// </summary>
    /// <remarks><code>FMINNMV Sd, Vn.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNMV_asimdall_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINNMV(Arm64RegisterS Sd, Arm64RegisterV_4S Vn_4S)
    {
        uint raw = 0x6EB0C800U; // Encoding for: FMINNMV_asimdall_only_sd
        raw |= (uint)Sd.Index;
        raw |= (uint)Vn_4S.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum of pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FMINP Hd, Vn.2H</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINP_asisdpair_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINP(Arm64RegisterH Hd, Arm64RegisterV_2H Vn_2H)
    {
        uint raw = 0x5EB0F800U; // Encoding for: FMINP_asisdpair_only_h
        raw |= (uint)Hd.Index;
        raw |= (uint)Vn_2H.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum of pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FMINP Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINP_asisdpair_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINP(Arm64RegisterS Vd, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x7EB0F800U; // Encoding for: FMINP_asisdpair_only_sd
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum of pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FMINP Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINP_asisdpair_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINP(Arm64RegisterD Vd, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x7EF0F800U; // Encoding for: FMINP_asisdpair_only_sd
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum pairwise (vector).
    /// </summary>
    /// <remarks><code>FMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINP_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINP(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2EC03400U; // Encoding for: FMINP_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum pairwise (vector).
    /// </summary>
    /// <remarks><code>FMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINP_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINP(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6EC03400U; // Encoding for: FMINP_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum pairwise (vector).
    /// </summary>
    /// <remarks><code>FMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINP(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA0F400U; // Encoding for: FMINP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum pairwise (vector).
    /// </summary>
    /// <remarks><code>FMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINP(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA0F400U; // Encoding for: FMINP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum pairwise (vector).
    /// </summary>
    /// <remarks><code>FMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINP(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x6EE0F400U; // Encoding for: FMINP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum across vector.
    /// </summary>
    /// <remarks><code>FMINV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINV_asimdall_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINV(Arm64RegisterH Vd, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0EB0F800U; // Encoding for: FMINV_asimdall_only_h
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum across vector.
    /// </summary>
    /// <remarks><code>FMINV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINV_asimdall_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINV(Arm64RegisterH Vd, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4EB0F800U; // Encoding for: FMINV_asimdall_only_h
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point minimum across vector.
    /// </summary>
    /// <remarks><code>FMINV Sd, Vn.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINV_asimdall_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMINV(Arm64RegisterS Sd, Arm64RegisterV_4S Vn_4S)
    {
        uint raw = 0x6EB0F800U; // Encoding for: FMINV_asimdall_only_sd
        raw |= (uint)Sd.Index;
        raw |= (uint)Vn_4S.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLA Hd, Hn, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asisdelem_rh_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLA(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterV_H.Indexed Vm_H)
    {
        uint raw = 0x5F001000U; // Encoding for: FMLA_asisdelem_rh_h
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)(Vm_H.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_H.ElementIndex
            var _i_ = Vm_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLA Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asisdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLA(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x5F801000U; // Encoding for: FMLA_asisdelem_r_sd
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm_Ts.Index << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLA Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asisdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLA(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterV_D.Indexed Vm_Ts)
    {
        uint raw = 0x5FC01000U; // Encoding for: FMLA_asisdelem_r_sd
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm_Ts.Index << 16;
        raw |= (uint)(Vm_Ts.ElementIndex & 0x1) << 11;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLA Vd.T, Vn.T, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asimdelem_rh_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_H.Indexed Vm_H)
    {
        uint raw = 0x0F001000U; // Encoding for: FMLA_asimdelem_rh_h
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_H.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_H.ElementIndex
            var _i_ = Vm_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLA Vd.T, Vn.T, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asimdelem_rh_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_H.Indexed Vm_H)
    {
        uint raw = 0x4F001000U; // Encoding for: FMLA_asimdelem_rh_h
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_H.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_H.ElementIndex
            var _i_ = Vm_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLA Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asimdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLA(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x0F801000U; // Encoding for: FMLA_asimdelem_r_sd
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_Ts.Index << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLA Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asimdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x4F801000U; // Encoding for: FMLA_asimdelem_r_sd
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_Ts.Index << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLA Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asimdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLA(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_D.Indexed Vm_Ts)
    {
        uint raw = 0x4FC01000U; // Encoding for: FMLA_asimdelem_r_sd
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_Ts.Index << 16;
        raw |= (uint)(Vm_Ts.ElementIndex & 0x1) << 11;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E400C00U; // Encoding for: FMLA_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E400C00U; // Encoding for: FMLA_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLA(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0E20CC00U; // Encoding for: FMLA_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4E20CC00U; // Encoding for: FMLA_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLA(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4E60CC00U; // Encoding for: FMLA_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-add long to accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLAL Vd.Ta, Vn.Tb, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLAL_asimdelem_lh), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLAL(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_2H Vn_Tb, Arm64RegisterV_H.Indexed Vm_H)
    {
        uint raw = 0x0F800000U; // Encoding for: FMLAL_asimdelem_lh
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_H.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_H.ElementIndex
            var _i_ = Vm_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-add long to accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLAL Vd.Ta, Vn.Tb, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLAL_asimdelem_lh), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_H)
    {
        uint raw = 0x4F800000U; // Encoding for: FMLAL_asimdelem_lh
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_H.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_H.ElementIndex
            var _i_ = Vm_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-add long to accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLAL_asimdsame_f), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLAL(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_2H Vn_Tb, Arm64RegisterV_2H Vm_Tb)
    {
        uint raw = 0x0E20EC00U; // Encoding for: FMLAL_asimdsame_f
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-add long to accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLAL_asimdsame_f), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x4E20EC00U; // Encoding for: FMLAL_asimdsame_f
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-add long to accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLAL2 Vd.Ta, Vn.Tb, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLAL2_asimdelem_lh), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLAL2(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_2H Vn_Tb, Arm64RegisterV_H.Indexed Vm_H)
    {
        uint raw = 0x2F808000U; // Encoding for: FMLAL2_asimdelem_lh
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_H.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_H.ElementIndex
            var _i_ = Vm_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-add long to accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLAL2 Vd.Ta, Vn.Tb, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLAL2_asimdelem_lh), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_H)
    {
        uint raw = 0x6F808000U; // Encoding for: FMLAL2_asimdelem_lh
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_H.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_H.ElementIndex
            var _i_ = Vm_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-add long to accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLAL2_asimdsame_f), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLAL2(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_2H Vn_Tb, Arm64RegisterV_2H Vm_Tb)
    {
        uint raw = 0x2E20CC00U; // Encoding for: FMLAL2_asimdsame_f
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-add long to accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLAL2_asimdsame_f), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x6E20CC00U; // Encoding for: FMLAL2_asimdsame_f
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point multiply-add long to half-precision (vector, by element).
    /// </summary>
    /// <remarks><code>FMLALB Vd.8H, Vn.16B, Vm.B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLALB_asimdelem_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLALB(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_B.Indexed Vm_B)
    {
        uint raw = 0x0FC00000U; // Encoding for: FMLALB_asimdelem_h
        raw |= (uint)Vd_8H.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)(Vm_B.Index & 0x7) << 16;
        {
            // Write the element indexer for Vm_B.ElementIndex
            var _i_ = Vm_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 19;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point multiply-add long to half-precision (vector).
    /// </summary>
    /// <remarks><code>FMLALB Vd.8H, Vn.16B, Vm.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLALB_asimdsame2_j), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLALB(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B)
    {
        uint raw = 0x0EC0FC00U; // Encoding for: FMLALB_asimdsame2_j
        raw |= (uint)Vd_8H.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_16B.Index << 16;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point multiply-add long-long to single-precision (vector, by element).
    /// </summary>
    /// <remarks><code>FMLALLBB Vd.4S, Vn.16B, Vm.B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLALLBB_asimdelem_j), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLALLBB(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_B.Indexed Vm_B)
    {
        uint raw = 0x2F008000U; // Encoding for: FMLALLBB_asimdelem_j
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)(Vm_B.Index & 0x7) << 16;
        {
            // Write the element indexer for Vm_B.ElementIndex
            var _i_ = Vm_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 19;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point multiply-add long-long to single-precision (vector).
    /// </summary>
    /// <remarks><code>FMLALLBB Vd.4S, Vn.16B, Vm.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLALLBB_asimdsame2_g), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLALLBB(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B)
    {
        uint raw = 0x0E00C400U; // Encoding for: FMLALLBB_asimdsame2_g
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_16B.Index << 16;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point multiply-add long-long to single-precision (vector, by element).
    /// </summary>
    /// <remarks><code>FMLALLBT Vd.4S, Vn.16B, Vm.B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLALLBT_asimdelem_j), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLALLBT(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_B.Indexed Vm_B)
    {
        uint raw = 0x2F408000U; // Encoding for: FMLALLBT_asimdelem_j
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)(Vm_B.Index & 0x7) << 16;
        {
            // Write the element indexer for Vm_B.ElementIndex
            var _i_ = Vm_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 19;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point multiply-add long-long to single-precision (vector).
    /// </summary>
    /// <remarks><code>FMLALLBT Vd.4S, Vn.16B, Vm.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLALLBT_asimdsame2_g), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLALLBT(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B)
    {
        uint raw = 0x0E40C400U; // Encoding for: FMLALLBT_asimdsame2_g
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_16B.Index << 16;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point multiply-add long-long to single-precision (vector, by element).
    /// </summary>
    /// <remarks><code>FMLALLTB Vd.4S, Vn.16B, Vm.B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLALLTB_asimdelem_j), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLALLTB(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_B.Indexed Vm_B)
    {
        uint raw = 0x6F008000U; // Encoding for: FMLALLTB_asimdelem_j
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)(Vm_B.Index & 0x7) << 16;
        {
            // Write the element indexer for Vm_B.ElementIndex
            var _i_ = Vm_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 19;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point multiply-add long-long to single-precision (vector).
    /// </summary>
    /// <remarks><code>FMLALLTB Vd.4S, Vn.16B, Vm.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLALLTB_asimdsame2_g), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLALLTB(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B)
    {
        uint raw = 0x4E00C400U; // Encoding for: FMLALLTB_asimdsame2_g
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_16B.Index << 16;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point multiply-add long-long to single-precision (vector, by element).
    /// </summary>
    /// <remarks><code>FMLALLTT Vd.4S, Vn.16B, Vm.B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLALLTT_asimdelem_j), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLALLTT(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_B.Indexed Vm_B)
    {
        uint raw = 0x6F408000U; // Encoding for: FMLALLTT_asimdelem_j
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)(Vm_B.Index & 0x7) << 16;
        {
            // Write the element indexer for Vm_B.ElementIndex
            var _i_ = Vm_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 19;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point multiply-add long-long to single-precision (vector).
    /// </summary>
    /// <remarks><code>FMLALLTT Vd.4S, Vn.16B, Vm.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLALLTT_asimdsame2_g), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLALLTT(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B)
    {
        uint raw = 0x4E40C400U; // Encoding for: FMLALLTT_asimdsame2_g
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_16B.Index << 16;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point multiply-add long to half-precision (vector, by element).
    /// </summary>
    /// <remarks><code>FMLALT Vd.8H, Vn.16B, Vm.B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLALT_asimdelem_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLALT(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_B.Indexed Vm_B)
    {
        uint raw = 0x4FC00000U; // Encoding for: FMLALT_asimdelem_h
        raw |= (uint)Vd_8H.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)(Vm_B.Index & 0x7) << 16;
        {
            // Write the element indexer for Vm_B.ElementIndex
            var _i_ = Vm_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 19;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point multiply-add long to half-precision (vector).
    /// </summary>
    /// <remarks><code>FMLALT Vd.8H, Vn.16B, Vm.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLALT_asimdsame2_j), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLALT(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B)
    {
        uint raw = 0x4EC0FC00U; // Encoding for: FMLALT_asimdsame2_j
        raw |= (uint)Vd_8H.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_16B.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLS Hd, Hn, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asisdelem_rh_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLS(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterV_H.Indexed Vm_H)
    {
        uint raw = 0x5F005000U; // Encoding for: FMLS_asisdelem_rh_h
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)(Vm_H.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_H.ElementIndex
            var _i_ = Vm_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLS Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asisdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLS(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x5F805000U; // Encoding for: FMLS_asisdelem_r_sd
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm_Ts.Index << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLS Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asisdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLS(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterV_D.Indexed Vm_Ts)
    {
        uint raw = 0x5FC05000U; // Encoding for: FMLS_asisdelem_r_sd
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm_Ts.Index << 16;
        raw |= (uint)(Vm_Ts.ElementIndex & 0x1) << 11;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLS Vd.T, Vn.T, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asimdelem_rh_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_H.Indexed Vm_H)
    {
        uint raw = 0x0F005000U; // Encoding for: FMLS_asimdelem_rh_h
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_H.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_H.ElementIndex
            var _i_ = Vm_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLS Vd.T, Vn.T, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asimdelem_rh_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_H.Indexed Vm_H)
    {
        uint raw = 0x4F005000U; // Encoding for: FMLS_asimdelem_rh_h
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_H.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_H.ElementIndex
            var _i_ = Vm_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLS Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asimdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x0F805000U; // Encoding for: FMLS_asimdelem_r_sd
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_Ts.Index << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLS Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asimdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x4F805000U; // Encoding for: FMLS_asimdelem_r_sd
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_Ts.Index << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLS Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asimdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_D.Indexed Vm_Ts)
    {
        uint raw = 0x4FC05000U; // Encoding for: FMLS_asimdelem_r_sd
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_Ts.Index << 16;
        raw |= (uint)(Vm_Ts.ElementIndex & 0x1) << 11;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0EC00C00U; // Encoding for: FMLS_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4EC00C00U; // Encoding for: FMLS_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA0CC00U; // Encoding for: FMLS_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA0CC00U; // Encoding for: FMLS_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4EE0CC00U; // Encoding for: FMLS_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-subtract long from accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLSL Vd.Ta, Vn.Tb, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLSL_asimdelem_lh), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLSL(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_2H Vn_Tb, Arm64RegisterV_H.Indexed Vm_H)
    {
        uint raw = 0x0F804000U; // Encoding for: FMLSL_asimdelem_lh
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_H.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_H.ElementIndex
            var _i_ = Vm_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-subtract long from accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLSL Vd.Ta, Vn.Tb, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLSL_asimdelem_lh), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLSL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_H)
    {
        uint raw = 0x4F804000U; // Encoding for: FMLSL_asimdelem_lh
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_H.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_H.ElementIndex
            var _i_ = Vm_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-subtract long from accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLSL_asimdsame_f), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLSL(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_2H Vn_Tb, Arm64RegisterV_2H Vm_Tb)
    {
        uint raw = 0x0EA0EC00U; // Encoding for: FMLSL_asimdsame_f
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-subtract long from accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLSL_asimdsame_f), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLSL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x4EA0EC00U; // Encoding for: FMLSL_asimdsame_f
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-subtract long from accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLSL2 Vd.Ta, Vn.Tb, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLSL2_asimdelem_lh), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLSL2(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_2H Vn_Tb, Arm64RegisterV_H.Indexed Vm_H)
    {
        uint raw = 0x2F80C000U; // Encoding for: FMLSL2_asimdelem_lh
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_H.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_H.ElementIndex
            var _i_ = Vm_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-subtract long from accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLSL2 Vd.Ta, Vn.Tb, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLSL2_asimdelem_lh), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLSL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_H)
    {
        uint raw = 0x6F80C000U; // Encoding for: FMLSL2_asimdelem_lh
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_H.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_H.ElementIndex
            var _i_ = Vm_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-subtract long from accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLSL2_asimdsame_f), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLSL2(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_2H Vn_Tb, Arm64RegisterV_2H Vm_Tb)
    {
        uint raw = 0x2EA0CC00U; // Encoding for: FMLSL2_asimdsame_f
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point fused multiply-subtract long from accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLSL2_asimdsame_f), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMLSL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x6EA0CC00U; // Encoding for: FMLSL2_asimdsame_f
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point matrix multiply-accumulate into 2x2 half-precision matrix.
    /// </summary>
    /// <remarks><code>FMMLA Vd.8H, Vn.16B, Vm.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMMLA_asimd_fp8fp16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMMLA(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B)
    {
        uint raw = 0x6E00EC00U; // Encoding for: FMMLA_asimd_fp8fp16
        raw |= (uint)Vd_8H.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_16B.Index << 16;
        return raw;
    }
    /// <summary>
    /// 8-bit floating-point matrix multiply-accumulate into 2x2 single-precision matrix.
    /// </summary>
    /// <remarks><code>FMMLA Vd.4S, Vn.16B, Vm.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMMLA_asimd_fp8fp32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMMLA(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B)
    {
        uint raw = 0x6E80EC00U; // Encoding for: FMMLA_asimd_fp8fp32
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_16B.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point move immediate (vector).
    /// </summary>
    /// <remarks><code>FMOV Vd.T, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_asimdimm_h_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMOV(Arm64RegisterV_4H Vd_T, Arm64FloatImmediate imm)
    {
        uint raw = 0x0F00FC00U; // Encoding for: FMOV_asimdimm_h_h
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm.Value
            var _i_ = imm.Value & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point move immediate (vector).
    /// </summary>
    /// <remarks><code>FMOV Vd.T, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_asimdimm_h_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMOV(Arm64RegisterV_8H Vd_T, Arm64FloatImmediate imm)
    {
        uint raw = 0x4F00FC00U; // Encoding for: FMOV_asimdimm_h_h
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm.Value
            var _i_ = imm.Value & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point move immediate (vector).
    /// </summary>
    /// <remarks><code>FMOV Vd.T, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_asimdimm_s_s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMOV(Arm64RegisterV_2S Vd_T, Arm64FloatImmediate imm)
    {
        uint raw = 0x0F00F400U; // Encoding for: FMOV_asimdimm_s_s
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm.Value
            var _i_ = imm.Value & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point move immediate (vector).
    /// </summary>
    /// <remarks><code>FMOV Vd.T, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_asimdimm_s_s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMOV(Arm64RegisterV_4S Vd_T, Arm64FloatImmediate imm)
    {
        uint raw = 0x4F00F400U; // Encoding for: FMOV_asimdimm_s_s
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm.Value
            var _i_ = imm.Value & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point move immediate (vector).
    /// </summary>
    /// <remarks><code>FMOV Vd.2D, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_asimdimm_d2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMOV(Arm64RegisterV_2D Vd_2D, Arm64FloatImmediate imm)
    {
        uint raw = 0x6F00F400U; // Encoding for: FMOV_asimdimm_d2_d
        raw |= (uint)Vd_2D.Index;
        {
            // Write the immediate for imm.Value
            var _i_ = imm.Value & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point multiply (by element).
    /// </summary>
    /// <remarks><code>FMUL Hd, Hn, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asisdelem_rh_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMUL(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterV_H.Indexed Vm_H)
    {
        uint raw = 0x5F009000U; // Encoding for: FMUL_asisdelem_rh_h
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)(Vm_H.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_H.ElementIndex
            var _i_ = Vm_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point multiply (by element).
    /// </summary>
    /// <remarks><code>FMUL Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asisdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMUL(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x5F809000U; // Encoding for: FMUL_asisdelem_r_sd
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm_Ts.Index << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point multiply (by element).
    /// </summary>
    /// <remarks><code>FMUL Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asisdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMUL(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterV_D.Indexed Vm_Ts)
    {
        uint raw = 0x5FC09000U; // Encoding for: FMUL_asisdelem_r_sd
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm_Ts.Index << 16;
        raw |= (uint)(Vm_Ts.ElementIndex & 0x1) << 11;
        return raw;
    }
    /// <summary>
    /// Floating-point multiply (by element).
    /// </summary>
    /// <remarks><code>FMUL Vd.T, Vn.T, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asimdelem_rh_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMUL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_H.Indexed Vm_H)
    {
        uint raw = 0x0F009000U; // Encoding for: FMUL_asimdelem_rh_h
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_H.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_H.ElementIndex
            var _i_ = Vm_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point multiply (by element).
    /// </summary>
    /// <remarks><code>FMUL Vd.T, Vn.T, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asimdelem_rh_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMUL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_H.Indexed Vm_H)
    {
        uint raw = 0x4F009000U; // Encoding for: FMUL_asimdelem_rh_h
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_H.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_H.ElementIndex
            var _i_ = Vm_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point multiply (by element).
    /// </summary>
    /// <remarks><code>FMUL Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asimdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMUL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x0F809000U; // Encoding for: FMUL_asimdelem_r_sd
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_Ts.Index << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point multiply (by element).
    /// </summary>
    /// <remarks><code>FMUL Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asimdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMUL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x4F809000U; // Encoding for: FMUL_asimdelem_r_sd
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_Ts.Index << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point multiply (by element).
    /// </summary>
    /// <remarks><code>FMUL Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asimdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMUL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_D.Indexed Vm_Ts)
    {
        uint raw = 0x4FC09000U; // Encoding for: FMUL_asimdelem_r_sd
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_Ts.Index << 16;
        raw |= (uint)(Vm_Ts.ElementIndex & 0x1) << 11;
        return raw;
    }
    /// <summary>
    /// Floating-point multiply (vector).
    /// </summary>
    /// <remarks><code>FMUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMUL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E401C00U; // Encoding for: FMUL_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point multiply (vector).
    /// </summary>
    /// <remarks><code>FMUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMUL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E401C00U; // Encoding for: FMUL_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point multiply (vector).
    /// </summary>
    /// <remarks><code>FMUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMUL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2E20DC00U; // Encoding for: FMUL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point multiply (vector).
    /// </summary>
    /// <remarks><code>FMUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMUL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6E20DC00U; // Encoding for: FMUL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point multiply (vector).
    /// </summary>
    /// <remarks><code>FMUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMUL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x6E60DC00U; // Encoding for: FMUL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point multiply extended.
    /// </summary>
    /// <remarks><code>FMULX Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asisdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMULX(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
    {
        uint raw = 0x5E401C00U; // Encoding for: FMULX_asisdsamefp16_only
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point multiply extended.
    /// </summary>
    /// <remarks><code>FMULX Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMULX(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
    {
        uint raw = 0x5E20DC00U; // Encoding for: FMULX_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point multiply extended.
    /// </summary>
    /// <remarks><code>FMULX Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMULX(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
    {
        uint raw = 0x5E60DC00U; // Encoding for: FMULX_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point multiply extended.
    /// </summary>
    /// <remarks><code>FMULX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMULX(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E401C00U; // Encoding for: FMULX_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point multiply extended.
    /// </summary>
    /// <remarks><code>FMULX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMULX(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E401C00U; // Encoding for: FMULX_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point multiply extended.
    /// </summary>
    /// <remarks><code>FMULX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMULX(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0E20DC00U; // Encoding for: FMULX_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point multiply extended.
    /// </summary>
    /// <remarks><code>FMULX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMULX(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4E20DC00U; // Encoding for: FMULX_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point multiply extended.
    /// </summary>
    /// <remarks><code>FMULX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMULX(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4E60DC00U; // Encoding for: FMULX_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point multiply extended (by element).
    /// </summary>
    /// <remarks><code>FMULX Hd, Hn, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asisdelem_rh_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMULX(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterV_H.Indexed Vm_H)
    {
        uint raw = 0x7F009000U; // Encoding for: FMULX_asisdelem_rh_h
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)(Vm_H.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_H.ElementIndex
            var _i_ = Vm_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point multiply extended (by element).
    /// </summary>
    /// <remarks><code>FMULX Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asisdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMULX(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x7F809000U; // Encoding for: FMULX_asisdelem_r_sd
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm_Ts.Index << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point multiply extended (by element).
    /// </summary>
    /// <remarks><code>FMULX Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asisdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMULX(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterV_D.Indexed Vm_Ts)
    {
        uint raw = 0x7FC09000U; // Encoding for: FMULX_asisdelem_r_sd
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm_Ts.Index << 16;
        raw |= (uint)(Vm_Ts.ElementIndex & 0x1) << 11;
        return raw;
    }
    /// <summary>
    /// Floating-point multiply extended (by element).
    /// </summary>
    /// <remarks><code>FMULX Vd.T, Vn.T, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asimdelem_rh_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMULX(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_H.Indexed Vm_H)
    {
        uint raw = 0x2F009000U; // Encoding for: FMULX_asimdelem_rh_h
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_H.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_H.ElementIndex
            var _i_ = Vm_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point multiply extended (by element).
    /// </summary>
    /// <remarks><code>FMULX Vd.T, Vn.T, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asimdelem_rh_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMULX(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_H.Indexed Vm_H)
    {
        uint raw = 0x6F009000U; // Encoding for: FMULX_asimdelem_rh_h
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_H.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_H.ElementIndex
            var _i_ = Vm_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point multiply extended (by element).
    /// </summary>
    /// <remarks><code>FMULX Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asimdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMULX(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x2F809000U; // Encoding for: FMULX_asimdelem_r_sd
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_Ts.Index << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point multiply extended (by element).
    /// </summary>
    /// <remarks><code>FMULX Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asimdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMULX(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x6F809000U; // Encoding for: FMULX_asimdelem_r_sd
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_Ts.Index << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Floating-point multiply extended (by element).
    /// </summary>
    /// <remarks><code>FMULX Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asimdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FMULX(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_D.Indexed Vm_Ts)
    {
        uint raw = 0x6FC09000U; // Encoding for: FMULX_asimdelem_r_sd
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_Ts.Index << 16;
        raw |= (uint)(Vm_Ts.ElementIndex & 0x1) << 11;
        return raw;
    }
    /// <summary>
    /// Floating-point negate (vector).
    /// </summary>
    /// <remarks><code>FNEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNEG_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FNEG(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x2EF8F800U; // Encoding for: FNEG_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point negate (vector).
    /// </summary>
    /// <remarks><code>FNEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNEG_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FNEG(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x6EF8F800U; // Encoding for: FNEG_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point negate (vector).
    /// </summary>
    /// <remarks><code>FNEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FNEG(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x2EA0F800U; // Encoding for: FNEG_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point negate (vector).
    /// </summary>
    /// <remarks><code>FNEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FNEG(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x6EA0F800U; // Encoding for: FNEG_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point negate (vector).
    /// </summary>
    /// <remarks><code>FNEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FNEG(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x6EE0F800U; // Encoding for: FNEG_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal estimate.
    /// </summary>
    /// <remarks><code>FRECPE Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPE_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRECPE(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x5EF9D800U; // Encoding for: FRECPE_asisdmiscfp16_r
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal estimate.
    /// </summary>
    /// <remarks><code>FRECPE Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPE_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRECPE(Arm64RegisterS Vd, Arm64RegisterS Vn)
    {
        uint raw = 0x5EA1D800U; // Encoding for: FRECPE_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal estimate.
    /// </summary>
    /// <remarks><code>FRECPE Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPE_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRECPE(Arm64RegisterD Vd, Arm64RegisterD Vn)
    {
        uint raw = 0x5EE1D800U; // Encoding for: FRECPE_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal estimate.
    /// </summary>
    /// <remarks><code>FRECPE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPE_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRECPE(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0EF9D800U; // Encoding for: FRECPE_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal estimate.
    /// </summary>
    /// <remarks><code>FRECPE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPE_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRECPE(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4EF9D800U; // Encoding for: FRECPE_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal estimate.
    /// </summary>
    /// <remarks><code>FRECPE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPE_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRECPE(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x0EA1D800U; // Encoding for: FRECPE_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal estimate.
    /// </summary>
    /// <remarks><code>FRECPE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPE_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRECPE(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x4EA1D800U; // Encoding for: FRECPE_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal estimate.
    /// </summary>
    /// <remarks><code>FRECPE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPE_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRECPE(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x4EE1D800U; // Encoding for: FRECPE_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal step.
    /// </summary>
    /// <remarks><code>FRECPS Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPS_asisdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRECPS(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
    {
        uint raw = 0x5E403C00U; // Encoding for: FRECPS_asisdsamefp16_only
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal step.
    /// </summary>
    /// <remarks><code>FRECPS Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPS_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRECPS(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
    {
        uint raw = 0x5E20FC00U; // Encoding for: FRECPS_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal step.
    /// </summary>
    /// <remarks><code>FRECPS Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPS_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRECPS(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
    {
        uint raw = 0x5E60FC00U; // Encoding for: FRECPS_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal step.
    /// </summary>
    /// <remarks><code>FRECPS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPS_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRECPS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E403C00U; // Encoding for: FRECPS_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal step.
    /// </summary>
    /// <remarks><code>FRECPS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPS_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRECPS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E403C00U; // Encoding for: FRECPS_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal step.
    /// </summary>
    /// <remarks><code>FRECPS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRECPS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0E20FC00U; // Encoding for: FRECPS_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal step.
    /// </summary>
    /// <remarks><code>FRECPS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRECPS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4E20FC00U; // Encoding for: FRECPS_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal step.
    /// </summary>
    /// <remarks><code>FRECPS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRECPS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4E60FC00U; // Encoding for: FRECPS_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal exponent (scalar).
    /// </summary>
    /// <remarks><code>FRECPX Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPX_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRECPX(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x5EF9F800U; // Encoding for: FRECPX_asisdmiscfp16_r
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal exponent (scalar).
    /// </summary>
    /// <remarks><code>FRECPX Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPX_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRECPX(Arm64RegisterS Vd, Arm64RegisterS Vn)
    {
        uint raw = 0x5EA1F800U; // Encoding for: FRECPX_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal exponent (scalar).
    /// </summary>
    /// <remarks><code>FRECPX Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPX_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRECPX(Arm64RegisterD Vd, Arm64RegisterD Vn)
    {
        uint raw = 0x5EE1F800U; // Encoding for: FRECPX_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to 32-bit integer, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINT32X Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT32X_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINT32X(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x2E21E800U; // Encoding for: FRINT32X_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to 32-bit integer, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINT32X Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT32X_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINT32X(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x6E21E800U; // Encoding for: FRINT32X_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to 32-bit integer, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINT32X Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT32X_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINT32X(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x6E61E800U; // Encoding for: FRINT32X_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to 32-bit integer toward zero (vector).
    /// </summary>
    /// <remarks><code>FRINT32Z Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT32Z_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINT32Z(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x0E21E800U; // Encoding for: FRINT32Z_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to 32-bit integer toward zero (vector).
    /// </summary>
    /// <remarks><code>FRINT32Z Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT32Z_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINT32Z(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x4E21E800U; // Encoding for: FRINT32Z_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to 32-bit integer toward zero (vector).
    /// </summary>
    /// <remarks><code>FRINT32Z Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT32Z_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINT32Z(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x4E61E800U; // Encoding for: FRINT32Z_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to 64-bit integer, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINT64X Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT64X_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINT64X(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x2E21F800U; // Encoding for: FRINT64X_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to 64-bit integer, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINT64X Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT64X_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINT64X(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x6E21F800U; // Encoding for: FRINT64X_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to 64-bit integer, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINT64X Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT64X_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINT64X(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x6E61F800U; // Encoding for: FRINT64X_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to 64-bit integer toward zero (vector).
    /// </summary>
    /// <remarks><code>FRINT64Z Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT64Z_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINT64Z(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x0E21F800U; // Encoding for: FRINT64Z_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to 64-bit integer toward zero (vector).
    /// </summary>
    /// <remarks><code>FRINT64Z Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT64Z_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINT64Z(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x4E21F800U; // Encoding for: FRINT64Z_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to 64-bit integer toward zero (vector).
    /// </summary>
    /// <remarks><code>FRINT64Z Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT64Z_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINT64Z(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x4E61F800U; // Encoding for: FRINT64Z_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FRINTA Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTA_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x2E798800U; // Encoding for: FRINTA_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FRINTA Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTA_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x6E798800U; // Encoding for: FRINTA_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FRINTA Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTA_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTA(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x2E218800U; // Encoding for: FRINTA_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FRINTA Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTA_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x6E218800U; // Encoding for: FRINTA_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FRINTA Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTA_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTA(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x6E618800U; // Encoding for: FRINTA_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINTI Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTI_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTI(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x2EF99800U; // Encoding for: FRINTI_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINTI Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTI_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTI(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x6EF99800U; // Encoding for: FRINTI_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINTI Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTI_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTI(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x2EA19800U; // Encoding for: FRINTI_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINTI Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTI_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTI(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x6EA19800U; // Encoding for: FRINTI_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINTI Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTI_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTI(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x6EE19800U; // Encoding for: FRINTI_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FRINTM Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTM_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTM(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0E799800U; // Encoding for: FRINTM_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FRINTM Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTM_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTM(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4E799800U; // Encoding for: FRINTM_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FRINTM Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTM_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTM(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x0E219800U; // Encoding for: FRINTM_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FRINTM Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTM_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTM(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x4E219800U; // Encoding for: FRINTM_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FRINTM Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTM_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTM(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x4E619800U; // Encoding for: FRINTM_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FRINTN Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTN_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTN(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0E798800U; // Encoding for: FRINTN_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FRINTN Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTN_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTN(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4E798800U; // Encoding for: FRINTN_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FRINTN Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTN_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTN(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x0E218800U; // Encoding for: FRINTN_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FRINTN Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTN_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTN(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x4E218800U; // Encoding for: FRINTN_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FRINTN Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTN_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTN(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x4E618800U; // Encoding for: FRINTN_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FRINTP Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTP_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTP(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0EF98800U; // Encoding for: FRINTP_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FRINTP Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTP_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTP(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4EF98800U; // Encoding for: FRINTP_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FRINTP Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTP_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTP(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x0EA18800U; // Encoding for: FRINTP_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FRINTP Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTP_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTP(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x4EA18800U; // Encoding for: FRINTP_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FRINTP Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTP_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTP(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x4EE18800U; // Encoding for: FRINTP_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral exact, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINTX Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTX_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTX(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x2E799800U; // Encoding for: FRINTX_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral exact, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINTX Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTX_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTX(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x6E799800U; // Encoding for: FRINTX_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral exact, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINTX Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTX_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTX(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x2E219800U; // Encoding for: FRINTX_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral exact, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINTX Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTX_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTX(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x6E219800U; // Encoding for: FRINTX_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral exact, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINTX Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTX_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTX(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x6E619800U; // Encoding for: FRINTX_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, toward zero (vector).
    /// </summary>
    /// <remarks><code>FRINTZ Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTZ_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTZ(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0EF99800U; // Encoding for: FRINTZ_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, toward zero (vector).
    /// </summary>
    /// <remarks><code>FRINTZ Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTZ_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTZ(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4EF99800U; // Encoding for: FRINTZ_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, toward zero (vector).
    /// </summary>
    /// <remarks><code>FRINTZ Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTZ_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTZ(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x0EA19800U; // Encoding for: FRINTZ_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, toward zero (vector).
    /// </summary>
    /// <remarks><code>FRINTZ Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTZ_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTZ(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x4EA19800U; // Encoding for: FRINTZ_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point round to integral, toward zero (vector).
    /// </summary>
    /// <remarks><code>FRINTZ Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTZ_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRINTZ(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x4EE19800U; // Encoding for: FRINTZ_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal square root estimate.
    /// </summary>
    /// <remarks><code>FRSQRTE Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTE_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRSQRTE(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x7EF9D800U; // Encoding for: FRSQRTE_asisdmiscfp16_r
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal square root estimate.
    /// </summary>
    /// <remarks><code>FRSQRTE Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTE_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRSQRTE(Arm64RegisterS Vd, Arm64RegisterS Vn)
    {
        uint raw = 0x7EA1D800U; // Encoding for: FRSQRTE_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal square root estimate.
    /// </summary>
    /// <remarks><code>FRSQRTE Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTE_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRSQRTE(Arm64RegisterD Vd, Arm64RegisterD Vn)
    {
        uint raw = 0x7EE1D800U; // Encoding for: FRSQRTE_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal square root estimate.
    /// </summary>
    /// <remarks><code>FRSQRTE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTE_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRSQRTE(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x2EF9D800U; // Encoding for: FRSQRTE_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal square root estimate.
    /// </summary>
    /// <remarks><code>FRSQRTE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTE_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRSQRTE(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x6EF9D800U; // Encoding for: FRSQRTE_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal square root estimate.
    /// </summary>
    /// <remarks><code>FRSQRTE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTE_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRSQRTE(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x2EA1D800U; // Encoding for: FRSQRTE_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal square root estimate.
    /// </summary>
    /// <remarks><code>FRSQRTE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTE_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRSQRTE(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x6EA1D800U; // Encoding for: FRSQRTE_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal square root estimate.
    /// </summary>
    /// <remarks><code>FRSQRTE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTE_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRSQRTE(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x6EE1D800U; // Encoding for: FRSQRTE_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal square root step.
    /// </summary>
    /// <remarks><code>FRSQRTS Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTS_asisdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRSQRTS(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
    {
        uint raw = 0x5EC03C00U; // Encoding for: FRSQRTS_asisdsamefp16_only
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        raw |= (uint)Hm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal square root step.
    /// </summary>
    /// <remarks><code>FRSQRTS Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTS_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRSQRTS(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
    {
        uint raw = 0x5EA0FC00U; // Encoding for: FRSQRTS_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal square root step.
    /// </summary>
    /// <remarks><code>FRSQRTS Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTS_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRSQRTS(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
    {
        uint raw = 0x5EE0FC00U; // Encoding for: FRSQRTS_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal square root step.
    /// </summary>
    /// <remarks><code>FRSQRTS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTS_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRSQRTS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0EC03C00U; // Encoding for: FRSQRTS_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal square root step.
    /// </summary>
    /// <remarks><code>FRSQRTS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTS_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRSQRTS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4EC03C00U; // Encoding for: FRSQRTS_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal square root step.
    /// </summary>
    /// <remarks><code>FRSQRTS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRSQRTS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA0FC00U; // Encoding for: FRSQRTS_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal square root step.
    /// </summary>
    /// <remarks><code>FRSQRTS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRSQRTS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA0FC00U; // Encoding for: FRSQRTS_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point reciprocal square root step.
    /// </summary>
    /// <remarks><code>FRSQRTS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FRSQRTS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4EE0FC00U; // Encoding for: FRSQRTS_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point adjust exponent by vector.
    /// </summary>
    /// <remarks><code>FSCALE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSCALE_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FSCALE(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2EC03C00U; // Encoding for: FSCALE_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point adjust exponent by vector.
    /// </summary>
    /// <remarks><code>FSCALE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSCALE_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FSCALE(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6EC03C00U; // Encoding for: FSCALE_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point adjust exponent by vector.
    /// </summary>
    /// <remarks><code>FSCALE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSCALE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FSCALE(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA0FC00U; // Encoding for: FSCALE_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point adjust exponent by vector.
    /// </summary>
    /// <remarks><code>FSCALE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSCALE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FSCALE(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA0FC00U; // Encoding for: FSCALE_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point adjust exponent by vector.
    /// </summary>
    /// <remarks><code>FSCALE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSCALE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FSCALE(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x6EE0FC00U; // Encoding for: FSCALE_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point square root (vector).
    /// </summary>
    /// <remarks><code>FSQRT Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSQRT_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FSQRT(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x2EF9F800U; // Encoding for: FSQRT_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point square root (vector).
    /// </summary>
    /// <remarks><code>FSQRT Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSQRT_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FSQRT(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x6EF9F800U; // Encoding for: FSQRT_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point square root (vector).
    /// </summary>
    /// <remarks><code>FSQRT Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSQRT_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FSQRT(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x2EA1F800U; // Encoding for: FSQRT_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point square root (vector).
    /// </summary>
    /// <remarks><code>FSQRT Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSQRT_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FSQRT(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x6EA1F800U; // Encoding for: FSQRT_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point square root (vector).
    /// </summary>
    /// <remarks><code>FSQRT Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSQRT_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FSQRT(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x6EE1F800U; // Encoding for: FSQRT_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point subtract (vector).
    /// </summary>
    /// <remarks><code>FSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSUB_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FSUB(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0EC01400U; // Encoding for: FSUB_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point subtract (vector).
    /// </summary>
    /// <remarks><code>FSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSUB_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FSUB(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4EC01400U; // Encoding for: FSUB_asimdsamefp16_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point subtract (vector).
    /// </summary>
    /// <remarks><code>FSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FSUB(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA0D400U; // Encoding for: FSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point subtract (vector).
    /// </summary>
    /// <remarks><code>FSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FSUB(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA0D400U; // Encoding for: FSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Floating-point subtract (vector).
    /// </summary>
    /// <remarks><code>FSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint FSUB(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4EE0D400U; // Encoding for: FSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C407000U; // Encoding for: LD1_asisdlse_r1_1v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C407000U; // Encoding for: LD1_asisdlse_r1_1v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C407400U; // Encoding for: LD1_asisdlse_r1_1v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C407400U; // Encoding for: LD1_asisdlse_r1_1v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C407800U; // Encoding for: LD1_asisdlse_r1_1v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C407800U; // Encoding for: LD1_asisdlse_r1_1v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C407C00U; // Encoding for: LD1_asisdlse_r1_1v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C407C00U; // Encoding for: LD1_asisdlse_r1_1v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C40A000U; // Encoding for: LD1_asisdlse_r2_2v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C40A000U; // Encoding for: LD1_asisdlse_r2_2v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C40A400U; // Encoding for: LD1_asisdlse_r2_2v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C40A400U; // Encoding for: LD1_asisdlse_r2_2v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C40A800U; // Encoding for: LD1_asisdlse_r2_2v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C40A800U; // Encoding for: LD1_asisdlse_r2_2v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup2<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C40AC00U; // Encoding for: LD1_asisdlse_r2_2v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C40AC00U; // Encoding for: LD1_asisdlse_r2_2v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C406000U; // Encoding for: LD1_asisdlse_r3_3v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C406000U; // Encoding for: LD1_asisdlse_r3_3v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C406400U; // Encoding for: LD1_asisdlse_r3_3v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C406400U; // Encoding for: LD1_asisdlse_r3_3v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C406800U; // Encoding for: LD1_asisdlse_r3_3v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C406800U; // Encoding for: LD1_asisdlse_r3_3v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup3<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C406C00U; // Encoding for: LD1_asisdlse_r3_3v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C406C00U; // Encoding for: LD1_asisdlse_r3_3v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C402000U; // Encoding for: LD1_asisdlse_r4_4v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C402000U; // Encoding for: LD1_asisdlse_r4_4v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C402400U; // Encoding for: LD1_asisdlse_r4_4v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C402400U; // Encoding for: LD1_asisdlse_r4_4v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C402800U; // Encoding for: LD1_asisdlse_r4_4v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C402800U; // Encoding for: LD1_asisdlse_r4_4v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup4<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C402C00U; // Encoding for: LD1_asisdlse_r4_4v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C402C00U; // Encoding for: LD1_asisdlse_r4_4v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 8)
    {
        uint raw = 0x0CDF7000U; // Encoding for: LD1_asisdlsep_i1_i1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 8) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 8 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
    {
        uint raw = 0x4CDF7000U; // Encoding for: LD1_asisdlsep_i1_i1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 8)
    {
        uint raw = 0x0CDF7400U; // Encoding for: LD1_asisdlsep_i1_i1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 8) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 8 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
    {
        uint raw = 0x4CDF7400U; // Encoding for: LD1_asisdlsep_i1_i1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 8)
    {
        uint raw = 0x0CDF7800U; // Encoding for: LD1_asisdlsep_i1_i1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 8) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 8 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
    {
        uint raw = 0x4CDF7800U; // Encoding for: LD1_asisdlsep_i1_i1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 8)
    {
        uint raw = 0x0CDF7C00U; // Encoding for: LD1_asisdlsep_i1_i1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 8) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 8 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
    {
        uint raw = 0x4CDF7C00U; // Encoding for: LD1_asisdlsep_i1_i1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC07000U; // Encoding for: LD1_asisdlsep_r1_r1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC07000U; // Encoding for: LD1_asisdlsep_r1_r1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC07400U; // Encoding for: LD1_asisdlsep_r1_r1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC07400U; // Encoding for: LD1_asisdlsep_r1_r1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC07800U; // Encoding for: LD1_asisdlsep_r1_r1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC07800U; // Encoding for: LD1_asisdlsep_r1_r1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC07C00U; // Encoding for: LD1_asisdlsep_r1_r1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC07C00U; // Encoding for: LD1_asisdlsep_r1_r1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
    {
        uint raw = 0x0CDFA000U; // Encoding for: LD1_asisdlsep_i2_i2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
    {
        uint raw = 0x4CDFA000U; // Encoding for: LD1_asisdlsep_i2_i2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
    {
        uint raw = 0x0CDFA400U; // Encoding for: LD1_asisdlsep_i2_i2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
    {
        uint raw = 0x4CDFA400U; // Encoding for: LD1_asisdlsep_i2_i2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
    {
        uint raw = 0x0CDFA800U; // Encoding for: LD1_asisdlsep_i2_i2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
    {
        uint raw = 0x4CDFA800U; // Encoding for: LD1_asisdlsep_i2_i2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup2<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
    {
        uint raw = 0x0CDFAC00U; // Encoding for: LD1_asisdlsep_i2_i2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
    {
        uint raw = 0x4CDFAC00U; // Encoding for: LD1_asisdlsep_i2_i2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC0A000U; // Encoding for: LD1_asisdlsep_r2_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC0A000U; // Encoding for: LD1_asisdlsep_r2_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC0A400U; // Encoding for: LD1_asisdlsep_r2_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC0A400U; // Encoding for: LD1_asisdlsep_r2_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC0A800U; // Encoding for: LD1_asisdlsep_r2_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC0A800U; // Encoding for: LD1_asisdlsep_r2_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup2<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC0AC00U; // Encoding for: LD1_asisdlsep_r2_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC0AC00U; // Encoding for: LD1_asisdlsep_r2_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 24)
    {
        uint raw = 0x0CDF6000U; // Encoding for: LD1_asisdlsep_i3_i3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 24) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 24 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 48)
    {
        uint raw = 0x4CDF6000U; // Encoding for: LD1_asisdlsep_i3_i3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 48) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 48 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 24)
    {
        uint raw = 0x0CDF6400U; // Encoding for: LD1_asisdlsep_i3_i3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 24) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 24 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 48)
    {
        uint raw = 0x4CDF6400U; // Encoding for: LD1_asisdlsep_i3_i3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 48) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 48 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 24)
    {
        uint raw = 0x0CDF6800U; // Encoding for: LD1_asisdlsep_i3_i3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 24) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 24 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 48)
    {
        uint raw = 0x4CDF6800U; // Encoding for: LD1_asisdlsep_i3_i3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 48) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 48 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup3<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 24)
    {
        uint raw = 0x0CDF6C00U; // Encoding for: LD1_asisdlsep_i3_i3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 24) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 24 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 48)
    {
        uint raw = 0x4CDF6C00U; // Encoding for: LD1_asisdlsep_i3_i3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 48) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 48 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC06000U; // Encoding for: LD1_asisdlsep_r3_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC06000U; // Encoding for: LD1_asisdlsep_r3_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC06400U; // Encoding for: LD1_asisdlsep_r3_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC06400U; // Encoding for: LD1_asisdlsep_r3_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC06800U; // Encoding for: LD1_asisdlsep_r3_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC06800U; // Encoding for: LD1_asisdlsep_r3_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup3<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC06C00U; // Encoding for: LD1_asisdlsep_r3_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC06C00U; // Encoding for: LD1_asisdlsep_r3_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
    {
        uint raw = 0x0CDF2000U; // Encoding for: LD1_asisdlsep_i4_i4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 64)
    {
        uint raw = 0x4CDF2000U; // Encoding for: LD1_asisdlsep_i4_i4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 64) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 64 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
    {
        uint raw = 0x0CDF2400U; // Encoding for: LD1_asisdlsep_i4_i4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 64)
    {
        uint raw = 0x4CDF2400U; // Encoding for: LD1_asisdlsep_i4_i4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 64) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 64 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
    {
        uint raw = 0x0CDF2800U; // Encoding for: LD1_asisdlsep_i4_i4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 64)
    {
        uint raw = 0x4CDF2800U; // Encoding for: LD1_asisdlsep_i4_i4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 64) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 64 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup4<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
    {
        uint raw = 0x0CDF2C00U; // Encoding for: LD1_asisdlsep_i4_i4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 64)
    {
        uint raw = 0x4CDF2C00U; // Encoding for: LD1_asisdlsep_i4_i4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 64) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 64 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC02000U; // Encoding for: LD1_asisdlsep_r4_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC02000U; // Encoding for: LD1_asisdlsep_r4_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC02400U; // Encoding for: LD1_asisdlsep_r4_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC02400U; // Encoding for: LD1_asisdlsep_r4_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC02800U; // Encoding for: LD1_asisdlsep_r4_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC02800U; // Encoding for: LD1_asisdlsep_r4_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup4<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC02C00U; // Encoding for: LD1_asisdlsep_r4_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC02C00U; // Encoding for: LD1_asisdlsep_r4_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LD1 {Vt.B}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlso_b1_1b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D400000U; // Encoding for: LD1_asisdlso_b1_1b
        raw |= (uint)Vt_B.Index;
        {
            // Write the element indexer for Vt_B.ElementIndex
            var _i_ = Vt_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 10;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LD1 {Vt.H}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlso_h1_1h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D404000U; // Encoding for: LD1_asisdlso_h1_1h
        raw |= (uint)Vt_H.Index;
        {
            // Write the element indexer for Vt_H.ElementIndex
            var _i_ = Vt_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 11;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LD1 {Vt.S}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlso_s1_1s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D408000U; // Encoding for: LD1_asisdlso_s1_1s
        raw |= (uint)Vt_S.Index;
        {
            // Write the element indexer for Vt_S.ElementIndex
            var _i_ = Vt_S.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 12;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LD1 {Vt.D}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlso_d1_1d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D408400U; // Encoding for: LD1_asisdlso_d1_1d
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LD1 {Vt.B}[index], [Xn|SP], #1</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsop_b1_i1b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor src, byte value1 = 1)
    {
        uint raw = 0x0DDF0000U; // Encoding for: LD1_asisdlsop_b1_i1b
        raw |= (uint)Vt_B.Index;
        {
            // Write the element indexer for Vt_B.ElementIndex
            var _i_ = Vt_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 10;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        if (value1 != 1) throw new ArgumentOutOfRangeException(nameof(value1), $"Invalid Immediate. Expecting the fixed value 1 instead of {value1}");
        return raw;
    }
    /// <summary>
    /// Load one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LD1 {Vt.B}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsop_bx1_r1b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DC00000U; // Encoding for: LD1_asisdlsop_bx1_r1b
        raw |= (uint)Vt_B.Index;
        {
            // Write the element indexer for Vt_B.ElementIndex
            var _i_ = Vt_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 10;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LD1 {Vt.D}[index], [Xn|SP], #8</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsop_d1_i1d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src, byte value8 = 8)
    {
        uint raw = 0x0DDF8400U; // Encoding for: LD1_asisdlsop_d1_i1d
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (value8 != 8) throw new ArgumentOutOfRangeException(nameof(value8), $"Invalid Immediate. Expecting the fixed value 8 instead of {value8}");
        return raw;
    }
    /// <summary>
    /// Load one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LD1 {Vt.D}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsop_dx1_r1d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DC08400U; // Encoding for: LD1_asisdlsop_dx1_r1d
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LD1 {Vt.H}[index], [Xn|SP], #2</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsop_h1_i1h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor src, byte value2 = 2)
    {
        uint raw = 0x0DDF4000U; // Encoding for: LD1_asisdlsop_h1_i1h
        raw |= (uint)Vt_H.Index;
        {
            // Write the element indexer for Vt_H.ElementIndex
            var _i_ = Vt_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 11;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        if (value2 != 2) throw new ArgumentOutOfRangeException(nameof(value2), $"Invalid Immediate. Expecting the fixed value 2 instead of {value2}");
        return raw;
    }
    /// <summary>
    /// Load one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LD1 {Vt.H}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsop_hx1_r1h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DC04000U; // Encoding for: LD1_asisdlsop_hx1_r1h
        raw |= (uint)Vt_H.Index;
        {
            // Write the element indexer for Vt_H.ElementIndex
            var _i_ = Vt_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 11;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LD1 {Vt.S}[index], [Xn|SP], #4</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsop_s1_i1s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor src, byte value4 = 4)
    {
        uint raw = 0x0DDF8000U; // Encoding for: LD1_asisdlsop_s1_i1s
        raw |= (uint)Vt_S.Index;
        {
            // Write the element indexer for Vt_S.ElementIndex
            var _i_ = Vt_S.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 12;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        if (value4 != 4) throw new ArgumentOutOfRangeException(nameof(value4), $"Invalid Immediate. Expecting the fixed value 4 instead of {value4}");
        return raw;
    }
    /// <summary>
    /// Load one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LD1 {Vt.S}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsop_sx1_r1s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1(Arm64RegisterGroup1<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DC08000U; // Encoding for: LD1_asisdlsop_sx1_r1s
        raw |= (uint)Vt_S.Index;
        {
            // Write the element indexer for Vt_S.ElementIndex
            var _i_ = Vt_S.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 12;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlso_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1R(Arm64RegisterGroup1<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D40C000U; // Encoding for: LD1R_asisdlso_r1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlso_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1R(Arm64RegisterGroup1<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4D40C000U; // Encoding for: LD1R_asisdlso_r1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlso_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1R(Arm64RegisterGroup1<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D40C400U; // Encoding for: LD1R_asisdlso_r1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlso_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1R(Arm64RegisterGroup1<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4D40C400U; // Encoding for: LD1R_asisdlso_r1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlso_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1R(Arm64RegisterGroup1<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D40C800U; // Encoding for: LD1R_asisdlso_r1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlso_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1R(Arm64RegisterGroup1<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4D40C800U; // Encoding for: LD1R_asisdlso_r1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlso_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1R(Arm64RegisterGroup1<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D40CC00U; // Encoding for: LD1R_asisdlso_r1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlso_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1R(Arm64RegisterGroup1<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4D40CC00U; // Encoding for: LD1R_asisdlso_r1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_r1_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1R(Arm64RegisterGroup1<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 1)
    {
        uint raw = 0x0DDFC000U; // Encoding for: LD1R_asisdlsop_r1_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 1) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 1 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_r1_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1R(Arm64RegisterGroup1<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 1)
    {
        uint raw = 0x4DDFC000U; // Encoding for: LD1R_asisdlsop_r1_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 1) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 1 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_r1_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1R(Arm64RegisterGroup1<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 2)
    {
        uint raw = 0x0DDFC400U; // Encoding for: LD1R_asisdlsop_r1_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 2) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 2 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_r1_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1R(Arm64RegisterGroup1<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 2)
    {
        uint raw = 0x4DDFC400U; // Encoding for: LD1R_asisdlsop_r1_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 2) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 2 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_r1_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1R(Arm64RegisterGroup1<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 4)
    {
        uint raw = 0x0DDFC800U; // Encoding for: LD1R_asisdlsop_r1_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 4) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 4 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_r1_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1R(Arm64RegisterGroup1<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 4)
    {
        uint raw = 0x4DDFC800U; // Encoding for: LD1R_asisdlsop_r1_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 4) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 4 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_r1_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1R(Arm64RegisterGroup1<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 8)
    {
        uint raw = 0x0DDFCC00U; // Encoding for: LD1R_asisdlsop_r1_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 8) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 8 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_r1_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1R(Arm64RegisterGroup1<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 8)
    {
        uint raw = 0x4DDFCC00U; // Encoding for: LD1R_asisdlsop_r1_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 8) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 8 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_rx1_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1R(Arm64RegisterGroup1<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DC0C000U; // Encoding for: LD1R_asisdlsop_rx1_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_rx1_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1R(Arm64RegisterGroup1<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4DC0C000U; // Encoding for: LD1R_asisdlsop_rx1_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_rx1_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1R(Arm64RegisterGroup1<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DC0C400U; // Encoding for: LD1R_asisdlsop_rx1_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_rx1_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1R(Arm64RegisterGroup1<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4DC0C400U; // Encoding for: LD1R_asisdlsop_rx1_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_rx1_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1R(Arm64RegisterGroup1<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DC0C800U; // Encoding for: LD1R_asisdlsop_rx1_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_rx1_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1R(Arm64RegisterGroup1<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4DC0C800U; // Encoding for: LD1R_asisdlsop_rx1_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_rx1_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1R(Arm64RegisterGroup1<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DC0CC00U; // Encoding for: LD1R_asisdlsop_rx1_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_rx1_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD1R(Arm64RegisterGroup1<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4DC0CC00U; // Encoding for: LD1R_asisdlsop_rx1_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C408000U; // Encoding for: LD2_asisdlse_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C408000U; // Encoding for: LD2_asisdlse_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C408400U; // Encoding for: LD2_asisdlse_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C408400U; // Encoding for: LD2_asisdlse_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C408800U; // Encoding for: LD2_asisdlse_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C408800U; // Encoding for: LD2_asisdlse_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C408C00U; // Encoding for: LD2_asisdlse_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
    {
        uint raw = 0x0CDF8000U; // Encoding for: LD2_asisdlsep_i2_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
    {
        uint raw = 0x4CDF8000U; // Encoding for: LD2_asisdlsep_i2_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
    {
        uint raw = 0x0CDF8400U; // Encoding for: LD2_asisdlsep_i2_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
    {
        uint raw = 0x4CDF8400U; // Encoding for: LD2_asisdlsep_i2_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
    {
        uint raw = 0x0CDF8800U; // Encoding for: LD2_asisdlsep_i2_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
    {
        uint raw = 0x4CDF8800U; // Encoding for: LD2_asisdlsep_i2_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
    {
        uint raw = 0x4CDF8C00U; // Encoding for: LD2_asisdlsep_i2_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC08000U; // Encoding for: LD2_asisdlsep_r2_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC08000U; // Encoding for: LD2_asisdlsep_r2_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC08400U; // Encoding for: LD2_asisdlsep_r2_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC08400U; // Encoding for: LD2_asisdlsep_r2_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC08800U; // Encoding for: LD2_asisdlsep_r2_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC08800U; // Encoding for: LD2_asisdlsep_r2_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC08C00U; // Encoding for: LD2_asisdlsep_r2_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure to one lane of two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.B, Vt2.B}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlso_b2_2b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D600000U; // Encoding for: LD2_asisdlso_b2_2b
        raw |= (uint)Vt_B.Index;
        {
            // Write the element indexer for Vt_B.ElementIndex
            var _i_ = Vt_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 10;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure to one lane of two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.H, Vt2.H}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlso_h2_2h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D604000U; // Encoding for: LD2_asisdlso_h2_2h
        raw |= (uint)Vt_H.Index;
        {
            // Write the element indexer for Vt_H.ElementIndex
            var _i_ = Vt_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 11;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure to one lane of two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.S, Vt2.S}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlso_s2_2s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D608000U; // Encoding for: LD2_asisdlso_s2_2s
        raw |= (uint)Vt_S.Index;
        {
            // Write the element indexer for Vt_S.ElementIndex
            var _i_ = Vt_S.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 12;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure to one lane of two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.D, Vt2.D}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlso_d2_2d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D608400U; // Encoding for: LD2_asisdlso_d2_2d
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure to one lane of two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.B, Vt2.B}[index], [Xn|SP], #2</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsop_b2_i2b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor src, byte value2 = 2)
    {
        uint raw = 0x0DFF0000U; // Encoding for: LD2_asisdlsop_b2_i2b
        raw |= (uint)Vt_B.Index;
        {
            // Write the element indexer for Vt_B.ElementIndex
            var _i_ = Vt_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 10;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        if (value2 != 2) throw new ArgumentOutOfRangeException(nameof(value2), $"Invalid Immediate. Expecting the fixed value 2 instead of {value2}");
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure to one lane of two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.B, Vt2.B}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsop_bx2_r2b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DE00000U; // Encoding for: LD2_asisdlsop_bx2_r2b
        raw |= (uint)Vt_B.Index;
        {
            // Write the element indexer for Vt_B.ElementIndex
            var _i_ = Vt_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 10;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure to one lane of two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.H, Vt2.H}[index], [Xn|SP], #4</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsop_h2_i2h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor src, byte value4 = 4)
    {
        uint raw = 0x0DFF4000U; // Encoding for: LD2_asisdlsop_h2_i2h
        raw |= (uint)Vt_H.Index;
        {
            // Write the element indexer for Vt_H.ElementIndex
            var _i_ = Vt_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 11;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        if (value4 != 4) throw new ArgumentOutOfRangeException(nameof(value4), $"Invalid Immediate. Expecting the fixed value 4 instead of {value4}");
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure to one lane of two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.H, Vt2.H}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsop_hx2_r2h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DE04000U; // Encoding for: LD2_asisdlsop_hx2_r2h
        raw |= (uint)Vt_H.Index;
        {
            // Write the element indexer for Vt_H.ElementIndex
            var _i_ = Vt_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 11;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure to one lane of two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.S, Vt2.S}[index], [Xn|SP], #8</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsop_s2_i2s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor src, byte value8 = 8)
    {
        uint raw = 0x0DFF8000U; // Encoding for: LD2_asisdlsop_s2_i2s
        raw |= (uint)Vt_S.Index;
        {
            // Write the element indexer for Vt_S.ElementIndex
            var _i_ = Vt_S.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 12;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        if (value8 != 8) throw new ArgumentOutOfRangeException(nameof(value8), $"Invalid Immediate. Expecting the fixed value 8 instead of {value8}");
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure to one lane of two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.S, Vt2.S}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsop_sx2_r2s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DE08000U; // Encoding for: LD2_asisdlsop_sx2_r2s
        raw |= (uint)Vt_S.Index;
        {
            // Write the element indexer for Vt_S.ElementIndex
            var _i_ = Vt_S.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 12;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure to one lane of two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.D, Vt2.D}[index], [Xn|SP], #16</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsop_d2_i2d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src, byte value16 = 16)
    {
        uint raw = 0x0DFF8400U; // Encoding for: LD2_asisdlsop_d2_i2d
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (value16 != 16) throw new ArgumentOutOfRangeException(nameof(value16), $"Invalid Immediate. Expecting the fixed value 16 instead of {value16}");
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure to one lane of two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.D, Vt2.D}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsop_dx2_r2d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2(Arm64RegisterGroup2<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DE08400U; // Encoding for: LD2_asisdlsop_dx2_r2d
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlso_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2R(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D60C000U; // Encoding for: LD2R_asisdlso_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlso_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2R(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4D60C000U; // Encoding for: LD2R_asisdlso_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlso_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2R(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D60C400U; // Encoding for: LD2R_asisdlso_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlso_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2R(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4D60C400U; // Encoding for: LD2R_asisdlso_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlso_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2R(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D60C800U; // Encoding for: LD2R_asisdlso_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlso_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2R(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4D60C800U; // Encoding for: LD2R_asisdlso_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlso_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2R(Arm64RegisterGroup2<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D60CC00U; // Encoding for: LD2R_asisdlso_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlso_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2R(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4D60CC00U; // Encoding for: LD2R_asisdlso_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_r2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2R(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 2)
    {
        uint raw = 0x0DFFC000U; // Encoding for: LD2R_asisdlsop_r2_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 2) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 2 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_r2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2R(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 2)
    {
        uint raw = 0x4DFFC000U; // Encoding for: LD2R_asisdlsop_r2_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 2) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 2 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_r2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2R(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 4)
    {
        uint raw = 0x0DFFC400U; // Encoding for: LD2R_asisdlsop_r2_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 4) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 4 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_r2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2R(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 4)
    {
        uint raw = 0x4DFFC400U; // Encoding for: LD2R_asisdlsop_r2_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 4) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 4 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_r2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2R(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 8)
    {
        uint raw = 0x0DFFC800U; // Encoding for: LD2R_asisdlsop_r2_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 8) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 8 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_r2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2R(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 8)
    {
        uint raw = 0x4DFFC800U; // Encoding for: LD2R_asisdlsop_r2_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 8) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 8 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_r2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2R(Arm64RegisterGroup2<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
    {
        uint raw = 0x0DFFCC00U; // Encoding for: LD2R_asisdlsop_r2_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_r2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2R(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
    {
        uint raw = 0x4DFFCC00U; // Encoding for: LD2R_asisdlsop_r2_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_rx2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2R(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DE0C000U; // Encoding for: LD2R_asisdlsop_rx2_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_rx2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2R(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4DE0C000U; // Encoding for: LD2R_asisdlsop_rx2_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_rx2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2R(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DE0C400U; // Encoding for: LD2R_asisdlsop_rx2_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_rx2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2R(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4DE0C400U; // Encoding for: LD2R_asisdlsop_rx2_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_rx2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2R(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DE0C800U; // Encoding for: LD2R_asisdlsop_rx2_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_rx2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2R(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4DE0C800U; // Encoding for: LD2R_asisdlsop_rx2_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_rx2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2R(Arm64RegisterGroup2<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DE0CC00U; // Encoding for: LD2R_asisdlsop_rx2_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_rx2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD2R(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4DE0CC00U; // Encoding for: LD2R_asisdlsop_rx2_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C404000U; // Encoding for: LD3_asisdlse_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C404000U; // Encoding for: LD3_asisdlse_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C404400U; // Encoding for: LD3_asisdlse_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C404400U; // Encoding for: LD3_asisdlse_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C404800U; // Encoding for: LD3_asisdlse_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C404800U; // Encoding for: LD3_asisdlse_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C404C00U; // Encoding for: LD3_asisdlse_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 24)
    {
        uint raw = 0x0CDF4000U; // Encoding for: LD3_asisdlsep_i3_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 24) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 24 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 48)
    {
        uint raw = 0x4CDF4000U; // Encoding for: LD3_asisdlsep_i3_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 48) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 48 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 24)
    {
        uint raw = 0x0CDF4400U; // Encoding for: LD3_asisdlsep_i3_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 24) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 24 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 48)
    {
        uint raw = 0x4CDF4400U; // Encoding for: LD3_asisdlsep_i3_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 48) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 48 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 24)
    {
        uint raw = 0x0CDF4800U; // Encoding for: LD3_asisdlsep_i3_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 24) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 24 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 48)
    {
        uint raw = 0x4CDF4800U; // Encoding for: LD3_asisdlsep_i3_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 48) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 48 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 48)
    {
        uint raw = 0x4CDF4C00U; // Encoding for: LD3_asisdlsep_i3_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 48) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 48 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC04000U; // Encoding for: LD3_asisdlsep_r3_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC04000U; // Encoding for: LD3_asisdlsep_r3_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC04400U; // Encoding for: LD3_asisdlsep_r3_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC04400U; // Encoding for: LD3_asisdlsep_r3_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC04800U; // Encoding for: LD3_asisdlsep_r3_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC04800U; // Encoding for: LD3_asisdlsep_r3_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC04C00U; // Encoding for: LD3_asisdlsep_r3_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure to one lane of three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.B, Vt2.B, Vt3.B}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlso_b3_3b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D402000U; // Encoding for: LD3_asisdlso_b3_3b
        raw |= (uint)Vt_B.Index;
        {
            // Write the element indexer for Vt_B.ElementIndex
            var _i_ = Vt_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 10;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure to one lane of three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.H, Vt2.H, Vt3.H}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlso_h3_3h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D406000U; // Encoding for: LD3_asisdlso_h3_3h
        raw |= (uint)Vt_H.Index;
        {
            // Write the element indexer for Vt_H.ElementIndex
            var _i_ = Vt_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 11;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure to one lane of three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.S, Vt2.S, Vt3.S}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlso_s3_3s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D40A000U; // Encoding for: LD3_asisdlso_s3_3s
        raw |= (uint)Vt_S.Index;
        {
            // Write the element indexer for Vt_S.ElementIndex
            var _i_ = Vt_S.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 12;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure to one lane of three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.D, Vt2.D, Vt3.D}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlso_d3_3d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D40A400U; // Encoding for: LD3_asisdlso_d3_3d
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure to one lane of three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.B, Vt2.B, Vt3.B}[index], [Xn|SP], #3</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsop_b3_i3b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor src, byte value3 = 3)
    {
        uint raw = 0x0DDF2000U; // Encoding for: LD3_asisdlsop_b3_i3b
        raw |= (uint)Vt_B.Index;
        {
            // Write the element indexer for Vt_B.ElementIndex
            var _i_ = Vt_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 10;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        if (value3 != 3) throw new ArgumentOutOfRangeException(nameof(value3), $"Invalid Immediate. Expecting the fixed value 3 instead of {value3}");
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure to one lane of three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.B, Vt2.B, Vt3.B}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsop_bx3_r3b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DC02000U; // Encoding for: LD3_asisdlsop_bx3_r3b
        raw |= (uint)Vt_B.Index;
        {
            // Write the element indexer for Vt_B.ElementIndex
            var _i_ = Vt_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 10;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure to one lane of three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.H, Vt2.H, Vt3.H}[index], [Xn|SP], #6</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsop_h3_i3h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor src, byte value6 = 6)
    {
        uint raw = 0x0DDF6000U; // Encoding for: LD3_asisdlsop_h3_i3h
        raw |= (uint)Vt_H.Index;
        {
            // Write the element indexer for Vt_H.ElementIndex
            var _i_ = Vt_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 11;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        if (value6 != 6) throw new ArgumentOutOfRangeException(nameof(value6), $"Invalid Immediate. Expecting the fixed value 6 instead of {value6}");
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure to one lane of three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.H, Vt2.H, Vt3.H}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsop_hx3_r3h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DC06000U; // Encoding for: LD3_asisdlsop_hx3_r3h
        raw |= (uint)Vt_H.Index;
        {
            // Write the element indexer for Vt_H.ElementIndex
            var _i_ = Vt_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 11;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure to one lane of three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.S, Vt2.S, Vt3.S}[index], [Xn|SP], #12</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsop_s3_i3s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor src, byte value12 = 12)
    {
        uint raw = 0x0DDFA000U; // Encoding for: LD3_asisdlsop_s3_i3s
        raw |= (uint)Vt_S.Index;
        {
            // Write the element indexer for Vt_S.ElementIndex
            var _i_ = Vt_S.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 12;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        if (value12 != 12) throw new ArgumentOutOfRangeException(nameof(value12), $"Invalid Immediate. Expecting the fixed value 12 instead of {value12}");
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure to one lane of three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.S, Vt2.S, Vt3.S}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsop_sx3_r3s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DC0A000U; // Encoding for: LD3_asisdlsop_sx3_r3s
        raw |= (uint)Vt_S.Index;
        {
            // Write the element indexer for Vt_S.ElementIndex
            var _i_ = Vt_S.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 12;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure to one lane of three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.D, Vt2.D, Vt3.D}[index], [Xn|SP], #24</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsop_d3_i3d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src, byte value24 = 24)
    {
        uint raw = 0x0DDFA400U; // Encoding for: LD3_asisdlsop_d3_i3d
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (value24 != 24) throw new ArgumentOutOfRangeException(nameof(value24), $"Invalid Immediate. Expecting the fixed value 24 instead of {value24}");
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure to one lane of three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.D, Vt2.D, Vt3.D}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsop_dx3_r3d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3(Arm64RegisterGroup3<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DC0A400U; // Encoding for: LD3_asisdlsop_dx3_r3d
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlso_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3R(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D40E000U; // Encoding for: LD3R_asisdlso_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlso_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3R(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4D40E000U; // Encoding for: LD3R_asisdlso_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlso_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3R(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D40E400U; // Encoding for: LD3R_asisdlso_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlso_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3R(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4D40E400U; // Encoding for: LD3R_asisdlso_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlso_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3R(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D40E800U; // Encoding for: LD3R_asisdlso_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlso_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3R(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4D40E800U; // Encoding for: LD3R_asisdlso_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlso_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3R(Arm64RegisterGroup3<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D40EC00U; // Encoding for: LD3R_asisdlso_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlso_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3R(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4D40EC00U; // Encoding for: LD3R_asisdlso_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_r3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3R(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 3)
    {
        uint raw = 0x0DDFE000U; // Encoding for: LD3R_asisdlsop_r3_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 3) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 3 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_r3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3R(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 3)
    {
        uint raw = 0x4DDFE000U; // Encoding for: LD3R_asisdlsop_r3_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 3) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 3 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_r3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3R(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 6)
    {
        uint raw = 0x0DDFE400U; // Encoding for: LD3R_asisdlsop_r3_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 6) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 6 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_r3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3R(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 6)
    {
        uint raw = 0x4DDFE400U; // Encoding for: LD3R_asisdlsop_r3_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 6) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 6 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_r3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3R(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 12)
    {
        uint raw = 0x0DDFE800U; // Encoding for: LD3R_asisdlsop_r3_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 12) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 12 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_r3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3R(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 12)
    {
        uint raw = 0x4DDFE800U; // Encoding for: LD3R_asisdlsop_r3_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 12) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 12 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_r3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3R(Arm64RegisterGroup3<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 24)
    {
        uint raw = 0x0DDFEC00U; // Encoding for: LD3R_asisdlsop_r3_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 24) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 24 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_r3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3R(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 24)
    {
        uint raw = 0x4DDFEC00U; // Encoding for: LD3R_asisdlsop_r3_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 24) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 24 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_rx3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3R(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DC0E000U; // Encoding for: LD3R_asisdlsop_rx3_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_rx3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3R(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4DC0E000U; // Encoding for: LD3R_asisdlsop_rx3_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_rx3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3R(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DC0E400U; // Encoding for: LD3R_asisdlsop_rx3_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_rx3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3R(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4DC0E400U; // Encoding for: LD3R_asisdlsop_rx3_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_rx3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3R(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DC0E800U; // Encoding for: LD3R_asisdlsop_rx3_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_rx3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3R(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4DC0E800U; // Encoding for: LD3R_asisdlsop_rx3_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_rx3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3R(Arm64RegisterGroup3<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DC0EC00U; // Encoding for: LD3R_asisdlsop_rx3_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_rx3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD3R(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4DC0EC00U; // Encoding for: LD3R_asisdlsop_rx3_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C400000U; // Encoding for: LD4_asisdlse_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C400000U; // Encoding for: LD4_asisdlse_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C400400U; // Encoding for: LD4_asisdlse_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C400400U; // Encoding for: LD4_asisdlse_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0C400800U; // Encoding for: LD4_asisdlse_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C400800U; // Encoding for: LD4_asisdlse_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4C400C00U; // Encoding for: LD4_asisdlse_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
    {
        uint raw = 0x0CDF0000U; // Encoding for: LD4_asisdlsep_i4_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 64)
    {
        uint raw = 0x4CDF0000U; // Encoding for: LD4_asisdlsep_i4_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 64) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 64 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
    {
        uint raw = 0x0CDF0400U; // Encoding for: LD4_asisdlsep_i4_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 64)
    {
        uint raw = 0x4CDF0400U; // Encoding for: LD4_asisdlsep_i4_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 64) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 64 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
    {
        uint raw = 0x0CDF0800U; // Encoding for: LD4_asisdlsep_i4_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 64)
    {
        uint raw = 0x4CDF0800U; // Encoding for: LD4_asisdlsep_i4_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 64) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 64 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 64)
    {
        uint raw = 0x4CDF0C00U; // Encoding for: LD4_asisdlsep_i4_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 64) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 64 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC00000U; // Encoding for: LD4_asisdlsep_r4_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC00000U; // Encoding for: LD4_asisdlsep_r4_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC00400U; // Encoding for: LD4_asisdlsep_r4_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC00400U; // Encoding for: LD4_asisdlsep_r4_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0CC00800U; // Encoding for: LD4_asisdlsep_r4_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC00800U; // Encoding for: LD4_asisdlsep_r4_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4CC00C00U; // Encoding for: LD4_asisdlsep_r4_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure to one lane of four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.B, Vt2.B, Vt3.B, Vt4.B}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlso_b4_4b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D602000U; // Encoding for: LD4_asisdlso_b4_4b
        raw |= (uint)Vt_B.Index;
        {
            // Write the element indexer for Vt_B.ElementIndex
            var _i_ = Vt_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 10;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure to one lane of four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.H, Vt2.H, Vt3.H, Vt4.H}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlso_h4_4h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D606000U; // Encoding for: LD4_asisdlso_h4_4h
        raw |= (uint)Vt_H.Index;
        {
            // Write the element indexer for Vt_H.ElementIndex
            var _i_ = Vt_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 11;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure to one lane of four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.S, Vt2.S, Vt3.S, Vt4.S}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlso_s4_4s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D60A000U; // Encoding for: LD4_asisdlso_s4_4s
        raw |= (uint)Vt_S.Index;
        {
            // Write the element indexer for Vt_S.ElementIndex
            var _i_ = Vt_S.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 12;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure to one lane of four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.D, Vt2.D, Vt3.D, Vt4.D}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlso_d4_4d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D60A400U; // Encoding for: LD4_asisdlso_d4_4d
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure to one lane of four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.B, Vt2.B, Vt3.B, Vt4.B}[index], [Xn|SP], #4</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsop_b4_i4b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor src, byte value4 = 4)
    {
        uint raw = 0x0DFF2000U; // Encoding for: LD4_asisdlsop_b4_i4b
        raw |= (uint)Vt_B.Index;
        {
            // Write the element indexer for Vt_B.ElementIndex
            var _i_ = Vt_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 10;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        if (value4 != 4) throw new ArgumentOutOfRangeException(nameof(value4), $"Invalid Immediate. Expecting the fixed value 4 instead of {value4}");
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure to one lane of four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.B, Vt2.B, Vt3.B, Vt4.B}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsop_bx4_r4b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DE02000U; // Encoding for: LD4_asisdlsop_bx4_r4b
        raw |= (uint)Vt_B.Index;
        {
            // Write the element indexer for Vt_B.ElementIndex
            var _i_ = Vt_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 10;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure to one lane of four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.H, Vt2.H, Vt3.H, Vt4.H}[index], [Xn|SP], #8</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsop_h4_i4h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor src, byte value8 = 8)
    {
        uint raw = 0x0DFF6000U; // Encoding for: LD4_asisdlsop_h4_i4h
        raw |= (uint)Vt_H.Index;
        {
            // Write the element indexer for Vt_H.ElementIndex
            var _i_ = Vt_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 11;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        if (value8 != 8) throw new ArgumentOutOfRangeException(nameof(value8), $"Invalid Immediate. Expecting the fixed value 8 instead of {value8}");
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure to one lane of four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.H, Vt2.H, Vt3.H, Vt4.H}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsop_hx4_r4h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DE06000U; // Encoding for: LD4_asisdlsop_hx4_r4h
        raw |= (uint)Vt_H.Index;
        {
            // Write the element indexer for Vt_H.ElementIndex
            var _i_ = Vt_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 11;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure to one lane of four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.S, Vt2.S, Vt3.S, Vt4.S}[index], [Xn|SP], #16</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsop_s4_i4s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor src, byte value16 = 16)
    {
        uint raw = 0x0DFFA000U; // Encoding for: LD4_asisdlsop_s4_i4s
        raw |= (uint)Vt_S.Index;
        {
            // Write the element indexer for Vt_S.ElementIndex
            var _i_ = Vt_S.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 12;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        if (value16 != 16) throw new ArgumentOutOfRangeException(nameof(value16), $"Invalid Immediate. Expecting the fixed value 16 instead of {value16}");
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure to one lane of four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.S, Vt2.S, Vt3.S, Vt4.S}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsop_sx4_r4s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DE0A000U; // Encoding for: LD4_asisdlsop_sx4_r4s
        raw |= (uint)Vt_S.Index;
        {
            // Write the element indexer for Vt_S.ElementIndex
            var _i_ = Vt_S.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 12;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure to one lane of four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.D, Vt2.D, Vt3.D, Vt4.D}[index], [Xn|SP], #32</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsop_d4_i4d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src, byte value32 = 32)
    {
        uint raw = 0x0DFFA400U; // Encoding for: LD4_asisdlsop_d4_i4d
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (value32 != 32) throw new ArgumentOutOfRangeException(nameof(value32), $"Invalid Immediate. Expecting the fixed value 32 instead of {value32}");
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure to one lane of four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.D, Vt2.D, Vt3.D, Vt4.D}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsop_dx4_r4d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4(Arm64RegisterGroup4<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DE0A400U; // Encoding for: LD4_asisdlsop_dx4_r4d
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlso_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4R(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D60E000U; // Encoding for: LD4R_asisdlso_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlso_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4R(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4D60E000U; // Encoding for: LD4R_asisdlso_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlso_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4R(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D60E400U; // Encoding for: LD4R_asisdlso_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlso_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4R(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4D60E400U; // Encoding for: LD4R_asisdlso_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlso_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4R(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D60E800U; // Encoding for: LD4R_asisdlso_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlso_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4R(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4D60E800U; // Encoding for: LD4R_asisdlso_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlso_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4R(Arm64RegisterGroup4<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D60EC00U; // Encoding for: LD4R_asisdlso_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlso_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4R(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x4D60EC00U; // Encoding for: LD4R_asisdlso_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_r4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4R(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 4)
    {
        uint raw = 0x0DFFE000U; // Encoding for: LD4R_asisdlsop_r4_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 4) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 4 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_r4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4R(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 4)
    {
        uint raw = 0x4DFFE000U; // Encoding for: LD4R_asisdlsop_r4_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 4) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 4 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_r4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4R(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 8)
    {
        uint raw = 0x0DFFE400U; // Encoding for: LD4R_asisdlsop_r4_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 8) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 8 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_r4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4R(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 8)
    {
        uint raw = 0x4DFFE400U; // Encoding for: LD4R_asisdlsop_r4_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 8) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 8 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_r4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4R(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
    {
        uint raw = 0x0DFFE800U; // Encoding for: LD4R_asisdlsop_r4_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_r4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4R(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
    {
        uint raw = 0x4DFFE800U; // Encoding for: LD4R_asisdlsop_r4_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_r4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4R(Arm64RegisterGroup4<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
    {
        uint raw = 0x0DFFEC00U; // Encoding for: LD4R_asisdlsop_r4_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_r4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4R(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
    {
        uint raw = 0x4DFFEC00U; // Encoding for: LD4R_asisdlsop_r4_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_rx4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4R(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DE0E000U; // Encoding for: LD4R_asisdlsop_rx4_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_rx4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4R(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4DE0E000U; // Encoding for: LD4R_asisdlsop_rx4_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_rx4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4R(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DE0E400U; // Encoding for: LD4R_asisdlsop_rx4_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_rx4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4R(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4DE0E400U; // Encoding for: LD4R_asisdlsop_rx4_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_rx4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4R(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DE0E800U; // Encoding for: LD4R_asisdlsop_rx4_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_rx4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4R(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4DE0E800U; // Encoding for: LD4R_asisdlsop_rx4_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_rx4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4R(Arm64RegisterGroup4<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x0DE0EC00U; // Encoding for: LD4R_asisdlsop_rx4_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_rx4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LD4R(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
    {
        uint raw = 0x4DE0EC00U; // Encoding for: LD4R_asisdlsop_rx4_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Load-acquire RCpc one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LDAP1 {Vt.D}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAP1_asisdlso_d1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDAP1(Arm64RegisterGroup1<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x0D418400U; // Encoding for: LDAP1_asisdlso_d1
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point add in memory.
    /// </summary>
    /// <remarks><code>LDBFADD Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFADD_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDBFADD(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x3C200000U; // Encoding for: LDBFADD_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point add in memory.
    /// </summary>
    /// <remarks><code>LDBFADDA Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFADDA_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDBFADDA(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x3CA00000U; // Encoding for: LDBFADDA_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point add in memory.
    /// </summary>
    /// <remarks><code>LDBFADDAL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFADDAL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDBFADDAL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x3CE00000U; // Encoding for: LDBFADDAL_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point add in memory.
    /// </summary>
    /// <remarks><code>LDBFADDL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFADDL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDBFADDL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x3C600000U; // Encoding for: LDBFADDL_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDBFMAX Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMAX_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDBFMAX(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x3C204000U; // Encoding for: LDBFMAX_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDBFMAXA Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMAXA_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDBFMAXA(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x3CA04000U; // Encoding for: LDBFMAXA_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDBFMAXAL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMAXAL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDBFMAXAL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x3CE04000U; // Encoding for: LDBFMAXAL_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDBFMAXL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMAXL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDBFMAXL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x3C604000U; // Encoding for: LDBFMAXL_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDBFMAXNM Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMAXNM_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDBFMAXNM(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x3C206000U; // Encoding for: LDBFMAXNM_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDBFMAXNMA Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMAXNMA_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDBFMAXNMA(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x3CA06000U; // Encoding for: LDBFMAXNMA_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDBFMAXNMAL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMAXNMAL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDBFMAXNMAL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x3CE06000U; // Encoding for: LDBFMAXNMAL_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDBFMAXNML Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMAXNML_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDBFMAXNML(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x3C606000U; // Encoding for: LDBFMAXNML_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDBFMIN Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMIN_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDBFMIN(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x3C205000U; // Encoding for: LDBFMIN_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDBFMINA Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMINA_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDBFMINA(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x3CA05000U; // Encoding for: LDBFMINA_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDBFMINAL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMINAL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDBFMINAL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x3CE05000U; // Encoding for: LDBFMINAL_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDBFMINL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMINL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDBFMINL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x3C605000U; // Encoding for: LDBFMINL_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDBFMINNM Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMINNM_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDBFMINNM(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x3C207000U; // Encoding for: LDBFMINNM_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDBFMINNMA Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMINNMA_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDBFMINNMA(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x3CA07000U; // Encoding for: LDBFMINNMA_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDBFMINNMAL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMINNMAL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDBFMINNMAL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x3CE07000U; // Encoding for: LDBFMINNMAL_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDBFMINNML Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMINNML_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDBFMINNML(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x3C607000U; // Encoding for: LDBFMINNML_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic add in memory.
    /// </summary>
    /// <remarks><code>LDFADD Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFADD_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFADD(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x7C200000U; // Encoding for: LDFADD_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic add in memory.
    /// </summary>
    /// <remarks><code>LDFADD Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFADD_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFADD(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xBC200000U; // Encoding for: LDFADD_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)St.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic add in memory.
    /// </summary>
    /// <remarks><code>LDFADD Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFADD_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFADD(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xFC200000U; // Encoding for: LDFADD_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)Dt.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic add in memory.
    /// </summary>
    /// <remarks><code>LDFADDA Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFADDA_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFADDA(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x7CA00000U; // Encoding for: LDFADDA_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic add in memory.
    /// </summary>
    /// <remarks><code>LDFADDA Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFADDA_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFADDA(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xBCA00000U; // Encoding for: LDFADDA_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)St.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic add in memory.
    /// </summary>
    /// <remarks><code>LDFADDA Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFADDA_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFADDA(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xFCA00000U; // Encoding for: LDFADDA_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)Dt.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic add in memory.
    /// </summary>
    /// <remarks><code>LDFADDAL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFADDAL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFADDAL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x7CE00000U; // Encoding for: LDFADDAL_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic add in memory.
    /// </summary>
    /// <remarks><code>LDFADDAL Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFADDAL_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFADDAL(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xBCE00000U; // Encoding for: LDFADDAL_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)St.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic add in memory.
    /// </summary>
    /// <remarks><code>LDFADDAL Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFADDAL_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFADDAL(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xFCE00000U; // Encoding for: LDFADDAL_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)Dt.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic add in memory.
    /// </summary>
    /// <remarks><code>LDFADDL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFADDL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFADDL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x7C600000U; // Encoding for: LDFADDL_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic add in memory.
    /// </summary>
    /// <remarks><code>LDFADDL Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFADDL_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFADDL(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xBC600000U; // Encoding for: LDFADDL_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)St.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic add in memory.
    /// </summary>
    /// <remarks><code>LDFADDL Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFADDL_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFADDL(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xFC600000U; // Encoding for: LDFADDL_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)Dt.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDFMAX Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAX_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMAX(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x7C204000U; // Encoding for: LDFMAX_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDFMAX Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAX_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMAX(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xBC204000U; // Encoding for: LDFMAX_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)St.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDFMAX Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAX_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMAX(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xFC204000U; // Encoding for: LDFMAX_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)Dt.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDFMAXA Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXA_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMAXA(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x7CA04000U; // Encoding for: LDFMAXA_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDFMAXA Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXA_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMAXA(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xBCA04000U; // Encoding for: LDFMAXA_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)St.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDFMAXA Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXA_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMAXA(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xFCA04000U; // Encoding for: LDFMAXA_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)Dt.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDFMAXAL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXAL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMAXAL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x7CE04000U; // Encoding for: LDFMAXAL_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDFMAXAL Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXAL_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMAXAL(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xBCE04000U; // Encoding for: LDFMAXAL_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)St.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDFMAXAL Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXAL_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMAXAL(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xFCE04000U; // Encoding for: LDFMAXAL_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)Dt.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDFMAXL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMAXL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x7C604000U; // Encoding for: LDFMAXL_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDFMAXL Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXL_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMAXL(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xBC604000U; // Encoding for: LDFMAXL_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)St.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDFMAXL Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXL_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMAXL(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xFC604000U; // Encoding for: LDFMAXL_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)Dt.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDFMAXNM Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXNM_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMAXNM(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x7C206000U; // Encoding for: LDFMAXNM_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDFMAXNM Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXNM_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMAXNM(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xBC206000U; // Encoding for: LDFMAXNM_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)St.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDFMAXNM Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXNM_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMAXNM(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xFC206000U; // Encoding for: LDFMAXNM_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)Dt.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDFMAXNMA Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXNMA_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMAXNMA(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x7CA06000U; // Encoding for: LDFMAXNMA_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDFMAXNMA Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXNMA_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMAXNMA(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xBCA06000U; // Encoding for: LDFMAXNMA_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)St.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDFMAXNMA Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXNMA_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMAXNMA(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xFCA06000U; // Encoding for: LDFMAXNMA_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)Dt.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDFMAXNMAL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXNMAL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMAXNMAL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x7CE06000U; // Encoding for: LDFMAXNMAL_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDFMAXNMAL Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXNMAL_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMAXNMAL(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xBCE06000U; // Encoding for: LDFMAXNMAL_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)St.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDFMAXNMAL Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXNMAL_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMAXNMAL(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xFCE06000U; // Encoding for: LDFMAXNMAL_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)Dt.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDFMAXNML Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXNML_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMAXNML(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x7C606000U; // Encoding for: LDFMAXNML_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDFMAXNML Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXNML_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMAXNML(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xBC606000U; // Encoding for: LDFMAXNML_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)St.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDFMAXNML Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXNML_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMAXNML(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xFC606000U; // Encoding for: LDFMAXNML_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)Dt.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDFMIN Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMIN_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMIN(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x7C205000U; // Encoding for: LDFMIN_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDFMIN Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMIN_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMIN(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xBC205000U; // Encoding for: LDFMIN_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)St.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDFMIN Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMIN_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMIN(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xFC205000U; // Encoding for: LDFMIN_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)Dt.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDFMINA Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINA_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMINA(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x7CA05000U; // Encoding for: LDFMINA_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDFMINA Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINA_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMINA(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xBCA05000U; // Encoding for: LDFMINA_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)St.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDFMINA Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINA_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMINA(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xFCA05000U; // Encoding for: LDFMINA_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)Dt.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDFMINAL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINAL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMINAL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x7CE05000U; // Encoding for: LDFMINAL_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDFMINAL Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINAL_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMINAL(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xBCE05000U; // Encoding for: LDFMINAL_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)St.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDFMINAL Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINAL_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMINAL(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xFCE05000U; // Encoding for: LDFMINAL_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)Dt.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDFMINL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMINL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x7C605000U; // Encoding for: LDFMINL_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDFMINL Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINL_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMINL(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xBC605000U; // Encoding for: LDFMINL_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)St.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDFMINL Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINL_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMINL(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xFC605000U; // Encoding for: LDFMINL_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)Dt.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDFMINNM Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINNM_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMINNM(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x7C207000U; // Encoding for: LDFMINNM_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDFMINNM Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINNM_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMINNM(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xBC207000U; // Encoding for: LDFMINNM_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)St.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDFMINNM Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINNM_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMINNM(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xFC207000U; // Encoding for: LDFMINNM_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)Dt.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDFMINNMA Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINNMA_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMINNMA(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x7CA07000U; // Encoding for: LDFMINNMA_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDFMINNMA Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINNMA_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMINNMA(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xBCA07000U; // Encoding for: LDFMINNMA_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)St.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDFMINNMA Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINNMA_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMINNMA(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xFCA07000U; // Encoding for: LDFMINNMA_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)Dt.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDFMINNMAL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINNMAL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMINNMAL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x7CE07000U; // Encoding for: LDFMINNMAL_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDFMINNMAL Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINNMAL_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMINNMAL(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xBCE07000U; // Encoding for: LDFMINNMAL_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)St.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDFMINNMAL Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINNMAL_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMINNMAL(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xFCE07000U; // Encoding for: LDFMINNMAL_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)Dt.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDFMINNML Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINNML_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMINNML(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0x7C607000U; // Encoding for: LDFMINNML_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)Ht.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDFMINNML Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINNML_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMINNML(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xBC607000U; // Encoding for: LDFMINNML_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)St.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDFMINNML Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINNML_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDFMINNML(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
    {
        uint raw = 0xFC607000U; // Encoding for: LDFMINNML_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)Dt.Index;
        raw |= (uint)src.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Lookup table read with 2-bit indices.
    /// </summary>
    /// <remarks><code>LUTI2 Vd.16B, {Vn.16B}, Vm[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LUTI2_asimdtbl_l5), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LUTI2(Arm64RegisterV_16B Vd_16B, Arm64RegisterGroup1<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV.Indexed Vm)
    {
        uint raw = 0x4E801000U; // Encoding for: LUTI2_asimdtbl_l5
        raw |= (uint)Vd_16B.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm.Index << 16;
        raw |= (uint)(Vm.ElementIndex & 0x3) << 13;
        return raw;
    }
    /// <summary>
    /// Lookup table read with 2-bit indices.
    /// </summary>
    /// <remarks><code>LUTI2 Vd.8H, {Vn.8H}, Vm[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LUTI2_asimdtbl_l6), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LUTI2(Arm64RegisterV_8H Vd_8H, Arm64RegisterGroup1<Arm64RegisterV_8H> Vn_8H, Arm64RegisterV.Indexed Vm)
    {
        uint raw = 0x4EC00000U; // Encoding for: LUTI2_asimdtbl_l6
        raw |= (uint)Vd_8H.Index;
        raw |= (uint)Vn_8H.Index << 5;
        raw |= (uint)Vm.Index << 16;
        raw |= (uint)(Vm.ElementIndex & 0x7) << 12;
        return raw;
    }
    /// <summary>
    /// Lookup table read with 4-bit indices.
    /// </summary>
    /// <remarks><code>LUTI4 Vd.16B, {Vn.16B}, Vm[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LUTI4_asimdtbl_l5), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LUTI4(Arm64RegisterV_16B Vd_16B, Arm64RegisterGroup1<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV.Indexed Vm)
    {
        uint raw = 0x4E402000U; // Encoding for: LUTI4_asimdtbl_l5
        raw |= (uint)Vd_16B.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm.Index << 16;
        raw |= (uint)(Vm.ElementIndex & 0x1) << 14;
        return raw;
    }
    /// <summary>
    /// Lookup table read with 4-bit indices.
    /// </summary>
    /// <remarks><code>LUTI4 Vd.8H, {Vn1.8H, Vn2.8H}, Vm[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LUTI4_asimdtbl_l7), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LUTI4(Arm64RegisterV_8H Vd_8H, Arm64RegisterGroup2<Arm64RegisterV_8H> Vn1_8H, Arm64RegisterV.Indexed Vm)
    {
        uint raw = 0x4E401000U; // Encoding for: LUTI4_asimdtbl_l7
        raw |= (uint)Vd_8H.Index;
        raw |= (uint)Vn1_8H.Index << 5;
        raw |= (uint)Vm.Index << 16;
        raw |= (uint)(Vm.ElementIndex & 0x3) << 13;
        return raw;
    }
    /// <summary>
    /// Multiply-add to accumulator (vector, by element).
    /// </summary>
    /// <remarks><code>MLA Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLA_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MLA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x2F400000U; // Encoding for: MLA_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Multiply-add to accumulator (vector, by element).
    /// </summary>
    /// <remarks><code>MLA Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLA_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MLA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x6F400000U; // Encoding for: MLA_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Multiply-add to accumulator (vector, by element).
    /// </summary>
    /// <remarks><code>MLA Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLA_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MLA(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x2F800000U; // Encoding for: MLA_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Multiply-add to accumulator (vector, by element).
    /// </summary>
    /// <remarks><code>MLA Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLA_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MLA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x6F800000U; // Encoding for: MLA_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Multiply-add to accumulator (vector).
    /// </summary>
    /// <remarks><code>MLA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MLA(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E209400U; // Encoding for: MLA_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Multiply-add to accumulator (vector).
    /// </summary>
    /// <remarks><code>MLA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MLA(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E209400U; // Encoding for: MLA_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Multiply-add to accumulator (vector).
    /// </summary>
    /// <remarks><code>MLA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MLA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E609400U; // Encoding for: MLA_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Multiply-add to accumulator (vector).
    /// </summary>
    /// <remarks><code>MLA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MLA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E609400U; // Encoding for: MLA_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Multiply-add to accumulator (vector).
    /// </summary>
    /// <remarks><code>MLA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MLA(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA09400U; // Encoding for: MLA_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Multiply-add to accumulator (vector).
    /// </summary>
    /// <remarks><code>MLA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MLA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA09400U; // Encoding for: MLA_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Multiply-subtract from accumulator (vector, by element).
    /// </summary>
    /// <remarks><code>MLS Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLS_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MLS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x2F404000U; // Encoding for: MLS_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Multiply-subtract from accumulator (vector, by element).
    /// </summary>
    /// <remarks><code>MLS Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLS_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MLS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x6F404000U; // Encoding for: MLS_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Multiply-subtract from accumulator (vector, by element).
    /// </summary>
    /// <remarks><code>MLS Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLS_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MLS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x2F804000U; // Encoding for: MLS_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Multiply-subtract from accumulator (vector, by element).
    /// </summary>
    /// <remarks><code>MLS Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLS_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MLS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x6F804000U; // Encoding for: MLS_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Multiply-subtract from accumulator (vector).
    /// </summary>
    /// <remarks><code>MLS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MLS(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2E209400U; // Encoding for: MLS_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Multiply-subtract from accumulator (vector).
    /// </summary>
    /// <remarks><code>MLS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MLS(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6E209400U; // Encoding for: MLS_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Multiply-subtract from accumulator (vector).
    /// </summary>
    /// <remarks><code>MLS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MLS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E609400U; // Encoding for: MLS_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Multiply-subtract from accumulator (vector).
    /// </summary>
    /// <remarks><code>MLS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MLS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E609400U; // Encoding for: MLS_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Multiply-subtract from accumulator (vector).
    /// </summary>
    /// <remarks><code>MLS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MLS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA09400U; // Encoding for: MLS_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Multiply-subtract from accumulator (vector).
    /// </summary>
    /// <remarks><code>MLS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MLS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA09400U; // Encoding for: MLS_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Move vector element to another vector element.
    /// </summary>
    /// <remarks><code>MOV Vd.Ts[index1], Vn.Ts[index2]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_ins_asimdins_iv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOV(Arm64RegisterV_B.Indexed Vd_Ts, Arm64RegisterV_B.Indexed Vn_Ts)
    {
        uint raw = 0x6E010400U; // Encoding for: MOV_ins_asimdins_iv_v
        raw |= (uint)Vd_Ts.Index;
        raw |= (uint)(Vd_Ts.ElementIndex & 0xF) << 17;
        raw |= (uint)Vn_Ts.Index << 5;
        raw |= (uint)(Vn_Ts.ElementIndex & 0xF) << 11;
        return raw;
    }
    /// <summary>
    /// Move vector element to another vector element.
    /// </summary>
    /// <remarks><code>MOV Vd.Ts[index1], Vn.Ts[index2]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_ins_asimdins_iv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOV(Arm64RegisterV_H.Indexed Vd_Ts, Arm64RegisterV_H.Indexed Vn_Ts)
    {
        uint raw = 0x6E020400U; // Encoding for: MOV_ins_asimdins_iv_v
        raw |= (uint)Vd_Ts.Index;
        raw |= (uint)(Vd_Ts.ElementIndex & 0x7) << 18;
        raw |= (uint)Vn_Ts.Index << 5;
        raw |= (uint)(Vn_Ts.ElementIndex & 0x7) << 12;
        return raw;
    }
    /// <summary>
    /// Move vector element to another vector element.
    /// </summary>
    /// <remarks><code>MOV Vd.Ts[index1], Vn.Ts[index2]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_ins_asimdins_iv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOV(Arm64RegisterV_S.Indexed Vd_Ts, Arm64RegisterV_S.Indexed Vn_Ts)
    {
        uint raw = 0x6E040400U; // Encoding for: MOV_ins_asimdins_iv_v
        raw |= (uint)Vd_Ts.Index;
        raw |= (uint)(Vd_Ts.ElementIndex & 0x3) << 19;
        raw |= (uint)Vn_Ts.Index << 5;
        raw |= (uint)(Vn_Ts.ElementIndex & 0x3) << 13;
        return raw;
    }
    /// <summary>
    /// Move vector element to another vector element.
    /// </summary>
    /// <remarks><code>MOV Vd.Ts[index1], Vn.Ts[index2]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_ins_asimdins_iv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOV(Arm64RegisterV_D.Indexed Vd_Ts, Arm64RegisterV_D.Indexed Vn_Ts)
    {
        uint raw = 0x6E080400U; // Encoding for: MOV_ins_asimdins_iv_v
        raw |= (uint)Vd_Ts.Index;
        raw |= (uint)(Vd_Ts.ElementIndex & 0x1) << 20;
        raw |= (uint)Vn_Ts.Index << 5;
        raw |= (uint)(Vn_Ts.ElementIndex & 0x1) << 14;
        return raw;
    }
    /// <summary>
    /// Move general-purpose register to a vector element.
    /// </summary>
    /// <remarks><code>MOV Vd.Ts[index], Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_ins_asimdins_ir_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOV(Arm64RegisterV_B.Indexed Vd_Ts, Arm64RegisterXOrW Rn)
    {
        uint raw = 0x4E011C00U; // Encoding for: MOV_ins_asimdins_ir_r
        raw |= (uint)Vd_Ts.Index;
        raw |= (uint)(Vd_Ts.ElementIndex & 0xF) << 17;
        raw |= (uint)Rn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Move general-purpose register to a vector element.
    /// </summary>
    /// <remarks><code>MOV Vd.Ts[index], Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_ins_asimdins_ir_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOV(Arm64RegisterV_H.Indexed Vd_Ts, Arm64RegisterXOrW Rn)
    {
        uint raw = 0x4E021C00U; // Encoding for: MOV_ins_asimdins_ir_r
        raw |= (uint)Vd_Ts.Index;
        raw |= (uint)(Vd_Ts.ElementIndex & 0x7) << 18;
        raw |= (uint)Rn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Move general-purpose register to a vector element.
    /// </summary>
    /// <remarks><code>MOV Vd.Ts[index], Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_ins_asimdins_ir_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOV(Arm64RegisterV_S.Indexed Vd_Ts, Arm64RegisterXOrW Rn)
    {
        uint raw = 0x4E041C00U; // Encoding for: MOV_ins_asimdins_ir_r
        raw |= (uint)Vd_Ts.Index;
        raw |= (uint)(Vd_Ts.ElementIndex & 0x3) << 19;
        raw |= (uint)Rn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Move general-purpose register to a vector element.
    /// </summary>
    /// <remarks><code>MOV Vd.Ts[index], Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_ins_asimdins_ir_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOV(Arm64RegisterV_D.Indexed Vd_Ts, Arm64RegisterXOrW Rn)
    {
        uint raw = 0x4E081C00U; // Encoding for: MOV_ins_asimdins_ir_r
        raw |= (uint)Vd_Ts.Index;
        raw |= (uint)(Vd_Ts.ElementIndex & 0x1) << 20;
        raw |= (uint)Rn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Move vector element to scalar.
    /// </summary>
    /// <remarks><code>MOV Vd, Vn.T[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_dup_asisdone_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOV(Arm64RegisterB Vd, Arm64RegisterV_B.Indexed Vn_T)
    {
        uint raw = 0x5E010400U; // Encoding for: MOV_dup_asisdone_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vn_T.ElementIndex & 0xF) << 17;
        return raw;
    }
    /// <summary>
    /// Move vector element to scalar.
    /// </summary>
    /// <remarks><code>MOV Vd, Vn.T[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_dup_asisdone_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOV(Arm64RegisterH Vd, Arm64RegisterV_H.Indexed Vn_T)
    {
        uint raw = 0x5E020400U; // Encoding for: MOV_dup_asisdone_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vn_T.ElementIndex & 0x7) << 18;
        return raw;
    }
    /// <summary>
    /// Move vector element to scalar.
    /// </summary>
    /// <remarks><code>MOV Vd, Vn.T[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_dup_asisdone_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOV(Arm64RegisterS Vd, Arm64RegisterV_S.Indexed Vn_T)
    {
        uint raw = 0x5E040400U; // Encoding for: MOV_dup_asisdone_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vn_T.ElementIndex & 0x3) << 19;
        return raw;
    }
    /// <summary>
    /// Move vector element to scalar.
    /// </summary>
    /// <remarks><code>MOV Vd, Vn.T[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_dup_asisdone_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOV(Arm64RegisterD Vd, Arm64RegisterV_D.Indexed Vn_T)
    {
        uint raw = 0x5E080400U; // Encoding for: MOV_dup_asisdone_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vn_T.ElementIndex & 0x1) << 20;
        return raw;
    }
    /// <summary>
    /// Move vector element to general-purpose register.
    /// </summary>
    /// <remarks><code>MOV Wd, Vn.S[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_umov_asimdins_w_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOV(Arm64RegisterW Wd, Arm64RegisterV_S.Indexed Vn_S)
    {
        uint raw = 0x0E043C00U; // Encoding for: MOV_umov_asimdins_w_w
        raw |= (uint)Wd.Index;
        raw |= (uint)Vn_S.Index << 5;
        raw |= (uint)(Vn_S.ElementIndex & 0x3) << 19;
        return raw;
    }
    /// <summary>
    /// Move vector element to general-purpose register.
    /// </summary>
    /// <remarks><code>MOV Xd, Vn.D[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_umov_asimdins_x_x), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOV(Arm64RegisterX Xd, Arm64RegisterV_D.Indexed Vn_D)
    {
        uint raw = 0x4E083C00U; // Encoding for: MOV_umov_asimdins_x_x
        raw |= (uint)Xd.Index;
        raw |= (uint)Vn_D.Index << 5;
        raw |= (uint)(Vn_D.ElementIndex & 0x1) << 20;
        return raw;
    }
    /// <summary>
    /// Move vector.
    /// </summary>
    /// <remarks><code>MOV Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_orr_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOV(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
    {
        uint raw = 0x0EA01C00U; // Encoding for: MOV_orr_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Move vector.
    /// </summary>
    /// <remarks><code>MOV Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_orr_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOV(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
    {
        uint raw = 0x4EA01C00U; // Encoding for: MOV_orr_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Move immediate (vector).
    /// </summary>
    /// <remarks><code>MOVI Vd.T, #imm8 {, LSL #0}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVI_asimdimm_n_b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOVI(Arm64RegisterV_8B Vd_T, byte imm8, LSLShiftKind LSL = default, int amount = 0)
    {
        uint raw = 0x0F00E400U; // Encoding for: MOVI_asimdimm_n_b
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm8
            var _i_ = imm8 & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        if (amount != 0) throw new ArgumentOutOfRangeException(nameof(amount), $"Invalid amount value '{amount}'. Expecting 0");
        return raw;
    }
    /// <summary>
    /// Move immediate (vector).
    /// </summary>
    /// <remarks><code>MOVI Vd.T, #imm8 {, LSL #0}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVI_asimdimm_n_b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOVI(Arm64RegisterV_16B Vd_T, byte imm8, LSLShiftKind LSL = default, int amount = 0)
    {
        uint raw = 0x4F00E400U; // Encoding for: MOVI_asimdimm_n_b
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm8
            var _i_ = imm8 & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        if (amount != 0) throw new ArgumentOutOfRangeException(nameof(amount), $"Invalid amount value '{amount}'. Expecting 0");
        return raw;
    }
    /// <summary>
    /// Move immediate (vector).
    /// </summary>
    /// <remarks><code>MOVI Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVI_asimdimm_l_hl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOVI(Arm64RegisterV_4H Vd_T, byte imm8, LSLShiftKind LSL = default, int amount = 0)
    {
        uint raw = 0x0F008400U; // Encoding for: MOVI_asimdimm_l_hl
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm8
            var _i_ = imm8 & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        raw |= (uint)((amount >> 3) & 0x1) << 13;
        return raw;
    }
    /// <summary>
    /// Move immediate (vector).
    /// </summary>
    /// <remarks><code>MOVI Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVI_asimdimm_l_hl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOVI(Arm64RegisterV_8H Vd_T, byte imm8, LSLShiftKind LSL = default, int amount = 0)
    {
        uint raw = 0x4F008400U; // Encoding for: MOVI_asimdimm_l_hl
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm8
            var _i_ = imm8 & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        raw |= (uint)((amount >> 3) & 0x1) << 13;
        return raw;
    }
    /// <summary>
    /// Move immediate (vector).
    /// </summary>
    /// <remarks><code>MOVI Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVI_asimdimm_l_sl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOVI(Arm64RegisterV_2S Vd_T, byte imm8, LSLShiftKind LSL = default, int amount = 0)
    {
        uint raw = 0x0F000400U; // Encoding for: MOVI_asimdimm_l_sl
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm8
            var _i_ = imm8 & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        raw |= (uint)((amount >> 3) & 0x3) << 13;
        return raw;
    }
    /// <summary>
    /// Move immediate (vector).
    /// </summary>
    /// <remarks><code>MOVI Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVI_asimdimm_l_sl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOVI(Arm64RegisterV_4S Vd_T, byte imm8, LSLShiftKind LSL = default, int amount = 0)
    {
        uint raw = 0x4F000400U; // Encoding for: MOVI_asimdimm_l_sl
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm8
            var _i_ = imm8 & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        raw |= (uint)((amount >> 3) & 0x3) << 13;
        return raw;
    }
    /// <summary>
    /// Move immediate (vector).
    /// </summary>
    /// <remarks><code>MOVI Vd.T, #imm8, MSL #amount</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVI_asimdimm_m_sm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOVI(Arm64RegisterV_2S Vd_T, byte imm8, MSLShiftKind MSL, int amount)
    {
        uint raw = 0x0F00C400U; // Encoding for: MOVI_asimdimm_m_sm
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm8
            var _i_ = imm8 & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        raw |= (uint)(((amount >> 3) - 1) & 0x1) << 12;
        return raw;
    }
    /// <summary>
    /// Move immediate (vector).
    /// </summary>
    /// <remarks><code>MOVI Vd.T, #imm8, MSL #amount</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVI_asimdimm_m_sm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOVI(Arm64RegisterV_4S Vd_T, byte imm8, MSLShiftKind MSL, int amount)
    {
        uint raw = 0x4F00C400U; // Encoding for: MOVI_asimdimm_m_sm
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm8
            var _i_ = imm8 & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        raw |= (uint)(((amount >> 3) - 1) & 0x1) << 12;
        return raw;
    }
    /// <summary>
    /// Move immediate (vector).
    /// </summary>
    /// <remarks><code>MOVI Dd, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVI_asimdimm_d_ds), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOVI(Arm64RegisterD Dd, Arm64BitMaskImmediate64 imm)
    {
        uint raw = 0x2F00E400U; // Encoding for: MOVI_asimdimm_d_ds
        raw |= (uint)Dd.Index;
        {
            // Write the immediate for imm.Value
            var _i_ = imm.Value & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        return raw;
    }
    /// <summary>
    /// Move immediate (vector).
    /// </summary>
    /// <remarks><code>MOVI Vd.2D, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVI_asimdimm_d2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MOVI(Arm64RegisterV_2D Vd_2D, Arm64BitMaskImmediate64 imm)
    {
        uint raw = 0x6F00E400U; // Encoding for: MOVI_asimdimm_d2_d
        raw |= (uint)Vd_2D.Index;
        {
            // Write the immediate for imm.Value
            var _i_ = imm.Value & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        return raw;
    }
    /// <summary>
    /// Multiply (vector, by element).
    /// </summary>
    /// <remarks><code>MUL Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MUL_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MUL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x0F408000U; // Encoding for: MUL_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Multiply (vector, by element).
    /// </summary>
    /// <remarks><code>MUL Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MUL_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MUL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x4F408000U; // Encoding for: MUL_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Multiply (vector, by element).
    /// </summary>
    /// <remarks><code>MUL Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MUL_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MUL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x0F808000U; // Encoding for: MUL_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Multiply (vector, by element).
    /// </summary>
    /// <remarks><code>MUL Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MUL_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MUL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x4F808000U; // Encoding for: MUL_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Multiply (vector).
    /// </summary>
    /// <remarks><code>MUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MUL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MUL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E209C00U; // Encoding for: MUL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Multiply (vector).
    /// </summary>
    /// <remarks><code>MUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MUL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MUL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E209C00U; // Encoding for: MUL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Multiply (vector).
    /// </summary>
    /// <remarks><code>MUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MUL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MUL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E609C00U; // Encoding for: MUL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Multiply (vector).
    /// </summary>
    /// <remarks><code>MUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MUL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MUL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E609C00U; // Encoding for: MUL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Multiply (vector).
    /// </summary>
    /// <remarks><code>MUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MUL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MUL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA09C00U; // Encoding for: MUL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Multiply (vector).
    /// </summary>
    /// <remarks><code>MUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MUL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MUL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA09C00U; // Encoding for: MUL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Bitwise NOT (vector).
    /// </summary>
    /// <remarks><code>MVN Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MVN_not_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MVN(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
    {
        uint raw = 0x2E205800U; // Encoding for: MVN_not_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Bitwise NOT (vector).
    /// </summary>
    /// <remarks><code>MVN Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MVN_not_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MVN(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
    {
        uint raw = 0x6E205800U; // Encoding for: MVN_not_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Move inverted immediate (vector).
    /// </summary>
    /// <remarks><code>MVNI Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MVNI_asimdimm_l_hl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MVNI(Arm64RegisterV_4H Vd_T, byte imm8, LSLShiftKind LSL = default, int amount = 0)
    {
        uint raw = 0x2F008400U; // Encoding for: MVNI_asimdimm_l_hl
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm8
            var _i_ = imm8 & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        raw |= (uint)((amount >> 3) & 0x1) << 13;
        return raw;
    }
    /// <summary>
    /// Move inverted immediate (vector).
    /// </summary>
    /// <remarks><code>MVNI Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MVNI_asimdimm_l_hl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MVNI(Arm64RegisterV_8H Vd_T, byte imm8, LSLShiftKind LSL = default, int amount = 0)
    {
        uint raw = 0x6F008400U; // Encoding for: MVNI_asimdimm_l_hl
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm8
            var _i_ = imm8 & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        raw |= (uint)((amount >> 3) & 0x1) << 13;
        return raw;
    }
    /// <summary>
    /// Move inverted immediate (vector).
    /// </summary>
    /// <remarks><code>MVNI Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MVNI_asimdimm_l_sl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MVNI(Arm64RegisterV_2S Vd_T, byte imm8, LSLShiftKind LSL = default, int amount = 0)
    {
        uint raw = 0x2F000400U; // Encoding for: MVNI_asimdimm_l_sl
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm8
            var _i_ = imm8 & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        raw |= (uint)((amount >> 3) & 0x3) << 13;
        return raw;
    }
    /// <summary>
    /// Move inverted immediate (vector).
    /// </summary>
    /// <remarks><code>MVNI Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MVNI_asimdimm_l_sl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MVNI(Arm64RegisterV_4S Vd_T, byte imm8, LSLShiftKind LSL = default, int amount = 0)
    {
        uint raw = 0x6F000400U; // Encoding for: MVNI_asimdimm_l_sl
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm8
            var _i_ = imm8 & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        raw |= (uint)((amount >> 3) & 0x3) << 13;
        return raw;
    }
    /// <summary>
    /// Move inverted immediate (vector).
    /// </summary>
    /// <remarks><code>MVNI Vd.T, #imm8, MSL #amount</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MVNI_asimdimm_m_sm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MVNI(Arm64RegisterV_2S Vd_T, byte imm8, MSLShiftKind MSL, int amount)
    {
        uint raw = 0x2F00C400U; // Encoding for: MVNI_asimdimm_m_sm
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm8
            var _i_ = imm8 & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        raw |= (uint)(((amount >> 3) - 1) & 0x1) << 12;
        return raw;
    }
    /// <summary>
    /// Move inverted immediate (vector).
    /// </summary>
    /// <remarks><code>MVNI Vd.T, #imm8, MSL #amount</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MVNI_asimdimm_m_sm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MVNI(Arm64RegisterV_4S Vd_T, byte imm8, MSLShiftKind MSL, int amount)
    {
        uint raw = 0x6F00C400U; // Encoding for: MVNI_asimdimm_m_sm
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm8
            var _i_ = imm8 & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        raw |= (uint)(((amount >> 3) - 1) & 0x1) << 12;
        return raw;
    }
    /// <summary>
    /// Negate (vector).
    /// </summary>
    /// <remarks><code>NEG Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NEG_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint NEG(Arm64RegisterD Dd, Arm64RegisterD Dn)
    {
        uint raw = 0x7EE0B800U; // Encoding for: NEG_asisdmisc_r
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Negate (vector).
    /// </summary>
    /// <remarks><code>NEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint NEG(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
    {
        uint raw = 0x2E20B800U; // Encoding for: NEG_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Negate (vector).
    /// </summary>
    /// <remarks><code>NEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint NEG(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
    {
        uint raw = 0x6E20B800U; // Encoding for: NEG_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Negate (vector).
    /// </summary>
    /// <remarks><code>NEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint NEG(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x2E60B800U; // Encoding for: NEG_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Negate (vector).
    /// </summary>
    /// <remarks><code>NEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint NEG(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x6E60B800U; // Encoding for: NEG_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Negate (vector).
    /// </summary>
    /// <remarks><code>NEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint NEG(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x2EA0B800U; // Encoding for: NEG_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Negate (vector).
    /// </summary>
    /// <remarks><code>NEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint NEG(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x6EA0B800U; // Encoding for: NEG_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Negate (vector).
    /// </summary>
    /// <remarks><code>NEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint NEG(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x6EE0B800U; // Encoding for: NEG_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Bitwise inclusive OR NOT (vector).
    /// </summary>
    /// <remarks><code>ORN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ORN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ORN(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0EE01C00U; // Encoding for: ORN_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Bitwise inclusive OR NOT (vector).
    /// </summary>
    /// <remarks><code>ORN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ORN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ORN(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4EE01C00U; // Encoding for: ORN_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Bitwise inclusive OR (vector, immediate).
    /// </summary>
    /// <remarks><code>ORR Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ORR_asimdimm_l_hl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ORR(Arm64RegisterV_4H Vd_T, byte imm8, LSLShiftKind LSL = default, int amount = 0)
    {
        uint raw = 0x0F009400U; // Encoding for: ORR_asimdimm_l_hl
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm8
            var _i_ = imm8 & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        raw |= (uint)((amount >> 3) & 0x1) << 13;
        return raw;
    }
    /// <summary>
    /// Bitwise inclusive OR (vector, immediate).
    /// </summary>
    /// <remarks><code>ORR Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ORR_asimdimm_l_hl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ORR(Arm64RegisterV_8H Vd_T, byte imm8, LSLShiftKind LSL = default, int amount = 0)
    {
        uint raw = 0x4F009400U; // Encoding for: ORR_asimdimm_l_hl
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm8
            var _i_ = imm8 & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        raw |= (uint)((amount >> 3) & 0x1) << 13;
        return raw;
    }
    /// <summary>
    /// Bitwise inclusive OR (vector, immediate).
    /// </summary>
    /// <remarks><code>ORR Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ORR_asimdimm_l_sl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ORR(Arm64RegisterV_2S Vd_T, byte imm8, LSLShiftKind LSL = default, int amount = 0)
    {
        uint raw = 0x0F001400U; // Encoding for: ORR_asimdimm_l_sl
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm8
            var _i_ = imm8 & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        raw |= (uint)((amount >> 3) & 0x3) << 13;
        return raw;
    }
    /// <summary>
    /// Bitwise inclusive OR (vector, immediate).
    /// </summary>
    /// <remarks><code>ORR Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ORR_asimdimm_l_sl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ORR(Arm64RegisterV_4S Vd_T, byte imm8, LSLShiftKind LSL = default, int amount = 0)
    {
        uint raw = 0x4F001400U; // Encoding for: ORR_asimdimm_l_sl
        raw |= (uint)Vd_T.Index;
        {
            // Write the immediate for imm8
            var _i_ = imm8 & 0xFF;
            raw |= (uint)(_i_ & 0x1F) << 5;
            _i_ >>= 5;
            raw |= (uint)(_i_ & 0x7) << 16;
        }
        raw |= (uint)((amount >> 3) & 0x3) << 13;
        return raw;
    }
    /// <summary>
    /// Bitwise inclusive OR (vector, register).
    /// </summary>
    /// <remarks><code>ORR Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ORR_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ORR(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0EA01C00U; // Encoding for: ORR_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Bitwise inclusive OR (vector, register).
    /// </summary>
    /// <remarks><code>ORR Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ORR_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ORR(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4EA01C00U; // Encoding for: ORR_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Polynomial multiply.
    /// </summary>
    /// <remarks><code>PMUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PMUL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint PMUL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2E209C00U; // Encoding for: PMUL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Polynomial multiply.
    /// </summary>
    /// <remarks><code>PMUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PMUL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint PMUL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6E209C00U; // Encoding for: PMUL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Polynomial multiply long.
    /// </summary>
    /// <remarks><code>PMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint PMULL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x0E20E000U; // Encoding for: PMULL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Polynomial multiply long.
    /// </summary>
    /// <remarks><code>PMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint PMULL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x4E20E000U; // Encoding for: PMULL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Polynomial multiply long.
    /// </summary>
    /// <remarks><code>PMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint PMULL(Arm64RegisterV_1Q Vd_Ta, Arm64RegisterV_1D Vn_Tb, Arm64RegisterV_1D Vm_Tb)
    {
        uint raw = 0x0EE0E000U; // Encoding for: PMULL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Polynomial multiply long.
    /// </summary>
    /// <remarks><code>PMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint PMULL(Arm64RegisterV_1Q Vd_Ta, Arm64RegisterV_2D Vn_Tb, Arm64RegisterV_2D Vm_Tb)
    {
        uint raw = 0x4EE0E000U; // Encoding for: PMULL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Polynomial multiply long.
    /// </summary>
    /// <remarks><code>PMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint PMULL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x4E20E000U; // Encoding for: PMULL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Polynomial multiply long.
    /// </summary>
    /// <remarks><code>PMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint PMULL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x4E20E000U; // Encoding for: PMULL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Polynomial multiply long.
    /// </summary>
    /// <remarks><code>PMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint PMULL2(Arm64RegisterV_1Q Vd_Ta, Arm64RegisterV_1D Vn_Tb, Arm64RegisterV_1D Vm_Tb)
    {
        uint raw = 0x4EE0E000U; // Encoding for: PMULL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Polynomial multiply long.
    /// </summary>
    /// <remarks><code>PMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint PMULL2(Arm64RegisterV_1Q Vd_Ta, Arm64RegisterV_2D Vn_Tb, Arm64RegisterV_2D Vm_Tb)
    {
        uint raw = 0x4EE0E000U; // Encoding for: PMULL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Rounding add returning high narrow.
    /// </summary>
    /// <remarks><code>RADDHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RADDHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RADDHN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8H Vm_Ta)
    {
        uint raw = 0x2E204000U; // Encoding for: RADDHN_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Rounding add returning high narrow.
    /// </summary>
    /// <remarks><code>RADDHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RADDHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RADDHN(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8H Vm_Ta)
    {
        uint raw = 0x6E204000U; // Encoding for: RADDHN_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Rounding add returning high narrow.
    /// </summary>
    /// <remarks><code>RADDHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RADDHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RADDHN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4S Vm_Ta)
    {
        uint raw = 0x2E604000U; // Encoding for: RADDHN_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Rounding add returning high narrow.
    /// </summary>
    /// <remarks><code>RADDHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RADDHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RADDHN(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4S Vm_Ta)
    {
        uint raw = 0x6E604000U; // Encoding for: RADDHN_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Rounding add returning high narrow.
    /// </summary>
    /// <remarks><code>RADDHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RADDHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RADDHN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2D Vm_Ta)
    {
        uint raw = 0x2EA04000U; // Encoding for: RADDHN_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Rounding add returning high narrow.
    /// </summary>
    /// <remarks><code>RADDHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RADDHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RADDHN(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2D Vm_Ta)
    {
        uint raw = 0x6EA04000U; // Encoding for: RADDHN_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Rounding add returning high narrow.
    /// </summary>
    /// <remarks><code>RADDHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RADDHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RADDHN2(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8H Vm_Ta)
    {
        uint raw = 0x6E204000U; // Encoding for: RADDHN2_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Rounding add returning high narrow.
    /// </summary>
    /// <remarks><code>RADDHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RADDHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RADDHN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8H Vm_Ta)
    {
        uint raw = 0x6E204000U; // Encoding for: RADDHN2_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Rounding add returning high narrow.
    /// </summary>
    /// <remarks><code>RADDHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RADDHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RADDHN2(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4S Vm_Ta)
    {
        uint raw = 0x6E604000U; // Encoding for: RADDHN2_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Rounding add returning high narrow.
    /// </summary>
    /// <remarks><code>RADDHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RADDHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RADDHN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4S Vm_Ta)
    {
        uint raw = 0x6E604000U; // Encoding for: RADDHN2_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Rounding add returning high narrow.
    /// </summary>
    /// <remarks><code>RADDHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RADDHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RADDHN2(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2D Vm_Ta)
    {
        uint raw = 0x6EA04000U; // Encoding for: RADDHN2_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Rounding add returning high narrow.
    /// </summary>
    /// <remarks><code>RADDHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RADDHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RADDHN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2D Vm_Ta)
    {
        uint raw = 0x6EA04000U; // Encoding for: RADDHN2_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Rotate and exclusive-OR.
    /// </summary>
    /// <remarks><code>RAX1 Vd.2D, Vn.2D, Vm.2D</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RAX1_vvv2_cryptosha512_3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RAX1(Arm64RegisterV_2D Vd_2D, Arm64RegisterV_2D Vn_2D, Arm64RegisterV_2D Vm_2D)
    {
        uint raw = 0xCE608C00U; // Encoding for: RAX1_vvv2_cryptosha512_3
        raw |= (uint)Vd_2D.Index;
        raw |= (uint)Vn_2D.Index << 5;
        raw |= (uint)Vm_2D.Index << 16;
        return raw;
    }
    /// <summary>
    /// Reverse bit order (vector).
    /// </summary>
    /// <remarks><code>RBIT Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RBIT_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RBIT(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
    {
        uint raw = 0x2E605800U; // Encoding for: RBIT_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Reverse bit order (vector).
    /// </summary>
    /// <remarks><code>RBIT Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RBIT_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RBIT(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
    {
        uint raw = 0x6E605800U; // Encoding for: RBIT_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Reverse elements in 16-bit halfwords (vector).
    /// </summary>
    /// <remarks><code>REV16 Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV16_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint REV16(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
    {
        uint raw = 0x0E201800U; // Encoding for: REV16_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Reverse elements in 16-bit halfwords (vector).
    /// </summary>
    /// <remarks><code>REV16 Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV16_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint REV16(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
    {
        uint raw = 0x4E201800U; // Encoding for: REV16_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Reverse elements in 32-bit words (vector).
    /// </summary>
    /// <remarks><code>REV32 Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV32_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint REV32(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
    {
        uint raw = 0x2E200800U; // Encoding for: REV32_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Reverse elements in 32-bit words (vector).
    /// </summary>
    /// <remarks><code>REV32 Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV32_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint REV32(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
    {
        uint raw = 0x6E200800U; // Encoding for: REV32_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Reverse elements in 32-bit words (vector).
    /// </summary>
    /// <remarks><code>REV32 Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV32_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint REV32(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x2E600800U; // Encoding for: REV32_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Reverse elements in 32-bit words (vector).
    /// </summary>
    /// <remarks><code>REV32 Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV32_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint REV32(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x6E600800U; // Encoding for: REV32_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Reverse elements in 64-bit doublewords (vector).
    /// </summary>
    /// <remarks><code>REV64 Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV64_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint REV64(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
    {
        uint raw = 0x0E200800U; // Encoding for: REV64_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Reverse elements in 64-bit doublewords (vector).
    /// </summary>
    /// <remarks><code>REV64 Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV64_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint REV64(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
    {
        uint raw = 0x4E200800U; // Encoding for: REV64_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Reverse elements in 64-bit doublewords (vector).
    /// </summary>
    /// <remarks><code>REV64 Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV64_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint REV64(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0E600800U; // Encoding for: REV64_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Reverse elements in 64-bit doublewords (vector).
    /// </summary>
    /// <remarks><code>REV64 Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV64_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint REV64(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4E600800U; // Encoding for: REV64_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Reverse elements in 64-bit doublewords (vector).
    /// </summary>
    /// <remarks><code>REV64 Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV64_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint REV64(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x0EA00800U; // Encoding for: REV64_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Reverse elements in 64-bit doublewords (vector).
    /// </summary>
    /// <remarks><code>REV64 Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV64_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint REV64(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x4EA00800U; // Encoding for: REV64_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Rounding shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>RSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RSHRN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x0F088C00U; // Encoding for: RSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Rounding shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>RSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RSHRN(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x4F088C00U; // Encoding for: RSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Rounding shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>RSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RSHRN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x0F108C00U; // Encoding for: RSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Rounding shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>RSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RSHRN(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x4F108C00U; // Encoding for: RSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Rounding shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>RSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RSHRN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x0F208C00U; // Encoding for: RSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Rounding shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>RSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RSHRN(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x4F208C00U; // Encoding for: RSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Rounding shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>RSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RSHRN2(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x4F088C00U; // Encoding for: RSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Rounding shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>RSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RSHRN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x4F088C00U; // Encoding for: RSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Rounding shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>RSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RSHRN2(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x4F108C00U; // Encoding for: RSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Rounding shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>RSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RSHRN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x4F108C00U; // Encoding for: RSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Rounding shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>RSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RSHRN2(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x4F208C00U; // Encoding for: RSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Rounding shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>RSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RSHRN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x4F208C00U; // Encoding for: RSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Rounding subtract returning high narrow.
    /// </summary>
    /// <remarks><code>RSUBHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSUBHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RSUBHN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8H Vm_Ta)
    {
        uint raw = 0x2E206000U; // Encoding for: RSUBHN_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Rounding subtract returning high narrow.
    /// </summary>
    /// <remarks><code>RSUBHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSUBHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RSUBHN(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8H Vm_Ta)
    {
        uint raw = 0x6E206000U; // Encoding for: RSUBHN_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Rounding subtract returning high narrow.
    /// </summary>
    /// <remarks><code>RSUBHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSUBHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RSUBHN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4S Vm_Ta)
    {
        uint raw = 0x2E606000U; // Encoding for: RSUBHN_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Rounding subtract returning high narrow.
    /// </summary>
    /// <remarks><code>RSUBHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSUBHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RSUBHN(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4S Vm_Ta)
    {
        uint raw = 0x6E606000U; // Encoding for: RSUBHN_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Rounding subtract returning high narrow.
    /// </summary>
    /// <remarks><code>RSUBHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSUBHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RSUBHN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2D Vm_Ta)
    {
        uint raw = 0x2EA06000U; // Encoding for: RSUBHN_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Rounding subtract returning high narrow.
    /// </summary>
    /// <remarks><code>RSUBHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSUBHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RSUBHN(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2D Vm_Ta)
    {
        uint raw = 0x6EA06000U; // Encoding for: RSUBHN_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Rounding subtract returning high narrow.
    /// </summary>
    /// <remarks><code>RSUBHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSUBHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RSUBHN2(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8H Vm_Ta)
    {
        uint raw = 0x6E206000U; // Encoding for: RSUBHN2_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Rounding subtract returning high narrow.
    /// </summary>
    /// <remarks><code>RSUBHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSUBHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RSUBHN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8H Vm_Ta)
    {
        uint raw = 0x6E206000U; // Encoding for: RSUBHN2_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Rounding subtract returning high narrow.
    /// </summary>
    /// <remarks><code>RSUBHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSUBHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RSUBHN2(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4S Vm_Ta)
    {
        uint raw = 0x6E606000U; // Encoding for: RSUBHN2_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Rounding subtract returning high narrow.
    /// </summary>
    /// <remarks><code>RSUBHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSUBHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RSUBHN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4S Vm_Ta)
    {
        uint raw = 0x6E606000U; // Encoding for: RSUBHN2_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Rounding subtract returning high narrow.
    /// </summary>
    /// <remarks><code>RSUBHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSUBHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RSUBHN2(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2D Vm_Ta)
    {
        uint raw = 0x6EA06000U; // Encoding for: RSUBHN2_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Rounding subtract returning high narrow.
    /// </summary>
    /// <remarks><code>RSUBHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSUBHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint RSUBHN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2D Vm_Ta)
    {
        uint raw = 0x6EA06000U; // Encoding for: RSUBHN2_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference and accumulate.
    /// </summary>
    /// <remarks><code>SABA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABA(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E207C00U; // Encoding for: SABA_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference and accumulate.
    /// </summary>
    /// <remarks><code>SABA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABA(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E207C00U; // Encoding for: SABA_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference and accumulate.
    /// </summary>
    /// <remarks><code>SABA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E607C00U; // Encoding for: SABA_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference and accumulate.
    /// </summary>
    /// <remarks><code>SABA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E607C00U; // Encoding for: SABA_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference and accumulate.
    /// </summary>
    /// <remarks><code>SABA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABA(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA07C00U; // Encoding for: SABA_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference and accumulate.
    /// </summary>
    /// <remarks><code>SABA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA07C00U; // Encoding for: SABA_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>SABAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABAL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x0E205000U; // Encoding for: SABAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>SABAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABAL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x4E205000U; // Encoding for: SABAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>SABAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x0E605000U; // Encoding for: SABAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>SABAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E605000U; // Encoding for: SABAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>SABAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABAL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x0EA05000U; // Encoding for: SABAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>SABAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABAL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x4EA05000U; // Encoding for: SABAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>SABAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABAL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x4E205000U; // Encoding for: SABAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>SABAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABAL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x4E205000U; // Encoding for: SABAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>SABAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x4E605000U; // Encoding for: SABAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>SABAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E605000U; // Encoding for: SABAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>SABAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABAL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x4EA05000U; // Encoding for: SABAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>SABAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABAL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x4EA05000U; // Encoding for: SABAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference.
    /// </summary>
    /// <remarks><code>SABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABD(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E207400U; // Encoding for: SABD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference.
    /// </summary>
    /// <remarks><code>SABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABD(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E207400U; // Encoding for: SABD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference.
    /// </summary>
    /// <remarks><code>SABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E607400U; // Encoding for: SABD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference.
    /// </summary>
    /// <remarks><code>SABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E607400U; // Encoding for: SABD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference.
    /// </summary>
    /// <remarks><code>SABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA07400U; // Encoding for: SABD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference.
    /// </summary>
    /// <remarks><code>SABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA07400U; // Encoding for: SABD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference long.
    /// </summary>
    /// <remarks><code>SABDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABDL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x0E207000U; // Encoding for: SABDL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference long.
    /// </summary>
    /// <remarks><code>SABDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABDL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x4E207000U; // Encoding for: SABDL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference long.
    /// </summary>
    /// <remarks><code>SABDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABDL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x0E607000U; // Encoding for: SABDL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference long.
    /// </summary>
    /// <remarks><code>SABDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABDL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E607000U; // Encoding for: SABDL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference long.
    /// </summary>
    /// <remarks><code>SABDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABDL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x0EA07000U; // Encoding for: SABDL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference long.
    /// </summary>
    /// <remarks><code>SABDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABDL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x4EA07000U; // Encoding for: SABDL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference long.
    /// </summary>
    /// <remarks><code>SABDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABDL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x4E207000U; // Encoding for: SABDL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference long.
    /// </summary>
    /// <remarks><code>SABDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABDL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x4E207000U; // Encoding for: SABDL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference long.
    /// </summary>
    /// <remarks><code>SABDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABDL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x4E607000U; // Encoding for: SABDL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference long.
    /// </summary>
    /// <remarks><code>SABDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABDL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E607000U; // Encoding for: SABDL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference long.
    /// </summary>
    /// <remarks><code>SABDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABDL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x4EA07000U; // Encoding for: SABDL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed absolute difference long.
    /// </summary>
    /// <remarks><code>SABDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SABDL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x4EA07000U; // Encoding for: SABDL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed add and accumulate long pairwise.
    /// </summary>
    /// <remarks><code>SADALP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADALP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADALP(Arm64RegisterV_4H Vd_Ta, Arm64RegisterV_8B Vn_Tb)
    {
        uint raw = 0x0E206800U; // Encoding for: SADALP_asimdmisc_p
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed add and accumulate long pairwise.
    /// </summary>
    /// <remarks><code>SADALP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADALP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADALP(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb)
    {
        uint raw = 0x4E206800U; // Encoding for: SADALP_asimdmisc_p
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed add and accumulate long pairwise.
    /// </summary>
    /// <remarks><code>SADALP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADALP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADALP(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_4H Vn_Tb)
    {
        uint raw = 0x0E606800U; // Encoding for: SADALP_asimdmisc_p
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed add and accumulate long pairwise.
    /// </summary>
    /// <remarks><code>SADALP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADALP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADALP(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb)
    {
        uint raw = 0x4E606800U; // Encoding for: SADALP_asimdmisc_p
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed add and accumulate long pairwise.
    /// </summary>
    /// <remarks><code>SADALP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADALP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADALP(Arm64RegisterV_1D Vd_Ta, Arm64RegisterV_2S Vn_Tb)
    {
        uint raw = 0x0EA06800U; // Encoding for: SADALP_asimdmisc_p
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed add and accumulate long pairwise.
    /// </summary>
    /// <remarks><code>SADALP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADALP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADALP(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb)
    {
        uint raw = 0x4EA06800U; // Encoding for: SADALP_asimdmisc_p
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed add long (vector).
    /// </summary>
    /// <remarks><code>SADDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x0E200000U; // Encoding for: SADDL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed add long (vector).
    /// </summary>
    /// <remarks><code>SADDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x4E200000U; // Encoding for: SADDL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed add long (vector).
    /// </summary>
    /// <remarks><code>SADDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x0E600000U; // Encoding for: SADDL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed add long (vector).
    /// </summary>
    /// <remarks><code>SADDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E600000U; // Encoding for: SADDL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed add long (vector).
    /// </summary>
    /// <remarks><code>SADDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x0EA00000U; // Encoding for: SADDL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed add long (vector).
    /// </summary>
    /// <remarks><code>SADDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x4EA00000U; // Encoding for: SADDL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed add long (vector).
    /// </summary>
    /// <remarks><code>SADDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x4E200000U; // Encoding for: SADDL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed add long (vector).
    /// </summary>
    /// <remarks><code>SADDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x4E200000U; // Encoding for: SADDL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed add long (vector).
    /// </summary>
    /// <remarks><code>SADDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x4E600000U; // Encoding for: SADDL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed add long (vector).
    /// </summary>
    /// <remarks><code>SADDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E600000U; // Encoding for: SADDL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed add long (vector).
    /// </summary>
    /// <remarks><code>SADDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x4EA00000U; // Encoding for: SADDL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed add long (vector).
    /// </summary>
    /// <remarks><code>SADDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x4EA00000U; // Encoding for: SADDL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed add long pairwise.
    /// </summary>
    /// <remarks><code>SADDLP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDLP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDLP(Arm64RegisterV_4H Vd_Ta, Arm64RegisterV_8B Vn_Tb)
    {
        uint raw = 0x0E202800U; // Encoding for: SADDLP_asimdmisc_p
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed add long pairwise.
    /// </summary>
    /// <remarks><code>SADDLP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDLP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDLP(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb)
    {
        uint raw = 0x4E202800U; // Encoding for: SADDLP_asimdmisc_p
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed add long pairwise.
    /// </summary>
    /// <remarks><code>SADDLP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDLP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDLP(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_4H Vn_Tb)
    {
        uint raw = 0x0E602800U; // Encoding for: SADDLP_asimdmisc_p
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed add long pairwise.
    /// </summary>
    /// <remarks><code>SADDLP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDLP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDLP(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb)
    {
        uint raw = 0x4E602800U; // Encoding for: SADDLP_asimdmisc_p
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed add long pairwise.
    /// </summary>
    /// <remarks><code>SADDLP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDLP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDLP(Arm64RegisterV_1D Vd_Ta, Arm64RegisterV_2S Vn_Tb)
    {
        uint raw = 0x0EA02800U; // Encoding for: SADDLP_asimdmisc_p
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed add long pairwise.
    /// </summary>
    /// <remarks><code>SADDLP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDLP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDLP(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb)
    {
        uint raw = 0x4EA02800U; // Encoding for: SADDLP_asimdmisc_p
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed add long across vector.
    /// </summary>
    /// <remarks><code>SADDLV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDLV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDLV(Arm64RegisterH Vd, Arm64RegisterV_8B Vn_T)
    {
        uint raw = 0x0E303800U; // Encoding for: SADDLV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed add long across vector.
    /// </summary>
    /// <remarks><code>SADDLV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDLV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDLV(Arm64RegisterH Vd, Arm64RegisterV_16B Vn_T)
    {
        uint raw = 0x4E303800U; // Encoding for: SADDLV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed add long across vector.
    /// </summary>
    /// <remarks><code>SADDLV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDLV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDLV(Arm64RegisterS Vd, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0E703800U; // Encoding for: SADDLV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed add long across vector.
    /// </summary>
    /// <remarks><code>SADDLV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDLV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDLV(Arm64RegisterS Vd, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4E703800U; // Encoding for: SADDLV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed add long across vector.
    /// </summary>
    /// <remarks><code>SADDLV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDLV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDLV(Arm64RegisterD Vd, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x4EB03800U; // Encoding for: SADDLV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed add wide.
    /// </summary>
    /// <remarks><code>SADDW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDW(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x0E201000U; // Encoding for: SADDW_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed add wide.
    /// </summary>
    /// <remarks><code>SADDW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDW(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x4E201000U; // Encoding for: SADDW_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed add wide.
    /// </summary>
    /// <remarks><code>SADDW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDW(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x0E601000U; // Encoding for: SADDW_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed add wide.
    /// </summary>
    /// <remarks><code>SADDW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDW(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E601000U; // Encoding for: SADDW_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed add wide.
    /// </summary>
    /// <remarks><code>SADDW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDW(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x0EA01000U; // Encoding for: SADDW_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed add wide.
    /// </summary>
    /// <remarks><code>SADDW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDW(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x4EA01000U; // Encoding for: SADDW_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed add wide.
    /// </summary>
    /// <remarks><code>SADDW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDW2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x4E201000U; // Encoding for: SADDW2_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed add wide.
    /// </summary>
    /// <remarks><code>SADDW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDW2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x4E201000U; // Encoding for: SADDW2_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed add wide.
    /// </summary>
    /// <remarks><code>SADDW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDW2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x4E601000U; // Encoding for: SADDW2_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed add wide.
    /// </summary>
    /// <remarks><code>SADDW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDW2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E601000U; // Encoding for: SADDW2_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed add wide.
    /// </summary>
    /// <remarks><code>SADDW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDW2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x4EA01000U; // Encoding for: SADDW2_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed add wide.
    /// </summary>
    /// <remarks><code>SADDW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SADDW2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x4EA01000U; // Encoding for: SADDW2_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd, Vn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asisdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterH Vd, Arm64RegisterH Vn, byte fbits)
    {
        uint raw = 0x5F10E400U; // Encoding for: SCVTF_asisdshf_c
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd, Vn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asisdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterS Vd, Arm64RegisterS Vn, byte fbits)
    {
        uint raw = 0x5F20E400U; // Encoding for: SCVTF_asisdshf_c
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd, Vn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asisdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterD Vd, Arm64RegisterD Vn, byte fbits)
    {
        uint raw = 0x5F40E400U; // Encoding for: SCVTF_asisdshf_c
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte fbits)
    {
        uint raw = 0x0F10E400U; // Encoding for: SCVTF_asimdshf_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte fbits)
    {
        uint raw = 0x4F10E400U; // Encoding for: SCVTF_asimdshf_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte fbits)
    {
        uint raw = 0x0F20E400U; // Encoding for: SCVTF_asimdshf_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte fbits)
    {
        uint raw = 0x4F20E400U; // Encoding for: SCVTF_asimdshf_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte fbits)
    {
        uint raw = 0x4F40E400U; // Encoding for: SCVTF_asimdshf_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x5E79D800U; // Encoding for: SCVTF_asisdmiscfp16_r
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterS Vd, Arm64RegisterS Vn)
    {
        uint raw = 0x5E21D800U; // Encoding for: SCVTF_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterD Vd, Arm64RegisterD Vn)
    {
        uint raw = 0x5E61D800U; // Encoding for: SCVTF_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0E79D800U; // Encoding for: SCVTF_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4E79D800U; // Encoding for: SCVTF_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x0E21D800U; // Encoding for: SCVTF_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x4E21D800U; // Encoding for: SCVTF_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SCVTF(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x4E61D800U; // Encoding for: SCVTF_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Dot product signed arithmetic (vector, by element).
    /// </summary>
    /// <remarks><code>SDOT Vd.Ta, Vn.Tb, Vm.4B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SDOT_asimdelem_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SDOT(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_4B.Indexed Vm_4B)
    {
        uint raw = 0x0F00E000U; // Encoding for: SDOT_asimdelem_d
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_4B.Index << 16;
        {
            // Write the element indexer for Vm_4B.ElementIndex
            var _i_ = Vm_4B.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Dot product signed arithmetic (vector, by element).
    /// </summary>
    /// <remarks><code>SDOT Vd.Ta, Vn.Tb, Vm.4B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SDOT_asimdelem_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SDOT(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_4B.Indexed Vm_4B)
    {
        uint raw = 0x4F00E000U; // Encoding for: SDOT_asimdelem_d
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_4B.Index << 16;
        {
            // Write the element indexer for Vm_4B.ElementIndex
            var _i_ = Vm_4B.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Dot product signed arithmetic (vector).
    /// </summary>
    /// <remarks><code>SDOT Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SDOT_asimdsame2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SDOT(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x0E009400U; // Encoding for: SDOT_asimdsame2_d
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Dot product signed arithmetic (vector).
    /// </summary>
    /// <remarks><code>SDOT Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SDOT_asimdsame2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SDOT(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x4E009400U; // Encoding for: SDOT_asimdsame2_d
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// SHA1 hash update (choose).
    /// </summary>
    /// <remarks><code>SHA1C Qd, Sn, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA1C_qsv_cryptosha3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHA1C(Arm64RegisterQ Qd, Arm64RegisterS Sn, Arm64RegisterV_4S Vm_4S)
    {
        uint raw = 0x5E000000U; // Encoding for: SHA1C_qsv_cryptosha3
        raw |= (uint)Qd.Index;
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)Vm_4S.Index << 16;
        return raw;
    }
    /// <summary>
    /// SHA1 fixed rotate.
    /// </summary>
    /// <remarks><code>SHA1H Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA1H_ss_cryptosha2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHA1H(Arm64RegisterS Sd, Arm64RegisterS Sn)
    {
        uint raw = 0x5E280800U; // Encoding for: SHA1H_ss_cryptosha2
        raw |= (uint)Sd.Index;
        raw |= (uint)Sn.Index << 5;
        return raw;
    }
    /// <summary>
    /// SHA1 hash update (majority).
    /// </summary>
    /// <remarks><code>SHA1M Qd, Sn, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA1M_qsv_cryptosha3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHA1M(Arm64RegisterQ Qd, Arm64RegisterS Sn, Arm64RegisterV_4S Vm_4S)
    {
        uint raw = 0x5E002000U; // Encoding for: SHA1M_qsv_cryptosha3
        raw |= (uint)Qd.Index;
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)Vm_4S.Index << 16;
        return raw;
    }
    /// <summary>
    /// SHA1 hash update (parity).
    /// </summary>
    /// <remarks><code>SHA1P Qd, Sn, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA1P_qsv_cryptosha3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHA1P(Arm64RegisterQ Qd, Arm64RegisterS Sn, Arm64RegisterV_4S Vm_4S)
    {
        uint raw = 0x5E001000U; // Encoding for: SHA1P_qsv_cryptosha3
        raw |= (uint)Qd.Index;
        raw |= (uint)Sn.Index << 5;
        raw |= (uint)Vm_4S.Index << 16;
        return raw;
    }
    /// <summary>
    /// SHA1 schedule update 0.
    /// </summary>
    /// <remarks><code>SHA1SU0 Vd.4S, Vn.4S, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA1SU0_vvv_cryptosha3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHA1SU0(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_4S Vm_4S)
    {
        uint raw = 0x5E003000U; // Encoding for: SHA1SU0_vvv_cryptosha3
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_4S.Index << 5;
        raw |= (uint)Vm_4S.Index << 16;
        return raw;
    }
    /// <summary>
    /// SHA1 schedule update 1.
    /// </summary>
    /// <remarks><code>SHA1SU1 Vd.4S, Vn.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA1SU1_vv_cryptosha2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHA1SU1(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S)
    {
        uint raw = 0x5E281800U; // Encoding for: SHA1SU1_vv_cryptosha2
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_4S.Index << 5;
        return raw;
    }
    /// <summary>
    /// SHA256 hash update (part 1).
    /// </summary>
    /// <remarks><code>SHA256H Qd, Qn, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA256H_qqv_cryptosha3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHA256H(Arm64RegisterQ Qd, Arm64RegisterQ Qn, Arm64RegisterV_4S Vm_4S)
    {
        uint raw = 0x5E004000U; // Encoding for: SHA256H_qqv_cryptosha3
        raw |= (uint)Qd.Index;
        raw |= (uint)Qn.Index << 5;
        raw |= (uint)Vm_4S.Index << 16;
        return raw;
    }
    /// <summary>
    /// SHA256 hash update (part 2).
    /// </summary>
    /// <remarks><code>SHA256H2 Qd, Qn, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA256H2_qqv_cryptosha3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHA256H2(Arm64RegisterQ Qd, Arm64RegisterQ Qn, Arm64RegisterV_4S Vm_4S)
    {
        uint raw = 0x5E005000U; // Encoding for: SHA256H2_qqv_cryptosha3
        raw |= (uint)Qd.Index;
        raw |= (uint)Qn.Index << 5;
        raw |= (uint)Vm_4S.Index << 16;
        return raw;
    }
    /// <summary>
    /// SHA256 schedule update 0.
    /// </summary>
    /// <remarks><code>SHA256SU0 Vd.4S, Vn.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA256SU0_vv_cryptosha2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHA256SU0(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S)
    {
        uint raw = 0x5E282800U; // Encoding for: SHA256SU0_vv_cryptosha2
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_4S.Index << 5;
        return raw;
    }
    /// <summary>
    /// SHA256 schedule update 1.
    /// </summary>
    /// <remarks><code>SHA256SU1 Vd.4S, Vn.4S, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA256SU1_vvv_cryptosha3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHA256SU1(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_4S Vm_4S)
    {
        uint raw = 0x5E006000U; // Encoding for: SHA256SU1_vvv_cryptosha3
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_4S.Index << 5;
        raw |= (uint)Vm_4S.Index << 16;
        return raw;
    }
    /// <summary>
    /// SHA512 hash update part 1.
    /// </summary>
    /// <remarks><code>SHA512H Qd, Qn, Vm.2D</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA512H_qqv_cryptosha512_3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHA512H(Arm64RegisterQ Qd, Arm64RegisterQ Qn, Arm64RegisterV_2D Vm_2D)
    {
        uint raw = 0xCE608000U; // Encoding for: SHA512H_qqv_cryptosha512_3
        raw |= (uint)Qd.Index;
        raw |= (uint)Qn.Index << 5;
        raw |= (uint)Vm_2D.Index << 16;
        return raw;
    }
    /// <summary>
    /// SHA512 hash update part 2.
    /// </summary>
    /// <remarks><code>SHA512H2 Qd, Qn, Vm.2D</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA512H2_qqv_cryptosha512_3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHA512H2(Arm64RegisterQ Qd, Arm64RegisterQ Qn, Arm64RegisterV_2D Vm_2D)
    {
        uint raw = 0xCE608400U; // Encoding for: SHA512H2_qqv_cryptosha512_3
        raw |= (uint)Qd.Index;
        raw |= (uint)Qn.Index << 5;
        raw |= (uint)Vm_2D.Index << 16;
        return raw;
    }
    /// <summary>
    /// SHA512 schedule update 0.
    /// </summary>
    /// <remarks><code>SHA512SU0 Vd.2D, Vn.2D</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA512SU0_vv2_cryptosha512_2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHA512SU0(Arm64RegisterV_2D Vd_2D, Arm64RegisterV_2D Vn_2D)
    {
        uint raw = 0xCEC08000U; // Encoding for: SHA512SU0_vv2_cryptosha512_2
        raw |= (uint)Vd_2D.Index;
        raw |= (uint)Vn_2D.Index << 5;
        return raw;
    }
    /// <summary>
    /// SHA512 schedule update 1.
    /// </summary>
    /// <remarks><code>SHA512SU1 Vd.2D, Vn.2D, Vm.2D</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA512SU1_vvv2_cryptosha512_3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHA512SU1(Arm64RegisterV_2D Vd_2D, Arm64RegisterV_2D Vn_2D, Arm64RegisterV_2D Vm_2D)
    {
        uint raw = 0xCE608800U; // Encoding for: SHA512SU1_vvv2_cryptosha512_3
        raw |= (uint)Vd_2D.Index;
        raw |= (uint)Vn_2D.Index << 5;
        raw |= (uint)Vm_2D.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed halving add.
    /// </summary>
    /// <remarks><code>SHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHADD(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E200400U; // Encoding for: SHADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed halving add.
    /// </summary>
    /// <remarks><code>SHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHADD(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E200400U; // Encoding for: SHADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed halving add.
    /// </summary>
    /// <remarks><code>SHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHADD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E600400U; // Encoding for: SHADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed halving add.
    /// </summary>
    /// <remarks><code>SHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHADD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E600400U; // Encoding for: SHADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed halving add.
    /// </summary>
    /// <remarks><code>SHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHADD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA00400U; // Encoding for: SHADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed halving add.
    /// </summary>
    /// <remarks><code>SHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHADD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA00400U; // Encoding for: SHADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Shift left (immediate).
    /// </summary>
    /// <remarks><code>SHL Dd, Dn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHL_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHL(Arm64RegisterD Dd, Arm64RegisterD Dn, uint shift)
    {
        uint raw = 0x5F405400U; // Encoding for: SHL_asisdshf_r
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)((shift - 64) & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift left (immediate).
    /// </summary>
    /// <remarks><code>SHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
    {
        uint raw = 0x0F085400U; // Encoding for: SHL_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift left (immediate).
    /// </summary>
    /// <remarks><code>SHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
    {
        uint raw = 0x4F085400U; // Encoding for: SHL_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift left (immediate).
    /// </summary>
    /// <remarks><code>SHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
    {
        uint raw = 0x0F105400U; // Encoding for: SHL_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift left (immediate).
    /// </summary>
    /// <remarks><code>SHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
    {
        uint raw = 0x4F105400U; // Encoding for: SHL_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift left (immediate).
    /// </summary>
    /// <remarks><code>SHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
    {
        uint raw = 0x0F205400U; // Encoding for: SHL_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift left (immediate).
    /// </summary>
    /// <remarks><code>SHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
    {
        uint raw = 0x4F205400U; // Encoding for: SHL_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift left (immediate).
    /// </summary>
    /// <remarks><code>SHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
    {
        uint raw = 0x4F405400U; // Encoding for: SHL_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift left long (by element size).
    /// </summary>
    /// <remarks><code>SHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHLL_asimdmisc_s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHLL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, byte shift = 8)
    {
        uint raw = 0x2E213800U; // Encoding for: SHLL_asimdmisc_s
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        if (shift != 8) throw new ArgumentOutOfRangeException(nameof(shift), $"Invalid immediate value. Expecting the fixed value 8 instead of {shift}");
        return raw;
    }
    /// <summary>
    /// Shift left long (by element size).
    /// </summary>
    /// <remarks><code>SHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHLL_asimdmisc_s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHLL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, byte shift = 8)
    {
        uint raw = 0x6E213800U; // Encoding for: SHLL_asimdmisc_s
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        if (shift != 8) throw new ArgumentOutOfRangeException(nameof(shift), $"Invalid immediate value. Expecting the fixed value 8 instead of {shift}");
        return raw;
    }
    /// <summary>
    /// Shift left long (by element size).
    /// </summary>
    /// <remarks><code>SHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHLL_asimdmisc_s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHLL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, byte shift = 16)
    {
        uint raw = 0x2E613800U; // Encoding for: SHLL_asimdmisc_s
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        if (shift != 16) throw new ArgumentOutOfRangeException(nameof(shift), $"Invalid immediate value. Expecting the fixed value 16 instead of {shift}");
        return raw;
    }
    /// <summary>
    /// Shift left long (by element size).
    /// </summary>
    /// <remarks><code>SHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHLL_asimdmisc_s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHLL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, byte shift = 16)
    {
        uint raw = 0x6E613800U; // Encoding for: SHLL_asimdmisc_s
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        if (shift != 16) throw new ArgumentOutOfRangeException(nameof(shift), $"Invalid immediate value. Expecting the fixed value 16 instead of {shift}");
        return raw;
    }
    /// <summary>
    /// Shift left long (by element size).
    /// </summary>
    /// <remarks><code>SHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHLL_asimdmisc_s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHLL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, byte shift = 32)
    {
        uint raw = 0x2EA13800U; // Encoding for: SHLL_asimdmisc_s
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        if (shift != 32) throw new ArgumentOutOfRangeException(nameof(shift), $"Invalid immediate value. Expecting the fixed value 32 instead of {shift}");
        return raw;
    }
    /// <summary>
    /// Shift left long (by element size).
    /// </summary>
    /// <remarks><code>SHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHLL_asimdmisc_s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHLL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, byte shift = 32)
    {
        uint raw = 0x6EA13800U; // Encoding for: SHLL_asimdmisc_s
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        if (shift != 32) throw new ArgumentOutOfRangeException(nameof(shift), $"Invalid immediate value. Expecting the fixed value 32 instead of {shift}");
        return raw;
    }
    /// <summary>
    /// Shift left long (by element size).
    /// </summary>
    /// <remarks><code>SHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHLL2_asimdmisc_s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHLL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, byte shift = 8)
    {
        uint raw = 0x6E213800U; // Encoding for: SHLL2_asimdmisc_s
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        if (shift != 8) throw new ArgumentOutOfRangeException(nameof(shift), $"Invalid immediate value. Expecting the fixed value 8 instead of {shift}");
        return raw;
    }
    /// <summary>
    /// Shift left long (by element size).
    /// </summary>
    /// <remarks><code>SHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHLL2_asimdmisc_s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHLL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, byte shift = 8)
    {
        uint raw = 0x6E213800U; // Encoding for: SHLL2_asimdmisc_s
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        if (shift != 8) throw new ArgumentOutOfRangeException(nameof(shift), $"Invalid immediate value. Expecting the fixed value 8 instead of {shift}");
        return raw;
    }
    /// <summary>
    /// Shift left long (by element size).
    /// </summary>
    /// <remarks><code>SHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHLL2_asimdmisc_s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHLL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, byte shift = 16)
    {
        uint raw = 0x6E613800U; // Encoding for: SHLL2_asimdmisc_s
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        if (shift != 16) throw new ArgumentOutOfRangeException(nameof(shift), $"Invalid immediate value. Expecting the fixed value 16 instead of {shift}");
        return raw;
    }
    /// <summary>
    /// Shift left long (by element size).
    /// </summary>
    /// <remarks><code>SHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHLL2_asimdmisc_s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHLL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, byte shift = 16)
    {
        uint raw = 0x6E613800U; // Encoding for: SHLL2_asimdmisc_s
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        if (shift != 16) throw new ArgumentOutOfRangeException(nameof(shift), $"Invalid immediate value. Expecting the fixed value 16 instead of {shift}");
        return raw;
    }
    /// <summary>
    /// Shift left long (by element size).
    /// </summary>
    /// <remarks><code>SHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHLL2_asimdmisc_s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHLL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, byte shift = 32)
    {
        uint raw = 0x6EA13800U; // Encoding for: SHLL2_asimdmisc_s
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        if (shift != 32) throw new ArgumentOutOfRangeException(nameof(shift), $"Invalid immediate value. Expecting the fixed value 32 instead of {shift}");
        return raw;
    }
    /// <summary>
    /// Shift left long (by element size).
    /// </summary>
    /// <remarks><code>SHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHLL2_asimdmisc_s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHLL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, byte shift = 32)
    {
        uint raw = 0x6EA13800U; // Encoding for: SHLL2_asimdmisc_s
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        if (shift != 32) throw new ArgumentOutOfRangeException(nameof(shift), $"Invalid immediate value. Expecting the fixed value 32 instead of {shift}");
        return raw;
    }
    /// <summary>
    /// Shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHRN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x0F088400U; // Encoding for: SHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHRN(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x4F088400U; // Encoding for: SHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHRN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x0F108400U; // Encoding for: SHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHRN(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x4F108400U; // Encoding for: SHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHRN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x0F208400U; // Encoding for: SHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHRN(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x4F208400U; // Encoding for: SHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHRN2(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x4F088400U; // Encoding for: SHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHRN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x4F088400U; // Encoding for: SHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHRN2(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x4F108400U; // Encoding for: SHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHRN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x4F108400U; // Encoding for: SHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHRN2(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x4F208400U; // Encoding for: SHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHRN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x4F208400U; // Encoding for: SHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed halving subtract.
    /// </summary>
    /// <remarks><code>SHSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHSUB(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E202400U; // Encoding for: SHSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed halving subtract.
    /// </summary>
    /// <remarks><code>SHSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHSUB(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E202400U; // Encoding for: SHSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed halving subtract.
    /// </summary>
    /// <remarks><code>SHSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHSUB(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E602400U; // Encoding for: SHSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed halving subtract.
    /// </summary>
    /// <remarks><code>SHSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHSUB(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E602400U; // Encoding for: SHSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed halving subtract.
    /// </summary>
    /// <remarks><code>SHSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHSUB(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA02400U; // Encoding for: SHSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed halving subtract.
    /// </summary>
    /// <remarks><code>SHSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SHSUB(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA02400U; // Encoding for: SHSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Shift left and insert (immediate).
    /// </summary>
    /// <remarks><code>SLI Dd, Dn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SLI_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SLI(Arm64RegisterD Dd, Arm64RegisterD Dn, uint shift)
    {
        uint raw = 0x7F405400U; // Encoding for: SLI_asisdshf_r
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)((shift - 64) & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift left and insert (immediate).
    /// </summary>
    /// <remarks><code>SLI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SLI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SLI(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
    {
        uint raw = 0x2F085400U; // Encoding for: SLI_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift left and insert (immediate).
    /// </summary>
    /// <remarks><code>SLI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SLI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SLI(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
    {
        uint raw = 0x6F085400U; // Encoding for: SLI_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift left and insert (immediate).
    /// </summary>
    /// <remarks><code>SLI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SLI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SLI(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
    {
        uint raw = 0x2F105400U; // Encoding for: SLI_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift left and insert (immediate).
    /// </summary>
    /// <remarks><code>SLI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SLI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SLI(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
    {
        uint raw = 0x6F105400U; // Encoding for: SLI_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift left and insert (immediate).
    /// </summary>
    /// <remarks><code>SLI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SLI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SLI(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
    {
        uint raw = 0x2F205400U; // Encoding for: SLI_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift left and insert (immediate).
    /// </summary>
    /// <remarks><code>SLI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SLI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SLI(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
    {
        uint raw = 0x6F205400U; // Encoding for: SLI_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift left and insert (immediate).
    /// </summary>
    /// <remarks><code>SLI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SLI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SLI(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
    {
        uint raw = 0x6F405400U; // Encoding for: SLI_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// SM3PARTW1.
    /// </summary>
    /// <remarks><code>SM3PARTW1 Vd.4S, Vn.4S, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SM3PARTW1_vvv4_cryptosha512_3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SM3PARTW1(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_4S Vm_4S)
    {
        uint raw = 0xCE60C000U; // Encoding for: SM3PARTW1_vvv4_cryptosha512_3
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_4S.Index << 5;
        raw |= (uint)Vm_4S.Index << 16;
        return raw;
    }
    /// <summary>
    /// SM3PARTW2.
    /// </summary>
    /// <remarks><code>SM3PARTW2 Vd.4S, Vn.4S, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SM3PARTW2_vvv4_cryptosha512_3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SM3PARTW2(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_4S Vm_4S)
    {
        uint raw = 0xCE60C400U; // Encoding for: SM3PARTW2_vvv4_cryptosha512_3
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_4S.Index << 5;
        raw |= (uint)Vm_4S.Index << 16;
        return raw;
    }
    /// <summary>
    /// SM3SS1.
    /// </summary>
    /// <remarks><code>SM3SS1 Vd.4S, Vn.4S, Vm.4S, Va.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SM3SS1_vvv4_crypto4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SM3SS1(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_4S Vm_4S, Arm64RegisterV_4S Va_4S)
    {
        uint raw = 0xCE400000U; // Encoding for: SM3SS1_vvv4_crypto4
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_4S.Index << 5;
        raw |= (uint)Vm_4S.Index << 16;
        raw |= (uint)Va_4S.Index << 10;
        return raw;
    }
    /// <summary>
    /// SM3TT1A.
    /// </summary>
    /// <remarks><code>SM3TT1A Vd.4S, Vn.4S, Vm.S[imm2]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SM3TT1A_vvv4_crypto3_imm2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SM3TT1A(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_S.Indexed Vm_S)
    {
        uint raw = 0xCE408000U; // Encoding for: SM3TT1A_vvv4_crypto3_imm2
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_4S.Index << 5;
        raw |= (uint)Vm_S.Index << 16;
        raw |= (uint)(Vm_S.ElementIndex & 0x3) << 12;
        return raw;
    }
    /// <summary>
    /// SM3TT1B.
    /// </summary>
    /// <remarks><code>SM3TT1B Vd.4S, Vn.4S, Vm.S[imm2]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SM3TT1B_vvv4_crypto3_imm2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SM3TT1B(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_S.Indexed Vm_S)
    {
        uint raw = 0xCE408400U; // Encoding for: SM3TT1B_vvv4_crypto3_imm2
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_4S.Index << 5;
        raw |= (uint)Vm_S.Index << 16;
        raw |= (uint)(Vm_S.ElementIndex & 0x3) << 12;
        return raw;
    }
    /// <summary>
    /// SM3TT2A.
    /// </summary>
    /// <remarks><code>SM3TT2A Vd.4S, Vn.4S, Vm.S[imm2]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SM3TT2A_vvv4_crypto3_imm2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SM3TT2A(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_S.Indexed Vm_S)
    {
        uint raw = 0xCE408800U; // Encoding for: SM3TT2A_vvv4_crypto3_imm2
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_4S.Index << 5;
        raw |= (uint)Vm_S.Index << 16;
        raw |= (uint)(Vm_S.ElementIndex & 0x3) << 12;
        return raw;
    }
    /// <summary>
    /// SM3TT2B.
    /// </summary>
    /// <remarks><code>SM3TT2B Vd.4S, Vn.4S, Vm.S[imm2]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SM3TT2B_vvv_crypto3_imm2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SM3TT2B(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_S.Indexed Vm_S)
    {
        uint raw = 0xCE408C00U; // Encoding for: SM3TT2B_vvv_crypto3_imm2
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_4S.Index << 5;
        raw |= (uint)Vm_S.Index << 16;
        raw |= (uint)(Vm_S.ElementIndex & 0x3) << 12;
        return raw;
    }
    /// <summary>
    /// SM4 encode.
    /// </summary>
    /// <remarks><code>SM4E Vd.4S, Vn.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SM4E_vv4_cryptosha512_2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SM4E(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S)
    {
        uint raw = 0xCEC08400U; // Encoding for: SM4E_vv4_cryptosha512_2
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_4S.Index << 5;
        return raw;
    }
    /// <summary>
    /// SM4 key.
    /// </summary>
    /// <remarks><code>SM4EKEY Vd.4S, Vn.4S, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SM4EKEY_vvv4_cryptosha512_3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SM4EKEY(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_4S Vm_4S)
    {
        uint raw = 0xCE60C800U; // Encoding for: SM4EKEY_vvv4_cryptosha512_3
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_4S.Index << 5;
        raw |= (uint)Vm_4S.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed maximum (vector).
    /// </summary>
    /// <remarks><code>SMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMAX(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E206400U; // Encoding for: SMAX_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed maximum (vector).
    /// </summary>
    /// <remarks><code>SMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMAX(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E206400U; // Encoding for: SMAX_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed maximum (vector).
    /// </summary>
    /// <remarks><code>SMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMAX(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E606400U; // Encoding for: SMAX_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed maximum (vector).
    /// </summary>
    /// <remarks><code>SMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMAX(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E606400U; // Encoding for: SMAX_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed maximum (vector).
    /// </summary>
    /// <remarks><code>SMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMAX(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA06400U; // Encoding for: SMAX_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed maximum (vector).
    /// </summary>
    /// <remarks><code>SMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMAX(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA06400U; // Encoding for: SMAX_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed maximum pairwise.
    /// </summary>
    /// <remarks><code>SMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMAXP(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E20A400U; // Encoding for: SMAXP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed maximum pairwise.
    /// </summary>
    /// <remarks><code>SMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMAXP(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E20A400U; // Encoding for: SMAXP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed maximum pairwise.
    /// </summary>
    /// <remarks><code>SMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMAXP(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E60A400U; // Encoding for: SMAXP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed maximum pairwise.
    /// </summary>
    /// <remarks><code>SMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMAXP(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E60A400U; // Encoding for: SMAXP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed maximum pairwise.
    /// </summary>
    /// <remarks><code>SMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMAXP(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA0A400U; // Encoding for: SMAXP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed maximum pairwise.
    /// </summary>
    /// <remarks><code>SMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMAXP(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA0A400U; // Encoding for: SMAXP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed maximum across vector.
    /// </summary>
    /// <remarks><code>SMAXV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAXV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMAXV(Arm64RegisterB Vd, Arm64RegisterV_8B Vn_T)
    {
        uint raw = 0x0E30A800U; // Encoding for: SMAXV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed maximum across vector.
    /// </summary>
    /// <remarks><code>SMAXV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAXV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMAXV(Arm64RegisterB Vd, Arm64RegisterV_16B Vn_T)
    {
        uint raw = 0x4E30A800U; // Encoding for: SMAXV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed maximum across vector.
    /// </summary>
    /// <remarks><code>SMAXV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAXV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMAXV(Arm64RegisterH Vd, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0E70A800U; // Encoding for: SMAXV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed maximum across vector.
    /// </summary>
    /// <remarks><code>SMAXV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAXV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMAXV(Arm64RegisterH Vd, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4E70A800U; // Encoding for: SMAXV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed maximum across vector.
    /// </summary>
    /// <remarks><code>SMAXV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAXV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMAXV(Arm64RegisterS Vd, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x4EB0A800U; // Encoding for: SMAXV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed minimum (vector).
    /// </summary>
    /// <remarks><code>SMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMIN(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E206C00U; // Encoding for: SMIN_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed minimum (vector).
    /// </summary>
    /// <remarks><code>SMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMIN(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E206C00U; // Encoding for: SMIN_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed minimum (vector).
    /// </summary>
    /// <remarks><code>SMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMIN(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E606C00U; // Encoding for: SMIN_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed minimum (vector).
    /// </summary>
    /// <remarks><code>SMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMIN(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E606C00U; // Encoding for: SMIN_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed minimum (vector).
    /// </summary>
    /// <remarks><code>SMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMIN(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA06C00U; // Encoding for: SMIN_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed minimum (vector).
    /// </summary>
    /// <remarks><code>SMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMIN(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA06C00U; // Encoding for: SMIN_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed minimum pairwise.
    /// </summary>
    /// <remarks><code>SMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMINP(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E20AC00U; // Encoding for: SMINP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed minimum pairwise.
    /// </summary>
    /// <remarks><code>SMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMINP(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E20AC00U; // Encoding for: SMINP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed minimum pairwise.
    /// </summary>
    /// <remarks><code>SMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMINP(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E60AC00U; // Encoding for: SMINP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed minimum pairwise.
    /// </summary>
    /// <remarks><code>SMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMINP(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E60AC00U; // Encoding for: SMINP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed minimum pairwise.
    /// </summary>
    /// <remarks><code>SMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMINP(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA0AC00U; // Encoding for: SMINP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed minimum pairwise.
    /// </summary>
    /// <remarks><code>SMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMINP(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA0AC00U; // Encoding for: SMINP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed minimum across vector.
    /// </summary>
    /// <remarks><code>SMINV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMINV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMINV(Arm64RegisterB Vd, Arm64RegisterV_8B Vn_T)
    {
        uint raw = 0x0E31A800U; // Encoding for: SMINV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed minimum across vector.
    /// </summary>
    /// <remarks><code>SMINV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMINV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMINV(Arm64RegisterB Vd, Arm64RegisterV_16B Vn_T)
    {
        uint raw = 0x4E31A800U; // Encoding for: SMINV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed minimum across vector.
    /// </summary>
    /// <remarks><code>SMINV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMINV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMINV(Arm64RegisterH Vd, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0E71A800U; // Encoding for: SMINV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed minimum across vector.
    /// </summary>
    /// <remarks><code>SMINV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMINV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMINV(Arm64RegisterH Vd, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4E71A800U; // Encoding for: SMINV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed minimum across vector.
    /// </summary>
    /// <remarks><code>SMINV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMINV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMINV(Arm64RegisterS Vd, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x4EB1A800U; // Encoding for: SMINV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed multiply-add long (vector, by element).
    /// </summary>
    /// <remarks><code>SMLAL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x0F402000U; // Encoding for: SMLAL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed multiply-add long (vector, by element).
    /// </summary>
    /// <remarks><code>SMLAL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x4F402000U; // Encoding for: SMLAL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed multiply-add long (vector, by element).
    /// </summary>
    /// <remarks><code>SMLAL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLAL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x0F802000U; // Encoding for: SMLAL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed multiply-add long (vector, by element).
    /// </summary>
    /// <remarks><code>SMLAL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLAL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x4F802000U; // Encoding for: SMLAL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed multiply-add long (vector).
    /// </summary>
    /// <remarks><code>SMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLAL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x0E208000U; // Encoding for: SMLAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply-add long (vector).
    /// </summary>
    /// <remarks><code>SMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLAL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x4E208000U; // Encoding for: SMLAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply-add long (vector).
    /// </summary>
    /// <remarks><code>SMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x0E608000U; // Encoding for: SMLAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply-add long (vector).
    /// </summary>
    /// <remarks><code>SMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E608000U; // Encoding for: SMLAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply-add long (vector).
    /// </summary>
    /// <remarks><code>SMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLAL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x0EA08000U; // Encoding for: SMLAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply-add long (vector).
    /// </summary>
    /// <remarks><code>SMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLAL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x4EA08000U; // Encoding for: SMLAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply-add long (vector, by element).
    /// </summary>
    /// <remarks><code>SMLAL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x4F402000U; // Encoding for: SMLAL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed multiply-add long (vector, by element).
    /// </summary>
    /// <remarks><code>SMLAL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x4F402000U; // Encoding for: SMLAL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed multiply-add long (vector, by element).
    /// </summary>
    /// <remarks><code>SMLAL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLAL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x4F802000U; // Encoding for: SMLAL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed multiply-add long (vector, by element).
    /// </summary>
    /// <remarks><code>SMLAL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLAL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x4F802000U; // Encoding for: SMLAL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed multiply-add long (vector).
    /// </summary>
    /// <remarks><code>SMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLAL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x4E208000U; // Encoding for: SMLAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply-add long (vector).
    /// </summary>
    /// <remarks><code>SMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLAL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x4E208000U; // Encoding for: SMLAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply-add long (vector).
    /// </summary>
    /// <remarks><code>SMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x4E608000U; // Encoding for: SMLAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply-add long (vector).
    /// </summary>
    /// <remarks><code>SMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E608000U; // Encoding for: SMLAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply-add long (vector).
    /// </summary>
    /// <remarks><code>SMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLAL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x4EA08000U; // Encoding for: SMLAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply-add long (vector).
    /// </summary>
    /// <remarks><code>SMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLAL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x4EA08000U; // Encoding for: SMLAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply-subtract long (vector, by element).
    /// </summary>
    /// <remarks><code>SMLSL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLSL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x0F406000U; // Encoding for: SMLSL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed multiply-subtract long (vector, by element).
    /// </summary>
    /// <remarks><code>SMLSL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLSL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x4F406000U; // Encoding for: SMLSL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed multiply-subtract long (vector, by element).
    /// </summary>
    /// <remarks><code>SMLSL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLSL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x0F806000U; // Encoding for: SMLSL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed multiply-subtract long (vector, by element).
    /// </summary>
    /// <remarks><code>SMLSL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLSL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x4F806000U; // Encoding for: SMLSL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>SMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLSL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x0E20A000U; // Encoding for: SMLSL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>SMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLSL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x4E20A000U; // Encoding for: SMLSL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>SMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLSL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x0E60A000U; // Encoding for: SMLSL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>SMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLSL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E60A000U; // Encoding for: SMLSL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>SMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLSL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x0EA0A000U; // Encoding for: SMLSL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>SMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLSL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x4EA0A000U; // Encoding for: SMLSL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply-subtract long (vector, by element).
    /// </summary>
    /// <remarks><code>SMLSL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLSL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x4F406000U; // Encoding for: SMLSL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed multiply-subtract long (vector, by element).
    /// </summary>
    /// <remarks><code>SMLSL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLSL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x4F406000U; // Encoding for: SMLSL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed multiply-subtract long (vector, by element).
    /// </summary>
    /// <remarks><code>SMLSL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLSL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x4F806000U; // Encoding for: SMLSL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed multiply-subtract long (vector, by element).
    /// </summary>
    /// <remarks><code>SMLSL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLSL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x4F806000U; // Encoding for: SMLSL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>SMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLSL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x4E20A000U; // Encoding for: SMLSL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>SMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLSL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x4E20A000U; // Encoding for: SMLSL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>SMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLSL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x4E60A000U; // Encoding for: SMLSL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>SMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLSL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E60A000U; // Encoding for: SMLSL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>SMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLSL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x4EA0A000U; // Encoding for: SMLSL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>SMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMLSL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x4EA0A000U; // Encoding for: SMLSL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed 8-bit integer matrix multiply-accumulate (vector).
    /// </summary>
    /// <remarks><code>SMMLA Vd.4S, Vn.16B, Vm.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMMLA_asimdsame2_g), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMMLA(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B)
    {
        uint raw = 0x4E80A400U; // Encoding for: SMMLA_asimdsame2_g
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_16B.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed move vector element to general-purpose register.
    /// </summary>
    /// <remarks><code>SMOV Wd, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMOV_asimdins_w_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMOV(Arm64RegisterW Wd, Arm64RegisterV_B.Indexed Vn_Ts)
    {
        uint raw = 0x0E012C00U; // Encoding for: SMOV_asimdins_w_w
        raw |= (uint)Wd.Index;
        raw |= (uint)Vn_Ts.Index << 5;
        raw |= (uint)(Vn_Ts.ElementIndex & 0xF) << 17;
        return raw;
    }
    /// <summary>
    /// Signed move vector element to general-purpose register.
    /// </summary>
    /// <remarks><code>SMOV Wd, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMOV_asimdins_w_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMOV(Arm64RegisterW Wd, Arm64RegisterV_H.Indexed Vn_Ts)
    {
        uint raw = 0x0E022C00U; // Encoding for: SMOV_asimdins_w_w
        raw |= (uint)Wd.Index;
        raw |= (uint)Vn_Ts.Index << 5;
        raw |= (uint)(Vn_Ts.ElementIndex & 0x7) << 18;
        return raw;
    }
    /// <summary>
    /// Signed move vector element to general-purpose register.
    /// </summary>
    /// <remarks><code>SMOV Xd, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMOV_asimdins_x_x), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMOV(Arm64RegisterX Xd, Arm64RegisterV_B.Indexed Vn_Ts)
    {
        uint raw = 0x4E012C00U; // Encoding for: SMOV_asimdins_x_x
        raw |= (uint)Xd.Index;
        raw |= (uint)Vn_Ts.Index << 5;
        raw |= (uint)(Vn_Ts.ElementIndex & 0xF) << 17;
        return raw;
    }
    /// <summary>
    /// Signed move vector element to general-purpose register.
    /// </summary>
    /// <remarks><code>SMOV Xd, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMOV_asimdins_x_x), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMOV(Arm64RegisterX Xd, Arm64RegisterV_H.Indexed Vn_Ts)
    {
        uint raw = 0x4E022C00U; // Encoding for: SMOV_asimdins_x_x
        raw |= (uint)Xd.Index;
        raw |= (uint)Vn_Ts.Index << 5;
        raw |= (uint)(Vn_Ts.ElementIndex & 0x7) << 18;
        return raw;
    }
    /// <summary>
    /// Signed move vector element to general-purpose register.
    /// </summary>
    /// <remarks><code>SMOV Xd, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMOV_asimdins_x_x), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMOV(Arm64RegisterX Xd, Arm64RegisterV_S.Indexed Vn_Ts)
    {
        uint raw = 0x4E042C00U; // Encoding for: SMOV_asimdins_x_x
        raw |= (uint)Xd.Index;
        raw |= (uint)Vn_Ts.Index << 5;
        raw |= (uint)(Vn_Ts.ElementIndex & 0x3) << 19;
        return raw;
    }
    /// <summary>
    /// Signed multiply long (vector, by element).
    /// </summary>
    /// <remarks><code>SMULL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMULL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x0F40A000U; // Encoding for: SMULL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed multiply long (vector, by element).
    /// </summary>
    /// <remarks><code>SMULL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMULL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x4F40A000U; // Encoding for: SMULL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed multiply long (vector, by element).
    /// </summary>
    /// <remarks><code>SMULL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMULL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x0F80A000U; // Encoding for: SMULL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed multiply long (vector, by element).
    /// </summary>
    /// <remarks><code>SMULL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMULL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x4F80A000U; // Encoding for: SMULL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed multiply long (vector).
    /// </summary>
    /// <remarks><code>SMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMULL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x0E20C000U; // Encoding for: SMULL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply long (vector).
    /// </summary>
    /// <remarks><code>SMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMULL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x4E20C000U; // Encoding for: SMULL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply long (vector).
    /// </summary>
    /// <remarks><code>SMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMULL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x0E60C000U; // Encoding for: SMULL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply long (vector).
    /// </summary>
    /// <remarks><code>SMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMULL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E60C000U; // Encoding for: SMULL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply long (vector).
    /// </summary>
    /// <remarks><code>SMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMULL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x0EA0C000U; // Encoding for: SMULL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply long (vector).
    /// </summary>
    /// <remarks><code>SMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMULL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x4EA0C000U; // Encoding for: SMULL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply long (vector, by element).
    /// </summary>
    /// <remarks><code>SMULL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMULL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x4F40A000U; // Encoding for: SMULL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed multiply long (vector, by element).
    /// </summary>
    /// <remarks><code>SMULL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMULL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x4F40A000U; // Encoding for: SMULL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed multiply long (vector, by element).
    /// </summary>
    /// <remarks><code>SMULL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMULL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x4F80A000U; // Encoding for: SMULL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed multiply long (vector, by element).
    /// </summary>
    /// <remarks><code>SMULL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMULL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x4F80A000U; // Encoding for: SMULL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed multiply long (vector).
    /// </summary>
    /// <remarks><code>SMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMULL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x4E20C000U; // Encoding for: SMULL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply long (vector).
    /// </summary>
    /// <remarks><code>SMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMULL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x4E20C000U; // Encoding for: SMULL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply long (vector).
    /// </summary>
    /// <remarks><code>SMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMULL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x4E60C000U; // Encoding for: SMULL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply long (vector).
    /// </summary>
    /// <remarks><code>SMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMULL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E60C000U; // Encoding for: SMULL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply long (vector).
    /// </summary>
    /// <remarks><code>SMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMULL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x4EA0C000U; // Encoding for: SMULL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed multiply long (vector).
    /// </summary>
    /// <remarks><code>SMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMULL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x4EA0C000U; // Encoding for: SMULL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating absolute value.
    /// </summary>
    /// <remarks><code>SQABS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQABS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQABS(Arm64RegisterB Vd, Arm64RegisterB Vn)
    {
        uint raw = 0x5E207800U; // Encoding for: SQABS_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating absolute value.
    /// </summary>
    /// <remarks><code>SQABS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQABS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQABS(Arm64RegisterH Vd, Arm64RegisterH Vn)
    {
        uint raw = 0x5E607800U; // Encoding for: SQABS_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating absolute value.
    /// </summary>
    /// <remarks><code>SQABS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQABS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQABS(Arm64RegisterS Vd, Arm64RegisterS Vn)
    {
        uint raw = 0x5EA07800U; // Encoding for: SQABS_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating absolute value.
    /// </summary>
    /// <remarks><code>SQABS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQABS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQABS(Arm64RegisterD Vd, Arm64RegisterD Vn)
    {
        uint raw = 0x5EE07800U; // Encoding for: SQABS_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating absolute value.
    /// </summary>
    /// <remarks><code>SQABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQABS(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
    {
        uint raw = 0x0E207800U; // Encoding for: SQABS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating absolute value.
    /// </summary>
    /// <remarks><code>SQABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQABS(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
    {
        uint raw = 0x4E207800U; // Encoding for: SQABS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating absolute value.
    /// </summary>
    /// <remarks><code>SQABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQABS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0E607800U; // Encoding for: SQABS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating absolute value.
    /// </summary>
    /// <remarks><code>SQABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQABS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4E607800U; // Encoding for: SQABS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating absolute value.
    /// </summary>
    /// <remarks><code>SQABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQABS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x0EA07800U; // Encoding for: SQABS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating absolute value.
    /// </summary>
    /// <remarks><code>SQABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQABS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x4EA07800U; // Encoding for: SQABS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating absolute value.
    /// </summary>
    /// <remarks><code>SQABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQABS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x4EE07800U; // Encoding for: SQABS_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating add.
    /// </summary>
    /// <remarks><code>SQADD Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQADD_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQADD(Arm64RegisterB Vd, Arm64RegisterB Vn, Arm64RegisterB Vm)
    {
        uint raw = 0x5E200C00U; // Encoding for: SQADD_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating add.
    /// </summary>
    /// <remarks><code>SQADD Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQADD_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQADD(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterH Vm)
    {
        uint raw = 0x5E600C00U; // Encoding for: SQADD_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating add.
    /// </summary>
    /// <remarks><code>SQADD Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQADD_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQADD(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
    {
        uint raw = 0x5EA00C00U; // Encoding for: SQADD_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating add.
    /// </summary>
    /// <remarks><code>SQADD Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQADD_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQADD(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
    {
        uint raw = 0x5EE00C00U; // Encoding for: SQADD_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating add.
    /// </summary>
    /// <remarks><code>SQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQADD(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E200C00U; // Encoding for: SQADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating add.
    /// </summary>
    /// <remarks><code>SQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQADD(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E200C00U; // Encoding for: SQADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating add.
    /// </summary>
    /// <remarks><code>SQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQADD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E600C00U; // Encoding for: SQADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating add.
    /// </summary>
    /// <remarks><code>SQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQADD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E600C00U; // Encoding for: SQADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating add.
    /// </summary>
    /// <remarks><code>SQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQADD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA00C00U; // Encoding for: SQADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating add.
    /// </summary>
    /// <remarks><code>SQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQADD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA00C00U; // Encoding for: SQADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating add.
    /// </summary>
    /// <remarks><code>SQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQADD(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4EE00C00U; // Encoding for: SQADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-add long (by element).
    /// </summary>
    /// <remarks><code>SQDMLAL Vad, Vbn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL_asisdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLAL(Arm64RegisterS Vad, Arm64RegisterH Vbn, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x5F403000U; // Encoding for: SQDMLAL_asisdelem_l
        raw |= (uint)Vad.Index;
        raw |= (uint)Vbn.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-add long (by element).
    /// </summary>
    /// <remarks><code>SQDMLAL Vad, Vbn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL_asisdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLAL(Arm64RegisterD Vad, Arm64RegisterS Vbn, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x5F803000U; // Encoding for: SQDMLAL_asisdelem_l
        raw |= (uint)Vad.Index;
        raw |= (uint)Vbn.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-add long (by element).
    /// </summary>
    /// <remarks><code>SQDMLAL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x0F403000U; // Encoding for: SQDMLAL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-add long (by element).
    /// </summary>
    /// <remarks><code>SQDMLAL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x4F403000U; // Encoding for: SQDMLAL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-add long (by element).
    /// </summary>
    /// <remarks><code>SQDMLAL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLAL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x0F803000U; // Encoding for: SQDMLAL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-add long (by element).
    /// </summary>
    /// <remarks><code>SQDMLAL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLAL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x4F803000U; // Encoding for: SQDMLAL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-add long.
    /// </summary>
    /// <remarks><code>SQDMLAL Vad, Vbn, Vbm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL_asisddiff_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLAL(Arm64RegisterS Vad, Arm64RegisterH Vbn, Arm64RegisterH Vbm)
    {
        uint raw = 0x5E609000U; // Encoding for: SQDMLAL_asisddiff_only
        raw |= (uint)Vad.Index;
        raw |= (uint)Vbn.Index << 5;
        raw |= (uint)Vbm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-add long.
    /// </summary>
    /// <remarks><code>SQDMLAL Vad, Vbn, Vbm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL_asisddiff_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLAL(Arm64RegisterD Vad, Arm64RegisterS Vbn, Arm64RegisterS Vbm)
    {
        uint raw = 0x5EA09000U; // Encoding for: SQDMLAL_asisddiff_only
        raw |= (uint)Vad.Index;
        raw |= (uint)Vbn.Index << 5;
        raw |= (uint)Vbm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-add long.
    /// </summary>
    /// <remarks><code>SQDMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x0E609000U; // Encoding for: SQDMLAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-add long.
    /// </summary>
    /// <remarks><code>SQDMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E609000U; // Encoding for: SQDMLAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-add long.
    /// </summary>
    /// <remarks><code>SQDMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLAL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x0EA09000U; // Encoding for: SQDMLAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-add long.
    /// </summary>
    /// <remarks><code>SQDMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLAL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x4EA09000U; // Encoding for: SQDMLAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-add long (by element).
    /// </summary>
    /// <remarks><code>SQDMLAL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x4F403000U; // Encoding for: SQDMLAL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-add long (by element).
    /// </summary>
    /// <remarks><code>SQDMLAL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x4F403000U; // Encoding for: SQDMLAL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-add long (by element).
    /// </summary>
    /// <remarks><code>SQDMLAL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLAL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x4F803000U; // Encoding for: SQDMLAL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-add long (by element).
    /// </summary>
    /// <remarks><code>SQDMLAL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLAL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x4F803000U; // Encoding for: SQDMLAL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-add long.
    /// </summary>
    /// <remarks><code>SQDMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x4E609000U; // Encoding for: SQDMLAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-add long.
    /// </summary>
    /// <remarks><code>SQDMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E609000U; // Encoding for: SQDMLAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-add long.
    /// </summary>
    /// <remarks><code>SQDMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLAL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x4EA09000U; // Encoding for: SQDMLAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-add long.
    /// </summary>
    /// <remarks><code>SQDMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLAL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x4EA09000U; // Encoding for: SQDMLAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-subtract long (by element).
    /// </summary>
    /// <remarks><code>SQDMLSL Vad, Vbn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL_asisdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLSL(Arm64RegisterS Vad, Arm64RegisterH Vbn, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x5F407000U; // Encoding for: SQDMLSL_asisdelem_l
        raw |= (uint)Vad.Index;
        raw |= (uint)Vbn.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-subtract long (by element).
    /// </summary>
    /// <remarks><code>SQDMLSL Vad, Vbn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL_asisdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLSL(Arm64RegisterD Vad, Arm64RegisterS Vbn, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x5F807000U; // Encoding for: SQDMLSL_asisdelem_l
        raw |= (uint)Vad.Index;
        raw |= (uint)Vbn.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-subtract long (by element).
    /// </summary>
    /// <remarks><code>SQDMLSL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLSL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x0F407000U; // Encoding for: SQDMLSL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-subtract long (by element).
    /// </summary>
    /// <remarks><code>SQDMLSL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLSL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x4F407000U; // Encoding for: SQDMLSL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-subtract long (by element).
    /// </summary>
    /// <remarks><code>SQDMLSL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLSL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x0F807000U; // Encoding for: SQDMLSL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-subtract long (by element).
    /// </summary>
    /// <remarks><code>SQDMLSL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLSL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x4F807000U; // Encoding for: SQDMLSL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-subtract long.
    /// </summary>
    /// <remarks><code>SQDMLSL Vad, Vbn, Vbm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL_asisddiff_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLSL(Arm64RegisterS Vad, Arm64RegisterH Vbn, Arm64RegisterH Vbm)
    {
        uint raw = 0x5E60B000U; // Encoding for: SQDMLSL_asisddiff_only
        raw |= (uint)Vad.Index;
        raw |= (uint)Vbn.Index << 5;
        raw |= (uint)Vbm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-subtract long.
    /// </summary>
    /// <remarks><code>SQDMLSL Vad, Vbn, Vbm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL_asisddiff_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLSL(Arm64RegisterD Vad, Arm64RegisterS Vbn, Arm64RegisterS Vbm)
    {
        uint raw = 0x5EA0B000U; // Encoding for: SQDMLSL_asisddiff_only
        raw |= (uint)Vad.Index;
        raw |= (uint)Vbn.Index << 5;
        raw |= (uint)Vbm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-subtract long.
    /// </summary>
    /// <remarks><code>SQDMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLSL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x0E60B000U; // Encoding for: SQDMLSL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-subtract long.
    /// </summary>
    /// <remarks><code>SQDMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLSL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E60B000U; // Encoding for: SQDMLSL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-subtract long.
    /// </summary>
    /// <remarks><code>SQDMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLSL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x0EA0B000U; // Encoding for: SQDMLSL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-subtract long.
    /// </summary>
    /// <remarks><code>SQDMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLSL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x4EA0B000U; // Encoding for: SQDMLSL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-subtract long (by element).
    /// </summary>
    /// <remarks><code>SQDMLSL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLSL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x4F407000U; // Encoding for: SQDMLSL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-subtract long (by element).
    /// </summary>
    /// <remarks><code>SQDMLSL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLSL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x4F407000U; // Encoding for: SQDMLSL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-subtract long (by element).
    /// </summary>
    /// <remarks><code>SQDMLSL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLSL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x4F807000U; // Encoding for: SQDMLSL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-subtract long (by element).
    /// </summary>
    /// <remarks><code>SQDMLSL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLSL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x4F807000U; // Encoding for: SQDMLSL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-subtract long.
    /// </summary>
    /// <remarks><code>SQDMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLSL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x4E60B000U; // Encoding for: SQDMLSL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-subtract long.
    /// </summary>
    /// <remarks><code>SQDMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLSL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E60B000U; // Encoding for: SQDMLSL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-subtract long.
    /// </summary>
    /// <remarks><code>SQDMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLSL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x4EA0B000U; // Encoding for: SQDMLSL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply-subtract long.
    /// </summary>
    /// <remarks><code>SQDMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMLSL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x4EA0B000U; // Encoding for: SQDMLSL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply returning high half (by element).
    /// </summary>
    /// <remarks><code>SQDMULH Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULH_asisdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULH(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x5F40C000U; // Encoding for: SQDMULH_asisdelem_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply returning high half (by element).
    /// </summary>
    /// <remarks><code>SQDMULH Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULH_asisdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULH(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x5F80C000U; // Encoding for: SQDMULH_asisdelem_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply returning high half (by element).
    /// </summary>
    /// <remarks><code>SQDMULH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULH(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x0F40C000U; // Encoding for: SQDMULH_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply returning high half (by element).
    /// </summary>
    /// <remarks><code>SQDMULH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULH(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x4F40C000U; // Encoding for: SQDMULH_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply returning high half (by element).
    /// </summary>
    /// <remarks><code>SQDMULH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULH(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x0F80C000U; // Encoding for: SQDMULH_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply returning high half (by element).
    /// </summary>
    /// <remarks><code>SQDMULH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULH(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x4F80C000U; // Encoding for: SQDMULH_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply returning high half.
    /// </summary>
    /// <remarks><code>SQDMULH Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULH_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULH(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterH Vm)
    {
        uint raw = 0x5E60B400U; // Encoding for: SQDMULH_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply returning high half.
    /// </summary>
    /// <remarks><code>SQDMULH Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULH_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULH(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
    {
        uint raw = 0x5EA0B400U; // Encoding for: SQDMULH_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply returning high half.
    /// </summary>
    /// <remarks><code>SQDMULH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULH_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULH(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E60B400U; // Encoding for: SQDMULH_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply returning high half.
    /// </summary>
    /// <remarks><code>SQDMULH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULH_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULH(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E60B400U; // Encoding for: SQDMULH_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply returning high half.
    /// </summary>
    /// <remarks><code>SQDMULH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULH_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULH(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA0B400U; // Encoding for: SQDMULH_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply returning high half.
    /// </summary>
    /// <remarks><code>SQDMULH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULH_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULH(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA0B400U; // Encoding for: SQDMULH_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply long (by element).
    /// </summary>
    /// <remarks><code>SQDMULL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x0F40B000U; // Encoding for: SQDMULL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply long (by element).
    /// </summary>
    /// <remarks><code>SQDMULL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x4F40B000U; // Encoding for: SQDMULL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply long (by element).
    /// </summary>
    /// <remarks><code>SQDMULL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x0F80B000U; // Encoding for: SQDMULL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply long (by element).
    /// </summary>
    /// <remarks><code>SQDMULL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x4F80B000U; // Encoding for: SQDMULL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply long (by element).
    /// </summary>
    /// <remarks><code>SQDMULL Vad, Vbn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL_asisdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULL(Arm64RegisterS Vad, Arm64RegisterH Vbn, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x5F40B000U; // Encoding for: SQDMULL_asisdelem_l
        raw |= (uint)Vad.Index;
        raw |= (uint)Vbn.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply long (by element).
    /// </summary>
    /// <remarks><code>SQDMULL Vad, Vbn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL_asisdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULL(Arm64RegisterD Vad, Arm64RegisterS Vbn, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x5F80B000U; // Encoding for: SQDMULL_asisdelem_l
        raw |= (uint)Vad.Index;
        raw |= (uint)Vbn.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply long.
    /// </summary>
    /// <remarks><code>SQDMULL Vad, Vbn, Vbm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL_asisddiff_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULL(Arm64RegisterS Vad, Arm64RegisterH Vbn, Arm64RegisterH Vbm)
    {
        uint raw = 0x5E60D000U; // Encoding for: SQDMULL_asisddiff_only
        raw |= (uint)Vad.Index;
        raw |= (uint)Vbn.Index << 5;
        raw |= (uint)Vbm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply long.
    /// </summary>
    /// <remarks><code>SQDMULL Vad, Vbn, Vbm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL_asisddiff_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULL(Arm64RegisterD Vad, Arm64RegisterS Vbn, Arm64RegisterS Vbm)
    {
        uint raw = 0x5EA0D000U; // Encoding for: SQDMULL_asisddiff_only
        raw |= (uint)Vad.Index;
        raw |= (uint)Vbn.Index << 5;
        raw |= (uint)Vbm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply long.
    /// </summary>
    /// <remarks><code>SQDMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x0E60D000U; // Encoding for: SQDMULL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply long.
    /// </summary>
    /// <remarks><code>SQDMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E60D000U; // Encoding for: SQDMULL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply long.
    /// </summary>
    /// <remarks><code>SQDMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x0EA0D000U; // Encoding for: SQDMULL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply long.
    /// </summary>
    /// <remarks><code>SQDMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x4EA0D000U; // Encoding for: SQDMULL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply long (by element).
    /// </summary>
    /// <remarks><code>SQDMULL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x4F40B000U; // Encoding for: SQDMULL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply long (by element).
    /// </summary>
    /// <remarks><code>SQDMULL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x4F40B000U; // Encoding for: SQDMULL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply long (by element).
    /// </summary>
    /// <remarks><code>SQDMULL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x4F80B000U; // Encoding for: SQDMULL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply long (by element).
    /// </summary>
    /// <remarks><code>SQDMULL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x4F80B000U; // Encoding for: SQDMULL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply long.
    /// </summary>
    /// <remarks><code>SQDMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x4E60D000U; // Encoding for: SQDMULL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply long.
    /// </summary>
    /// <remarks><code>SQDMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E60D000U; // Encoding for: SQDMULL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply long.
    /// </summary>
    /// <remarks><code>SQDMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x4EA0D000U; // Encoding for: SQDMULL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating doubling multiply long.
    /// </summary>
    /// <remarks><code>SQDMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQDMULL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x4EA0D000U; // Encoding for: SQDMULL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating negate.
    /// </summary>
    /// <remarks><code>SQNEG Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQNEG_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQNEG(Arm64RegisterB Vd, Arm64RegisterB Vn)
    {
        uint raw = 0x7E207800U; // Encoding for: SQNEG_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating negate.
    /// </summary>
    /// <remarks><code>SQNEG Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQNEG_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQNEG(Arm64RegisterH Vd, Arm64RegisterH Vn)
    {
        uint raw = 0x7E607800U; // Encoding for: SQNEG_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating negate.
    /// </summary>
    /// <remarks><code>SQNEG Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQNEG_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQNEG(Arm64RegisterS Vd, Arm64RegisterS Vn)
    {
        uint raw = 0x7EA07800U; // Encoding for: SQNEG_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating negate.
    /// </summary>
    /// <remarks><code>SQNEG Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQNEG_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQNEG(Arm64RegisterD Vd, Arm64RegisterD Vn)
    {
        uint raw = 0x7EE07800U; // Encoding for: SQNEG_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating negate.
    /// </summary>
    /// <remarks><code>SQNEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQNEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQNEG(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
    {
        uint raw = 0x2E207800U; // Encoding for: SQNEG_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating negate.
    /// </summary>
    /// <remarks><code>SQNEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQNEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQNEG(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
    {
        uint raw = 0x6E207800U; // Encoding for: SQNEG_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating negate.
    /// </summary>
    /// <remarks><code>SQNEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQNEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQNEG(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x2E607800U; // Encoding for: SQNEG_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating negate.
    /// </summary>
    /// <remarks><code>SQNEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQNEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQNEG(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x6E607800U; // Encoding for: SQNEG_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating negate.
    /// </summary>
    /// <remarks><code>SQNEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQNEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQNEG(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x2EA07800U; // Encoding for: SQNEG_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating negate.
    /// </summary>
    /// <remarks><code>SQNEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQNEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQNEG(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x6EA07800U; // Encoding for: SQNEG_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating negate.
    /// </summary>
    /// <remarks><code>SQNEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQNEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQNEG(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x6EE07800U; // Encoding for: SQNEG_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply accumulate returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMLAH Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLAH_asisdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMLAH(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x7F40D000U; // Encoding for: SQRDMLAH_asisdelem_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply accumulate returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMLAH Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLAH_asisdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMLAH(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x7F80D000U; // Encoding for: SQRDMLAH_asisdelem_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply accumulate returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMLAH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLAH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMLAH(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x2F40D000U; // Encoding for: SQRDMLAH_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply accumulate returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMLAH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLAH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMLAH(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x6F40D000U; // Encoding for: SQRDMLAH_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply accumulate returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMLAH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLAH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMLAH(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x2F80D000U; // Encoding for: SQRDMLAH_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply accumulate returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMLAH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLAH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMLAH(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x6F80D000U; // Encoding for: SQRDMLAH_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply accumulate returning high half (vector).
    /// </summary>
    /// <remarks><code>SQRDMLAH Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLAH_asisdsame2_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMLAH(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterH Vm)
    {
        uint raw = 0x7E408400U; // Encoding for: SQRDMLAH_asisdsame2_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply accumulate returning high half (vector).
    /// </summary>
    /// <remarks><code>SQRDMLAH Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLAH_asisdsame2_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMLAH(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
    {
        uint raw = 0x7E808400U; // Encoding for: SQRDMLAH_asisdsame2_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply accumulate returning high half (vector).
    /// </summary>
    /// <remarks><code>SQRDMLAH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLAH_asimdsame2_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMLAH(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E408400U; // Encoding for: SQRDMLAH_asimdsame2_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply accumulate returning high half (vector).
    /// </summary>
    /// <remarks><code>SQRDMLAH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLAH_asimdsame2_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMLAH(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E408400U; // Encoding for: SQRDMLAH_asimdsame2_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply accumulate returning high half (vector).
    /// </summary>
    /// <remarks><code>SQRDMLAH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLAH_asimdsame2_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMLAH(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2E808400U; // Encoding for: SQRDMLAH_asimdsame2_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply accumulate returning high half (vector).
    /// </summary>
    /// <remarks><code>SQRDMLAH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLAH_asimdsame2_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMLAH(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6E808400U; // Encoding for: SQRDMLAH_asimdsame2_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply subtract returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMLSH Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLSH_asisdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMLSH(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x7F40F000U; // Encoding for: SQRDMLSH_asisdelem_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply subtract returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMLSH Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLSH_asisdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMLSH(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x7F80F000U; // Encoding for: SQRDMLSH_asisdelem_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply subtract returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMLSH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLSH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMLSH(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x2F40F000U; // Encoding for: SQRDMLSH_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply subtract returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMLSH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLSH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMLSH(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x6F40F000U; // Encoding for: SQRDMLSH_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply subtract returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMLSH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLSH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMLSH(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x2F80F000U; // Encoding for: SQRDMLSH_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply subtract returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMLSH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLSH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMLSH(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x6F80F000U; // Encoding for: SQRDMLSH_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply subtract returning high half (vector).
    /// </summary>
    /// <remarks><code>SQRDMLSH Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLSH_asisdsame2_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMLSH(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterH Vm)
    {
        uint raw = 0x7E408C00U; // Encoding for: SQRDMLSH_asisdsame2_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply subtract returning high half (vector).
    /// </summary>
    /// <remarks><code>SQRDMLSH Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLSH_asisdsame2_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMLSH(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
    {
        uint raw = 0x7E808C00U; // Encoding for: SQRDMLSH_asisdsame2_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply subtract returning high half (vector).
    /// </summary>
    /// <remarks><code>SQRDMLSH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLSH_asimdsame2_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMLSH(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E408C00U; // Encoding for: SQRDMLSH_asimdsame2_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply subtract returning high half (vector).
    /// </summary>
    /// <remarks><code>SQRDMLSH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLSH_asimdsame2_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMLSH(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E408C00U; // Encoding for: SQRDMLSH_asimdsame2_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply subtract returning high half (vector).
    /// </summary>
    /// <remarks><code>SQRDMLSH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLSH_asimdsame2_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMLSH(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2E808C00U; // Encoding for: SQRDMLSH_asimdsame2_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply subtract returning high half (vector).
    /// </summary>
    /// <remarks><code>SQRDMLSH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLSH_asimdsame2_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMLSH(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6E808C00U; // Encoding for: SQRDMLSH_asimdsame2_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMULH Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMULH_asisdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMULH(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x5F40D000U; // Encoding for: SQRDMULH_asisdelem_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMULH Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMULH_asisdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMULH(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x5F80D000U; // Encoding for: SQRDMULH_asisdelem_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMULH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMULH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMULH(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x0F40D000U; // Encoding for: SQRDMULH_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMULH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMULH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMULH(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x4F40D000U; // Encoding for: SQRDMULH_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMULH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMULH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMULH(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x0F80D000U; // Encoding for: SQRDMULH_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMULH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMULH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMULH(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x4F80D000U; // Encoding for: SQRDMULH_asimdelem_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply returning high half.
    /// </summary>
    /// <remarks><code>SQRDMULH Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMULH_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMULH(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterH Vm)
    {
        uint raw = 0x7E60B400U; // Encoding for: SQRDMULH_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply returning high half.
    /// </summary>
    /// <remarks><code>SQRDMULH Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMULH_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMULH(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
    {
        uint raw = 0x7EA0B400U; // Encoding for: SQRDMULH_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply returning high half.
    /// </summary>
    /// <remarks><code>SQRDMULH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMULH_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMULH(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E60B400U; // Encoding for: SQRDMULH_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply returning high half.
    /// </summary>
    /// <remarks><code>SQRDMULH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMULH_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMULH(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E60B400U; // Encoding for: SQRDMULH_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply returning high half.
    /// </summary>
    /// <remarks><code>SQRDMULH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMULH_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMULH(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA0B400U; // Encoding for: SQRDMULH_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding doubling multiply returning high half.
    /// </summary>
    /// <remarks><code>SQRDMULH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMULH_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRDMULH(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA0B400U; // Encoding for: SQRDMULH_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>SQRSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHL(Arm64RegisterB Vd, Arm64RegisterB Vn, Arm64RegisterB Vm)
    {
        uint raw = 0x5E205C00U; // Encoding for: SQRSHL_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>SQRSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHL(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterH Vm)
    {
        uint raw = 0x5E605C00U; // Encoding for: SQRSHL_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>SQRSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHL(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
    {
        uint raw = 0x5EA05C00U; // Encoding for: SQRSHL_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>SQRSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHL(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
    {
        uint raw = 0x5EE05C00U; // Encoding for: SQRSHL_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>SQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E205C00U; // Encoding for: SQRSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>SQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E205C00U; // Encoding for: SQRSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>SQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E605C00U; // Encoding for: SQRSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>SQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E605C00U; // Encoding for: SQRSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>SQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA05C00U; // Encoding for: SQRSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>SQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA05C00U; // Encoding for: SQRSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>SQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4EE05C00U; // Encoding for: SQRSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRN(Arm64RegisterB Vbd, Arm64RegisterH Van, byte shift)
    {
        uint raw = 0x5F089C00U; // Encoding for: SQRSHRN_asisdshf_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRN(Arm64RegisterH Vbd, Arm64RegisterS Van, byte shift)
    {
        uint raw = 0x5F109C00U; // Encoding for: SQRSHRN_asisdshf_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRN(Arm64RegisterS Vbd, Arm64RegisterD Van, byte shift)
    {
        uint raw = 0x5F209C00U; // Encoding for: SQRSHRN_asisdshf_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x0F089C00U; // Encoding for: SQRSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRN(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x4F089C00U; // Encoding for: SQRSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x0F109C00U; // Encoding for: SQRSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRN(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x4F109C00U; // Encoding for: SQRSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x0F209C00U; // Encoding for: SQRSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRN(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x4F209C00U; // Encoding for: SQRSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRN2(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x4F089C00U; // Encoding for: SQRSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x4F089C00U; // Encoding for: SQRSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRN2(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x4F109C00U; // Encoding for: SQRSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x4F109C00U; // Encoding for: SQRSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRN2(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x4F209C00U; // Encoding for: SQRSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x4F209C00U; // Encoding for: SQRSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRUN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRUN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRUN(Arm64RegisterB Vbd, Arm64RegisterH Van, byte shift)
    {
        uint raw = 0x7F088C00U; // Encoding for: SQRSHRUN_asisdshf_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRUN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRUN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRUN(Arm64RegisterH Vbd, Arm64RegisterS Van, byte shift)
    {
        uint raw = 0x7F108C00U; // Encoding for: SQRSHRUN_asisdshf_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRUN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRUN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRUN(Arm64RegisterS Vbd, Arm64RegisterD Van, byte shift)
    {
        uint raw = 0x7F208C00U; // Encoding for: SQRSHRUN_asisdshf_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRUN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRUN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRUN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x2F088C00U; // Encoding for: SQRSHRUN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRUN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRUN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRUN(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x6F088C00U; // Encoding for: SQRSHRUN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRUN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRUN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRUN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x2F108C00U; // Encoding for: SQRSHRUN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRUN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRUN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRUN(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x6F108C00U; // Encoding for: SQRSHRUN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRUN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRUN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRUN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x2F208C00U; // Encoding for: SQRSHRUN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRUN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRUN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRUN(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x6F208C00U; // Encoding for: SQRSHRUN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRUN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRUN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRUN2(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x6F088C00U; // Encoding for: SQRSHRUN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRUN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRUN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRUN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x6F088C00U; // Encoding for: SQRSHRUN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRUN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRUN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRUN2(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x6F108C00U; // Encoding for: SQRSHRUN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRUN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRUN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRUN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x6F108C00U; // Encoding for: SQRSHRUN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRUN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRUN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRUN2(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x6F208C00U; // Encoding for: SQRSHRUN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRUN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRUN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQRSHRUN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x6F208C00U; // Encoding for: SQRSHRUN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>SQSHL Vd, Vn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHL(Arm64RegisterB Vd, Arm64RegisterB Vn, byte shift)
    {
        uint raw = 0x5F087400U; // Encoding for: SQSHL_asisdshf_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>SQSHL Vd, Vn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHL(Arm64RegisterH Vd, Arm64RegisterH Vn, byte shift)
    {
        uint raw = 0x5F107400U; // Encoding for: SQSHL_asisdshf_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>SQSHL Vd, Vn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHL(Arm64RegisterS Vd, Arm64RegisterS Vn, byte shift)
    {
        uint raw = 0x5F207400U; // Encoding for: SQSHL_asisdshf_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>SQSHL Vd, Vn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHL(Arm64RegisterD Vd, Arm64RegisterD Vn, byte shift)
    {
        uint raw = 0x5F407400U; // Encoding for: SQSHL_asisdshf_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
    {
        uint raw = 0x0F087400U; // Encoding for: SQSHL_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
    {
        uint raw = 0x4F087400U; // Encoding for: SQSHL_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
    {
        uint raw = 0x0F107400U; // Encoding for: SQSHL_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
    {
        uint raw = 0x4F107400U; // Encoding for: SQSHL_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
    {
        uint raw = 0x0F207400U; // Encoding for: SQSHL_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
    {
        uint raw = 0x4F207400U; // Encoding for: SQSHL_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
    {
        uint raw = 0x4F407400U; // Encoding for: SQSHL_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left (register).
    /// </summary>
    /// <remarks><code>SQSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHL(Arm64RegisterB Vd, Arm64RegisterB Vn, Arm64RegisterB Vm)
    {
        uint raw = 0x5E204C00U; // Encoding for: SQSHL_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left (register).
    /// </summary>
    /// <remarks><code>SQSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHL(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterH Vm)
    {
        uint raw = 0x5E604C00U; // Encoding for: SQSHL_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left (register).
    /// </summary>
    /// <remarks><code>SQSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHL(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
    {
        uint raw = 0x5EA04C00U; // Encoding for: SQSHL_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left (register).
    /// </summary>
    /// <remarks><code>SQSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHL(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
    {
        uint raw = 0x5EE04C00U; // Encoding for: SQSHL_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left (register).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E204C00U; // Encoding for: SQSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left (register).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E204C00U; // Encoding for: SQSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left (register).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E604C00U; // Encoding for: SQSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left (register).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E604C00U; // Encoding for: SQSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left (register).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA04C00U; // Encoding for: SQSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left (register).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA04C00U; // Encoding for: SQSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left (register).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4EE04C00U; // Encoding for: SQSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left unsigned (immediate).
    /// </summary>
    /// <remarks><code>SQSHLU Vd, Vn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHLU_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHLU(Arm64RegisterB Vd, Arm64RegisterB Vn, byte shift)
    {
        uint raw = 0x7F086400U; // Encoding for: SQSHLU_asisdshf_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left unsigned (immediate).
    /// </summary>
    /// <remarks><code>SQSHLU Vd, Vn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHLU_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHLU(Arm64RegisterH Vd, Arm64RegisterH Vn, byte shift)
    {
        uint raw = 0x7F106400U; // Encoding for: SQSHLU_asisdshf_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left unsigned (immediate).
    /// </summary>
    /// <remarks><code>SQSHLU Vd, Vn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHLU_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHLU(Arm64RegisterS Vd, Arm64RegisterS Vn, byte shift)
    {
        uint raw = 0x7F206400U; // Encoding for: SQSHLU_asisdshf_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left unsigned (immediate).
    /// </summary>
    /// <remarks><code>SQSHLU Vd, Vn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHLU_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHLU(Arm64RegisterD Vd, Arm64RegisterD Vn, byte shift)
    {
        uint raw = 0x7F406400U; // Encoding for: SQSHLU_asisdshf_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left unsigned (immediate).
    /// </summary>
    /// <remarks><code>SQSHLU Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHLU_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHLU(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
    {
        uint raw = 0x2F086400U; // Encoding for: SQSHLU_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left unsigned (immediate).
    /// </summary>
    /// <remarks><code>SQSHLU Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHLU_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHLU(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
    {
        uint raw = 0x6F086400U; // Encoding for: SQSHLU_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left unsigned (immediate).
    /// </summary>
    /// <remarks><code>SQSHLU Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHLU_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHLU(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
    {
        uint raw = 0x2F106400U; // Encoding for: SQSHLU_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left unsigned (immediate).
    /// </summary>
    /// <remarks><code>SQSHLU Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHLU_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHLU(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
    {
        uint raw = 0x6F106400U; // Encoding for: SQSHLU_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left unsigned (immediate).
    /// </summary>
    /// <remarks><code>SQSHLU Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHLU_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHLU(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
    {
        uint raw = 0x2F206400U; // Encoding for: SQSHLU_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left unsigned (immediate).
    /// </summary>
    /// <remarks><code>SQSHLU Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHLU_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHLU(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
    {
        uint raw = 0x6F206400U; // Encoding for: SQSHLU_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift left unsigned (immediate).
    /// </summary>
    /// <remarks><code>SQSHLU Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHLU_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHLU(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
    {
        uint raw = 0x6F406400U; // Encoding for: SQSHLU_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRN(Arm64RegisterB Vbd, Arm64RegisterH Van, byte shift)
    {
        uint raw = 0x5F089400U; // Encoding for: SQSHRN_asisdshf_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRN(Arm64RegisterH Vbd, Arm64RegisterS Van, byte shift)
    {
        uint raw = 0x5F109400U; // Encoding for: SQSHRN_asisdshf_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRN(Arm64RegisterS Vbd, Arm64RegisterD Van, byte shift)
    {
        uint raw = 0x5F209400U; // Encoding for: SQSHRN_asisdshf_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x0F089400U; // Encoding for: SQSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRN(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x4F089400U; // Encoding for: SQSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x0F109400U; // Encoding for: SQSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRN(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x4F109400U; // Encoding for: SQSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x0F209400U; // Encoding for: SQSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRN(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x4F209400U; // Encoding for: SQSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRN2(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x4F089400U; // Encoding for: SQSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x4F089400U; // Encoding for: SQSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRN2(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x4F109400U; // Encoding for: SQSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x4F109400U; // Encoding for: SQSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRN2(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x4F209400U; // Encoding for: SQSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x4F209400U; // Encoding for: SQSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRUN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRUN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRUN(Arm64RegisterB Vbd, Arm64RegisterH Van, byte shift)
    {
        uint raw = 0x7F088400U; // Encoding for: SQSHRUN_asisdshf_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRUN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRUN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRUN(Arm64RegisterH Vbd, Arm64RegisterS Van, byte shift)
    {
        uint raw = 0x7F108400U; // Encoding for: SQSHRUN_asisdshf_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRUN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRUN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRUN(Arm64RegisterS Vbd, Arm64RegisterD Van, byte shift)
    {
        uint raw = 0x7F208400U; // Encoding for: SQSHRUN_asisdshf_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRUN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRUN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRUN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x2F088400U; // Encoding for: SQSHRUN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRUN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRUN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRUN(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x6F088400U; // Encoding for: SQSHRUN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRUN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRUN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRUN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x2F108400U; // Encoding for: SQSHRUN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRUN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRUN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRUN(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x6F108400U; // Encoding for: SQSHRUN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRUN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRUN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRUN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x2F208400U; // Encoding for: SQSHRUN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRUN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRUN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRUN(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x6F208400U; // Encoding for: SQSHRUN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRUN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRUN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRUN2(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x6F088400U; // Encoding for: SQSHRUN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRUN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRUN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRUN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x6F088400U; // Encoding for: SQSHRUN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRUN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRUN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRUN2(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x6F108400U; // Encoding for: SQSHRUN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRUN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRUN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRUN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x6F108400U; // Encoding for: SQSHRUN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRUN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRUN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRUN2(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x6F208400U; // Encoding for: SQSHRUN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRUN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRUN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSHRUN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x6F208400U; // Encoding for: SQSHRUN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating subtract.
    /// </summary>
    /// <remarks><code>SQSUB Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSUB_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSUB(Arm64RegisterB Vd, Arm64RegisterB Vn, Arm64RegisterB Vm)
    {
        uint raw = 0x5E202C00U; // Encoding for: SQSUB_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating subtract.
    /// </summary>
    /// <remarks><code>SQSUB Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSUB_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSUB(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterH Vm)
    {
        uint raw = 0x5E602C00U; // Encoding for: SQSUB_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating subtract.
    /// </summary>
    /// <remarks><code>SQSUB Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSUB_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSUB(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
    {
        uint raw = 0x5EA02C00U; // Encoding for: SQSUB_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating subtract.
    /// </summary>
    /// <remarks><code>SQSUB Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSUB_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSUB(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
    {
        uint raw = 0x5EE02C00U; // Encoding for: SQSUB_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating subtract.
    /// </summary>
    /// <remarks><code>SQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSUB(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E202C00U; // Encoding for: SQSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating subtract.
    /// </summary>
    /// <remarks><code>SQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSUB(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E202C00U; // Encoding for: SQSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating subtract.
    /// </summary>
    /// <remarks><code>SQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSUB(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E602C00U; // Encoding for: SQSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating subtract.
    /// </summary>
    /// <remarks><code>SQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSUB(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E602C00U; // Encoding for: SQSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating subtract.
    /// </summary>
    /// <remarks><code>SQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSUB(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA02C00U; // Encoding for: SQSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating subtract.
    /// </summary>
    /// <remarks><code>SQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSUB(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA02C00U; // Encoding for: SQSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating subtract.
    /// </summary>
    /// <remarks><code>SQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQSUB(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4EE02C00U; // Encoding for: SQSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract narrow.
    /// </summary>
    /// <remarks><code>SQXTN Vbd, Van</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTN_asisdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTN(Arm64RegisterB Vbd, Arm64RegisterH Van)
    {
        uint raw = 0x5E214800U; // Encoding for: SQXTN_asisdmisc_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract narrow.
    /// </summary>
    /// <remarks><code>SQXTN Vbd, Van</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTN_asisdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTN(Arm64RegisterH Vbd, Arm64RegisterS Van)
    {
        uint raw = 0x5E614800U; // Encoding for: SQXTN_asisdmisc_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract narrow.
    /// </summary>
    /// <remarks><code>SQXTN Vbd, Van</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTN_asisdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTN(Arm64RegisterS Vbd, Arm64RegisterD Van)
    {
        uint raw = 0x5EA14800U; // Encoding for: SQXTN_asisdmisc_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract narrow.
    /// </summary>
    /// <remarks><code>SQXTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta)
    {
        uint raw = 0x0E214800U; // Encoding for: SQXTN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract narrow.
    /// </summary>
    /// <remarks><code>SQXTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTN(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta)
    {
        uint raw = 0x4E214800U; // Encoding for: SQXTN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract narrow.
    /// </summary>
    /// <remarks><code>SQXTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
    {
        uint raw = 0x0E614800U; // Encoding for: SQXTN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract narrow.
    /// </summary>
    /// <remarks><code>SQXTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTN(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
    {
        uint raw = 0x4E614800U; // Encoding for: SQXTN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract narrow.
    /// </summary>
    /// <remarks><code>SQXTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
    {
        uint raw = 0x0EA14800U; // Encoding for: SQXTN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract narrow.
    /// </summary>
    /// <remarks><code>SQXTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTN(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
    {
        uint raw = 0x4EA14800U; // Encoding for: SQXTN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract narrow.
    /// </summary>
    /// <remarks><code>SQXTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTN2(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta)
    {
        uint raw = 0x4E214800U; // Encoding for: SQXTN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract narrow.
    /// </summary>
    /// <remarks><code>SQXTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta)
    {
        uint raw = 0x4E214800U; // Encoding for: SQXTN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract narrow.
    /// </summary>
    /// <remarks><code>SQXTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTN2(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
    {
        uint raw = 0x4E614800U; // Encoding for: SQXTN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract narrow.
    /// </summary>
    /// <remarks><code>SQXTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
    {
        uint raw = 0x4E614800U; // Encoding for: SQXTN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract narrow.
    /// </summary>
    /// <remarks><code>SQXTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTN2(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
    {
        uint raw = 0x4EA14800U; // Encoding for: SQXTN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract narrow.
    /// </summary>
    /// <remarks><code>SQXTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
    {
        uint raw = 0x4EA14800U; // Encoding for: SQXTN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract unsigned narrow.
    /// </summary>
    /// <remarks><code>SQXTUN Vbd, Van</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTUN_asisdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTUN(Arm64RegisterB Vbd, Arm64RegisterH Van)
    {
        uint raw = 0x7E212800U; // Encoding for: SQXTUN_asisdmisc_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract unsigned narrow.
    /// </summary>
    /// <remarks><code>SQXTUN Vbd, Van</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTUN_asisdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTUN(Arm64RegisterH Vbd, Arm64RegisterS Van)
    {
        uint raw = 0x7E612800U; // Encoding for: SQXTUN_asisdmisc_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract unsigned narrow.
    /// </summary>
    /// <remarks><code>SQXTUN Vbd, Van</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTUN_asisdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTUN(Arm64RegisterS Vbd, Arm64RegisterD Van)
    {
        uint raw = 0x7EA12800U; // Encoding for: SQXTUN_asisdmisc_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract unsigned narrow.
    /// </summary>
    /// <remarks><code>SQXTUN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTUN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTUN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta)
    {
        uint raw = 0x2E212800U; // Encoding for: SQXTUN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract unsigned narrow.
    /// </summary>
    /// <remarks><code>SQXTUN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTUN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTUN(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta)
    {
        uint raw = 0x6E212800U; // Encoding for: SQXTUN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract unsigned narrow.
    /// </summary>
    /// <remarks><code>SQXTUN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTUN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTUN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
    {
        uint raw = 0x2E612800U; // Encoding for: SQXTUN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract unsigned narrow.
    /// </summary>
    /// <remarks><code>SQXTUN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTUN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTUN(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
    {
        uint raw = 0x6E612800U; // Encoding for: SQXTUN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract unsigned narrow.
    /// </summary>
    /// <remarks><code>SQXTUN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTUN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTUN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
    {
        uint raw = 0x2EA12800U; // Encoding for: SQXTUN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract unsigned narrow.
    /// </summary>
    /// <remarks><code>SQXTUN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTUN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTUN(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
    {
        uint raw = 0x6EA12800U; // Encoding for: SQXTUN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract unsigned narrow.
    /// </summary>
    /// <remarks><code>SQXTUN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTUN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTUN2(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta)
    {
        uint raw = 0x6E212800U; // Encoding for: SQXTUN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract unsigned narrow.
    /// </summary>
    /// <remarks><code>SQXTUN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTUN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTUN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta)
    {
        uint raw = 0x6E212800U; // Encoding for: SQXTUN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract unsigned narrow.
    /// </summary>
    /// <remarks><code>SQXTUN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTUN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTUN2(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
    {
        uint raw = 0x6E612800U; // Encoding for: SQXTUN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract unsigned narrow.
    /// </summary>
    /// <remarks><code>SQXTUN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTUN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTUN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
    {
        uint raw = 0x6E612800U; // Encoding for: SQXTUN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract unsigned narrow.
    /// </summary>
    /// <remarks><code>SQXTUN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTUN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTUN2(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
    {
        uint raw = 0x6EA12800U; // Encoding for: SQXTUN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating extract unsigned narrow.
    /// </summary>
    /// <remarks><code>SQXTUN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTUN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SQXTUN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
    {
        uint raw = 0x6EA12800U; // Encoding for: SQXTUN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed rounding halving add.
    /// </summary>
    /// <remarks><code>SRHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRHADD(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E201400U; // Encoding for: SRHADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding halving add.
    /// </summary>
    /// <remarks><code>SRHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRHADD(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E201400U; // Encoding for: SRHADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding halving add.
    /// </summary>
    /// <remarks><code>SRHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRHADD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E601400U; // Encoding for: SRHADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding halving add.
    /// </summary>
    /// <remarks><code>SRHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRHADD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E601400U; // Encoding for: SRHADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding halving add.
    /// </summary>
    /// <remarks><code>SRHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRHADD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA01400U; // Encoding for: SRHADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding halving add.
    /// </summary>
    /// <remarks><code>SRHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRHADD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA01400U; // Encoding for: SRHADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Shift right and insert (immediate).
    /// </summary>
    /// <remarks><code>SRI Dd, Dn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRI_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRI(Arm64RegisterD Dd, Arm64RegisterD Dn, uint shift)
    {
        uint raw = 0x7F404400U; // Encoding for: SRI_asisdshf_r
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)((128 - shift) & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift right and insert (immediate).
    /// </summary>
    /// <remarks><code>SRI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRI(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
    {
        uint raw = 0x2F084400U; // Encoding for: SRI_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift right and insert (immediate).
    /// </summary>
    /// <remarks><code>SRI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRI(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
    {
        uint raw = 0x6F084400U; // Encoding for: SRI_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift right and insert (immediate).
    /// </summary>
    /// <remarks><code>SRI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRI(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
    {
        uint raw = 0x2F104400U; // Encoding for: SRI_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift right and insert (immediate).
    /// </summary>
    /// <remarks><code>SRI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRI(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
    {
        uint raw = 0x6F104400U; // Encoding for: SRI_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift right and insert (immediate).
    /// </summary>
    /// <remarks><code>SRI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRI(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
    {
        uint raw = 0x2F204400U; // Encoding for: SRI_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift right and insert (immediate).
    /// </summary>
    /// <remarks><code>SRI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRI(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
    {
        uint raw = 0x6F204400U; // Encoding for: SRI_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Shift right and insert (immediate).
    /// </summary>
    /// <remarks><code>SRI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRI(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
    {
        uint raw = 0x6F404400U; // Encoding for: SRI_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding shift left (register).
    /// </summary>
    /// <remarks><code>SRSHL Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRSHL(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
    {
        uint raw = 0x5EE05400U; // Encoding for: SRSHL_asisdsame_only
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding shift left (register).
    /// </summary>
    /// <remarks><code>SRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRSHL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E205400U; // Encoding for: SRSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding shift left (register).
    /// </summary>
    /// <remarks><code>SRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRSHL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E205400U; // Encoding for: SRSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding shift left (register).
    /// </summary>
    /// <remarks><code>SRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRSHL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E605400U; // Encoding for: SRSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding shift left (register).
    /// </summary>
    /// <remarks><code>SRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRSHL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E605400U; // Encoding for: SRSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding shift left (register).
    /// </summary>
    /// <remarks><code>SRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRSHL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA05400U; // Encoding for: SRSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding shift left (register).
    /// </summary>
    /// <remarks><code>SRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRSHL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA05400U; // Encoding for: SRSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding shift left (register).
    /// </summary>
    /// <remarks><code>SRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRSHL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4EE05400U; // Encoding for: SRSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>SRSHR Dd, Dn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHR_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRSHR(Arm64RegisterD Dd, Arm64RegisterD Dn, uint shift)
    {
        uint raw = 0x5F402400U; // Encoding for: SRSHR_asisdshf_r
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)((128 - shift) & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>SRSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRSHR(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
    {
        uint raw = 0x0F082400U; // Encoding for: SRSHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>SRSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRSHR(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
    {
        uint raw = 0x4F082400U; // Encoding for: SRSHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>SRSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRSHR(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
    {
        uint raw = 0x0F102400U; // Encoding for: SRSHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>SRSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRSHR(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
    {
        uint raw = 0x4F102400U; // Encoding for: SRSHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>SRSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRSHR(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
    {
        uint raw = 0x0F202400U; // Encoding for: SRSHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>SRSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRSHR(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
    {
        uint raw = 0x4F202400U; // Encoding for: SRSHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>SRSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRSHR(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
    {
        uint raw = 0x4F402400U; // Encoding for: SRSHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SRSRA Dd, Dn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSRA_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRSRA(Arm64RegisterD Dd, Arm64RegisterD Dn, uint shift)
    {
        uint raw = 0x5F403400U; // Encoding for: SRSRA_asisdshf_r
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)((128 - shift) & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SRSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRSRA(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
    {
        uint raw = 0x0F083400U; // Encoding for: SRSRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SRSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRSRA(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
    {
        uint raw = 0x4F083400U; // Encoding for: SRSRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SRSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRSRA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
    {
        uint raw = 0x0F103400U; // Encoding for: SRSRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SRSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRSRA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
    {
        uint raw = 0x4F103400U; // Encoding for: SRSRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SRSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRSRA(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
    {
        uint raw = 0x0F203400U; // Encoding for: SRSRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SRSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRSRA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
    {
        uint raw = 0x4F203400U; // Encoding for: SRSRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SRSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SRSRA(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
    {
        uint raw = 0x4F403400U; // Encoding for: SRSRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift left (register).
    /// </summary>
    /// <remarks><code>SSHL Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHL(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
    {
        uint raw = 0x5EE04400U; // Encoding for: SSHL_asisdsame_only
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift left (register).
    /// </summary>
    /// <remarks><code>SSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E204400U; // Encoding for: SSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift left (register).
    /// </summary>
    /// <remarks><code>SSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E204400U; // Encoding for: SSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift left (register).
    /// </summary>
    /// <remarks><code>SSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E604400U; // Encoding for: SSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift left (register).
    /// </summary>
    /// <remarks><code>SSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E604400U; // Encoding for: SSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift left (register).
    /// </summary>
    /// <remarks><code>SSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0EA04400U; // Encoding for: SSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift left (register).
    /// </summary>
    /// <remarks><code>SSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4EA04400U; // Encoding for: SSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift left (register).
    /// </summary>
    /// <remarks><code>SSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4EE04400U; // Encoding for: SSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift left long (immediate).
    /// </summary>
    /// <remarks><code>SSHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHLL_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHLL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, byte shift)
    {
        uint raw = 0x0F08A400U; // Encoding for: SSHLL_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift left long (immediate).
    /// </summary>
    /// <remarks><code>SSHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHLL_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHLL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, byte shift)
    {
        uint raw = 0x4F08A400U; // Encoding for: SSHLL_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift left long (immediate).
    /// </summary>
    /// <remarks><code>SSHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHLL_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHLL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, byte shift)
    {
        uint raw = 0x0F10A400U; // Encoding for: SSHLL_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift left long (immediate).
    /// </summary>
    /// <remarks><code>SSHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHLL_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHLL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, byte shift)
    {
        uint raw = 0x4F10A400U; // Encoding for: SSHLL_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift left long (immediate).
    /// </summary>
    /// <remarks><code>SSHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHLL_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHLL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, byte shift)
    {
        uint raw = 0x0F20A400U; // Encoding for: SSHLL_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift left long (immediate).
    /// </summary>
    /// <remarks><code>SSHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHLL_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHLL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, byte shift)
    {
        uint raw = 0x4F20A400U; // Encoding for: SSHLL_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift left long (immediate).
    /// </summary>
    /// <remarks><code>SSHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHLL2_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHLL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, byte shift)
    {
        uint raw = 0x4F08A400U; // Encoding for: SSHLL2_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift left long (immediate).
    /// </summary>
    /// <remarks><code>SSHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHLL2_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHLL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, byte shift)
    {
        uint raw = 0x4F08A400U; // Encoding for: SSHLL2_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift left long (immediate).
    /// </summary>
    /// <remarks><code>SSHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHLL2_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHLL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, byte shift)
    {
        uint raw = 0x4F10A400U; // Encoding for: SSHLL2_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift left long (immediate).
    /// </summary>
    /// <remarks><code>SSHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHLL2_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHLL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, byte shift)
    {
        uint raw = 0x4F10A400U; // Encoding for: SSHLL2_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift left long (immediate).
    /// </summary>
    /// <remarks><code>SSHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHLL2_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHLL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, byte shift)
    {
        uint raw = 0x4F20A400U; // Encoding for: SSHLL2_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift left long (immediate).
    /// </summary>
    /// <remarks><code>SSHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHLL2_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHLL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, byte shift)
    {
        uint raw = 0x4F20A400U; // Encoding for: SSHLL2_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift right (immediate).
    /// </summary>
    /// <remarks><code>SSHR Dd, Dn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHR_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHR(Arm64RegisterD Dd, Arm64RegisterD Dn, uint shift)
    {
        uint raw = 0x5F400400U; // Encoding for: SSHR_asisdshf_r
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)((128 - shift) & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift right (immediate).
    /// </summary>
    /// <remarks><code>SSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHR(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
    {
        uint raw = 0x0F080400U; // Encoding for: SSHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift right (immediate).
    /// </summary>
    /// <remarks><code>SSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHR(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
    {
        uint raw = 0x4F080400U; // Encoding for: SSHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift right (immediate).
    /// </summary>
    /// <remarks><code>SSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHR(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
    {
        uint raw = 0x0F100400U; // Encoding for: SSHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift right (immediate).
    /// </summary>
    /// <remarks><code>SSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHR(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
    {
        uint raw = 0x4F100400U; // Encoding for: SSHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift right (immediate).
    /// </summary>
    /// <remarks><code>SSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHR(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
    {
        uint raw = 0x0F200400U; // Encoding for: SSHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift right (immediate).
    /// </summary>
    /// <remarks><code>SSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHR(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
    {
        uint raw = 0x4F200400U; // Encoding for: SSHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift right (immediate).
    /// </summary>
    /// <remarks><code>SSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSHR(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
    {
        uint raw = 0x4F400400U; // Encoding for: SSHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SSRA Dd, Dn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSRA_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSRA(Arm64RegisterD Dd, Arm64RegisterD Dn, uint shift)
    {
        uint raw = 0x5F401400U; // Encoding for: SSRA_asisdshf_r
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)((128 - shift) & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSRA(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
    {
        uint raw = 0x0F081400U; // Encoding for: SSRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSRA(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
    {
        uint raw = 0x4F081400U; // Encoding for: SSRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSRA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
    {
        uint raw = 0x0F101400U; // Encoding for: SSRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSRA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
    {
        uint raw = 0x4F101400U; // Encoding for: SSRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSRA(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
    {
        uint raw = 0x0F201400U; // Encoding for: SSRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSRA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
    {
        uint raw = 0x4F201400U; // Encoding for: SSRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSRA(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
    {
        uint raw = 0x4F401400U; // Encoding for: SSRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Signed subtract long.
    /// </summary>
    /// <remarks><code>SSUBL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSUBL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x0E202000U; // Encoding for: SSUBL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed subtract long.
    /// </summary>
    /// <remarks><code>SSUBL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSUBL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x4E202000U; // Encoding for: SSUBL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed subtract long.
    /// </summary>
    /// <remarks><code>SSUBL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSUBL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x0E602000U; // Encoding for: SSUBL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed subtract long.
    /// </summary>
    /// <remarks><code>SSUBL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSUBL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E602000U; // Encoding for: SSUBL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed subtract long.
    /// </summary>
    /// <remarks><code>SSUBL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSUBL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x0EA02000U; // Encoding for: SSUBL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed subtract long.
    /// </summary>
    /// <remarks><code>SSUBL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSUBL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x4EA02000U; // Encoding for: SSUBL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed subtract long.
    /// </summary>
    /// <remarks><code>SSUBL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSUBL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x4E202000U; // Encoding for: SSUBL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed subtract long.
    /// </summary>
    /// <remarks><code>SSUBL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSUBL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x4E202000U; // Encoding for: SSUBL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed subtract long.
    /// </summary>
    /// <remarks><code>SSUBL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSUBL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x4E602000U; // Encoding for: SSUBL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed subtract long.
    /// </summary>
    /// <remarks><code>SSUBL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSUBL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E602000U; // Encoding for: SSUBL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed subtract long.
    /// </summary>
    /// <remarks><code>SSUBL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSUBL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x4EA02000U; // Encoding for: SSUBL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed subtract long.
    /// </summary>
    /// <remarks><code>SSUBL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSUBL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x4EA02000U; // Encoding for: SSUBL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed subtract wide.
    /// </summary>
    /// <remarks><code>SSUBW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSUBW(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x0E203000U; // Encoding for: SSUBW_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed subtract wide.
    /// </summary>
    /// <remarks><code>SSUBW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSUBW(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x4E203000U; // Encoding for: SSUBW_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed subtract wide.
    /// </summary>
    /// <remarks><code>SSUBW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSUBW(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x0E603000U; // Encoding for: SSUBW_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed subtract wide.
    /// </summary>
    /// <remarks><code>SSUBW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSUBW(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E603000U; // Encoding for: SSUBW_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed subtract wide.
    /// </summary>
    /// <remarks><code>SSUBW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSUBW(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x0EA03000U; // Encoding for: SSUBW_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed subtract wide.
    /// </summary>
    /// <remarks><code>SSUBW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSUBW(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x4EA03000U; // Encoding for: SSUBW_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed subtract wide.
    /// </summary>
    /// <remarks><code>SSUBW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSUBW2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x4E203000U; // Encoding for: SSUBW2_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed subtract wide.
    /// </summary>
    /// <remarks><code>SSUBW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSUBW2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x4E203000U; // Encoding for: SSUBW2_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed subtract wide.
    /// </summary>
    /// <remarks><code>SSUBW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSUBW2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x4E603000U; // Encoding for: SSUBW2_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed subtract wide.
    /// </summary>
    /// <remarks><code>SSUBW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSUBW2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x4E603000U; // Encoding for: SSUBW2_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed subtract wide.
    /// </summary>
    /// <remarks><code>SSUBW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSUBW2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x4EA03000U; // Encoding for: SSUBW2_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Signed subtract wide.
    /// </summary>
    /// <remarks><code>SSUBW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSUBW2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x4EA03000U; // Encoding for: SSUBW2_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C007000U; // Encoding for: ST1_asisdlse_r1_1v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C007000U; // Encoding for: ST1_asisdlse_r1_1v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C007400U; // Encoding for: ST1_asisdlse_r1_1v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C007400U; // Encoding for: ST1_asisdlse_r1_1v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C007800U; // Encoding for: ST1_asisdlse_r1_1v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C007800U; // Encoding for: ST1_asisdlse_r1_1v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C007C00U; // Encoding for: ST1_asisdlse_r1_1v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C007C00U; // Encoding for: ST1_asisdlse_r1_1v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C00A000U; // Encoding for: ST1_asisdlse_r2_2v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C00A000U; // Encoding for: ST1_asisdlse_r2_2v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C00A400U; // Encoding for: ST1_asisdlse_r2_2v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C00A400U; // Encoding for: ST1_asisdlse_r2_2v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C00A800U; // Encoding for: ST1_asisdlse_r2_2v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C00A800U; // Encoding for: ST1_asisdlse_r2_2v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup2<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C00AC00U; // Encoding for: ST1_asisdlse_r2_2v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C00AC00U; // Encoding for: ST1_asisdlse_r2_2v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C006000U; // Encoding for: ST1_asisdlse_r3_3v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C006000U; // Encoding for: ST1_asisdlse_r3_3v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C006400U; // Encoding for: ST1_asisdlse_r3_3v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C006400U; // Encoding for: ST1_asisdlse_r3_3v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C006800U; // Encoding for: ST1_asisdlse_r3_3v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C006800U; // Encoding for: ST1_asisdlse_r3_3v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup3<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C006C00U; // Encoding for: ST1_asisdlse_r3_3v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C006C00U; // Encoding for: ST1_asisdlse_r3_3v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C002000U; // Encoding for: ST1_asisdlse_r4_4v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C002000U; // Encoding for: ST1_asisdlse_r4_4v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C002400U; // Encoding for: ST1_asisdlse_r4_4v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C002400U; // Encoding for: ST1_asisdlse_r4_4v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C002800U; // Encoding for: ST1_asisdlse_r4_4v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C002800U; // Encoding for: ST1_asisdlse_r4_4v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup4<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C002C00U; // Encoding for: ST1_asisdlse_r4_4v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C002C00U; // Encoding for: ST1_asisdlse_r4_4v
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 8)
    {
        uint raw = 0x0C9F7000U; // Encoding for: ST1_asisdlsep_i1_i1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 8) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 8 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 16)
    {
        uint raw = 0x4C9F7000U; // Encoding for: ST1_asisdlsep_i1_i1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 8)
    {
        uint raw = 0x0C9F7400U; // Encoding for: ST1_asisdlsep_i1_i1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 8) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 8 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 16)
    {
        uint raw = 0x4C9F7400U; // Encoding for: ST1_asisdlsep_i1_i1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 8)
    {
        uint raw = 0x0C9F7800U; // Encoding for: ST1_asisdlsep_i1_i1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 8) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 8 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 16)
    {
        uint raw = 0x4C9F7800U; // Encoding for: ST1_asisdlsep_i1_i1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 8)
    {
        uint raw = 0x0C9F7C00U; // Encoding for: ST1_asisdlsep_i1_i1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 8) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 8 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 16)
    {
        uint raw = 0x4C9F7C00U; // Encoding for: ST1_asisdlsep_i1_i1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C807000U; // Encoding for: ST1_asisdlsep_r1_r1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C807000U; // Encoding for: ST1_asisdlsep_r1_r1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C807400U; // Encoding for: ST1_asisdlsep_r1_r1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C807400U; // Encoding for: ST1_asisdlsep_r1_r1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C807800U; // Encoding for: ST1_asisdlsep_r1_r1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C807800U; // Encoding for: ST1_asisdlsep_r1_r1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C807C00U; // Encoding for: ST1_asisdlsep_r1_r1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C807C00U; // Encoding for: ST1_asisdlsep_r1_r1
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 16)
    {
        uint raw = 0x0C9FA000U; // Encoding for: ST1_asisdlsep_i2_i2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
    {
        uint raw = 0x4C9FA000U; // Encoding for: ST1_asisdlsep_i2_i2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 16)
    {
        uint raw = 0x0C9FA400U; // Encoding for: ST1_asisdlsep_i2_i2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
    {
        uint raw = 0x4C9FA400U; // Encoding for: ST1_asisdlsep_i2_i2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 16)
    {
        uint raw = 0x0C9FA800U; // Encoding for: ST1_asisdlsep_i2_i2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
    {
        uint raw = 0x4C9FA800U; // Encoding for: ST1_asisdlsep_i2_i2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup2<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 16)
    {
        uint raw = 0x0C9FAC00U; // Encoding for: ST1_asisdlsep_i2_i2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
    {
        uint raw = 0x4C9FAC00U; // Encoding for: ST1_asisdlsep_i2_i2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C80A000U; // Encoding for: ST1_asisdlsep_r2_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C80A000U; // Encoding for: ST1_asisdlsep_r2_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C80A400U; // Encoding for: ST1_asisdlsep_r2_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C80A400U; // Encoding for: ST1_asisdlsep_r2_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C80A800U; // Encoding for: ST1_asisdlsep_r2_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C80A800U; // Encoding for: ST1_asisdlsep_r2_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup2<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C80AC00U; // Encoding for: ST1_asisdlsep_r2_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C80AC00U; // Encoding for: ST1_asisdlsep_r2_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 24)
    {
        uint raw = 0x0C9F6000U; // Encoding for: ST1_asisdlsep_i3_i3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 24) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 24 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 48)
    {
        uint raw = 0x4C9F6000U; // Encoding for: ST1_asisdlsep_i3_i3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 48) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 48 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 24)
    {
        uint raw = 0x0C9F6400U; // Encoding for: ST1_asisdlsep_i3_i3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 24) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 24 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 48)
    {
        uint raw = 0x4C9F6400U; // Encoding for: ST1_asisdlsep_i3_i3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 48) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 48 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 24)
    {
        uint raw = 0x0C9F6800U; // Encoding for: ST1_asisdlsep_i3_i3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 24) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 24 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 48)
    {
        uint raw = 0x4C9F6800U; // Encoding for: ST1_asisdlsep_i3_i3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 48) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 48 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup3<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 24)
    {
        uint raw = 0x0C9F6C00U; // Encoding for: ST1_asisdlsep_i3_i3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 24) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 24 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 48)
    {
        uint raw = 0x4C9F6C00U; // Encoding for: ST1_asisdlsep_i3_i3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 48) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 48 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C806000U; // Encoding for: ST1_asisdlsep_r3_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C806000U; // Encoding for: ST1_asisdlsep_r3_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C806400U; // Encoding for: ST1_asisdlsep_r3_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C806400U; // Encoding for: ST1_asisdlsep_r3_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C806800U; // Encoding for: ST1_asisdlsep_r3_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C806800U; // Encoding for: ST1_asisdlsep_r3_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup3<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C806C00U; // Encoding for: ST1_asisdlsep_r3_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C806C00U; // Encoding for: ST1_asisdlsep_r3_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
    {
        uint raw = 0x0C9F2000U; // Encoding for: ST1_asisdlsep_i4_i4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 64)
    {
        uint raw = 0x4C9F2000U; // Encoding for: ST1_asisdlsep_i4_i4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 64) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 64 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
    {
        uint raw = 0x0C9F2400U; // Encoding for: ST1_asisdlsep_i4_i4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 64)
    {
        uint raw = 0x4C9F2400U; // Encoding for: ST1_asisdlsep_i4_i4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 64) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 64 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
    {
        uint raw = 0x0C9F2800U; // Encoding for: ST1_asisdlsep_i4_i4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 64)
    {
        uint raw = 0x4C9F2800U; // Encoding for: ST1_asisdlsep_i4_i4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 64) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 64 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup4<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
    {
        uint raw = 0x0C9F2C00U; // Encoding for: ST1_asisdlsep_i4_i4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 64)
    {
        uint raw = 0x4C9F2C00U; // Encoding for: ST1_asisdlsep_i4_i4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 64) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 64 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C802000U; // Encoding for: ST1_asisdlsep_r4_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C802000U; // Encoding for: ST1_asisdlsep_r4_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C802400U; // Encoding for: ST1_asisdlsep_r4_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C802400U; // Encoding for: ST1_asisdlsep_r4_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C802800U; // Encoding for: ST1_asisdlsep_r4_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C802800U; // Encoding for: ST1_asisdlsep_r4_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup4<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C802C00U; // Encoding for: ST1_asisdlsep_r4_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C802C00U; // Encoding for: ST1_asisdlsep_r4_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>ST1 {Vt.B}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlso_b1_1b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0D000000U; // Encoding for: ST1_asisdlso_b1_1b
        raw |= (uint)Vt_B.Index;
        {
            // Write the element indexer for Vt_B.ElementIndex
            var _i_ = Vt_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 10;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>ST1 {Vt.H}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlso_h1_1h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0D004000U; // Encoding for: ST1_asisdlso_h1_1h
        raw |= (uint)Vt_H.Index;
        {
            // Write the element indexer for Vt_H.ElementIndex
            var _i_ = Vt_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 11;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>ST1 {Vt.S}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlso_s1_1s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0D008000U; // Encoding for: ST1_asisdlso_s1_1s
        raw |= (uint)Vt_S.Index;
        {
            // Write the element indexer for Vt_S.ElementIndex
            var _i_ = Vt_S.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 12;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>ST1 {Vt.D}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlso_d1_1d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0D008400U; // Encoding for: ST1_asisdlso_d1_1d
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>ST1 {Vt.B}[index], [Xn|SP], #1</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsop_b1_i1b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor dst, byte value1 = 1)
    {
        uint raw = 0x0D9F0000U; // Encoding for: ST1_asisdlsop_b1_i1b
        raw |= (uint)Vt_B.Index;
        {
            // Write the element indexer for Vt_B.ElementIndex
            var _i_ = Vt_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 10;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (value1 != 1) throw new ArgumentOutOfRangeException(nameof(value1), $"Invalid Immediate. Expecting the fixed value 1 instead of {value1}");
        return raw;
    }
    /// <summary>
    /// Store a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>ST1 {Vt.B}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsop_bx1_r1b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0D800000U; // Encoding for: ST1_asisdlsop_bx1_r1b
        raw |= (uint)Vt_B.Index;
        {
            // Write the element indexer for Vt_B.ElementIndex
            var _i_ = Vt_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 10;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>ST1 {Vt.H}[index], [Xn|SP], #2</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsop_h1_i1h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor dst, byte value2 = 2)
    {
        uint raw = 0x0D9F4000U; // Encoding for: ST1_asisdlsop_h1_i1h
        raw |= (uint)Vt_H.Index;
        {
            // Write the element indexer for Vt_H.ElementIndex
            var _i_ = Vt_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 11;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (value2 != 2) throw new ArgumentOutOfRangeException(nameof(value2), $"Invalid Immediate. Expecting the fixed value 2 instead of {value2}");
        return raw;
    }
    /// <summary>
    /// Store a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>ST1 {Vt.H}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsop_hx1_r1h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0D804000U; // Encoding for: ST1_asisdlsop_hx1_r1h
        raw |= (uint)Vt_H.Index;
        {
            // Write the element indexer for Vt_H.ElementIndex
            var _i_ = Vt_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 11;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>ST1 {Vt.S}[index], [Xn|SP], #4</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsop_s1_i1s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor dst, byte value4 = 4)
    {
        uint raw = 0x0D9F8000U; // Encoding for: ST1_asisdlsop_s1_i1s
        raw |= (uint)Vt_S.Index;
        {
            // Write the element indexer for Vt_S.ElementIndex
            var _i_ = Vt_S.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 12;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (value4 != 4) throw new ArgumentOutOfRangeException(nameof(value4), $"Invalid Immediate. Expecting the fixed value 4 instead of {value4}");
        return raw;
    }
    /// <summary>
    /// Store a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>ST1 {Vt.S}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsop_sx1_r1s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0D808000U; // Encoding for: ST1_asisdlsop_sx1_r1s
        raw |= (uint)Vt_S.Index;
        {
            // Write the element indexer for Vt_S.ElementIndex
            var _i_ = Vt_S.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 12;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>ST1 {Vt.D}[index], [Xn|SP], #8</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsop_d1_i1d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst, byte value8 = 8)
    {
        uint raw = 0x0D9F8400U; // Encoding for: ST1_asisdlsop_d1_i1d
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (value8 != 8) throw new ArgumentOutOfRangeException(nameof(value8), $"Invalid Immediate. Expecting the fixed value 8 instead of {value8}");
        return raw;
    }
    /// <summary>
    /// Store a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>ST1 {Vt.D}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsop_dx1_r1d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST1(Arm64RegisterGroup1<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0D808400U; // Encoding for: ST1_asisdlsop_dx1_r1d
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C008000U; // Encoding for: ST2_asisdlse_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C008000U; // Encoding for: ST2_asisdlse_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C008400U; // Encoding for: ST2_asisdlse_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C008400U; // Encoding for: ST2_asisdlse_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C008800U; // Encoding for: ST2_asisdlse_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C008800U; // Encoding for: ST2_asisdlse_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C008C00U; // Encoding for: ST2_asisdlse_r2
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 16)
    {
        uint raw = 0x0C9F8000U; // Encoding for: ST2_asisdlsep_i2_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
    {
        uint raw = 0x4C9F8000U; // Encoding for: ST2_asisdlsep_i2_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 16)
    {
        uint raw = 0x0C9F8400U; // Encoding for: ST2_asisdlsep_i2_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
    {
        uint raw = 0x4C9F8400U; // Encoding for: ST2_asisdlsep_i2_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 16)
    {
        uint raw = 0x0C9F8800U; // Encoding for: ST2_asisdlsep_i2_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 16) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 16 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
    {
        uint raw = 0x4C9F8800U; // Encoding for: ST2_asisdlsep_i2_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
    {
        uint raw = 0x4C9F8C00U; // Encoding for: ST2_asisdlsep_i2_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C808000U; // Encoding for: ST2_asisdlsep_r2_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C808000U; // Encoding for: ST2_asisdlsep_r2_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C808400U; // Encoding for: ST2_asisdlsep_r2_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C808400U; // Encoding for: ST2_asisdlsep_r2_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C808800U; // Encoding for: ST2_asisdlsep_r2_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C808800U; // Encoding for: ST2_asisdlsep_r2_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C808C00U; // Encoding for: ST2_asisdlsep_r2_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store single 2-element structure from one lane of two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.B, Vt2.B}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlso_b2_2b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0D200000U; // Encoding for: ST2_asisdlso_b2_2b
        raw |= (uint)Vt_B.Index;
        {
            // Write the element indexer for Vt_B.ElementIndex
            var _i_ = Vt_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 10;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store single 2-element structure from one lane of two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.H, Vt2.H}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlso_h2_2h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0D204000U; // Encoding for: ST2_asisdlso_h2_2h
        raw |= (uint)Vt_H.Index;
        {
            // Write the element indexer for Vt_H.ElementIndex
            var _i_ = Vt_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 11;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store single 2-element structure from one lane of two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.S, Vt2.S}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlso_s2_2s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0D208000U; // Encoding for: ST2_asisdlso_s2_2s
        raw |= (uint)Vt_S.Index;
        {
            // Write the element indexer for Vt_S.ElementIndex
            var _i_ = Vt_S.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 12;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store single 2-element structure from one lane of two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.D, Vt2.D}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlso_d2_2d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0D208400U; // Encoding for: ST2_asisdlso_d2_2d
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store single 2-element structure from one lane of two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.B, Vt2.B}[index], [Xn|SP], #2</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsop_b2_i2b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor dst, byte value2 = 2)
    {
        uint raw = 0x0DBF0000U; // Encoding for: ST2_asisdlsop_b2_i2b
        raw |= (uint)Vt_B.Index;
        {
            // Write the element indexer for Vt_B.ElementIndex
            var _i_ = Vt_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 10;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (value2 != 2) throw new ArgumentOutOfRangeException(nameof(value2), $"Invalid Immediate. Expecting the fixed value 2 instead of {value2}");
        return raw;
    }
    /// <summary>
    /// Store single 2-element structure from one lane of two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.B, Vt2.B}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsop_bx2_r2b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0DA00000U; // Encoding for: ST2_asisdlsop_bx2_r2b
        raw |= (uint)Vt_B.Index;
        {
            // Write the element indexer for Vt_B.ElementIndex
            var _i_ = Vt_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 10;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store single 2-element structure from one lane of two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.H, Vt2.H}[index], [Xn|SP], #4</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsop_h2_i2h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor dst, byte value4 = 4)
    {
        uint raw = 0x0DBF4000U; // Encoding for: ST2_asisdlsop_h2_i2h
        raw |= (uint)Vt_H.Index;
        {
            // Write the element indexer for Vt_H.ElementIndex
            var _i_ = Vt_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 11;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (value4 != 4) throw new ArgumentOutOfRangeException(nameof(value4), $"Invalid Immediate. Expecting the fixed value 4 instead of {value4}");
        return raw;
    }
    /// <summary>
    /// Store single 2-element structure from one lane of two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.H, Vt2.H}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsop_hx2_r2h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0DA04000U; // Encoding for: ST2_asisdlsop_hx2_r2h
        raw |= (uint)Vt_H.Index;
        {
            // Write the element indexer for Vt_H.ElementIndex
            var _i_ = Vt_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 11;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store single 2-element structure from one lane of two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.S, Vt2.S}[index], [Xn|SP], #8</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsop_s2_i2s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor dst, byte value8 = 8)
    {
        uint raw = 0x0DBF8000U; // Encoding for: ST2_asisdlsop_s2_i2s
        raw |= (uint)Vt_S.Index;
        {
            // Write the element indexer for Vt_S.ElementIndex
            var _i_ = Vt_S.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 12;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (value8 != 8) throw new ArgumentOutOfRangeException(nameof(value8), $"Invalid Immediate. Expecting the fixed value 8 instead of {value8}");
        return raw;
    }
    /// <summary>
    /// Store single 2-element structure from one lane of two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.S, Vt2.S}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsop_sx2_r2s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0DA08000U; // Encoding for: ST2_asisdlsop_sx2_r2s
        raw |= (uint)Vt_S.Index;
        {
            // Write the element indexer for Vt_S.ElementIndex
            var _i_ = Vt_S.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 12;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store single 2-element structure from one lane of two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.D, Vt2.D}[index], [Xn|SP], #16</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsop_d2_i2d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst, byte value16 = 16)
    {
        uint raw = 0x0DBF8400U; // Encoding for: ST2_asisdlsop_d2_i2d
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (value16 != 16) throw new ArgumentOutOfRangeException(nameof(value16), $"Invalid Immediate. Expecting the fixed value 16 instead of {value16}");
        return raw;
    }
    /// <summary>
    /// Store single 2-element structure from one lane of two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.D, Vt2.D}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsop_dx2_r2d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST2(Arm64RegisterGroup2<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0DA08400U; // Encoding for: ST2_asisdlsop_dx2_r2d
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C004000U; // Encoding for: ST3_asisdlse_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C004000U; // Encoding for: ST3_asisdlse_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C004400U; // Encoding for: ST3_asisdlse_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C004400U; // Encoding for: ST3_asisdlse_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C004800U; // Encoding for: ST3_asisdlse_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C004800U; // Encoding for: ST3_asisdlse_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C004C00U; // Encoding for: ST3_asisdlse_r3
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 24)
    {
        uint raw = 0x0C9F4000U; // Encoding for: ST3_asisdlsep_i3_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 24) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 24 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 48)
    {
        uint raw = 0x4C9F4000U; // Encoding for: ST3_asisdlsep_i3_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 48) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 48 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 24)
    {
        uint raw = 0x0C9F4400U; // Encoding for: ST3_asisdlsep_i3_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 24) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 24 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 48)
    {
        uint raw = 0x4C9F4400U; // Encoding for: ST3_asisdlsep_i3_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 48) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 48 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 24)
    {
        uint raw = 0x0C9F4800U; // Encoding for: ST3_asisdlsep_i3_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 24) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 24 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 48)
    {
        uint raw = 0x4C9F4800U; // Encoding for: ST3_asisdlsep_i3_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 48) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 48 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 48)
    {
        uint raw = 0x4C9F4C00U; // Encoding for: ST3_asisdlsep_i3_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 48) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 48 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C804000U; // Encoding for: ST3_asisdlsep_r3_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C804000U; // Encoding for: ST3_asisdlsep_r3_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C804400U; // Encoding for: ST3_asisdlsep_r3_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C804400U; // Encoding for: ST3_asisdlsep_r3_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C804800U; // Encoding for: ST3_asisdlsep_r3_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C804800U; // Encoding for: ST3_asisdlsep_r3_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C804C00U; // Encoding for: ST3_asisdlsep_r3_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store single 3-element structure from one lane of three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.B, Vt2.B, Vt3.B}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlso_b3_3b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0D002000U; // Encoding for: ST3_asisdlso_b3_3b
        raw |= (uint)Vt_B.Index;
        {
            // Write the element indexer for Vt_B.ElementIndex
            var _i_ = Vt_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 10;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store single 3-element structure from one lane of three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.H, Vt2.H, Vt3.H}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlso_h3_3h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0D006000U; // Encoding for: ST3_asisdlso_h3_3h
        raw |= (uint)Vt_H.Index;
        {
            // Write the element indexer for Vt_H.ElementIndex
            var _i_ = Vt_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 11;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store single 3-element structure from one lane of three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.S, Vt2.S, Vt3.S}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlso_s3_3s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0D00A000U; // Encoding for: ST3_asisdlso_s3_3s
        raw |= (uint)Vt_S.Index;
        {
            // Write the element indexer for Vt_S.ElementIndex
            var _i_ = Vt_S.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 12;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store single 3-element structure from one lane of three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.D, Vt2.D, Vt3.D}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlso_d3_3d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0D00A400U; // Encoding for: ST3_asisdlso_d3_3d
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store single 3-element structure from one lane of three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.B, Vt2.B, Vt3.B}[index], [Xn|SP], #3</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsop_b3_i3b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor dst, byte value3 = 3)
    {
        uint raw = 0x0D9F2000U; // Encoding for: ST3_asisdlsop_b3_i3b
        raw |= (uint)Vt_B.Index;
        {
            // Write the element indexer for Vt_B.ElementIndex
            var _i_ = Vt_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 10;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (value3 != 3) throw new ArgumentOutOfRangeException(nameof(value3), $"Invalid Immediate. Expecting the fixed value 3 instead of {value3}");
        return raw;
    }
    /// <summary>
    /// Store single 3-element structure from one lane of three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.B, Vt2.B, Vt3.B}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsop_bx3_r3b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0D802000U; // Encoding for: ST3_asisdlsop_bx3_r3b
        raw |= (uint)Vt_B.Index;
        {
            // Write the element indexer for Vt_B.ElementIndex
            var _i_ = Vt_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 10;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store single 3-element structure from one lane of three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.H, Vt2.H, Vt3.H}[index], [Xn|SP], #6</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsop_h3_i3h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor dst, byte value6 = 6)
    {
        uint raw = 0x0D9F6000U; // Encoding for: ST3_asisdlsop_h3_i3h
        raw |= (uint)Vt_H.Index;
        {
            // Write the element indexer for Vt_H.ElementIndex
            var _i_ = Vt_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 11;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (value6 != 6) throw new ArgumentOutOfRangeException(nameof(value6), $"Invalid Immediate. Expecting the fixed value 6 instead of {value6}");
        return raw;
    }
    /// <summary>
    /// Store single 3-element structure from one lane of three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.H, Vt2.H, Vt3.H}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsop_hx3_r3h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0D806000U; // Encoding for: ST3_asisdlsop_hx3_r3h
        raw |= (uint)Vt_H.Index;
        {
            // Write the element indexer for Vt_H.ElementIndex
            var _i_ = Vt_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 11;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store single 3-element structure from one lane of three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.S, Vt2.S, Vt3.S}[index], [Xn|SP], #12</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsop_s3_i3s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor dst, byte value12 = 12)
    {
        uint raw = 0x0D9FA000U; // Encoding for: ST3_asisdlsop_s3_i3s
        raw |= (uint)Vt_S.Index;
        {
            // Write the element indexer for Vt_S.ElementIndex
            var _i_ = Vt_S.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 12;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (value12 != 12) throw new ArgumentOutOfRangeException(nameof(value12), $"Invalid Immediate. Expecting the fixed value 12 instead of {value12}");
        return raw;
    }
    /// <summary>
    /// Store single 3-element structure from one lane of three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.S, Vt2.S, Vt3.S}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsop_sx3_r3s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0D80A000U; // Encoding for: ST3_asisdlsop_sx3_r3s
        raw |= (uint)Vt_S.Index;
        {
            // Write the element indexer for Vt_S.ElementIndex
            var _i_ = Vt_S.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 12;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store single 3-element structure from one lane of three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.D, Vt2.D, Vt3.D}[index], [Xn|SP], #24</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsop_d3_i3d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst, byte value24 = 24)
    {
        uint raw = 0x0D9FA400U; // Encoding for: ST3_asisdlsop_d3_i3d
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (value24 != 24) throw new ArgumentOutOfRangeException(nameof(value24), $"Invalid Immediate. Expecting the fixed value 24 instead of {value24}");
        return raw;
    }
    /// <summary>
    /// Store single 3-element structure from one lane of three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.D, Vt2.D, Vt3.D}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsop_dx3_r3d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST3(Arm64RegisterGroup3<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0D80A400U; // Encoding for: ST3_asisdlsop_dx3_r3d
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C000000U; // Encoding for: ST4_asisdlse_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C000000U; // Encoding for: ST4_asisdlse_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C000400U; // Encoding for: ST4_asisdlse_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C000400U; // Encoding for: ST4_asisdlse_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0C000800U; // Encoding for: ST4_asisdlse_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C000800U; // Encoding for: ST4_asisdlse_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x4C000C00U; // Encoding for: ST4_asisdlse_r4
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
    {
        uint raw = 0x0C9F0000U; // Encoding for: ST4_asisdlsep_i4_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 64)
    {
        uint raw = 0x4C9F0000U; // Encoding for: ST4_asisdlsep_i4_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 64) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 64 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
    {
        uint raw = 0x0C9F0400U; // Encoding for: ST4_asisdlsep_i4_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 64)
    {
        uint raw = 0x4C9F0400U; // Encoding for: ST4_asisdlsep_i4_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 64) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 64 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
    {
        uint raw = 0x0C9F0800U; // Encoding for: ST4_asisdlsep_i4_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 32) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 32 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 64)
    {
        uint raw = 0x4C9F0800U; // Encoding for: ST4_asisdlsep_i4_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 64) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 64 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 64)
    {
        uint raw = 0x4C9F0C00U; // Encoding for: ST4_asisdlsep_i4_i
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (imm != 64) throw new ArgumentOutOfRangeException(nameof(imm), $"Invalid immediate value. Expecting the fixed value 64 instead of {imm}");
        return raw;
    }
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C800000U; // Encoding for: ST4_asisdlsep_r4_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C800000U; // Encoding for: ST4_asisdlsep_r4_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C800400U; // Encoding for: ST4_asisdlsep_r4_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C800400U; // Encoding for: ST4_asisdlsep_r4_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0C800800U; // Encoding for: ST4_asisdlsep_r4_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C800800U; // Encoding for: ST4_asisdlsep_r4_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x4C800C00U; // Encoding for: ST4_asisdlsep_r4_r
        raw |= (uint)Vt_T.Index;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store single 4-element structure from one lane of four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.B, Vt2.B, Vt3.B, Vt4.B}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlso_b4_4b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0D202000U; // Encoding for: ST4_asisdlso_b4_4b
        raw |= (uint)Vt_B.Index;
        {
            // Write the element indexer for Vt_B.ElementIndex
            var _i_ = Vt_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 10;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store single 4-element structure from one lane of four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.H, Vt2.H, Vt3.H, Vt4.H}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlso_h4_4h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0D206000U; // Encoding for: ST4_asisdlso_h4_4h
        raw |= (uint)Vt_H.Index;
        {
            // Write the element indexer for Vt_H.ElementIndex
            var _i_ = Vt_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 11;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store single 4-element structure from one lane of four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.S, Vt2.S, Vt3.S, Vt4.S}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlso_s4_4s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0D20A000U; // Encoding for: ST4_asisdlso_s4_4s
        raw |= (uint)Vt_S.Index;
        {
            // Write the element indexer for Vt_S.ElementIndex
            var _i_ = Vt_S.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 12;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store single 4-element structure from one lane of four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.D, Vt2.D, Vt3.D, Vt4.D}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlso_d4_4d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0D20A400U; // Encoding for: ST4_asisdlso_d4_4d
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store single 4-element structure from one lane of four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.B, Vt2.B, Vt3.B, Vt4.B}[index], [Xn|SP], #4</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsop_b4_i4b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor dst, byte value4 = 4)
    {
        uint raw = 0x0DBF2000U; // Encoding for: ST4_asisdlsop_b4_i4b
        raw |= (uint)Vt_B.Index;
        {
            // Write the element indexer for Vt_B.ElementIndex
            var _i_ = Vt_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 10;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (value4 != 4) throw new ArgumentOutOfRangeException(nameof(value4), $"Invalid Immediate. Expecting the fixed value 4 instead of {value4}");
        return raw;
    }
    /// <summary>
    /// Store single 4-element structure from one lane of four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.B, Vt2.B, Vt3.B, Vt4.B}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsop_bx4_r4b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0DA02000U; // Encoding for: ST4_asisdlsop_bx4_r4b
        raw |= (uint)Vt_B.Index;
        {
            // Write the element indexer for Vt_B.ElementIndex
            var _i_ = Vt_B.ElementIndex & 0xF;
            raw |= (uint)(_i_ & 0x7) << 10;
            _i_ >>= 3;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store single 4-element structure from one lane of four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.H, Vt2.H, Vt3.H, Vt4.H}[index], [Xn|SP], #8</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsop_h4_i4h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor dst, byte value8 = 8)
    {
        uint raw = 0x0DBF6000U; // Encoding for: ST4_asisdlsop_h4_i4h
        raw |= (uint)Vt_H.Index;
        {
            // Write the element indexer for Vt_H.ElementIndex
            var _i_ = Vt_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 11;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (value8 != 8) throw new ArgumentOutOfRangeException(nameof(value8), $"Invalid Immediate. Expecting the fixed value 8 instead of {value8}");
        return raw;
    }
    /// <summary>
    /// Store single 4-element structure from one lane of four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.H, Vt2.H, Vt3.H, Vt4.H}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsop_hx4_r4h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0DA06000U; // Encoding for: ST4_asisdlsop_hx4_r4h
        raw |= (uint)Vt_H.Index;
        {
            // Write the element indexer for Vt_H.ElementIndex
            var _i_ = Vt_H.ElementIndex & 0x7;
            raw |= (uint)(_i_ & 0x3) << 11;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store single 4-element structure from one lane of four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.S, Vt2.S, Vt3.S, Vt4.S}[index], [Xn|SP], #16</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsop_s4_i4s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor dst, byte value16 = 16)
    {
        uint raw = 0x0DBFA000U; // Encoding for: ST4_asisdlsop_s4_i4s
        raw |= (uint)Vt_S.Index;
        {
            // Write the element indexer for Vt_S.ElementIndex
            var _i_ = Vt_S.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 12;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (value16 != 16) throw new ArgumentOutOfRangeException(nameof(value16), $"Invalid Immediate. Expecting the fixed value 16 instead of {value16}");
        return raw;
    }
    /// <summary>
    /// Store single 4-element structure from one lane of four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.S, Vt2.S, Vt3.S, Vt4.S}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsop_sx4_r4s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0DA0A000U; // Encoding for: ST4_asisdlsop_sx4_r4s
        raw |= (uint)Vt_S.Index;
        {
            // Write the element indexer for Vt_S.ElementIndex
            var _i_ = Vt_S.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 12;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 30;
        }
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Store single 4-element structure from one lane of four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.D, Vt2.D, Vt3.D, Vt4.D}[index], [Xn|SP], #32</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsop_d4_i4d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst, byte value32 = 32)
    {
        uint raw = 0x0DBFA400U; // Encoding for: ST4_asisdlsop_d4_i4d
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)dst.BaseRegister.Index << 5;
        if (value32 != 32) throw new ArgumentOutOfRangeException(nameof(value32), $"Invalid Immediate. Expecting the fixed value 32 instead of {value32}");
        return raw;
    }
    /// <summary>
    /// Store single 4-element structure from one lane of four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.D, Vt2.D, Vt3.D, Vt4.D}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsop_dx4_r4d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ST4(Arm64RegisterGroup4<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
    {
        uint raw = 0x0DA0A400U; // Encoding for: ST4_asisdlsop_dx4_r4d
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)dst.BaseRegister.Index << 5;
        raw |= (uint)Xm.Index << 16;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic add in memory, without return.
    /// </summary>
    /// <remarks><code>STBFADD Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STBFADD_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STBFADD(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x3C20801FU; // Encoding for: STBFADD_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic add in memory, without return.
    /// </summary>
    /// <remarks><code>STBFADDL Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STBFADDL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STBFADDL(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x3C60801FU; // Encoding for: STBFADDL_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic maximum in memory, without return.
    /// </summary>
    /// <remarks><code>STBFMAX Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STBFMAX_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STBFMAX(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x3C20C01FU; // Encoding for: STBFMAX_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic maximum in memory, without return.
    /// </summary>
    /// <remarks><code>STBFMAXL Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STBFMAXL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STBFMAXL(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x3C60C01FU; // Encoding for: STBFMAXL_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic maximum number in memory, without return.
    /// </summary>
    /// <remarks><code>STBFMAXNM Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STBFMAXNM_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STBFMAXNM(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x3C20E01FU; // Encoding for: STBFMAXNM_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic maximum number in memory, without return.
    /// </summary>
    /// <remarks><code>STBFMAXNML Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STBFMAXNML_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STBFMAXNML(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x3C60E01FU; // Encoding for: STBFMAXNML_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic minimum in memory, without return.
    /// </summary>
    /// <remarks><code>STBFMIN Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STBFMIN_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STBFMIN(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x3C20D01FU; // Encoding for: STBFMIN_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic minimum in memory, without return.
    /// </summary>
    /// <remarks><code>STBFMINL Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STBFMINL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STBFMINL(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x3C60D01FU; // Encoding for: STBFMINL_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic minimum number in memory, without return.
    /// </summary>
    /// <remarks><code>STBFMINNM Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STBFMINNM_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STBFMINNM(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x3C20F01FU; // Encoding for: STBFMINNM_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// BFloat16 floating-point atomic minimum number in memory, without return.
    /// </summary>
    /// <remarks><code>STBFMINNML Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STBFMINNML_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STBFMINNML(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x3C60F01FU; // Encoding for: STBFMINNML_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic add in memory, without return.
    /// </summary>
    /// <remarks><code>STFADD Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFADD_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFADD(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x7C20801FU; // Encoding for: STFADD_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic add in memory, without return.
    /// </summary>
    /// <remarks><code>STFADD Ss, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFADD_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFADD(Arm64RegisterS Ss, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0xBC20801FU; // Encoding for: STFADD_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic add in memory, without return.
    /// </summary>
    /// <remarks><code>STFADD Ds, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFADD_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFADD(Arm64RegisterD Ds, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0xFC20801FU; // Encoding for: STFADD_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic add in memory, without return.
    /// </summary>
    /// <remarks><code>STFADDL Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFADDL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFADDL(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x7C60801FU; // Encoding for: STFADDL_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic add in memory, without return.
    /// </summary>
    /// <remarks><code>STFADDL Ss, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFADDL_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFADDL(Arm64RegisterS Ss, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0xBC60801FU; // Encoding for: STFADDL_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic add in memory, without return.
    /// </summary>
    /// <remarks><code>STFADDL Ds, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFADDL_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFADDL(Arm64RegisterD Ds, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0xFC60801FU; // Encoding for: STFADDL_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum in memory, without return.
    /// </summary>
    /// <remarks><code>STFMAX Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMAX_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFMAX(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x7C20C01FU; // Encoding for: STFMAX_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum in memory, without return.
    /// </summary>
    /// <remarks><code>STFMAX Ss, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMAX_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFMAX(Arm64RegisterS Ss, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0xBC20C01FU; // Encoding for: STFMAX_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum in memory, without return.
    /// </summary>
    /// <remarks><code>STFMAX Ds, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMAX_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFMAX(Arm64RegisterD Ds, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0xFC20C01FU; // Encoding for: STFMAX_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum in memory, without return.
    /// </summary>
    /// <remarks><code>STFMAXL Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMAXL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFMAXL(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x7C60C01FU; // Encoding for: STFMAXL_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum in memory, without return.
    /// </summary>
    /// <remarks><code>STFMAXL Ss, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMAXL_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFMAXL(Arm64RegisterS Ss, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0xBC60C01FU; // Encoding for: STFMAXL_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum in memory, without return.
    /// </summary>
    /// <remarks><code>STFMAXL Ds, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMAXL_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFMAXL(Arm64RegisterD Ds, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0xFC60C01FU; // Encoding for: STFMAXL_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum number in memory, without return.
    /// </summary>
    /// <remarks><code>STFMAXNM Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMAXNM_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFMAXNM(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x7C20E01FU; // Encoding for: STFMAXNM_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum number in memory, without return.
    /// </summary>
    /// <remarks><code>STFMAXNM Ss, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMAXNM_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFMAXNM(Arm64RegisterS Ss, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0xBC20E01FU; // Encoding for: STFMAXNM_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum number in memory, without return.
    /// </summary>
    /// <remarks><code>STFMAXNM Ds, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMAXNM_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFMAXNM(Arm64RegisterD Ds, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0xFC20E01FU; // Encoding for: STFMAXNM_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum number in memory, without return.
    /// </summary>
    /// <remarks><code>STFMAXNML Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMAXNML_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFMAXNML(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x7C60E01FU; // Encoding for: STFMAXNML_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum number in memory, without return.
    /// </summary>
    /// <remarks><code>STFMAXNML Ss, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMAXNML_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFMAXNML(Arm64RegisterS Ss, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0xBC60E01FU; // Encoding for: STFMAXNML_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic maximum number in memory, without return.
    /// </summary>
    /// <remarks><code>STFMAXNML Ds, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMAXNML_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFMAXNML(Arm64RegisterD Ds, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0xFC60E01FU; // Encoding for: STFMAXNML_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum in memory, without return.
    /// </summary>
    /// <remarks><code>STFMIN Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMIN_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFMIN(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x7C20D01FU; // Encoding for: STFMIN_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum in memory, without return.
    /// </summary>
    /// <remarks><code>STFMIN Ss, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMIN_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFMIN(Arm64RegisterS Ss, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0xBC20D01FU; // Encoding for: STFMIN_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum in memory, without return.
    /// </summary>
    /// <remarks><code>STFMIN Ds, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMIN_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFMIN(Arm64RegisterD Ds, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0xFC20D01FU; // Encoding for: STFMIN_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum in memory, without return.
    /// </summary>
    /// <remarks><code>STFMINL Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMINL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFMINL(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x7C60D01FU; // Encoding for: STFMINL_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum in memory, without return.
    /// </summary>
    /// <remarks><code>STFMINL Ss, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMINL_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFMINL(Arm64RegisterS Ss, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0xBC60D01FU; // Encoding for: STFMINL_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum in memory, without return.
    /// </summary>
    /// <remarks><code>STFMINL Ds, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMINL_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFMINL(Arm64RegisterD Ds, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0xFC60D01FU; // Encoding for: STFMINL_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum number in memory, without return.
    /// </summary>
    /// <remarks><code>STFMINNM Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMINNM_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFMINNM(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x7C20F01FU; // Encoding for: STFMINNM_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum number in memory, without return.
    /// </summary>
    /// <remarks><code>STFMINNM Ss, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMINNM_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFMINNM(Arm64RegisterS Ss, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0xBC20F01FU; // Encoding for: STFMINNM_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum number in memory, without return.
    /// </summary>
    /// <remarks><code>STFMINNM Ds, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMINNM_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFMINNM(Arm64RegisterD Ds, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0xFC20F01FU; // Encoding for: STFMINNM_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum number in memory, without return.
    /// </summary>
    /// <remarks><code>STFMINNML Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMINNML_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFMINNML(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x7C60F01FU; // Encoding for: STFMINNML_16
        raw |= (uint)Hs.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum number in memory, without return.
    /// </summary>
    /// <remarks><code>STFMINNML Ss, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMINNML_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFMINNML(Arm64RegisterS Ss, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0xBC60F01FU; // Encoding for: STFMINNML_32
        raw |= (uint)Ss.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Floating-point atomic minimum number in memory, without return.
    /// </summary>
    /// <remarks><code>STFMINNML Ds, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMINNML_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STFMINNML(Arm64RegisterD Ds, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0xFC60F01FU; // Encoding for: STFMINNML_64
        raw |= (uint)Ds.Index << 16;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Store-release a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>STL1 {Vt.D}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STL1_asisdlso_d1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STL1(Arm64RegisterGroup1<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst)
    {
        uint raw = 0x0D018400U; // Encoding for: STL1_asisdlso_d1
        raw |= (uint)Vt_D.Index;
        raw |= (uint)(Vt_D.ElementIndex & 0x1) << 30;
        raw |= (uint)dst.BaseRegister.Index << 5;
        return raw;
    }
    /// <summary>
    /// Subtract (vector).
    /// </summary>
    /// <remarks><code>SUB Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUB_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUB(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
    {
        uint raw = 0x7EE08400U; // Encoding for: SUB_asisdsame_only
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Subtract (vector).
    /// </summary>
    /// <remarks><code>SUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUB(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2E208400U; // Encoding for: SUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Subtract (vector).
    /// </summary>
    /// <remarks><code>SUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUB(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6E208400U; // Encoding for: SUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Subtract (vector).
    /// </summary>
    /// <remarks><code>SUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUB(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E608400U; // Encoding for: SUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Subtract (vector).
    /// </summary>
    /// <remarks><code>SUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUB(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E608400U; // Encoding for: SUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Subtract (vector).
    /// </summary>
    /// <remarks><code>SUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUB(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA08400U; // Encoding for: SUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Subtract (vector).
    /// </summary>
    /// <remarks><code>SUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUB(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA08400U; // Encoding for: SUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Subtract (vector).
    /// </summary>
    /// <remarks><code>SUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUB(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x6EE08400U; // Encoding for: SUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Subtract returning high narrow.
    /// </summary>
    /// <remarks><code>SUBHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUBHN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8H Vm_Ta)
    {
        uint raw = 0x0E206000U; // Encoding for: SUBHN_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Subtract returning high narrow.
    /// </summary>
    /// <remarks><code>SUBHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUBHN(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8H Vm_Ta)
    {
        uint raw = 0x4E206000U; // Encoding for: SUBHN_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Subtract returning high narrow.
    /// </summary>
    /// <remarks><code>SUBHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUBHN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4S Vm_Ta)
    {
        uint raw = 0x0E606000U; // Encoding for: SUBHN_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Subtract returning high narrow.
    /// </summary>
    /// <remarks><code>SUBHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUBHN(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4S Vm_Ta)
    {
        uint raw = 0x4E606000U; // Encoding for: SUBHN_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Subtract returning high narrow.
    /// </summary>
    /// <remarks><code>SUBHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUBHN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2D Vm_Ta)
    {
        uint raw = 0x0EA06000U; // Encoding for: SUBHN_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Subtract returning high narrow.
    /// </summary>
    /// <remarks><code>SUBHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUBHN(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2D Vm_Ta)
    {
        uint raw = 0x4EA06000U; // Encoding for: SUBHN_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Subtract returning high narrow.
    /// </summary>
    /// <remarks><code>SUBHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUBHN2(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8H Vm_Ta)
    {
        uint raw = 0x4E206000U; // Encoding for: SUBHN2_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Subtract returning high narrow.
    /// </summary>
    /// <remarks><code>SUBHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUBHN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8H Vm_Ta)
    {
        uint raw = 0x4E206000U; // Encoding for: SUBHN2_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Subtract returning high narrow.
    /// </summary>
    /// <remarks><code>SUBHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUBHN2(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4S Vm_Ta)
    {
        uint raw = 0x4E606000U; // Encoding for: SUBHN2_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Subtract returning high narrow.
    /// </summary>
    /// <remarks><code>SUBHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUBHN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4S Vm_Ta)
    {
        uint raw = 0x4E606000U; // Encoding for: SUBHN2_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Subtract returning high narrow.
    /// </summary>
    /// <remarks><code>SUBHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUBHN2(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2D Vm_Ta)
    {
        uint raw = 0x4EA06000U; // Encoding for: SUBHN2_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Subtract returning high narrow.
    /// </summary>
    /// <remarks><code>SUBHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUBHN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2D Vm_Ta)
    {
        uint raw = 0x4EA06000U; // Encoding for: SUBHN2_asimddiff_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Dot product with signed and unsigned integers (vector, by element).
    /// </summary>
    /// <remarks><code>SUDOT Vd.Ta, Vn.Tb, Vm.4B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUDOT_asimdelem_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUDOT(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_4B.Indexed Vm_4B)
    {
        uint raw = 0x0F00F000U; // Encoding for: SUDOT_asimdelem_d
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_4B.Index << 16;
        {
            // Write the element indexer for Vm_4B.ElementIndex
            var _i_ = Vm_4B.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Dot product with signed and unsigned integers (vector, by element).
    /// </summary>
    /// <remarks><code>SUDOT Vd.Ta, Vn.Tb, Vm.4B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUDOT_asimdelem_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUDOT(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_4B.Indexed Vm_4B)
    {
        uint raw = 0x4F00F000U; // Encoding for: SUDOT_asimdelem_d
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_4B.Index << 16;
        {
            // Write the element indexer for Vm_4B.ElementIndex
            var _i_ = Vm_4B.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Signed saturating accumulate of unsigned value.
    /// </summary>
    /// <remarks><code>SUQADD Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUQADD_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUQADD(Arm64RegisterB Vd, Arm64RegisterB Vn)
    {
        uint raw = 0x5E203800U; // Encoding for: SUQADD_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating accumulate of unsigned value.
    /// </summary>
    /// <remarks><code>SUQADD Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUQADD_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUQADD(Arm64RegisterH Vd, Arm64RegisterH Vn)
    {
        uint raw = 0x5E603800U; // Encoding for: SUQADD_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating accumulate of unsigned value.
    /// </summary>
    /// <remarks><code>SUQADD Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUQADD_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUQADD(Arm64RegisterS Vd, Arm64RegisterS Vn)
    {
        uint raw = 0x5EA03800U; // Encoding for: SUQADD_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating accumulate of unsigned value.
    /// </summary>
    /// <remarks><code>SUQADD Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUQADD_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUQADD(Arm64RegisterD Vd, Arm64RegisterD Vn)
    {
        uint raw = 0x5EE03800U; // Encoding for: SUQADD_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating accumulate of unsigned value.
    /// </summary>
    /// <remarks><code>SUQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUQADD(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
    {
        uint raw = 0x0E203800U; // Encoding for: SUQADD_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating accumulate of unsigned value.
    /// </summary>
    /// <remarks><code>SUQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUQADD(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
    {
        uint raw = 0x4E203800U; // Encoding for: SUQADD_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating accumulate of unsigned value.
    /// </summary>
    /// <remarks><code>SUQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUQADD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x0E603800U; // Encoding for: SUQADD_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating accumulate of unsigned value.
    /// </summary>
    /// <remarks><code>SUQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUQADD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x4E603800U; // Encoding for: SUQADD_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating accumulate of unsigned value.
    /// </summary>
    /// <remarks><code>SUQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUQADD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x0EA03800U; // Encoding for: SUQADD_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating accumulate of unsigned value.
    /// </summary>
    /// <remarks><code>SUQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUQADD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x4EA03800U; // Encoding for: SUQADD_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed saturating accumulate of unsigned value.
    /// </summary>
    /// <remarks><code>SUQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SUQADD(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x4EE03800U; // Encoding for: SUQADD_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed extend long.
    /// </summary>
    /// <remarks><code>SXTL Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SXTL_sshll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SXTL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb)
    {
        uint raw = 0x0F08A400U; // Encoding for: SXTL_sshll_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed extend long.
    /// </summary>
    /// <remarks><code>SXTL Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SXTL_sshll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SXTL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb)
    {
        uint raw = 0x4F08A400U; // Encoding for: SXTL_sshll_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed extend long.
    /// </summary>
    /// <remarks><code>SXTL Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SXTL_sshll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SXTL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb)
    {
        uint raw = 0x0F10A400U; // Encoding for: SXTL_sshll_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed extend long.
    /// </summary>
    /// <remarks><code>SXTL Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SXTL_sshll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SXTL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb)
    {
        uint raw = 0x4F10A400U; // Encoding for: SXTL_sshll_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed extend long.
    /// </summary>
    /// <remarks><code>SXTL Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SXTL_sshll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SXTL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb)
    {
        uint raw = 0x0F20A400U; // Encoding for: SXTL_sshll_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed extend long.
    /// </summary>
    /// <remarks><code>SXTL Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SXTL_sshll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SXTL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb)
    {
        uint raw = 0x4F20A400U; // Encoding for: SXTL_sshll_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed extend long.
    /// </summary>
    /// <remarks><code>SXTL2 Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SXTL2_sshll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SXTL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb)
    {
        uint raw = 0x4F08A400U; // Encoding for: SXTL2_sshll_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed extend long.
    /// </summary>
    /// <remarks><code>SXTL2 Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SXTL2_sshll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SXTL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb)
    {
        uint raw = 0x4F08A400U; // Encoding for: SXTL2_sshll_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed extend long.
    /// </summary>
    /// <remarks><code>SXTL2 Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SXTL2_sshll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SXTL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb)
    {
        uint raw = 0x4F10A400U; // Encoding for: SXTL2_sshll_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed extend long.
    /// </summary>
    /// <remarks><code>SXTL2 Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SXTL2_sshll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SXTL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb)
    {
        uint raw = 0x4F10A400U; // Encoding for: SXTL2_sshll_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed extend long.
    /// </summary>
    /// <remarks><code>SXTL2 Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SXTL2_sshll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SXTL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb)
    {
        uint raw = 0x4F20A400U; // Encoding for: SXTL2_sshll_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Signed extend long.
    /// </summary>
    /// <remarks><code>SXTL2 Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SXTL2_sshll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SXTL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb)
    {
        uint raw = 0x4F20A400U; // Encoding for: SXTL2_sshll_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Table vector lookup.
    /// </summary>
    /// <remarks><code>TBL Vd.Ta, {Vn.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBL_asimdtbl_l1_1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TBL(Arm64RegisterV_8B Vd_Ta, Arm64RegisterGroup1<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_8B Vm_Ta)
    {
        uint raw = 0x0E000000U; // Encoding for: TBL_asimdtbl_l1_1
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Table vector lookup.
    /// </summary>
    /// <remarks><code>TBL Vd.Ta, {Vn.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBL_asimdtbl_l1_1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TBL(Arm64RegisterV_16B Vd_Ta, Arm64RegisterGroup1<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_16B Vm_Ta)
    {
        uint raw = 0x4E000000U; // Encoding for: TBL_asimdtbl_l1_1
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Table vector lookup.
    /// </summary>
    /// <remarks><code>TBL Vd.Ta, {Vn.16B, Vn+1.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBL_asimdtbl_l2_2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TBL(Arm64RegisterV_8B Vd_Ta, Arm64RegisterGroup2<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_8B Vm_Ta)
    {
        uint raw = 0x0E002000U; // Encoding for: TBL_asimdtbl_l2_2
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Table vector lookup.
    /// </summary>
    /// <remarks><code>TBL Vd.Ta, {Vn.16B, Vn+1.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBL_asimdtbl_l2_2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TBL(Arm64RegisterV_16B Vd_Ta, Arm64RegisterGroup2<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_16B Vm_Ta)
    {
        uint raw = 0x4E002000U; // Encoding for: TBL_asimdtbl_l2_2
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Table vector lookup.
    /// </summary>
    /// <remarks><code>TBL Vd.Ta, {Vn.16B, Vn+1.16B, Vn+2.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBL_asimdtbl_l3_3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TBL(Arm64RegisterV_8B Vd_Ta, Arm64RegisterGroup3<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_8B Vm_Ta)
    {
        uint raw = 0x0E004000U; // Encoding for: TBL_asimdtbl_l3_3
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Table vector lookup.
    /// </summary>
    /// <remarks><code>TBL Vd.Ta, {Vn.16B, Vn+1.16B, Vn+2.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBL_asimdtbl_l3_3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TBL(Arm64RegisterV_16B Vd_Ta, Arm64RegisterGroup3<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_16B Vm_Ta)
    {
        uint raw = 0x4E004000U; // Encoding for: TBL_asimdtbl_l3_3
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Table vector lookup.
    /// </summary>
    /// <remarks><code>TBL Vd.Ta, {Vn.16B, Vn+1.16B, Vn+2.16B, Vn+3.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBL_asimdtbl_l4_4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TBL(Arm64RegisterV_8B Vd_Ta, Arm64RegisterGroup4<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_8B Vm_Ta)
    {
        uint raw = 0x0E006000U; // Encoding for: TBL_asimdtbl_l4_4
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Table vector lookup.
    /// </summary>
    /// <remarks><code>TBL Vd.Ta, {Vn.16B, Vn+1.16B, Vn+2.16B, Vn+3.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBL_asimdtbl_l4_4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TBL(Arm64RegisterV_16B Vd_Ta, Arm64RegisterGroup4<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_16B Vm_Ta)
    {
        uint raw = 0x4E006000U; // Encoding for: TBL_asimdtbl_l4_4
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Table vector lookup extension.
    /// </summary>
    /// <remarks><code>TBX Vd.Ta, {Vn.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBX_asimdtbl_l1_1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TBX(Arm64RegisterV_8B Vd_Ta, Arm64RegisterGroup1<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_8B Vm_Ta)
    {
        uint raw = 0x0E001000U; // Encoding for: TBX_asimdtbl_l1_1
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Table vector lookup extension.
    /// </summary>
    /// <remarks><code>TBX Vd.Ta, {Vn.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBX_asimdtbl_l1_1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TBX(Arm64RegisterV_16B Vd_Ta, Arm64RegisterGroup1<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_16B Vm_Ta)
    {
        uint raw = 0x4E001000U; // Encoding for: TBX_asimdtbl_l1_1
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Table vector lookup extension.
    /// </summary>
    /// <remarks><code>TBX Vd.Ta, {Vn.16B, Vn+1.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBX_asimdtbl_l2_2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TBX(Arm64RegisterV_8B Vd_Ta, Arm64RegisterGroup2<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_8B Vm_Ta)
    {
        uint raw = 0x0E003000U; // Encoding for: TBX_asimdtbl_l2_2
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Table vector lookup extension.
    /// </summary>
    /// <remarks><code>TBX Vd.Ta, {Vn.16B, Vn+1.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBX_asimdtbl_l2_2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TBX(Arm64RegisterV_16B Vd_Ta, Arm64RegisterGroup2<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_16B Vm_Ta)
    {
        uint raw = 0x4E003000U; // Encoding for: TBX_asimdtbl_l2_2
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Table vector lookup extension.
    /// </summary>
    /// <remarks><code>TBX Vd.Ta, {Vn.16B, Vn+1.16B, Vn+2.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBX_asimdtbl_l3_3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TBX(Arm64RegisterV_8B Vd_Ta, Arm64RegisterGroup3<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_8B Vm_Ta)
    {
        uint raw = 0x0E005000U; // Encoding for: TBX_asimdtbl_l3_3
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Table vector lookup extension.
    /// </summary>
    /// <remarks><code>TBX Vd.Ta, {Vn.16B, Vn+1.16B, Vn+2.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBX_asimdtbl_l3_3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TBX(Arm64RegisterV_16B Vd_Ta, Arm64RegisterGroup3<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_16B Vm_Ta)
    {
        uint raw = 0x4E005000U; // Encoding for: TBX_asimdtbl_l3_3
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Table vector lookup extension.
    /// </summary>
    /// <remarks><code>TBX Vd.Ta, {Vn.16B, Vn+1.16B, Vn+2.16B, Vn+3.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBX_asimdtbl_l4_4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TBX(Arm64RegisterV_8B Vd_Ta, Arm64RegisterGroup4<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_8B Vm_Ta)
    {
        uint raw = 0x0E007000U; // Encoding for: TBX_asimdtbl_l4_4
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Table vector lookup extension.
    /// </summary>
    /// <remarks><code>TBX Vd.Ta, {Vn.16B, Vn+1.16B, Vn+2.16B, Vn+3.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBX_asimdtbl_l4_4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TBX(Arm64RegisterV_16B Vd_Ta, Arm64RegisterGroup4<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_16B Vm_Ta)
    {
        uint raw = 0x4E007000U; // Encoding for: TBX_asimdtbl_l4_4
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_Ta.Index << 16;
        return raw;
    }
    /// <summary>
    /// Transpose vectors (primary).
    /// </summary>
    /// <remarks><code>TRN1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TRN1(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E002800U; // Encoding for: TRN1_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Transpose vectors (primary).
    /// </summary>
    /// <remarks><code>TRN1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TRN1(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E002800U; // Encoding for: TRN1_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Transpose vectors (primary).
    /// </summary>
    /// <remarks><code>TRN1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TRN1(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E402800U; // Encoding for: TRN1_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Transpose vectors (primary).
    /// </summary>
    /// <remarks><code>TRN1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TRN1(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E402800U; // Encoding for: TRN1_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Transpose vectors (primary).
    /// </summary>
    /// <remarks><code>TRN1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TRN1(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0E802800U; // Encoding for: TRN1_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Transpose vectors (primary).
    /// </summary>
    /// <remarks><code>TRN1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TRN1(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4E802800U; // Encoding for: TRN1_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Transpose vectors (primary).
    /// </summary>
    /// <remarks><code>TRN1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TRN1(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4EC02800U; // Encoding for: TRN1_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Transpose vectors (secondary).
    /// </summary>
    /// <remarks><code>TRN2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TRN2(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E006800U; // Encoding for: TRN2_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Transpose vectors (secondary).
    /// </summary>
    /// <remarks><code>TRN2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TRN2(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E006800U; // Encoding for: TRN2_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Transpose vectors (secondary).
    /// </summary>
    /// <remarks><code>TRN2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TRN2(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E406800U; // Encoding for: TRN2_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Transpose vectors (secondary).
    /// </summary>
    /// <remarks><code>TRN2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TRN2(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E406800U; // Encoding for: TRN2_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Transpose vectors (secondary).
    /// </summary>
    /// <remarks><code>TRN2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TRN2(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0E806800U; // Encoding for: TRN2_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Transpose vectors (secondary).
    /// </summary>
    /// <remarks><code>TRN2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TRN2(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4E806800U; // Encoding for: TRN2_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Transpose vectors (secondary).
    /// </summary>
    /// <remarks><code>TRN2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TRN2(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4EC06800U; // Encoding for: TRN2_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference and accumulate.
    /// </summary>
    /// <remarks><code>UABA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABA(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2E207C00U; // Encoding for: UABA_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference and accumulate.
    /// </summary>
    /// <remarks><code>UABA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABA(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6E207C00U; // Encoding for: UABA_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference and accumulate.
    /// </summary>
    /// <remarks><code>UABA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E607C00U; // Encoding for: UABA_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference and accumulate.
    /// </summary>
    /// <remarks><code>UABA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E607C00U; // Encoding for: UABA_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference and accumulate.
    /// </summary>
    /// <remarks><code>UABA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABA(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA07C00U; // Encoding for: UABA_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference and accumulate.
    /// </summary>
    /// <remarks><code>UABA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA07C00U; // Encoding for: UABA_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>UABAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABAL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x2E205000U; // Encoding for: UABAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>UABAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABAL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x6E205000U; // Encoding for: UABAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>UABAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x2E605000U; // Encoding for: UABAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>UABAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x6E605000U; // Encoding for: UABAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>UABAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABAL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x2EA05000U; // Encoding for: UABAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>UABAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABAL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x6EA05000U; // Encoding for: UABAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>UABAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABAL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x6E205000U; // Encoding for: UABAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>UABAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABAL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x6E205000U; // Encoding for: UABAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>UABAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x6E605000U; // Encoding for: UABAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>UABAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x6E605000U; // Encoding for: UABAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>UABAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABAL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x6EA05000U; // Encoding for: UABAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>UABAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABAL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x6EA05000U; // Encoding for: UABAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference (vector).
    /// </summary>
    /// <remarks><code>UABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABD(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2E207400U; // Encoding for: UABD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference (vector).
    /// </summary>
    /// <remarks><code>UABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABD(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6E207400U; // Encoding for: UABD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference (vector).
    /// </summary>
    /// <remarks><code>UABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E607400U; // Encoding for: UABD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference (vector).
    /// </summary>
    /// <remarks><code>UABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E607400U; // Encoding for: UABD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference (vector).
    /// </summary>
    /// <remarks><code>UABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA07400U; // Encoding for: UABD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference (vector).
    /// </summary>
    /// <remarks><code>UABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA07400U; // Encoding for: UABD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference long.
    /// </summary>
    /// <remarks><code>UABDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABDL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x2E207000U; // Encoding for: UABDL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference long.
    /// </summary>
    /// <remarks><code>UABDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABDL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x6E207000U; // Encoding for: UABDL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference long.
    /// </summary>
    /// <remarks><code>UABDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABDL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x2E607000U; // Encoding for: UABDL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference long.
    /// </summary>
    /// <remarks><code>UABDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABDL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x6E607000U; // Encoding for: UABDL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference long.
    /// </summary>
    /// <remarks><code>UABDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABDL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x2EA07000U; // Encoding for: UABDL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference long.
    /// </summary>
    /// <remarks><code>UABDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABDL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x6EA07000U; // Encoding for: UABDL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference long.
    /// </summary>
    /// <remarks><code>UABDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABDL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x6E207000U; // Encoding for: UABDL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference long.
    /// </summary>
    /// <remarks><code>UABDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABDL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x6E207000U; // Encoding for: UABDL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference long.
    /// </summary>
    /// <remarks><code>UABDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABDL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x6E607000U; // Encoding for: UABDL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference long.
    /// </summary>
    /// <remarks><code>UABDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABDL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x6E607000U; // Encoding for: UABDL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference long.
    /// </summary>
    /// <remarks><code>UABDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABDL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x6EA07000U; // Encoding for: UABDL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned absolute difference long.
    /// </summary>
    /// <remarks><code>UABDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UABDL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x6EA07000U; // Encoding for: UABDL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned add and accumulate long pairwise.
    /// </summary>
    /// <remarks><code>UADALP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADALP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADALP(Arm64RegisterV_4H Vd_Ta, Arm64RegisterV_8B Vn_Tb)
    {
        uint raw = 0x2E206800U; // Encoding for: UADALP_asimdmisc_p
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned add and accumulate long pairwise.
    /// </summary>
    /// <remarks><code>UADALP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADALP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADALP(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb)
    {
        uint raw = 0x6E206800U; // Encoding for: UADALP_asimdmisc_p
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned add and accumulate long pairwise.
    /// </summary>
    /// <remarks><code>UADALP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADALP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADALP(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_4H Vn_Tb)
    {
        uint raw = 0x2E606800U; // Encoding for: UADALP_asimdmisc_p
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned add and accumulate long pairwise.
    /// </summary>
    /// <remarks><code>UADALP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADALP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADALP(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb)
    {
        uint raw = 0x6E606800U; // Encoding for: UADALP_asimdmisc_p
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned add and accumulate long pairwise.
    /// </summary>
    /// <remarks><code>UADALP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADALP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADALP(Arm64RegisterV_1D Vd_Ta, Arm64RegisterV_2S Vn_Tb)
    {
        uint raw = 0x2EA06800U; // Encoding for: UADALP_asimdmisc_p
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned add and accumulate long pairwise.
    /// </summary>
    /// <remarks><code>UADALP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADALP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADALP(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb)
    {
        uint raw = 0x6EA06800U; // Encoding for: UADALP_asimdmisc_p
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned add long (vector).
    /// </summary>
    /// <remarks><code>UADDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x2E200000U; // Encoding for: UADDL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned add long (vector).
    /// </summary>
    /// <remarks><code>UADDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x6E200000U; // Encoding for: UADDL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned add long (vector).
    /// </summary>
    /// <remarks><code>UADDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x2E600000U; // Encoding for: UADDL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned add long (vector).
    /// </summary>
    /// <remarks><code>UADDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x6E600000U; // Encoding for: UADDL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned add long (vector).
    /// </summary>
    /// <remarks><code>UADDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x2EA00000U; // Encoding for: UADDL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned add long (vector).
    /// </summary>
    /// <remarks><code>UADDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x6EA00000U; // Encoding for: UADDL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned add long (vector).
    /// </summary>
    /// <remarks><code>UADDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x6E200000U; // Encoding for: UADDL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned add long (vector).
    /// </summary>
    /// <remarks><code>UADDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x6E200000U; // Encoding for: UADDL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned add long (vector).
    /// </summary>
    /// <remarks><code>UADDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x6E600000U; // Encoding for: UADDL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned add long (vector).
    /// </summary>
    /// <remarks><code>UADDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x6E600000U; // Encoding for: UADDL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned add long (vector).
    /// </summary>
    /// <remarks><code>UADDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x6EA00000U; // Encoding for: UADDL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned add long (vector).
    /// </summary>
    /// <remarks><code>UADDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x6EA00000U; // Encoding for: UADDL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned add long pairwise.
    /// </summary>
    /// <remarks><code>UADDLP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDLP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDLP(Arm64RegisterV_4H Vd_Ta, Arm64RegisterV_8B Vn_Tb)
    {
        uint raw = 0x2E202800U; // Encoding for: UADDLP_asimdmisc_p
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned add long pairwise.
    /// </summary>
    /// <remarks><code>UADDLP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDLP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDLP(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb)
    {
        uint raw = 0x6E202800U; // Encoding for: UADDLP_asimdmisc_p
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned add long pairwise.
    /// </summary>
    /// <remarks><code>UADDLP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDLP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDLP(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_4H Vn_Tb)
    {
        uint raw = 0x2E602800U; // Encoding for: UADDLP_asimdmisc_p
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned add long pairwise.
    /// </summary>
    /// <remarks><code>UADDLP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDLP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDLP(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb)
    {
        uint raw = 0x6E602800U; // Encoding for: UADDLP_asimdmisc_p
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned add long pairwise.
    /// </summary>
    /// <remarks><code>UADDLP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDLP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDLP(Arm64RegisterV_1D Vd_Ta, Arm64RegisterV_2S Vn_Tb)
    {
        uint raw = 0x2EA02800U; // Encoding for: UADDLP_asimdmisc_p
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned add long pairwise.
    /// </summary>
    /// <remarks><code>UADDLP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDLP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDLP(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb)
    {
        uint raw = 0x6EA02800U; // Encoding for: UADDLP_asimdmisc_p
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned sum long across vector.
    /// </summary>
    /// <remarks><code>UADDLV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDLV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDLV(Arm64RegisterH Vd, Arm64RegisterV_8B Vn_T)
    {
        uint raw = 0x2E303800U; // Encoding for: UADDLV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned sum long across vector.
    /// </summary>
    /// <remarks><code>UADDLV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDLV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDLV(Arm64RegisterH Vd, Arm64RegisterV_16B Vn_T)
    {
        uint raw = 0x6E303800U; // Encoding for: UADDLV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned sum long across vector.
    /// </summary>
    /// <remarks><code>UADDLV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDLV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDLV(Arm64RegisterS Vd, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x2E703800U; // Encoding for: UADDLV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned sum long across vector.
    /// </summary>
    /// <remarks><code>UADDLV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDLV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDLV(Arm64RegisterS Vd, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x6E703800U; // Encoding for: UADDLV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned sum long across vector.
    /// </summary>
    /// <remarks><code>UADDLV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDLV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDLV(Arm64RegisterD Vd, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x6EB03800U; // Encoding for: UADDLV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned add wide.
    /// </summary>
    /// <remarks><code>UADDW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDW(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x2E201000U; // Encoding for: UADDW_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned add wide.
    /// </summary>
    /// <remarks><code>UADDW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDW(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x6E201000U; // Encoding for: UADDW_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned add wide.
    /// </summary>
    /// <remarks><code>UADDW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDW(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x2E601000U; // Encoding for: UADDW_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned add wide.
    /// </summary>
    /// <remarks><code>UADDW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDW(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x6E601000U; // Encoding for: UADDW_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned add wide.
    /// </summary>
    /// <remarks><code>UADDW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDW(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x2EA01000U; // Encoding for: UADDW_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned add wide.
    /// </summary>
    /// <remarks><code>UADDW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDW(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x6EA01000U; // Encoding for: UADDW_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned add wide.
    /// </summary>
    /// <remarks><code>UADDW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDW2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x6E201000U; // Encoding for: UADDW2_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned add wide.
    /// </summary>
    /// <remarks><code>UADDW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDW2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x6E201000U; // Encoding for: UADDW2_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned add wide.
    /// </summary>
    /// <remarks><code>UADDW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDW2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x6E601000U; // Encoding for: UADDW2_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned add wide.
    /// </summary>
    /// <remarks><code>UADDW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDW2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x6E601000U; // Encoding for: UADDW2_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned add wide.
    /// </summary>
    /// <remarks><code>UADDW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDW2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x6EA01000U; // Encoding for: UADDW2_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned add wide.
    /// </summary>
    /// <remarks><code>UADDW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UADDW2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x6EA01000U; // Encoding for: UADDW2_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd, Vn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asisdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterH Vd, Arm64RegisterH Vn, byte fbits)
    {
        uint raw = 0x7F10E400U; // Encoding for: UCVTF_asisdshf_c
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd, Vn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asisdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterS Vd, Arm64RegisterS Vn, byte fbits)
    {
        uint raw = 0x7F20E400U; // Encoding for: UCVTF_asisdshf_c
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd, Vn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asisdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterD Vd, Arm64RegisterD Vn, byte fbits)
    {
        uint raw = 0x7F40E400U; // Encoding for: UCVTF_asisdshf_c
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte fbits)
    {
        uint raw = 0x2F10E400U; // Encoding for: UCVTF_asimdshf_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte fbits)
    {
        uint raw = 0x6F10E400U; // Encoding for: UCVTF_asimdshf_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte fbits)
    {
        uint raw = 0x2F20E400U; // Encoding for: UCVTF_asimdshf_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte fbits)
    {
        uint raw = 0x6F20E400U; // Encoding for: UCVTF_asimdshf_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte fbits)
    {
        uint raw = 0x6F40E400U; // Encoding for: UCVTF_asimdshf_c
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(fbits & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterH Hd, Arm64RegisterH Hn)
    {
        uint raw = 0x7E79D800U; // Encoding for: UCVTF_asisdmiscfp16_r
        raw |= (uint)Hd.Index;
        raw |= (uint)Hn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterS Vd, Arm64RegisterS Vn)
    {
        uint raw = 0x7E21D800U; // Encoding for: UCVTF_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterD Vd, Arm64RegisterD Vn)
    {
        uint raw = 0x7E61D800U; // Encoding for: UCVTF_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x2E79D800U; // Encoding for: UCVTF_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x6E79D800U; // Encoding for: UCVTF_asimdmiscfp16_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x2E21D800U; // Encoding for: UCVTF_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x6E21D800U; // Encoding for: UCVTF_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UCVTF(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x6E61D800U; // Encoding for: UCVTF_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Dot product unsigned arithmetic (vector, by element).
    /// </summary>
    /// <remarks><code>UDOT Vd.Ta, Vn.Tb, Vm.4B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UDOT_asimdelem_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UDOT(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_4B.Indexed Vm_4B)
    {
        uint raw = 0x2F00E000U; // Encoding for: UDOT_asimdelem_d
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_4B.Index << 16;
        {
            // Write the element indexer for Vm_4B.ElementIndex
            var _i_ = Vm_4B.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Dot product unsigned arithmetic (vector, by element).
    /// </summary>
    /// <remarks><code>UDOT Vd.Ta, Vn.Tb, Vm.4B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UDOT_asimdelem_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UDOT(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_4B.Indexed Vm_4B)
    {
        uint raw = 0x6F00E000U; // Encoding for: UDOT_asimdelem_d
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_4B.Index << 16;
        {
            // Write the element indexer for Vm_4B.ElementIndex
            var _i_ = Vm_4B.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Dot product unsigned arithmetic (vector).
    /// </summary>
    /// <remarks><code>UDOT Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UDOT_asimdsame2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UDOT(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x2E009400U; // Encoding for: UDOT_asimdsame2_d
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Dot product unsigned arithmetic (vector).
    /// </summary>
    /// <remarks><code>UDOT Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UDOT_asimdsame2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UDOT(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x6E009400U; // Encoding for: UDOT_asimdsame2_d
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned halving add.
    /// </summary>
    /// <remarks><code>UHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UHADD(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2E200400U; // Encoding for: UHADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned halving add.
    /// </summary>
    /// <remarks><code>UHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UHADD(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6E200400U; // Encoding for: UHADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned halving add.
    /// </summary>
    /// <remarks><code>UHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UHADD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E600400U; // Encoding for: UHADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned halving add.
    /// </summary>
    /// <remarks><code>UHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UHADD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E600400U; // Encoding for: UHADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned halving add.
    /// </summary>
    /// <remarks><code>UHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UHADD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA00400U; // Encoding for: UHADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned halving add.
    /// </summary>
    /// <remarks><code>UHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UHADD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA00400U; // Encoding for: UHADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned halving subtract.
    /// </summary>
    /// <remarks><code>UHSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UHSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UHSUB(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2E202400U; // Encoding for: UHSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned halving subtract.
    /// </summary>
    /// <remarks><code>UHSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UHSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UHSUB(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6E202400U; // Encoding for: UHSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned halving subtract.
    /// </summary>
    /// <remarks><code>UHSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UHSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UHSUB(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E602400U; // Encoding for: UHSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned halving subtract.
    /// </summary>
    /// <remarks><code>UHSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UHSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UHSUB(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E602400U; // Encoding for: UHSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned halving subtract.
    /// </summary>
    /// <remarks><code>UHSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UHSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UHSUB(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA02400U; // Encoding for: UHSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned halving subtract.
    /// </summary>
    /// <remarks><code>UHSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UHSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UHSUB(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA02400U; // Encoding for: UHSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned maximum (vector).
    /// </summary>
    /// <remarks><code>UMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMAX(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2E206400U; // Encoding for: UMAX_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned maximum (vector).
    /// </summary>
    /// <remarks><code>UMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMAX(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6E206400U; // Encoding for: UMAX_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned maximum (vector).
    /// </summary>
    /// <remarks><code>UMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMAX(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E606400U; // Encoding for: UMAX_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned maximum (vector).
    /// </summary>
    /// <remarks><code>UMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMAX(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E606400U; // Encoding for: UMAX_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned maximum (vector).
    /// </summary>
    /// <remarks><code>UMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMAX(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA06400U; // Encoding for: UMAX_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned maximum (vector).
    /// </summary>
    /// <remarks><code>UMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMAX(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA06400U; // Encoding for: UMAX_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned maximum pairwise.
    /// </summary>
    /// <remarks><code>UMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMAXP(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2E20A400U; // Encoding for: UMAXP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned maximum pairwise.
    /// </summary>
    /// <remarks><code>UMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMAXP(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6E20A400U; // Encoding for: UMAXP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned maximum pairwise.
    /// </summary>
    /// <remarks><code>UMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMAXP(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E60A400U; // Encoding for: UMAXP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned maximum pairwise.
    /// </summary>
    /// <remarks><code>UMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMAXP(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E60A400U; // Encoding for: UMAXP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned maximum pairwise.
    /// </summary>
    /// <remarks><code>UMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMAXP(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA0A400U; // Encoding for: UMAXP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned maximum pairwise.
    /// </summary>
    /// <remarks><code>UMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMAXP(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA0A400U; // Encoding for: UMAXP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned maximum across vector.
    /// </summary>
    /// <remarks><code>UMAXV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAXV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMAXV(Arm64RegisterB Vd, Arm64RegisterV_8B Vn_T)
    {
        uint raw = 0x2E30A800U; // Encoding for: UMAXV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned maximum across vector.
    /// </summary>
    /// <remarks><code>UMAXV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAXV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMAXV(Arm64RegisterB Vd, Arm64RegisterV_16B Vn_T)
    {
        uint raw = 0x6E30A800U; // Encoding for: UMAXV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned maximum across vector.
    /// </summary>
    /// <remarks><code>UMAXV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAXV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMAXV(Arm64RegisterH Vd, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x2E70A800U; // Encoding for: UMAXV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned maximum across vector.
    /// </summary>
    /// <remarks><code>UMAXV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAXV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMAXV(Arm64RegisterH Vd, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x6E70A800U; // Encoding for: UMAXV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned maximum across vector.
    /// </summary>
    /// <remarks><code>UMAXV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAXV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMAXV(Arm64RegisterS Vd, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x6EB0A800U; // Encoding for: UMAXV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned minimum (vector).
    /// </summary>
    /// <remarks><code>UMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMIN(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2E206C00U; // Encoding for: UMIN_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned minimum (vector).
    /// </summary>
    /// <remarks><code>UMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMIN(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6E206C00U; // Encoding for: UMIN_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned minimum (vector).
    /// </summary>
    /// <remarks><code>UMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMIN(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E606C00U; // Encoding for: UMIN_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned minimum (vector).
    /// </summary>
    /// <remarks><code>UMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMIN(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E606C00U; // Encoding for: UMIN_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned minimum (vector).
    /// </summary>
    /// <remarks><code>UMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMIN(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA06C00U; // Encoding for: UMIN_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned minimum (vector).
    /// </summary>
    /// <remarks><code>UMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMIN(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA06C00U; // Encoding for: UMIN_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned minimum pairwise.
    /// </summary>
    /// <remarks><code>UMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMINP(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2E20AC00U; // Encoding for: UMINP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned minimum pairwise.
    /// </summary>
    /// <remarks><code>UMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMINP(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6E20AC00U; // Encoding for: UMINP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned minimum pairwise.
    /// </summary>
    /// <remarks><code>UMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMINP(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E60AC00U; // Encoding for: UMINP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned minimum pairwise.
    /// </summary>
    /// <remarks><code>UMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMINP(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E60AC00U; // Encoding for: UMINP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned minimum pairwise.
    /// </summary>
    /// <remarks><code>UMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMINP(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA0AC00U; // Encoding for: UMINP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned minimum pairwise.
    /// </summary>
    /// <remarks><code>UMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMINP(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA0AC00U; // Encoding for: UMINP_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned minimum across vector.
    /// </summary>
    /// <remarks><code>UMINV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMINV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMINV(Arm64RegisterB Vd, Arm64RegisterV_8B Vn_T)
    {
        uint raw = 0x2E31A800U; // Encoding for: UMINV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned minimum across vector.
    /// </summary>
    /// <remarks><code>UMINV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMINV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMINV(Arm64RegisterB Vd, Arm64RegisterV_16B Vn_T)
    {
        uint raw = 0x6E31A800U; // Encoding for: UMINV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned minimum across vector.
    /// </summary>
    /// <remarks><code>UMINV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMINV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMINV(Arm64RegisterH Vd, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x2E71A800U; // Encoding for: UMINV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned minimum across vector.
    /// </summary>
    /// <remarks><code>UMINV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMINV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMINV(Arm64RegisterH Vd, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x6E71A800U; // Encoding for: UMINV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned minimum across vector.
    /// </summary>
    /// <remarks><code>UMINV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMINV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMINV(Arm64RegisterS Vd, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x6EB1A800U; // Encoding for: UMINV_asimdall_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-add long (vector, by element).
    /// </summary>
    /// <remarks><code>UMLAL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x2F402000U; // Encoding for: UMLAL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-add long (vector, by element).
    /// </summary>
    /// <remarks><code>UMLAL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x6F402000U; // Encoding for: UMLAL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-add long (vector, by element).
    /// </summary>
    /// <remarks><code>UMLAL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLAL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x2F802000U; // Encoding for: UMLAL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-add long (vector, by element).
    /// </summary>
    /// <remarks><code>UMLAL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLAL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x6F802000U; // Encoding for: UMLAL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-add long (vector).
    /// </summary>
    /// <remarks><code>UMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLAL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x2E208000U; // Encoding for: UMLAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-add long (vector).
    /// </summary>
    /// <remarks><code>UMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLAL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x6E208000U; // Encoding for: UMLAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-add long (vector).
    /// </summary>
    /// <remarks><code>UMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x2E608000U; // Encoding for: UMLAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-add long (vector).
    /// </summary>
    /// <remarks><code>UMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x6E608000U; // Encoding for: UMLAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-add long (vector).
    /// </summary>
    /// <remarks><code>UMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLAL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x2EA08000U; // Encoding for: UMLAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-add long (vector).
    /// </summary>
    /// <remarks><code>UMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLAL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x6EA08000U; // Encoding for: UMLAL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-add long (vector, by element).
    /// </summary>
    /// <remarks><code>UMLAL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x6F402000U; // Encoding for: UMLAL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-add long (vector, by element).
    /// </summary>
    /// <remarks><code>UMLAL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x6F402000U; // Encoding for: UMLAL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-add long (vector, by element).
    /// </summary>
    /// <remarks><code>UMLAL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLAL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x6F802000U; // Encoding for: UMLAL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-add long (vector, by element).
    /// </summary>
    /// <remarks><code>UMLAL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLAL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x6F802000U; // Encoding for: UMLAL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-add long (vector).
    /// </summary>
    /// <remarks><code>UMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLAL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x6E208000U; // Encoding for: UMLAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-add long (vector).
    /// </summary>
    /// <remarks><code>UMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLAL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x6E208000U; // Encoding for: UMLAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-add long (vector).
    /// </summary>
    /// <remarks><code>UMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x6E608000U; // Encoding for: UMLAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-add long (vector).
    /// </summary>
    /// <remarks><code>UMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x6E608000U; // Encoding for: UMLAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-add long (vector).
    /// </summary>
    /// <remarks><code>UMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLAL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x6EA08000U; // Encoding for: UMLAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-add long (vector).
    /// </summary>
    /// <remarks><code>UMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLAL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x6EA08000U; // Encoding for: UMLAL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-subtract long (vector, by element).
    /// </summary>
    /// <remarks><code>UMLSL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLSL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x2F406000U; // Encoding for: UMLSL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-subtract long (vector, by element).
    /// </summary>
    /// <remarks><code>UMLSL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLSL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x6F406000U; // Encoding for: UMLSL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-subtract long (vector, by element).
    /// </summary>
    /// <remarks><code>UMLSL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLSL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x2F806000U; // Encoding for: UMLSL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-subtract long (vector, by element).
    /// </summary>
    /// <remarks><code>UMLSL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLSL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x6F806000U; // Encoding for: UMLSL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>UMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLSL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x2E20A000U; // Encoding for: UMLSL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>UMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLSL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x6E20A000U; // Encoding for: UMLSL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>UMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLSL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x2E60A000U; // Encoding for: UMLSL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>UMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLSL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x6E60A000U; // Encoding for: UMLSL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>UMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLSL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x2EA0A000U; // Encoding for: UMLSL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>UMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLSL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x6EA0A000U; // Encoding for: UMLSL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-subtract long (vector, by element).
    /// </summary>
    /// <remarks><code>UMLSL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLSL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x6F406000U; // Encoding for: UMLSL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-subtract long (vector, by element).
    /// </summary>
    /// <remarks><code>UMLSL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLSL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x6F406000U; // Encoding for: UMLSL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-subtract long (vector, by element).
    /// </summary>
    /// <remarks><code>UMLSL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLSL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x6F806000U; // Encoding for: UMLSL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-subtract long (vector, by element).
    /// </summary>
    /// <remarks><code>UMLSL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLSL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x6F806000U; // Encoding for: UMLSL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>UMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLSL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x6E20A000U; // Encoding for: UMLSL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>UMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLSL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x6E20A000U; // Encoding for: UMLSL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>UMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLSL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x6E60A000U; // Encoding for: UMLSL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>UMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLSL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x6E60A000U; // Encoding for: UMLSL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>UMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLSL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x6EA0A000U; // Encoding for: UMLSL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>UMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMLSL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x6EA0A000U; // Encoding for: UMLSL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned 8-bit integer matrix multiply-accumulate (vector).
    /// </summary>
    /// <remarks><code>UMMLA Vd.4S, Vn.16B, Vm.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMMLA_asimdsame2_g), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMMLA(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B)
    {
        uint raw = 0x6E80A400U; // Encoding for: UMMLA_asimdsame2_g
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_16B.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned move vector element to general-purpose register.
    /// </summary>
    /// <remarks><code>UMOV Wd, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMOV_asimdins_w_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMOV(Arm64RegisterW Wd, Arm64RegisterV_B.Indexed Vn_Ts)
    {
        uint raw = 0x0E013C00U; // Encoding for: UMOV_asimdins_w_w
        raw |= (uint)Wd.Index;
        raw |= (uint)Vn_Ts.Index << 5;
        raw |= (uint)(Vn_Ts.ElementIndex & 0xF) << 17;
        return raw;
    }
    /// <summary>
    /// Unsigned move vector element to general-purpose register.
    /// </summary>
    /// <remarks><code>UMOV Wd, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMOV_asimdins_w_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMOV(Arm64RegisterW Wd, Arm64RegisterV_H.Indexed Vn_Ts)
    {
        uint raw = 0x0E023C00U; // Encoding for: UMOV_asimdins_w_w
        raw |= (uint)Wd.Index;
        raw |= (uint)Vn_Ts.Index << 5;
        raw |= (uint)(Vn_Ts.ElementIndex & 0x7) << 18;
        return raw;
    }
    /// <summary>
    /// Unsigned move vector element to general-purpose register.
    /// </summary>
    /// <remarks><code>UMOV Wd, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMOV_asimdins_w_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMOV(Arm64RegisterW Wd, Arm64RegisterV_S.Indexed Vn_Ts)
    {
        uint raw = 0x0E043C00U; // Encoding for: UMOV_asimdins_w_w
        raw |= (uint)Wd.Index;
        raw |= (uint)Vn_Ts.Index << 5;
        raw |= (uint)(Vn_Ts.ElementIndex & 0x3) << 19;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply long (vector, by element).
    /// </summary>
    /// <remarks><code>UMULL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMULL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x2F40A000U; // Encoding for: UMULL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Unsigned multiply long (vector, by element).
    /// </summary>
    /// <remarks><code>UMULL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMULL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x6F40A000U; // Encoding for: UMULL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Unsigned multiply long (vector, by element).
    /// </summary>
    /// <remarks><code>UMULL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMULL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x2F80A000U; // Encoding for: UMULL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Unsigned multiply long (vector, by element).
    /// </summary>
    /// <remarks><code>UMULL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMULL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x6F80A000U; // Encoding for: UMULL_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Unsigned multiply long (vector).
    /// </summary>
    /// <remarks><code>UMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMULL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x2E20C000U; // Encoding for: UMULL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply long (vector).
    /// </summary>
    /// <remarks><code>UMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMULL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x6E20C000U; // Encoding for: UMULL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply long (vector).
    /// </summary>
    /// <remarks><code>UMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMULL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x2E60C000U; // Encoding for: UMULL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply long (vector).
    /// </summary>
    /// <remarks><code>UMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMULL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x6E60C000U; // Encoding for: UMULL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply long (vector).
    /// </summary>
    /// <remarks><code>UMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMULL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x2EA0C000U; // Encoding for: UMULL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply long (vector).
    /// </summary>
    /// <remarks><code>UMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMULL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x6EA0C000U; // Encoding for: UMULL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply long (vector, by element).
    /// </summary>
    /// <remarks><code>UMULL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMULL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x6F40A000U; // Encoding for: UMULL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Unsigned multiply long (vector, by element).
    /// </summary>
    /// <remarks><code>UMULL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMULL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
    {
        uint raw = 0x6F40A000U; // Encoding for: UMULL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0xF) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x3) << 20;
            _i_ >>= 2;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Unsigned multiply long (vector, by element).
    /// </summary>
    /// <remarks><code>UMULL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMULL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x6F80A000U; // Encoding for: UMULL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Unsigned multiply long (vector, by element).
    /// </summary>
    /// <remarks><code>UMULL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMULL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
    {
        uint raw = 0x6F80A000U; // Encoding for: UMULL2_asimdelem_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(Vm_Ts.Index & 0x1F) << 16;
        {
            // Write the element indexer for Vm_Ts.ElementIndex
            var _i_ = Vm_Ts.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Unsigned multiply long (vector).
    /// </summary>
    /// <remarks><code>UMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMULL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x6E20C000U; // Encoding for: UMULL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply long (vector).
    /// </summary>
    /// <remarks><code>UMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMULL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x6E20C000U; // Encoding for: UMULL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply long (vector).
    /// </summary>
    /// <remarks><code>UMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMULL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x6E60C000U; // Encoding for: UMULL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply long (vector).
    /// </summary>
    /// <remarks><code>UMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMULL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x6E60C000U; // Encoding for: UMULL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply long (vector).
    /// </summary>
    /// <remarks><code>UMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMULL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x6EA0C000U; // Encoding for: UMULL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned multiply long (vector).
    /// </summary>
    /// <remarks><code>UMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UMULL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x6EA0C000U; // Encoding for: UMULL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating add.
    /// </summary>
    /// <remarks><code>UQADD Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQADD_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQADD(Arm64RegisterB Vd, Arm64RegisterB Vn, Arm64RegisterB Vm)
    {
        uint raw = 0x7E200C00U; // Encoding for: UQADD_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating add.
    /// </summary>
    /// <remarks><code>UQADD Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQADD_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQADD(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterH Vm)
    {
        uint raw = 0x7E600C00U; // Encoding for: UQADD_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating add.
    /// </summary>
    /// <remarks><code>UQADD Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQADD_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQADD(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
    {
        uint raw = 0x7EA00C00U; // Encoding for: UQADD_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating add.
    /// </summary>
    /// <remarks><code>UQADD Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQADD_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQADD(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
    {
        uint raw = 0x7EE00C00U; // Encoding for: UQADD_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating add.
    /// </summary>
    /// <remarks><code>UQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQADD(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2E200C00U; // Encoding for: UQADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating add.
    /// </summary>
    /// <remarks><code>UQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQADD(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6E200C00U; // Encoding for: UQADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating add.
    /// </summary>
    /// <remarks><code>UQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQADD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E600C00U; // Encoding for: UQADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating add.
    /// </summary>
    /// <remarks><code>UQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQADD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E600C00U; // Encoding for: UQADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating add.
    /// </summary>
    /// <remarks><code>UQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQADD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA00C00U; // Encoding for: UQADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating add.
    /// </summary>
    /// <remarks><code>UQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQADD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA00C00U; // Encoding for: UQADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating add.
    /// </summary>
    /// <remarks><code>UQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQADD(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x6EE00C00U; // Encoding for: UQADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>UQRSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHL(Arm64RegisterB Vd, Arm64RegisterB Vn, Arm64RegisterB Vm)
    {
        uint raw = 0x7E205C00U; // Encoding for: UQRSHL_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>UQRSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHL(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterH Vm)
    {
        uint raw = 0x7E605C00U; // Encoding for: UQRSHL_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>UQRSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHL(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
    {
        uint raw = 0x7EA05C00U; // Encoding for: UQRSHL_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>UQRSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHL(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
    {
        uint raw = 0x7EE05C00U; // Encoding for: UQRSHL_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>UQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2E205C00U; // Encoding for: UQRSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>UQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6E205C00U; // Encoding for: UQRSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>UQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E605C00U; // Encoding for: UQRSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>UQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E605C00U; // Encoding for: UQRSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>UQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA05C00U; // Encoding for: UQRSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>UQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA05C00U; // Encoding for: UQRSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>UQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x6EE05C00U; // Encoding for: UQRSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQRSHRN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHRN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHRN(Arm64RegisterB Vbd, Arm64RegisterH Van, byte shift)
    {
        uint raw = 0x7F089C00U; // Encoding for: UQRSHRN_asisdshf_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQRSHRN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHRN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHRN(Arm64RegisterH Vbd, Arm64RegisterS Van, byte shift)
    {
        uint raw = 0x7F109C00U; // Encoding for: UQRSHRN_asisdshf_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQRSHRN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHRN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHRN(Arm64RegisterS Vbd, Arm64RegisterD Van, byte shift)
    {
        uint raw = 0x7F209C00U; // Encoding for: UQRSHRN_asisdshf_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQRSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHRN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x2F089C00U; // Encoding for: UQRSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQRSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHRN(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x6F089C00U; // Encoding for: UQRSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQRSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHRN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x2F109C00U; // Encoding for: UQRSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQRSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHRN(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x6F109C00U; // Encoding for: UQRSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQRSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHRN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x2F209C00U; // Encoding for: UQRSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQRSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHRN(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x6F209C00U; // Encoding for: UQRSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQRSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHRN2(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x6F089C00U; // Encoding for: UQRSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQRSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHRN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x6F089C00U; // Encoding for: UQRSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQRSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHRN2(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x6F109C00U; // Encoding for: UQRSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQRSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHRN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x6F109C00U; // Encoding for: UQRSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQRSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHRN2(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x6F209C00U; // Encoding for: UQRSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQRSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQRSHRN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x6F209C00U; // Encoding for: UQRSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>UQSHL Vd, Vn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHL(Arm64RegisterB Vd, Arm64RegisterB Vn, byte shift)
    {
        uint raw = 0x7F087400U; // Encoding for: UQSHL_asisdshf_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>UQSHL Vd, Vn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHL(Arm64RegisterH Vd, Arm64RegisterH Vn, byte shift)
    {
        uint raw = 0x7F107400U; // Encoding for: UQSHL_asisdshf_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>UQSHL Vd, Vn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHL(Arm64RegisterS Vd, Arm64RegisterS Vn, byte shift)
    {
        uint raw = 0x7F207400U; // Encoding for: UQSHL_asisdshf_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>UQSHL Vd, Vn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHL(Arm64RegisterD Vd, Arm64RegisterD Vn, byte shift)
    {
        uint raw = 0x7F407400U; // Encoding for: UQSHL_asisdshf_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
    {
        uint raw = 0x2F087400U; // Encoding for: UQSHL_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
    {
        uint raw = 0x6F087400U; // Encoding for: UQSHL_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
    {
        uint raw = 0x2F107400U; // Encoding for: UQSHL_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
    {
        uint raw = 0x6F107400U; // Encoding for: UQSHL_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
    {
        uint raw = 0x2F207400U; // Encoding for: UQSHL_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
    {
        uint raw = 0x6F207400U; // Encoding for: UQSHL_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
    {
        uint raw = 0x6F407400U; // Encoding for: UQSHL_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift left (register).
    /// </summary>
    /// <remarks><code>UQSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHL(Arm64RegisterB Vd, Arm64RegisterB Vn, Arm64RegisterB Vm)
    {
        uint raw = 0x7E204C00U; // Encoding for: UQSHL_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift left (register).
    /// </summary>
    /// <remarks><code>UQSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHL(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterH Vm)
    {
        uint raw = 0x7E604C00U; // Encoding for: UQSHL_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift left (register).
    /// </summary>
    /// <remarks><code>UQSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHL(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
    {
        uint raw = 0x7EA04C00U; // Encoding for: UQSHL_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift left (register).
    /// </summary>
    /// <remarks><code>UQSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHL(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
    {
        uint raw = 0x7EE04C00U; // Encoding for: UQSHL_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift left (register).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2E204C00U; // Encoding for: UQSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift left (register).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6E204C00U; // Encoding for: UQSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift left (register).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E604C00U; // Encoding for: UQSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift left (register).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E604C00U; // Encoding for: UQSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift left (register).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA04C00U; // Encoding for: UQSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift left (register).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA04C00U; // Encoding for: UQSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift left (register).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x6EE04C00U; // Encoding for: UQSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQSHRN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHRN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHRN(Arm64RegisterB Vbd, Arm64RegisterH Van, byte shift)
    {
        uint raw = 0x7F089400U; // Encoding for: UQSHRN_asisdshf_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQSHRN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHRN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHRN(Arm64RegisterH Vbd, Arm64RegisterS Van, byte shift)
    {
        uint raw = 0x7F109400U; // Encoding for: UQSHRN_asisdshf_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQSHRN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHRN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHRN(Arm64RegisterS Vbd, Arm64RegisterD Van, byte shift)
    {
        uint raw = 0x7F209400U; // Encoding for: UQSHRN_asisdshf_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHRN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x2F089400U; // Encoding for: UQSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHRN(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x6F089400U; // Encoding for: UQSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHRN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x2F109400U; // Encoding for: UQSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHRN(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x6F109400U; // Encoding for: UQSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHRN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x2F209400U; // Encoding for: UQSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHRN(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x6F209400U; // Encoding for: UQSHRN_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHRN2(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x6F089400U; // Encoding for: UQSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHRN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
    {
        uint raw = 0x6F089400U; // Encoding for: UQSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHRN2(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x6F109400U; // Encoding for: UQSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHRN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
    {
        uint raw = 0x6F109400U; // Encoding for: UQSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHRN2(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x6F209400U; // Encoding for: UQSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSHRN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
    {
        uint raw = 0x6F209400U; // Encoding for: UQSHRN2_asimdshf_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating subtract.
    /// </summary>
    /// <remarks><code>UQSUB Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSUB_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSUB(Arm64RegisterB Vd, Arm64RegisterB Vn, Arm64RegisterB Vm)
    {
        uint raw = 0x7E202C00U; // Encoding for: UQSUB_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating subtract.
    /// </summary>
    /// <remarks><code>UQSUB Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSUB_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSUB(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterH Vm)
    {
        uint raw = 0x7E602C00U; // Encoding for: UQSUB_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating subtract.
    /// </summary>
    /// <remarks><code>UQSUB Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSUB_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSUB(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
    {
        uint raw = 0x7EA02C00U; // Encoding for: UQSUB_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating subtract.
    /// </summary>
    /// <remarks><code>UQSUB Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSUB_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSUB(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
    {
        uint raw = 0x7EE02C00U; // Encoding for: UQSUB_asisdsame_only
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        raw |= (uint)Vm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating subtract.
    /// </summary>
    /// <remarks><code>UQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSUB(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2E202C00U; // Encoding for: UQSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating subtract.
    /// </summary>
    /// <remarks><code>UQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSUB(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6E202C00U; // Encoding for: UQSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating subtract.
    /// </summary>
    /// <remarks><code>UQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSUB(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E602C00U; // Encoding for: UQSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating subtract.
    /// </summary>
    /// <remarks><code>UQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSUB(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E602C00U; // Encoding for: UQSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating subtract.
    /// </summary>
    /// <remarks><code>UQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSUB(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA02C00U; // Encoding for: UQSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating subtract.
    /// </summary>
    /// <remarks><code>UQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSUB(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA02C00U; // Encoding for: UQSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating subtract.
    /// </summary>
    /// <remarks><code>UQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQSUB(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x6EE02C00U; // Encoding for: UQSUB_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating extract narrow.
    /// </summary>
    /// <remarks><code>UQXTN Vbd, Van</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQXTN_asisdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQXTN(Arm64RegisterB Vbd, Arm64RegisterH Van)
    {
        uint raw = 0x7E214800U; // Encoding for: UQXTN_asisdmisc_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating extract narrow.
    /// </summary>
    /// <remarks><code>UQXTN Vbd, Van</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQXTN_asisdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQXTN(Arm64RegisterH Vbd, Arm64RegisterS Van)
    {
        uint raw = 0x7E614800U; // Encoding for: UQXTN_asisdmisc_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating extract narrow.
    /// </summary>
    /// <remarks><code>UQXTN Vbd, Van</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQXTN_asisdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQXTN(Arm64RegisterS Vbd, Arm64RegisterD Van)
    {
        uint raw = 0x7EA14800U; // Encoding for: UQXTN_asisdmisc_n
        raw |= (uint)Vbd.Index;
        raw |= (uint)Van.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating extract narrow.
    /// </summary>
    /// <remarks><code>UQXTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQXTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQXTN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta)
    {
        uint raw = 0x2E214800U; // Encoding for: UQXTN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating extract narrow.
    /// </summary>
    /// <remarks><code>UQXTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQXTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQXTN(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta)
    {
        uint raw = 0x6E214800U; // Encoding for: UQXTN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating extract narrow.
    /// </summary>
    /// <remarks><code>UQXTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQXTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQXTN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
    {
        uint raw = 0x2E614800U; // Encoding for: UQXTN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating extract narrow.
    /// </summary>
    /// <remarks><code>UQXTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQXTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQXTN(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
    {
        uint raw = 0x6E614800U; // Encoding for: UQXTN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating extract narrow.
    /// </summary>
    /// <remarks><code>UQXTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQXTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQXTN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
    {
        uint raw = 0x2EA14800U; // Encoding for: UQXTN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating extract narrow.
    /// </summary>
    /// <remarks><code>UQXTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQXTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQXTN(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
    {
        uint raw = 0x6EA14800U; // Encoding for: UQXTN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating extract narrow.
    /// </summary>
    /// <remarks><code>UQXTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQXTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQXTN2(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta)
    {
        uint raw = 0x6E214800U; // Encoding for: UQXTN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating extract narrow.
    /// </summary>
    /// <remarks><code>UQXTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQXTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQXTN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta)
    {
        uint raw = 0x6E214800U; // Encoding for: UQXTN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating extract narrow.
    /// </summary>
    /// <remarks><code>UQXTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQXTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQXTN2(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
    {
        uint raw = 0x6E614800U; // Encoding for: UQXTN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating extract narrow.
    /// </summary>
    /// <remarks><code>UQXTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQXTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQXTN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
    {
        uint raw = 0x6E614800U; // Encoding for: UQXTN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating extract narrow.
    /// </summary>
    /// <remarks><code>UQXTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQXTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQXTN2(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
    {
        uint raw = 0x6EA14800U; // Encoding for: UQXTN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating extract narrow.
    /// </summary>
    /// <remarks><code>UQXTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQXTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UQXTN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
    {
        uint raw = 0x6EA14800U; // Encoding for: UQXTN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned reciprocal estimate.
    /// </summary>
    /// <remarks><code>URECPE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URECPE_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URECPE(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x0EA1C800U; // Encoding for: URECPE_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned reciprocal estimate.
    /// </summary>
    /// <remarks><code>URECPE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URECPE_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URECPE(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x4EA1C800U; // Encoding for: URECPE_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding halving add.
    /// </summary>
    /// <remarks><code>URHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URHADD(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2E201400U; // Encoding for: URHADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding halving add.
    /// </summary>
    /// <remarks><code>URHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URHADD(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6E201400U; // Encoding for: URHADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding halving add.
    /// </summary>
    /// <remarks><code>URHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URHADD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E601400U; // Encoding for: URHADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding halving add.
    /// </summary>
    /// <remarks><code>URHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URHADD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E601400U; // Encoding for: URHADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding halving add.
    /// </summary>
    /// <remarks><code>URHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URHADD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA01400U; // Encoding for: URHADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding halving add.
    /// </summary>
    /// <remarks><code>URHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URHADD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA01400U; // Encoding for: URHADD_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding shift left (register).
    /// </summary>
    /// <remarks><code>URSHL Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSHL(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
    {
        uint raw = 0x7EE05400U; // Encoding for: URSHL_asisdsame_only
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding shift left (register).
    /// </summary>
    /// <remarks><code>URSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSHL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2E205400U; // Encoding for: URSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding shift left (register).
    /// </summary>
    /// <remarks><code>URSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSHL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6E205400U; // Encoding for: URSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding shift left (register).
    /// </summary>
    /// <remarks><code>URSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSHL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E605400U; // Encoding for: URSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding shift left (register).
    /// </summary>
    /// <remarks><code>URSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSHL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E605400U; // Encoding for: URSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding shift left (register).
    /// </summary>
    /// <remarks><code>URSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSHL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA05400U; // Encoding for: URSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding shift left (register).
    /// </summary>
    /// <remarks><code>URSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSHL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA05400U; // Encoding for: URSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding shift left (register).
    /// </summary>
    /// <remarks><code>URSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSHL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x6EE05400U; // Encoding for: URSHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>URSHR Dd, Dn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHR_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSHR(Arm64RegisterD Dd, Arm64RegisterD Dn, uint shift)
    {
        uint raw = 0x7F402400U; // Encoding for: URSHR_asisdshf_r
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)((128 - shift) & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>URSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSHR(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
    {
        uint raw = 0x2F082400U; // Encoding for: URSHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>URSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSHR(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
    {
        uint raw = 0x6F082400U; // Encoding for: URSHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>URSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSHR(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
    {
        uint raw = 0x2F102400U; // Encoding for: URSHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>URSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSHR(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
    {
        uint raw = 0x6F102400U; // Encoding for: URSHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>URSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSHR(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
    {
        uint raw = 0x2F202400U; // Encoding for: URSHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>URSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSHR(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
    {
        uint raw = 0x6F202400U; // Encoding for: URSHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>URSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSHR(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
    {
        uint raw = 0x6F402400U; // Encoding for: URSHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned reciprocal square root estimate.
    /// </summary>
    /// <remarks><code>URSQRTE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSQRTE_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSQRTE(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x2EA1C800U; // Encoding for: URSQRTE_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned reciprocal square root estimate.
    /// </summary>
    /// <remarks><code>URSQRTE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSQRTE_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSQRTE(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x6EA1C800U; // Encoding for: URSQRTE_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>URSRA Dd, Dn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSRA_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSRA(Arm64RegisterD Dd, Arm64RegisterD Dn, uint shift)
    {
        uint raw = 0x7F403400U; // Encoding for: URSRA_asisdshf_r
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)((128 - shift) & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>URSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSRA(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
    {
        uint raw = 0x2F083400U; // Encoding for: URSRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>URSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSRA(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
    {
        uint raw = 0x6F083400U; // Encoding for: URSRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>URSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSRA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
    {
        uint raw = 0x2F103400U; // Encoding for: URSRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>URSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSRA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
    {
        uint raw = 0x6F103400U; // Encoding for: URSRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>URSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSRA(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
    {
        uint raw = 0x2F203400U; // Encoding for: URSRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>URSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSRA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
    {
        uint raw = 0x6F203400U; // Encoding for: URSRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>URSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint URSRA(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
    {
        uint raw = 0x6F403400U; // Encoding for: URSRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Dot product with unsigned and signed integers (vector, by element).
    /// </summary>
    /// <remarks><code>USDOT Vd.Ta, Vn.Tb, Vm.4B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USDOT_asimdelem_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USDOT(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_4B.Indexed Vm_4B)
    {
        uint raw = 0x0F80F000U; // Encoding for: USDOT_asimdelem_d
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_4B.Index << 16;
        {
            // Write the element indexer for Vm_4B.ElementIndex
            var _i_ = Vm_4B.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Dot product with unsigned and signed integers (vector, by element).
    /// </summary>
    /// <remarks><code>USDOT Vd.Ta, Vn.Tb, Vm.4B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USDOT_asimdelem_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USDOT(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_4B.Indexed Vm_4B)
    {
        uint raw = 0x4F80F000U; // Encoding for: USDOT_asimdelem_d
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_4B.Index << 16;
        {
            // Write the element indexer for Vm_4B.ElementIndex
            var _i_ = Vm_4B.ElementIndex & 0x3;
            raw |= (uint)(_i_ & 0x1) << 21;
            _i_ >>= 1;
            raw |= (uint)(_i_ & 0x1) << 11;
        }
        return raw;
    }
    /// <summary>
    /// Dot product with unsigned and signed integers (vector).
    /// </summary>
    /// <remarks><code>USDOT Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USDOT_asimdsame2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USDOT(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x0E809C00U; // Encoding for: USDOT_asimdsame2_d
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Dot product with unsigned and signed integers (vector).
    /// </summary>
    /// <remarks><code>USDOT Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USDOT_asimdsame2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USDOT(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x4E809C00U; // Encoding for: USDOT_asimdsame2_d
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift left (register).
    /// </summary>
    /// <remarks><code>USHL Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHL(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
    {
        uint raw = 0x7EE04400U; // Encoding for: USHL_asisdsame_only
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)Dm.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift left (register).
    /// </summary>
    /// <remarks><code>USHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x2E204400U; // Encoding for: USHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift left (register).
    /// </summary>
    /// <remarks><code>USHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x6E204400U; // Encoding for: USHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift left (register).
    /// </summary>
    /// <remarks><code>USHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x2E604400U; // Encoding for: USHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift left (register).
    /// </summary>
    /// <remarks><code>USHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x6E604400U; // Encoding for: USHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift left (register).
    /// </summary>
    /// <remarks><code>USHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x2EA04400U; // Encoding for: USHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift left (register).
    /// </summary>
    /// <remarks><code>USHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x6EA04400U; // Encoding for: USHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift left (register).
    /// </summary>
    /// <remarks><code>USHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x6EE04400U; // Encoding for: USHL_asimdsame_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift left long (immediate).
    /// </summary>
    /// <remarks><code>USHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHLL_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHLL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, byte shift)
    {
        uint raw = 0x2F08A400U; // Encoding for: USHLL_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift left long (immediate).
    /// </summary>
    /// <remarks><code>USHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHLL_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHLL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, byte shift)
    {
        uint raw = 0x6F08A400U; // Encoding for: USHLL_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift left long (immediate).
    /// </summary>
    /// <remarks><code>USHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHLL_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHLL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, byte shift)
    {
        uint raw = 0x2F10A400U; // Encoding for: USHLL_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift left long (immediate).
    /// </summary>
    /// <remarks><code>USHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHLL_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHLL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, byte shift)
    {
        uint raw = 0x6F10A400U; // Encoding for: USHLL_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift left long (immediate).
    /// </summary>
    /// <remarks><code>USHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHLL_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHLL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, byte shift)
    {
        uint raw = 0x2F20A400U; // Encoding for: USHLL_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift left long (immediate).
    /// </summary>
    /// <remarks><code>USHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHLL_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHLL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, byte shift)
    {
        uint raw = 0x6F20A400U; // Encoding for: USHLL_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift left long (immediate).
    /// </summary>
    /// <remarks><code>USHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHLL2_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHLL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, byte shift)
    {
        uint raw = 0x6F08A400U; // Encoding for: USHLL2_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift left long (immediate).
    /// </summary>
    /// <remarks><code>USHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHLL2_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHLL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, byte shift)
    {
        uint raw = 0x6F08A400U; // Encoding for: USHLL2_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift left long (immediate).
    /// </summary>
    /// <remarks><code>USHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHLL2_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHLL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, byte shift)
    {
        uint raw = 0x6F10A400U; // Encoding for: USHLL2_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift left long (immediate).
    /// </summary>
    /// <remarks><code>USHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHLL2_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHLL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, byte shift)
    {
        uint raw = 0x6F10A400U; // Encoding for: USHLL2_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift left long (immediate).
    /// </summary>
    /// <remarks><code>USHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHLL2_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHLL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, byte shift)
    {
        uint raw = 0x6F20A400U; // Encoding for: USHLL2_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift left long (immediate).
    /// </summary>
    /// <remarks><code>USHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHLL2_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHLL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, byte shift)
    {
        uint raw = 0x6F20A400U; // Encoding for: USHLL2_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift right (immediate).
    /// </summary>
    /// <remarks><code>USHR Dd, Dn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHR_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHR(Arm64RegisterD Dd, Arm64RegisterD Dn, uint shift)
    {
        uint raw = 0x7F400400U; // Encoding for: USHR_asisdshf_r
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)((128 - shift) & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift right (immediate).
    /// </summary>
    /// <remarks><code>USHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHR(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
    {
        uint raw = 0x2F080400U; // Encoding for: USHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift right (immediate).
    /// </summary>
    /// <remarks><code>USHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHR(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
    {
        uint raw = 0x6F080400U; // Encoding for: USHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift right (immediate).
    /// </summary>
    /// <remarks><code>USHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHR(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
    {
        uint raw = 0x2F100400U; // Encoding for: USHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift right (immediate).
    /// </summary>
    /// <remarks><code>USHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHR(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
    {
        uint raw = 0x6F100400U; // Encoding for: USHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift right (immediate).
    /// </summary>
    /// <remarks><code>USHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHR(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
    {
        uint raw = 0x2F200400U; // Encoding for: USHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift right (immediate).
    /// </summary>
    /// <remarks><code>USHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHR(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
    {
        uint raw = 0x6F200400U; // Encoding for: USHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift right (immediate).
    /// </summary>
    /// <remarks><code>USHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USHR(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
    {
        uint raw = 0x6F400400U; // Encoding for: USHR_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned and signed 8-bit integer matrix multiply-accumulate (vector).
    /// </summary>
    /// <remarks><code>USMMLA Vd.4S, Vn.16B, Vm.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USMMLA_asimdsame2_g), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USMMLA(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B)
    {
        uint raw = 0x4E80AC00U; // Encoding for: USMMLA_asimdsame2_g
        raw |= (uint)Vd_4S.Index;
        raw |= (uint)Vn_16B.Index << 5;
        raw |= (uint)Vm_16B.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating accumulate of signed value.
    /// </summary>
    /// <remarks><code>USQADD Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USQADD_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USQADD(Arm64RegisterB Vd, Arm64RegisterB Vn)
    {
        uint raw = 0x7E203800U; // Encoding for: USQADD_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating accumulate of signed value.
    /// </summary>
    /// <remarks><code>USQADD Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USQADD_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USQADD(Arm64RegisterH Vd, Arm64RegisterH Vn)
    {
        uint raw = 0x7E603800U; // Encoding for: USQADD_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating accumulate of signed value.
    /// </summary>
    /// <remarks><code>USQADD Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USQADD_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USQADD(Arm64RegisterS Vd, Arm64RegisterS Vn)
    {
        uint raw = 0x7EA03800U; // Encoding for: USQADD_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating accumulate of signed value.
    /// </summary>
    /// <remarks><code>USQADD Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USQADD_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USQADD(Arm64RegisterD Vd, Arm64RegisterD Vn)
    {
        uint raw = 0x7EE03800U; // Encoding for: USQADD_asisdmisc_r
        raw |= (uint)Vd.Index;
        raw |= (uint)Vn.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating accumulate of signed value.
    /// </summary>
    /// <remarks><code>USQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USQADD(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
    {
        uint raw = 0x2E203800U; // Encoding for: USQADD_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating accumulate of signed value.
    /// </summary>
    /// <remarks><code>USQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USQADD(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
    {
        uint raw = 0x6E203800U; // Encoding for: USQADD_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating accumulate of signed value.
    /// </summary>
    /// <remarks><code>USQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USQADD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
    {
        uint raw = 0x2E603800U; // Encoding for: USQADD_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating accumulate of signed value.
    /// </summary>
    /// <remarks><code>USQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USQADD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
    {
        uint raw = 0x6E603800U; // Encoding for: USQADD_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating accumulate of signed value.
    /// </summary>
    /// <remarks><code>USQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USQADD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
    {
        uint raw = 0x2EA03800U; // Encoding for: USQADD_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating accumulate of signed value.
    /// </summary>
    /// <remarks><code>USQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USQADD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
    {
        uint raw = 0x6EA03800U; // Encoding for: USQADD_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned saturating accumulate of signed value.
    /// </summary>
    /// <remarks><code>USQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USQADD(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
    {
        uint raw = 0x6EE03800U; // Encoding for: USQADD_asimdmisc_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>USRA Dd, Dn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USRA_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USRA(Arm64RegisterD Dd, Arm64RegisterD Dn, uint shift)
    {
        uint raw = 0x7F401400U; // Encoding for: USRA_asisdshf_r
        raw |= (uint)Dd.Index;
        raw |= (uint)Dn.Index << 5;
        raw |= (uint)((128 - shift) & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>USRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USRA(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
    {
        uint raw = 0x2F081400U; // Encoding for: USRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>USRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USRA(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
    {
        uint raw = 0x6F081400U; // Encoding for: USRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>USRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USRA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
    {
        uint raw = 0x2F101400U; // Encoding for: USRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>USRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USRA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
    {
        uint raw = 0x6F101400U; // Encoding for: USRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>USRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USRA(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
    {
        uint raw = 0x2F201400U; // Encoding for: USRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>USRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USRA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
    {
        uint raw = 0x6F201400U; // Encoding for: USRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>USRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USRA(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
    {
        uint raw = 0x6F401400U; // Encoding for: USRA_asimdshf_r
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)(shift & 0x7F) << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned subtract long.
    /// </summary>
    /// <remarks><code>USUBL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USUBL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x2E202000U; // Encoding for: USUBL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned subtract long.
    /// </summary>
    /// <remarks><code>USUBL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USUBL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x6E202000U; // Encoding for: USUBL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned subtract long.
    /// </summary>
    /// <remarks><code>USUBL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USUBL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x2E602000U; // Encoding for: USUBL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned subtract long.
    /// </summary>
    /// <remarks><code>USUBL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USUBL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x6E602000U; // Encoding for: USUBL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned subtract long.
    /// </summary>
    /// <remarks><code>USUBL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USUBL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x2EA02000U; // Encoding for: USUBL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned subtract long.
    /// </summary>
    /// <remarks><code>USUBL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USUBL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x6EA02000U; // Encoding for: USUBL_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned subtract long.
    /// </summary>
    /// <remarks><code>USUBL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USUBL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x6E202000U; // Encoding for: USUBL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned subtract long.
    /// </summary>
    /// <remarks><code>USUBL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USUBL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x6E202000U; // Encoding for: USUBL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned subtract long.
    /// </summary>
    /// <remarks><code>USUBL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USUBL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x6E602000U; // Encoding for: USUBL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned subtract long.
    /// </summary>
    /// <remarks><code>USUBL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USUBL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x6E602000U; // Encoding for: USUBL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned subtract long.
    /// </summary>
    /// <remarks><code>USUBL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USUBL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x6EA02000U; // Encoding for: USUBL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned subtract long.
    /// </summary>
    /// <remarks><code>USUBL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USUBL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x6EA02000U; // Encoding for: USUBL2_asimddiff_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned subtract wide.
    /// </summary>
    /// <remarks><code>USUBW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USUBW(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x2E203000U; // Encoding for: USUBW_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned subtract wide.
    /// </summary>
    /// <remarks><code>USUBW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USUBW(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x6E203000U; // Encoding for: USUBW_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned subtract wide.
    /// </summary>
    /// <remarks><code>USUBW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USUBW(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x2E603000U; // Encoding for: USUBW_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned subtract wide.
    /// </summary>
    /// <remarks><code>USUBW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USUBW(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x6E603000U; // Encoding for: USUBW_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned subtract wide.
    /// </summary>
    /// <remarks><code>USUBW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USUBW(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x2EA03000U; // Encoding for: USUBW_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned subtract wide.
    /// </summary>
    /// <remarks><code>USUBW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USUBW(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x6EA03000U; // Encoding for: USUBW_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned subtract wide.
    /// </summary>
    /// <remarks><code>USUBW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USUBW2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8B Vm_Tb)
    {
        uint raw = 0x6E203000U; // Encoding for: USUBW2_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned subtract wide.
    /// </summary>
    /// <remarks><code>USUBW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USUBW2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_16B Vm_Tb)
    {
        uint raw = 0x6E203000U; // Encoding for: USUBW2_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned subtract wide.
    /// </summary>
    /// <remarks><code>USUBW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USUBW2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4H Vm_Tb)
    {
        uint raw = 0x6E603000U; // Encoding for: USUBW2_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned subtract wide.
    /// </summary>
    /// <remarks><code>USUBW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USUBW2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_8H Vm_Tb)
    {
        uint raw = 0x6E603000U; // Encoding for: USUBW2_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned subtract wide.
    /// </summary>
    /// <remarks><code>USUBW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USUBW2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2S Vm_Tb)
    {
        uint raw = 0x6EA03000U; // Encoding for: USUBW2_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned subtract wide.
    /// </summary>
    /// <remarks><code>USUBW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint USUBW2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_4S Vm_Tb)
    {
        uint raw = 0x6EA03000U; // Encoding for: USUBW2_asimddiff_w
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        raw |= (uint)Vm_Tb.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unsigned extend long.
    /// </summary>
    /// <remarks><code>UXTL Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UXTL_ushll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UXTL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb)
    {
        uint raw = 0x2F08A400U; // Encoding for: UXTL_ushll_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned extend long.
    /// </summary>
    /// <remarks><code>UXTL Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UXTL_ushll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UXTL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb)
    {
        uint raw = 0x6F08A400U; // Encoding for: UXTL_ushll_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned extend long.
    /// </summary>
    /// <remarks><code>UXTL Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UXTL_ushll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UXTL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb)
    {
        uint raw = 0x2F10A400U; // Encoding for: UXTL_ushll_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned extend long.
    /// </summary>
    /// <remarks><code>UXTL Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UXTL_ushll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UXTL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb)
    {
        uint raw = 0x6F10A400U; // Encoding for: UXTL_ushll_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned extend long.
    /// </summary>
    /// <remarks><code>UXTL Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UXTL_ushll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UXTL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb)
    {
        uint raw = 0x2F20A400U; // Encoding for: UXTL_ushll_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned extend long.
    /// </summary>
    /// <remarks><code>UXTL Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UXTL_ushll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UXTL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb)
    {
        uint raw = 0x6F20A400U; // Encoding for: UXTL_ushll_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned extend long.
    /// </summary>
    /// <remarks><code>UXTL2 Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UXTL2_ushll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UXTL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb)
    {
        uint raw = 0x6F08A400U; // Encoding for: UXTL2_ushll_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned extend long.
    /// </summary>
    /// <remarks><code>UXTL2 Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UXTL2_ushll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UXTL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb)
    {
        uint raw = 0x6F08A400U; // Encoding for: UXTL2_ushll_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned extend long.
    /// </summary>
    /// <remarks><code>UXTL2 Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UXTL2_ushll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UXTL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb)
    {
        uint raw = 0x6F10A400U; // Encoding for: UXTL2_ushll_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned extend long.
    /// </summary>
    /// <remarks><code>UXTL2 Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UXTL2_ushll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UXTL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb)
    {
        uint raw = 0x6F10A400U; // Encoding for: UXTL2_ushll_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned extend long.
    /// </summary>
    /// <remarks><code>UXTL2 Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UXTL2_ushll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UXTL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb)
    {
        uint raw = 0x6F20A400U; // Encoding for: UXTL2_ushll_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unsigned extend long.
    /// </summary>
    /// <remarks><code>UXTL2 Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UXTL2_ushll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UXTL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb)
    {
        uint raw = 0x6F20A400U; // Encoding for: UXTL2_ushll_asimdshf_l
        raw |= (uint)Vd_Ta.Index;
        raw |= (uint)Vn_Tb.Index << 5;
        return raw;
    }
    /// <summary>
    /// Unzip vectors (primary).
    /// </summary>
    /// <remarks><code>UZP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UZP1(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E001800U; // Encoding for: UZP1_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unzip vectors (primary).
    /// </summary>
    /// <remarks><code>UZP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UZP1(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E001800U; // Encoding for: UZP1_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unzip vectors (primary).
    /// </summary>
    /// <remarks><code>UZP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UZP1(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E401800U; // Encoding for: UZP1_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unzip vectors (primary).
    /// </summary>
    /// <remarks><code>UZP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UZP1(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E401800U; // Encoding for: UZP1_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unzip vectors (primary).
    /// </summary>
    /// <remarks><code>UZP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UZP1(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0E801800U; // Encoding for: UZP1_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unzip vectors (primary).
    /// </summary>
    /// <remarks><code>UZP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UZP1(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4E801800U; // Encoding for: UZP1_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unzip vectors (primary).
    /// </summary>
    /// <remarks><code>UZP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UZP1(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4EC01800U; // Encoding for: UZP1_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unzip vectors (secondary).
    /// </summary>
    /// <remarks><code>UZP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UZP2(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E005800U; // Encoding for: UZP2_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unzip vectors (secondary).
    /// </summary>
    /// <remarks><code>UZP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UZP2(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E005800U; // Encoding for: UZP2_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unzip vectors (secondary).
    /// </summary>
    /// <remarks><code>UZP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UZP2(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E405800U; // Encoding for: UZP2_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unzip vectors (secondary).
    /// </summary>
    /// <remarks><code>UZP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UZP2(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E405800U; // Encoding for: UZP2_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unzip vectors (secondary).
    /// </summary>
    /// <remarks><code>UZP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UZP2(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0E805800U; // Encoding for: UZP2_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unzip vectors (secondary).
    /// </summary>
    /// <remarks><code>UZP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UZP2(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4E805800U; // Encoding for: UZP2_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Unzip vectors (secondary).
    /// </summary>
    /// <remarks><code>UZP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint UZP2(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4EC05800U; // Encoding for: UZP2_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Exclusive-OR and rotate.
    /// </summary>
    /// <remarks><code>XAR Vd.2D, Vn.2D, Vm.2D, #imm6</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.XAR_vvv2_crypto3_imm6), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint XAR(Arm64RegisterV_2D Vd_2D, Arm64RegisterV_2D Vn_2D, Arm64RegisterV_2D Vm_2D, byte imm6)
    {
        uint raw = 0xCE800000U; // Encoding for: XAR_vvv2_crypto3_imm6
        raw |= (uint)Vd_2D.Index;
        raw |= (uint)Vn_2D.Index << 5;
        raw |= (uint)Vm_2D.Index << 16;
        raw |= (uint)(imm6 & 0x3F) << 10;
        return raw;
    }
    /// <summary>
    /// Extract narrow.
    /// </summary>
    /// <remarks><code>XTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.XTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint XTN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta)
    {
        uint raw = 0x0E212800U; // Encoding for: XTN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Extract narrow.
    /// </summary>
    /// <remarks><code>XTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.XTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint XTN(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta)
    {
        uint raw = 0x4E212800U; // Encoding for: XTN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Extract narrow.
    /// </summary>
    /// <remarks><code>XTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.XTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint XTN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
    {
        uint raw = 0x0E612800U; // Encoding for: XTN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Extract narrow.
    /// </summary>
    /// <remarks><code>XTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.XTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint XTN(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
    {
        uint raw = 0x4E612800U; // Encoding for: XTN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Extract narrow.
    /// </summary>
    /// <remarks><code>XTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.XTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint XTN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
    {
        uint raw = 0x0EA12800U; // Encoding for: XTN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Extract narrow.
    /// </summary>
    /// <remarks><code>XTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.XTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint XTN(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
    {
        uint raw = 0x4EA12800U; // Encoding for: XTN_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Extract narrow.
    /// </summary>
    /// <remarks><code>XTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.XTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint XTN2(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta)
    {
        uint raw = 0x4E212800U; // Encoding for: XTN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Extract narrow.
    /// </summary>
    /// <remarks><code>XTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.XTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint XTN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta)
    {
        uint raw = 0x4E212800U; // Encoding for: XTN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Extract narrow.
    /// </summary>
    /// <remarks><code>XTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.XTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint XTN2(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
    {
        uint raw = 0x4E612800U; // Encoding for: XTN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Extract narrow.
    /// </summary>
    /// <remarks><code>XTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.XTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint XTN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
    {
        uint raw = 0x4E612800U; // Encoding for: XTN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Extract narrow.
    /// </summary>
    /// <remarks><code>XTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.XTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint XTN2(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
    {
        uint raw = 0x4EA12800U; // Encoding for: XTN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Extract narrow.
    /// </summary>
    /// <remarks><code>XTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.XTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint XTN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
    {
        uint raw = 0x4EA12800U; // Encoding for: XTN2_asimdmisc_n
        raw |= (uint)Vd_Tb.Index;
        raw |= (uint)Vn_Ta.Index << 5;
        return raw;
    }
    /// <summary>
    /// Zip vectors (primary).
    /// </summary>
    /// <remarks><code>ZIP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ZIP1(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E003800U; // Encoding for: ZIP1_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Zip vectors (primary).
    /// </summary>
    /// <remarks><code>ZIP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ZIP1(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E003800U; // Encoding for: ZIP1_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Zip vectors (primary).
    /// </summary>
    /// <remarks><code>ZIP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ZIP1(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E403800U; // Encoding for: ZIP1_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Zip vectors (primary).
    /// </summary>
    /// <remarks><code>ZIP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ZIP1(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E403800U; // Encoding for: ZIP1_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Zip vectors (primary).
    /// </summary>
    /// <remarks><code>ZIP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ZIP1(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0E803800U; // Encoding for: ZIP1_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Zip vectors (primary).
    /// </summary>
    /// <remarks><code>ZIP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ZIP1(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4E803800U; // Encoding for: ZIP1_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Zip vectors (primary).
    /// </summary>
    /// <remarks><code>ZIP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ZIP1(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4EC03800U; // Encoding for: ZIP1_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Zip vectors (secondary).
    /// </summary>
    /// <remarks><code>ZIP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ZIP2(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
    {
        uint raw = 0x0E007800U; // Encoding for: ZIP2_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Zip vectors (secondary).
    /// </summary>
    /// <remarks><code>ZIP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ZIP2(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
    {
        uint raw = 0x4E007800U; // Encoding for: ZIP2_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Zip vectors (secondary).
    /// </summary>
    /// <remarks><code>ZIP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ZIP2(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
    {
        uint raw = 0x0E407800U; // Encoding for: ZIP2_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Zip vectors (secondary).
    /// </summary>
    /// <remarks><code>ZIP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ZIP2(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
    {
        uint raw = 0x4E407800U; // Encoding for: ZIP2_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Zip vectors (secondary).
    /// </summary>
    /// <remarks><code>ZIP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ZIP2(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
    {
        uint raw = 0x0E807800U; // Encoding for: ZIP2_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Zip vectors (secondary).
    /// </summary>
    /// <remarks><code>ZIP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ZIP2(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
    {
        uint raw = 0x4E807800U; // Encoding for: ZIP2_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
    /// <summary>
    /// Zip vectors (secondary).
    /// </summary>
    /// <remarks><code>ZIP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ZIP2(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
    {
        uint raw = 0x4EC07800U; // Encoding for: ZIP2_asimdperm_only
        raw |= (uint)Vd_T.Index;
        raw |= (uint)Vn_T.Index << 5;
        raw |= (uint)Vm_T.Index << 16;
        return raw;
    }
}
