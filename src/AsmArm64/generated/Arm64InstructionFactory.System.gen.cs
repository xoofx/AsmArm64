// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
namespace AsmArm64;
static partial class Arm64InstructionFactory
{
    /// <summary>
    /// Associate physical address space.
    /// </summary>
    /// <remarks><code>APAS Xt</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.APAS_sys_cr_systeminstrs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint APAS(Arm64RegisterX Xt)
    {
        uint raw = 0xD50E7000U; // Encoding for: APAS_sys_cr_systeminstrs
        raw |= (uint)Xt.Index;
        return raw;
    }
    /// <summary>
    /// Address translate.
    /// </summary>
    /// <remarks><code>AT at_op, Xt</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AT_sys_cr_systeminstrs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint AT(Arm64SystemRegister at_op, Arm64RegisterX Xt)
    {
        uint raw = 0xD5087800U; // Encoding for: AT_sys_cr_systeminstrs
        raw |= (uint)Xt.Index;
        return raw;
    }
    /// <summary>
    /// Authenticate instruction address, using key A.
    /// </summary>
    /// <remarks><code>AUTIA1716 </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AUTIA1716_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint AUTIA1716()
    {
        uint raw = 0xD503219FU; // Encoding for: AUTIA1716_hi_hints
        return raw;
    }
    /// <summary>
    /// Authenticate instruction address, using key A.
    /// </summary>
    /// <remarks><code>AUTIASP </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AUTIASP_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint AUTIASP()
    {
        uint raw = 0xD50323BFU; // Encoding for: AUTIASP_hi_hints
        return raw;
    }
    /// <summary>
    /// Authenticate instruction address, using key A.
    /// </summary>
    /// <remarks><code>AUTIAZ </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AUTIAZ_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint AUTIAZ()
    {
        uint raw = 0xD503239FU; // Encoding for: AUTIAZ_hi_hints
        return raw;
    }
    /// <summary>
    /// Authenticate instruction address, using key B.
    /// </summary>
    /// <remarks><code>AUTIB1716 </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AUTIB1716_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint AUTIB1716()
    {
        uint raw = 0xD50321DFU; // Encoding for: AUTIB1716_hi_hints
        return raw;
    }
    /// <summary>
    /// Authenticate instruction address, using key B.
    /// </summary>
    /// <remarks><code>AUTIBSP </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AUTIBSP_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint AUTIBSP()
    {
        uint raw = 0xD50323FFU; // Encoding for: AUTIBSP_hi_hints
        return raw;
    }
    /// <summary>
    /// Authenticate instruction address, using key B.
    /// </summary>
    /// <remarks><code>AUTIBZ </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AUTIBZ_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint AUTIBZ()
    {
        uint raw = 0xD50323DFU; // Encoding for: AUTIBZ_hi_hints
        return raw;
    }
    /// <summary>
    /// Convert floating-point condition flags from Arm to external format.
    /// </summary>
    /// <remarks><code>AXFLAG </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AXFLAG_m_pstate), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint AXFLAG()
    {
        uint raw = 0xD500405FU; // Encoding for: AXFLAG_m_pstate
        return raw;
    }
    /// <summary>
    /// Branch record buffer.
    /// </summary>
    /// <remarks><code>BRB brb_op</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BRB_sys_cr_systeminstrs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BRB(Arm64SystemRegister brb_op)
    {
        uint raw = 0xD5097200U; // Encoding for: BRB_sys_cr_systeminstrs
        return raw;
    }
    /// <summary>
    /// Breakpoint instruction.
    /// </summary>
    /// <remarks><code>BRK #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BRK_ex_exception), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BRK(ushort imm)
    {
        uint raw = 0xD4200000U; // Encoding for: BRK_ex_exception
        raw |= (uint)imm << 5;
        return raw;
    }
    /// <summary>
    /// Branch target identification.
    /// </summary>
    /// <remarks><code>BTI {targets}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BTI_hb_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint BTI(Arm64BranchTargetIdentificationKind targets = default)
    {
        uint raw = 0xD503241FU; // Encoding for: BTI_hb_hints
        return raw;
    }
    /// <summary>
    /// Invert carry flag.
    /// </summary>
    /// <remarks><code>CFINV </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CFINV_m_pstate), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CFINV()
    {
        uint raw = 0xD500401FU; // Encoding for: CFINV_m_pstate
        return raw;
    }
    /// <summary>
    /// Control flow prediction restriction by context.
    /// </summary>
    /// <remarks><code>CFP RCTX, Xt</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CFP_sys_cr_systeminstrs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CFP(Arm64RestrictionByContextKind RCTX, Arm64RegisterX Xt)
    {
        uint raw = 0xD50B7380U; // Encoding for: CFP_sys_cr_systeminstrs
        raw |= (uint)Xt.Index;
        return raw;
    }
    /// <summary>
    /// Check feature status.
    /// </summary>
    /// <remarks><code>CHKFEAT X16</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CHKFEAT_hf_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CHKFEAT(Arm64RegisterX X16)
    {
        uint raw = 0xD503251FU; // Encoding for: CHKFEAT_hf_hints
        if (X16.Index != 16) throw new ArgumentOutOfRangeException(nameof(X16), $"Invalid Register. Expecting the fixed index 16 instead of {X16}");
        return raw;
    }
    /// <summary>
    /// Clear branch history.
    /// </summary>
    /// <remarks><code>CLRBHB </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLRBHB_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CLRBHB()
    {
        uint raw = 0xD50322DFU; // Encoding for: CLRBHB_hi_hints
        return raw;
    }
    /// <summary>
    /// Clear exclusive.
    /// </summary>
    /// <remarks><code>CLREX {#imm}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLREX_bn_barriers), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CLREX(byte imm = default)
    {
        uint raw = 0xD503305FU; // Encoding for: CLREX_bn_barriers
        raw |= (uint)(imm & 0xF) << 8;
        return raw;
    }
    /// <summary>
    /// Clear other speculative prediction restriction by context.
    /// </summary>
    /// <remarks><code>COSP RCTX, Xt</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.COSP_sys_cr_systeminstrs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint COSP(Arm64RestrictionByContextKind RCTX, Arm64RegisterX Xt)
    {
        uint raw = 0xD50B73C0U; // Encoding for: COSP_sys_cr_systeminstrs
        raw |= (uint)Xt.Index;
        return raw;
    }
    /// <summary>
    /// Cache prefetch prediction restriction by context.
    /// </summary>
    /// <remarks><code>CPP RCTX, Xt</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CPP_sys_cr_systeminstrs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CPP(Arm64RestrictionByContextKind RCTX, Arm64RegisterX Xt)
    {
        uint raw = 0xD50B73E0U; // Encoding for: CPP_sys_cr_systeminstrs
        raw |= (uint)Xt.Index;
        return raw;
    }
    /// <summary>
    /// Consumption of speculative data barrier.
    /// </summary>
    /// <remarks><code>CSDB </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CSDB_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint CSDB()
    {
        uint raw = 0xD503229FU; // Encoding for: CSDB_hi_hints
        return raw;
    }
    /// <summary>
    /// Data cache operation.
    /// </summary>
    /// <remarks><code>DC dc_op, Xt</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DC_sys_cr_systeminstrs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint DC(Arm64SystemRegister dc_op, Arm64RegisterX Xt)
    {
        uint raw = 0xD5087000U; // Encoding for: DC_sys_cr_systeminstrs
        raw |= (uint)Xt.Index;
        return raw;
    }
    /// <summary>
    /// Debug change PE state to EL1.
    /// </summary>
    /// <remarks><code>DCPS1 {#imm}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DCPS1_dc_exception), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint DCPS1(ushort imm = default)
    {
        uint raw = 0xD4A00001U; // Encoding for: DCPS1_dc_exception
        raw |= (uint)imm << 5;
        return raw;
    }
    /// <summary>
    /// Debug change PE state to EL2.
    /// </summary>
    /// <remarks><code>DCPS2 {#imm}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DCPS2_dc_exception), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint DCPS2(ushort imm = default)
    {
        uint raw = 0xD4A00002U; // Encoding for: DCPS2_dc_exception
        raw |= (uint)imm << 5;
        return raw;
    }
    /// <summary>
    /// Debug change PE state to EL3.
    /// </summary>
    /// <remarks><code>DCPS3 {#imm}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DCPS3_dc_exception), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint DCPS3(ushort imm = default)
    {
        uint raw = 0xD4A00003U; // Encoding for: DCPS3_dc_exception
        raw |= (uint)imm << 5;
        return raw;
    }
    /// <summary>
    /// Data gathering hint.
    /// </summary>
    /// <remarks><code>DGH </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DGH_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint DGH()
    {
        uint raw = 0xD50320DFU; // Encoding for: DGH_hi_hints
        return raw;
    }
    /// <summary>
    /// Data memory barrier.
    /// </summary>
    /// <remarks><code>DMB (option|#imm)</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DMB_bo_barriers), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint DMB(Arm64BarrierOperationLimitKind option)
    {
        uint raw = 0xD50330BFU; // Encoding for: DMB_bo_barriers
        return raw;
    }
    /// <summary>
    /// Debug restore PE state.
    /// </summary>
    /// <remarks><code>DRPS </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DRPS_64e_branch_reg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint DRPS()
    {
        uint raw = 0xD6BF03E0U; // Encoding for: DRPS_64e_branch_reg
        return raw;
    }
    /// <summary>
    /// Data synchronization barrier.
    /// </summary>
    /// <remarks><code>DSB (option|#imm)</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DSB_bo_barriers), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint DSB(Arm64BarrierOperationLimitKind option)
    {
        uint raw = 0xD503309FU; // Encoding for: DSB_bo_barriers
        return raw;
    }
    /// <summary>
    /// Data synchronization barrier.
    /// </summary>
    /// <remarks><code>DSB optionnXS</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DSB_bon_barriers), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint DSB(Arm64DataSynchronizationKind option)
    {
        uint raw = 0xD503323FU; // Encoding for: DSB_bon_barriers
        return raw;
    }
    /// <summary>
    /// Data value prediction restriction by context.
    /// </summary>
    /// <remarks><code>DVP RCTX, Xt</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DVP_sys_cr_systeminstrs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint DVP(Arm64RestrictionByContextKind RCTX, Arm64RegisterX Xt)
    {
        uint raw = 0xD50B73A0U; // Encoding for: DVP_sys_cr_systeminstrs
        raw |= (uint)Xt.Index;
        return raw;
    }
    /// <summary>
    /// Exception return.
    /// </summary>
    /// <remarks><code>ERET </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ERET_64e_branch_reg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ERET()
    {
        uint raw = 0xD69F03E0U; // Encoding for: ERET_64e_branch_reg
        return raw;
    }
    /// <summary>
    /// Error synchronization barrier.
    /// </summary>
    /// <remarks><code>ESB </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ESB_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ESB()
    {
        uint raw = 0xD503221FU; // Encoding for: ESB_hi_hints
        return raw;
    }
    /// <summary>
    /// Guarded Control Stack barrier.
    /// </summary>
    /// <remarks><code>GCSB DSYNC</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.GCSB_hd_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint GCSB(Arm64DataSyncKind DSYNC)
    {
        uint raw = 0xD503227FU; // Encoding for: GCSB_hd_hints
        return raw;
    }
    /// <summary>
    /// Guarded Control Stack pop and compare exception return record.
    /// </summary>
    /// <remarks><code>GCSPOPCX </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.GCSPOPCX_sys_cr_systeminstrs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint GCSPOPCX()
    {
        uint raw = 0xD50877A0U; // Encoding for: GCSPOPCX_sys_cr_systeminstrs
        return raw;
    }
    /// <summary>
    /// Guarded Control Stack pop.
    /// </summary>
    /// <remarks><code>GCSPOPM {Xt}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.GCSPOPM_sysl_rc_systeminstrs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint GCSPOPM(Arm64RegisterX Xt = default)
    {
        uint raw = 0xD52B7720U; // Encoding for: GCSPOPM_sysl_rc_systeminstrs
        raw |= (uint)Xt.Index;
        return raw;
    }
    /// <summary>
    /// Guarded Control Stack pop exception return record.
    /// </summary>
    /// <remarks><code>GCSPOPX </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.GCSPOPX_sys_cr_systeminstrs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint GCSPOPX()
    {
        uint raw = 0xD50877C0U; // Encoding for: GCSPOPX_sys_cr_systeminstrs
        return raw;
    }
    /// <summary>
    /// Guarded Control Stack push.
    /// </summary>
    /// <remarks><code>GCSPUSHM Xt</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.GCSPUSHM_sys_cr_systeminstrs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint GCSPUSHM(Arm64RegisterX Xt)
    {
        uint raw = 0xD50B7700U; // Encoding for: GCSPUSHM_sys_cr_systeminstrs
        raw |= (uint)Xt.Index;
        return raw;
    }
    /// <summary>
    /// Guarded Control Stack push exception return record.
    /// </summary>
    /// <remarks><code>GCSPUSHX </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.GCSPUSHX_sys_cr_systeminstrs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint GCSPUSHX()
    {
        uint raw = 0xD5087780U; // Encoding for: GCSPUSHX_sys_cr_systeminstrs
        return raw;
    }
    /// <summary>
    /// Guarded Control Stack switch stack 1.
    /// </summary>
    /// <remarks><code>GCSSS1 Xt</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.GCSSS1_sys_cr_systeminstrs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint GCSSS1(Arm64RegisterX Xt)
    {
        uint raw = 0xD50B7740U; // Encoding for: GCSSS1_sys_cr_systeminstrs
        raw |= (uint)Xt.Index;
        return raw;
    }
    /// <summary>
    /// Guarded Control Stack switch stack 2.
    /// </summary>
    /// <remarks><code>GCSSS2 Xt</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.GCSSS2_sysl_rc_systeminstrs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint GCSSS2(Arm64RegisterX Xt)
    {
        uint raw = 0xD52B7760U; // Encoding for: GCSSS2_sysl_rc_systeminstrs
        raw |= (uint)Xt.Index;
        return raw;
    }
    /// <summary>
    /// Hint instruction.
    /// </summary>
    /// <remarks><code>HINT #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.HINT_hm_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint HINT(byte imm)
    {
        uint raw = 0xD503201FU; // Encoding for: HINT_hm_hints
        raw |= (uint)(imm & 0x7F) << 5;
        return raw;
    }
    /// <summary>
    /// Halt instruction.
    /// </summary>
    /// <remarks><code>HLT #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.HLT_ex_exception), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint HLT(ushort imm)
    {
        uint raw = 0xD4400000U; // Encoding for: HLT_ex_exception
        raw |= (uint)imm << 5;
        return raw;
    }
    /// <summary>
    /// Hypervisor call.
    /// </summary>
    /// <remarks><code>HVC #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.HVC_ex_exception), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint HVC(ushort imm)
    {
        uint raw = 0xD4000002U; // Encoding for: HVC_ex_exception
        raw |= (uint)imm << 5;
        return raw;
    }
    /// <summary>
    /// Instruction cache operation.
    /// </summary>
    /// <remarks><code>IC ic_op {, Xt}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.IC_sys_cr_systeminstrs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint IC(Arm64SystemRegister ic_op, Arm64RegisterX Xt = default)
    {
        uint raw = 0xD5087000U; // Encoding for: IC_sys_cr_systeminstrs
        raw |= (uint)Xt.Index;
        return raw;
    }
    /// <summary>
    /// Instruction synchronization barrier.
    /// </summary>
    /// <remarks><code>ISB {option, #imm}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ISB_bi_barriers), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint ISB(byte option = default)
    {
        uint raw = 0xD50330DFU; // Encoding for: ISB_bi_barriers
        return raw;
    }
    /// <summary>
    /// Move System register to two adjacent general-purpose registers.
    /// </summary>
    /// <remarks><code>MRRS Xt, Xt+1, (systemreg|Sop0_op1_Cn_Cm_op2)</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MRRS_rs_systemmovepr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MRRS(Arm64RegisterX Xt, Arm64RegisterX Xt_1, Arm64SystemRegister systemreg)
    {
        uint raw = 0xD5700000U; // Encoding for: MRRS_rs_systemmovepr
        raw |= (uint)Xt.Index;
        raw = Xt_1.Index == Xt.Index + 1 ? 0U : throw new ArgumentOutOfRangeException(nameof(Xt_1), $"Invalid Register. Index `{Xt_1.Index}` must be + 1 from operand Xt with index `{Xt.Index}`");
        return raw;
    }
    /// <summary>
    /// Move System register to general-purpose register.
    /// </summary>
    /// <remarks><code>MRS Xt, (systemreg|Sop0_op1_Cn_Cm_op2)</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MRS_rs_systemmove), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MRS(Arm64RegisterX Xt, Arm64SystemRegister systemreg)
    {
        uint raw = 0xD5300000U; // Encoding for: MRS_rs_systemmove
        raw |= (uint)Xt.Index;
        return raw;
    }
    /// <summary>
    /// Move immediate value to special register.
    /// </summary>
    /// <remarks><code>MSR pstatefield, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MSR_si_pstate), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MSR(Arm64ProcessStateField pstatefield, byte imm)
    {
        uint raw = 0xD500401FU; // Encoding for: MSR_si_pstate
        raw |= (uint)(imm & 0xF) << 8;
        return raw;
    }
    /// <summary>
    /// Move general-purpose register to System register.
    /// </summary>
    /// <remarks><code>MSR (systemreg|Sop0_op1_Cn_Cm_op2), Xt</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MSR_sr_systemmove), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MSR(Arm64SystemRegister systemreg, Arm64RegisterX Xt)
    {
        uint raw = 0xD5100000U; // Encoding for: MSR_sr_systemmove
        raw |= (uint)Xt.Index;
        return raw;
    }
    /// <summary>
    /// Move two adjacent general-purpose registers to System register.
    /// </summary>
    /// <remarks><code>MSRR (systemreg|Sop0_op1_Cn_Cm_op2), Xt, Xt+1</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MSRR_sr_systemmovepr), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint MSRR(Arm64SystemRegister systemreg, Arm64RegisterX Xt, Arm64RegisterX Xt_1)
    {
        uint raw = 0xD5500000U; // Encoding for: MSRR_sr_systemmovepr
        raw |= (uint)Xt.Index;
        raw = Xt_1.Index == Xt.Index + 1 ? 0U : throw new ArgumentOutOfRangeException(nameof(Xt_1), $"Invalid Register. Index `{Xt_1.Index}` must be + 1 from operand Xt with index `{Xt.Index}`");
        return raw;
    }
    /// <summary>
    /// No operation.
    /// </summary>
    /// <remarks><code>NOP </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NOP_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint NOP()
    {
        uint raw = 0xD503201FU; // Encoding for: NOP_hi_hints
        return raw;
    }
    /// <summary>
    /// Pointer Authentication Code for instruction address, using key A.
    /// </summary>
    /// <remarks><code>PACIA1716 </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PACIA1716_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint PACIA1716()
    {
        uint raw = 0xD503211FU; // Encoding for: PACIA1716_hi_hints
        return raw;
    }
    /// <summary>
    /// Pointer Authentication Code for instruction address, using key A.
    /// </summary>
    /// <remarks><code>PACIASP </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PACIASP_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint PACIASP()
    {
        uint raw = 0xD503233FU; // Encoding for: PACIASP_hi_hints
        return raw;
    }
    /// <summary>
    /// Pointer Authentication Code for instruction address, using key A.
    /// </summary>
    /// <remarks><code>PACIAZ </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PACIAZ_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint PACIAZ()
    {
        uint raw = 0xD503231FU; // Encoding for: PACIAZ_hi_hints
        return raw;
    }
    /// <summary>
    /// Pointer Authentication Code for instruction address, using key B.
    /// </summary>
    /// <remarks><code>PACIB1716 </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PACIB1716_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint PACIB1716()
    {
        uint raw = 0xD503215FU; // Encoding for: PACIB1716_hi_hints
        return raw;
    }
    /// <summary>
    /// Pointer Authentication Code for instruction address, using key B.
    /// </summary>
    /// <remarks><code>PACIBSP </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PACIBSP_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint PACIBSP()
    {
        uint raw = 0xD503237FU; // Encoding for: PACIBSP_hi_hints
        return raw;
    }
    /// <summary>
    /// Pointer Authentication Code for instruction address, using key B.
    /// </summary>
    /// <remarks><code>PACIBZ </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PACIBZ_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint PACIBZ()
    {
        uint raw = 0xD503235FU; // Encoding for: PACIBZ_hi_hints
        return raw;
    }
    /// <summary>
    /// Pointer authentication modifier.
    /// </summary>
    /// <remarks><code>PACM </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PACM_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint PACM()
    {
        uint raw = 0xD50324FFU; // Encoding for: PACM_hi_hints
        return raw;
    }
    /// <summary>
    /// Profiling synchronization barrier.
    /// </summary>
    /// <remarks><code>PSB CSYNC</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PSB_hc_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint PSB(Arm64CodeSyncKind CSYNC)
    {
        uint raw = 0xD503223FU; // Encoding for: PSB_hc_hints
        return raw;
    }
    /// <summary>
    /// Physical speculative store bypass barrier.
    /// </summary>
    /// <remarks><code>PSSBB </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PSSBB_dsb_bo_barriers), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint PSSBB()
    {
        uint raw = 0xD503349FU; // Encoding for: PSSBB_dsb_bo_barriers
        return raw;
    }
    /// <summary>
    /// Speculation barrier.
    /// </summary>
    /// <remarks><code>SB </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SB_only_barriers), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SB()
    {
        uint raw = 0xD50330FFU; // Encoding for: SB_only_barriers
        return raw;
    }
    /// <summary>
    /// Send event.
    /// </summary>
    /// <remarks><code>SEV </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SEV_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SEV()
    {
        uint raw = 0xD503209FU; // Encoding for: SEV_hi_hints
        return raw;
    }
    /// <summary>
    /// Send event local.
    /// </summary>
    /// <remarks><code>SEVL </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SEVL_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SEVL()
    {
        uint raw = 0xD50320BFU; // Encoding for: SEVL_hi_hints
        return raw;
    }
    /// <summary>
    /// Secure monitor call.
    /// </summary>
    /// <remarks><code>SMC #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMC_ex_exception), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SMC(ushort imm)
    {
        uint raw = 0xD4000003U; // Encoding for: SMC_ex_exception
        raw |= (uint)imm << 5;
        return raw;
    }
    /// <summary>
    /// Speculative store bypass barrier.
    /// </summary>
    /// <remarks><code>SSBB </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSBB_dsb_bo_barriers), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SSBB()
    {
        uint raw = 0xD503309FU; // Encoding for: SSBB_dsb_bo_barriers
        return raw;
    }
    /// <summary>
    /// Store shared hint.
    /// </summary>
    /// <remarks><code>STSHH policy</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STSHH_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint STSHH(Arm64StoredSharedHintPolicyKind policy)
    {
        uint raw = 0xD503261FU; // Encoding for: STSHH_hi_hints
        return raw;
    }
    /// <summary>
    /// Supervisor call.
    /// </summary>
    /// <remarks><code>SVC #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SVC_ex_exception), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SVC(ushort imm)
    {
        uint raw = 0xD4000001U; // Encoding for: SVC_ex_exception
        raw |= (uint)imm << 5;
        return raw;
    }
    /// <summary>
    /// System instruction.
    /// </summary>
    /// <remarks><code>SYS #op1, Cn, Cm, #op2 {, Xt}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SYS_cr_systeminstrs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SYS(byte op1, Arm64RegisterC Cn, Arm64RegisterC Cm, byte op2, Arm64RegisterX Xt = default)
    {
        uint raw = 0xD5080000U; // Encoding for: SYS_cr_systeminstrs
        raw |= (uint)(op1 & 0x7) << 16;
        raw |= (uint)(Cn.Index & 0xF) << 12;
        raw |= (uint)(Cm.Index & 0xF) << 8;
        raw |= (uint)(op2 & 0x7) << 5;
        raw |= (uint)Xt.Index;
        return raw;
    }
    /// <summary>
    /// System instruction with result.
    /// </summary>
    /// <remarks><code>SYSL Xt, #op1, Cn, Cm, #op2</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SYSL_rc_systeminstrs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SYSL(Arm64RegisterX Xt, byte op1, Arm64RegisterC Cn, Arm64RegisterC Cm, byte op2)
    {
        uint raw = 0xD5280000U; // Encoding for: SYSL_rc_systeminstrs
        raw |= (uint)Xt.Index;
        raw |= (uint)(op1 & 0x7) << 16;
        raw |= (uint)(Cn.Index & 0xF) << 12;
        raw |= (uint)(Cm.Index & 0xF) << 8;
        raw |= (uint)(op2 & 0x7) << 5;
        return raw;
    }
    /// <summary>
    /// 128-bit system instruction.
    /// </summary>
    /// <remarks><code>SYSP #op1, Cn, Cm, #op2 {, Xt1, Xt2}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SYSP_cr_syspairinstrs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint SYSP(byte op1, Arm64RegisterC Cn, Arm64RegisterC Cm, byte op2, Arm64RegisterX Xt1 = default)
    {
        uint raw = 0xD5480000U; // Encoding for: SYSP_cr_syspairinstrs
        raw |= (uint)(op1 & 0x7) << 16;
        raw |= (uint)(Cn.Index & 0xF) << 12;
        raw |= (uint)(Cm.Index & 0xF) << 8;
        raw |= (uint)(op2 & 0x7) << 5;
        raw |= (uint)Xt1.Index;
        return raw;
    }
    /// <summary>
    /// Cancel current transaction.
    /// </summary>
    /// <remarks><code>TCANCEL #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TCANCEL_ex_exception), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TCANCEL(ushort imm)
    {
        uint raw = 0xD4600000U; // Encoding for: TCANCEL_ex_exception
        raw |= (uint)imm << 5;
        return raw;
    }
    /// <summary>
    /// Commit current transaction.
    /// </summary>
    /// <remarks><code>TCOMMIT </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TCOMMIT_only_barriers), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TCOMMIT()
    {
        uint raw = 0xD503307FU; // Encoding for: TCOMMIT_only_barriers
        return raw;
    }
    /// <summary>
    /// TLB invalidate operation.
    /// </summary>
    /// <remarks><code>TLBI tlbi_op {, Xt}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TLBI_sys_cr_systeminstrs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TLBI(Arm64SystemRegister tlbi_op, Arm64RegisterX Xt = default)
    {
        uint raw = 0xD5088000U; // Encoding for: TLBI_sys_cr_systeminstrs
        raw |= (uint)Xt.Index;
        return raw;
    }
    /// <summary>
    /// TLB invalidate pair operation.
    /// </summary>
    /// <remarks><code>TLBIP tlbip_op {, Xt1, Xt2}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TLBIP_sysp_cr_syspairinstrs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TLBIP(Arm64SystemRegister tlbip_op, Arm64RegisterX Xt1 = default)
    {
        uint raw = 0xD5488000U; // Encoding for: TLBIP_sysp_cr_syspairinstrs
        raw |= (uint)Xt1.Index;
        return raw;
    }
    /// <summary>
    /// Trace instrumentation.
    /// </summary>
    /// <remarks><code>TRCIT Xt</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRCIT_sys_cr_systeminstrs), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TRCIT(Arm64RegisterX Xt)
    {
        uint raw = 0xD50B72E0U; // Encoding for: TRCIT_sys_cr_systeminstrs
        raw |= (uint)Xt.Index;
        return raw;
    }
    /// <summary>
    /// Trace synchronization barrier.
    /// </summary>
    /// <remarks><code>TSB CSYNC</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TSB_hc_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TSB(Arm64CodeSyncKind CSYNC)
    {
        uint raw = 0xD503225FU; // Encoding for: TSB_hc_hints
        return raw;
    }
    /// <summary>
    /// Start transaction.
    /// </summary>
    /// <remarks><code>TSTART Xt</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TSTART_br_systemresult), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TSTART(Arm64RegisterX Xt)
    {
        uint raw = 0xD5233060U; // Encoding for: TSTART_br_systemresult
        raw |= (uint)Xt.Index;
        return raw;
    }
    /// <summary>
    /// Test transaction state.
    /// </summary>
    /// <remarks><code>TTEST Xt</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TTEST_br_systemresult), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint TTEST(Arm64RegisterX Xt)
    {
        uint raw = 0xD5233160U; // Encoding for: TTEST_br_systemresult
        raw |= (uint)Xt.Index;
        return raw;
    }
    /// <summary>
    /// Wait for event.
    /// </summary>
    /// <remarks><code>WFE </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.WFE_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint WFE()
    {
        uint raw = 0xD503205FU; // Encoding for: WFE_hi_hints
        return raw;
    }
    /// <summary>
    /// Wait for event with timeout.
    /// </summary>
    /// <remarks><code>WFET Xt</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.WFET_only_systeminstrswithreg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint WFET(Arm64RegisterX Xt)
    {
        uint raw = 0xD5031000U; // Encoding for: WFET_only_systeminstrswithreg
        raw |= (uint)Xt.Index;
        return raw;
    }
    /// <summary>
    /// Wait for interrupt.
    /// </summary>
    /// <remarks><code>WFI </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.WFI_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint WFI()
    {
        uint raw = 0xD503207FU; // Encoding for: WFI_hi_hints
        return raw;
    }
    /// <summary>
    /// Wait for interrupt with timeout.
    /// </summary>
    /// <remarks><code>WFIT Xt</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.WFIT_only_systeminstrswithreg), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint WFIT(Arm64RegisterX Xt)
    {
        uint raw = 0xD5031020U; // Encoding for: WFIT_only_systeminstrswithreg
        raw |= (uint)Xt.Index;
        return raw;
    }
    /// <summary>
    /// Convert floating-point condition flags from external format to Arm format.
    /// </summary>
    /// <remarks><code>XAFLAG </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.XAFLAG_m_pstate), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint XAFLAG()
    {
        uint raw = 0xD500403FU; // Encoding for: XAFLAG_m_pstate
        return raw;
    }
    /// <summary>
    /// Strip Pointer Authentication Code.
    /// </summary>
    /// <remarks><code>XPACLRI </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.XPACLRI_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint XPACLRI()
    {
        uint raw = 0xD50320FFU; // Encoding for: XPACLRI_hi_hints
        return raw;
    }
    /// <summary>
    /// Yield.
    /// </summary>
    /// <remarks><code>YIELD </code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.YIELD_hi_hints), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint YIELD()
    {
        uint raw = 0xD503203FU; // Encoding for: YIELD_hi_hints
        return raw;
    }
}
