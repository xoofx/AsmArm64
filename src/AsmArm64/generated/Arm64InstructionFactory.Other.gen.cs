// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
namespace AsmArm64;
static partial class Arm64InstructionFactory
{
    /// <summary>
    /// Load register, with pointer authentication.
    /// </summary>
    /// <remarks><code>LDRAA Xt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRAA_64_ldst_pac), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDRAA(Arm64RegisterX Xt, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0xF8200400U; // Encoding for: LDRAA_64_ldst_pac
        raw |= (uint)(Xt.Index);
        return raw;
    }
    /// <summary>
    /// Load register, with pointer authentication.
    /// </summary>
    /// <remarks><code>LDRAA Xt, [Xn|SP{, #simm}]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRAA_64w_ldst_pac), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDRAA(Arm64RegisterX Xt, Arm64OptionalImmediateMemoryAccessorPreIncrement src)
    {
        uint raw = 0xF8200C00U; // Encoding for: LDRAA_64w_ldst_pac
        raw |= (uint)(Xt.Index);
        return raw;
    }
    /// <summary>
    /// Load register, with pointer authentication.
    /// </summary>
    /// <remarks><code>LDRAB Xt, [Xn|SP{, #simm}]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRAB_64_ldst_pac), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDRAB(Arm64RegisterX Xt, Arm64OptionalImmediateMemoryAccessor src)
    {
        uint raw = 0xF8A00400U; // Encoding for: LDRAB_64_ldst_pac
        raw |= (uint)(Xt.Index);
        return raw;
    }
    /// <summary>
    /// Load register, with pointer authentication.
    /// </summary>
    /// <remarks><code>LDRAB Xt, [Xn|SP{, #simm}]!</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDRAB_64w_ldst_pac), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint LDRAB(Arm64RegisterX Xt, Arm64OptionalImmediateMemoryAccessorPreIncrement src)
    {
        uint raw = 0xF8A00C00U; // Encoding for: LDRAB_64w_ldst_pac
        raw |= (uint)(Xt.Index);
        return raw;
    }
}
