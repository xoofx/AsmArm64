// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
using System.Runtime.CompilerServices;
namespace AsmArm64;
partial class Arm64Assembler
{
    /// <summary>
    /// Absolute value (vector).
    /// </summary>
    /// <remarks><code>ABS Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ABS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ABS(Arm64RegisterD Dd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.ABS(Dd, Dn));
    /// <summary>
    /// Absolute value (vector).
    /// </summary>
    /// <remarks><code>ABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ABS(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
         => AddInstruction(Arm64InstructionFactory.ABS(Vd_T, Vn_T));
    /// <summary>
    /// Absolute value (vector).
    /// </summary>
    /// <remarks><code>ABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ABS(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
         => AddInstruction(Arm64InstructionFactory.ABS(Vd_T, Vn_T));
    /// <summary>
    /// Absolute value (vector).
    /// </summary>
    /// <remarks><code>ABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ABS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.ABS(Vd_T, Vn_T));
    /// <summary>
    /// Absolute value (vector).
    /// </summary>
    /// <remarks><code>ABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ABS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.ABS(Vd_T, Vn_T));
    /// <summary>
    /// Absolute value (vector).
    /// </summary>
    /// <remarks><code>ABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ABS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.ABS(Vd_T, Vn_T));
    /// <summary>
    /// Absolute value (vector).
    /// </summary>
    /// <remarks><code>ABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ABS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.ABS(Vd_T, Vn_T));
    /// <summary>
    /// Absolute value (vector).
    /// </summary>
    /// <remarks><code>ABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ABS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.ABS(Vd_T, Vn_T));
    /// <summary>
    /// Add (vector).
    /// </summary>
    /// <remarks><code>ADD Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADD_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADD(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
         => AddInstruction(Arm64InstructionFactory.ADD(Dd, Dn, Dm));
    /// <summary>
    /// Add (vector).
    /// </summary>
    /// <remarks><code>ADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADD(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.ADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Add (vector).
    /// </summary>
    /// <remarks><code>ADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADD(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.ADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Add (vector).
    /// </summary>
    /// <remarks><code>ADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.ADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Add (vector).
    /// </summary>
    /// <remarks><code>ADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.ADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Add (vector).
    /// </summary>
    /// <remarks><code>ADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.ADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Add (vector).
    /// </summary>
    /// <remarks><code>ADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.ADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Add (vector).
    /// </summary>
    /// <remarks><code>ADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADD(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.ADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Add returning high narrow.
    /// </summary>
    /// <remarks><code>ADDHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDHN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8H Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.ADDHN(Vd_Tb, Vn_Ta, Vm_Ta));
    /// <summary>
    /// Add returning high narrow.
    /// </summary>
    /// <remarks><code>ADDHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDHN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4S Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.ADDHN(Vd_Tb, Vn_Ta, Vm_Ta));
    /// <summary>
    /// Add returning high narrow.
    /// </summary>
    /// <remarks><code>ADDHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDHN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2D Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.ADDHN(Vd_Tb, Vn_Ta, Vm_Ta));
    /// <summary>
    /// Add returning high narrow.
    /// </summary>
    /// <remarks><code>ADDHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDHN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8H Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.ADDHN2(Vd_Tb, Vn_Ta, Vm_Ta));
    /// <summary>
    /// Add returning high narrow.
    /// </summary>
    /// <remarks><code>ADDHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDHN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4S Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.ADDHN2(Vd_Tb, Vn_Ta, Vm_Ta));
    /// <summary>
    /// Add returning high narrow.
    /// </summary>
    /// <remarks><code>ADDHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDHN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2D Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.ADDHN2(Vd_Tb, Vn_Ta, Vm_Ta));
    /// <summary>
    /// Add pair of elements (scalar).
    /// </summary>
    /// <remarks><code>ADDP Dd, Vn.2D</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDP_asisdpair_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDP(Arm64RegisterD Dd, Arm64RegisterV_2D Vn_2D)
         => AddInstruction(Arm64InstructionFactory.ADDP(Dd, Vn_2D));
    /// <summary>
    /// Add pairwise (vector).
    /// </summary>
    /// <remarks><code>ADDP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDP(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.ADDP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Add pairwise (vector).
    /// </summary>
    /// <remarks><code>ADDP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDP(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.ADDP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Add pairwise (vector).
    /// </summary>
    /// <remarks><code>ADDP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDP(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.ADDP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Add pairwise (vector).
    /// </summary>
    /// <remarks><code>ADDP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDP(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.ADDP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Add pairwise (vector).
    /// </summary>
    /// <remarks><code>ADDP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDP(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.ADDP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Add pairwise (vector).
    /// </summary>
    /// <remarks><code>ADDP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDP(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.ADDP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Add pairwise (vector).
    /// </summary>
    /// <remarks><code>ADDP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDP(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.ADDP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Add across vector.
    /// </summary>
    /// <remarks><code>ADDV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDV(Arm64RegisterB Vd, Arm64RegisterV_8B Vn_T)
         => AddInstruction(Arm64InstructionFactory.ADDV(Vd, Vn_T));
    /// <summary>
    /// Add across vector.
    /// </summary>
    /// <remarks><code>ADDV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDV(Arm64RegisterB Vd, Arm64RegisterV_16B Vn_T)
         => AddInstruction(Arm64InstructionFactory.ADDV(Vd, Vn_T));
    /// <summary>
    /// Add across vector.
    /// </summary>
    /// <remarks><code>ADDV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDV(Arm64RegisterH Vd, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.ADDV(Vd, Vn_T));
    /// <summary>
    /// Add across vector.
    /// </summary>
    /// <remarks><code>ADDV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDV(Arm64RegisterH Vd, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.ADDV(Vd, Vn_T));
    /// <summary>
    /// Add across vector.
    /// </summary>
    /// <remarks><code>ADDV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ADDV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ADDV(Arm64RegisterS Vd, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.ADDV(Vd, Vn_T));
    /// <summary>
    /// AES single round decryption.
    /// </summary>
    /// <remarks><code>AESD Vd.16B, Vn.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AESD_b_cryptoaes), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AESD(Arm64RegisterV_16B Vd_16B, Arm64RegisterV_16B Vn_16B)
         => AddInstruction(Arm64InstructionFactory.AESD(Vd_16B, Vn_16B));
    /// <summary>
    /// AES single round encryption.
    /// </summary>
    /// <remarks><code>AESE Vd.16B, Vn.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AESE_b_cryptoaes), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AESE(Arm64RegisterV_16B Vd_16B, Arm64RegisterV_16B Vn_16B)
         => AddInstruction(Arm64InstructionFactory.AESE(Vd_16B, Vn_16B));
    /// <summary>
    /// AES inverse mix columns.
    /// </summary>
    /// <remarks><code>AESIMC Vd.16B, Vn.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AESIMC_b_cryptoaes), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AESIMC(Arm64RegisterV_16B Vd_16B, Arm64RegisterV_16B Vn_16B)
         => AddInstruction(Arm64InstructionFactory.AESIMC(Vd_16B, Vn_16B));
    /// <summary>
    /// AES mix columns.
    /// </summary>
    /// <remarks><code>AESMC Vd.16B, Vn.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AESMC_b_cryptoaes), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AESMC(Arm64RegisterV_16B Vd_16B, Arm64RegisterV_16B Vn_16B)
         => AddInstruction(Arm64InstructionFactory.AESMC(Vd_16B, Vn_16B));
    /// <summary>
    /// Bitwise AND (vector).
    /// </summary>
    /// <remarks><code>AND Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AND_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AND(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.AND(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Bitwise AND (vector).
    /// </summary>
    /// <remarks><code>AND Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.AND_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AND(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.AND(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Bit clear and exclusive-OR.
    /// </summary>
    /// <remarks><code>BCAX Vd.16B, Vn.16B, Vm.16B, Va.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BCAX_vvv16_crypto4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BCAX(Arm64RegisterV_16B Vd_16B, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B, Arm64RegisterV_16B Va_16B)
         => AddInstruction(Arm64InstructionFactory.BCAX(Vd_16B, Vn_16B, Vm_16B, Va_16B));
    /// <summary>
    /// 8-bit floating-point convert to BFloat16 (vector).
    /// </summary>
    /// <remarks><code>BF1CVTL Vd.8H, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BF1CVTL_asimdmisc_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BF1CVTL(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_8B Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.BF1CVTL(Vd_8H, Vn_Ta));
    /// <summary>
    /// 8-bit floating-point convert to BFloat16 (vector).
    /// </summary>
    /// <remarks><code>BF1CVTL2 Vd.8H, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BF1CVTL2_asimdmisc_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BF1CVTL2(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_16B Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.BF1CVTL2(Vd_8H, Vn_Ta));
    /// <summary>
    /// 8-bit floating-point convert to BFloat16 (vector).
    /// </summary>
    /// <remarks><code>BF2CVTL Vd.8H, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BF2CVTL_asimdmisc_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BF2CVTL(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_8B Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.BF2CVTL(Vd_8H, Vn_Ta));
    /// <summary>
    /// 8-bit floating-point convert to BFloat16 (vector).
    /// </summary>
    /// <remarks><code>BF2CVTL2 Vd.8H, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BF2CVTL2_asimdmisc_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BF2CVTL2(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_16B Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.BF2CVTL2(Vd_8H, Vn_Ta));
    /// <summary>
    /// Floating-point convert from single-precision to BFloat16 format (vector).
    /// </summary>
    /// <remarks><code>BFCVTN Vd.Ta, Vn.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFCVTN_asimdmisc_4s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BFCVTN(Arm64RegisterV_4H Vd_Ta, Arm64RegisterV_4S Vn_4S)
         => AddInstruction(Arm64InstructionFactory.BFCVTN(Vd_Ta, Vn_4S));
    /// <summary>
    /// Floating-point convert from single-precision to BFloat16 format (vector).
    /// </summary>
    /// <remarks><code>BFCVTN2 Vd.Ta, Vn.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFCVTN2_asimdmisc_4s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BFCVTN2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_4S Vn_4S)
         => AddInstruction(Arm64InstructionFactory.BFCVTN2(Vd_Ta, Vn_4S));
    /// <summary>
    /// BFloat16 floating-point dot product (vector, by element).
    /// </summary>
    /// <remarks><code>BFDOT Vd.Ta, Vn.Tb, Vm.2H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFDOT_asimdelem_e), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BFDOT(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_2H.Indexed Vm_2H)
         => AddInstruction(Arm64InstructionFactory.BFDOT(Vd_Ta, Vn_Tb, Vm_2H));
    /// <summary>
    /// BFloat16 floating-point dot product (vector, by element).
    /// </summary>
    /// <remarks><code>BFDOT Vd.Ta, Vn.Tb, Vm.2H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFDOT_asimdelem_e), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BFDOT(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_2H.Indexed Vm_2H)
         => AddInstruction(Arm64InstructionFactory.BFDOT(Vd_Ta, Vn_Tb, Vm_2H));
    /// <summary>
    /// BFloat16 floating-point dot product (vector).
    /// </summary>
    /// <remarks><code>BFDOT Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFDOT_asimdsame2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BFDOT(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.BFDOT(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// BFloat16 floating-point dot product (vector).
    /// </summary>
    /// <remarks><code>BFDOT Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFDOT_asimdsame2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BFDOT(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.BFDOT(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// BFloat16 floating-point widening multiply-add long (by element).
    /// </summary>
    /// <remarks><code>BFMLALB Vd.4S, Vn.8H, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFMLALB_asimdelem_f), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BFMLALB(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_8H Vn_8H, Arm64RegisterV_H.Indexed Vm_H)
         => AddInstruction(Arm64InstructionFactory.BFMLALB(Vd_4S, Vn_8H, Vm_H));
    /// <summary>
    /// BFloat16 floating-point widening multiply-add long (vector).
    /// </summary>
    /// <remarks><code>BFMLALB Vd.4S, Vn.8H, Vm.8H</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFMLALB_asimdsame2_f), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BFMLALB(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_8H Vn_8H, Arm64RegisterV_8H Vm_8H)
         => AddInstruction(Arm64InstructionFactory.BFMLALB(Vd_4S, Vn_8H, Vm_8H));
    /// <summary>
    /// BFloat16 floating-point widening multiply-add long (by element).
    /// </summary>
    /// <remarks><code>BFMLALT Vd.4S, Vn.8H, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFMLALT_asimdelem_f), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BFMLALT(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_8H Vn_8H, Arm64RegisterV_H.Indexed Vm_H)
         => AddInstruction(Arm64InstructionFactory.BFMLALT(Vd_4S, Vn_8H, Vm_H));
    /// <summary>
    /// BFloat16 floating-point widening multiply-add long (vector).
    /// </summary>
    /// <remarks><code>BFMLALT Vd.4S, Vn.8H, Vm.8H</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFMLALT_asimdsame2_f), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BFMLALT(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_8H Vn_8H, Arm64RegisterV_8H Vm_8H)
         => AddInstruction(Arm64InstructionFactory.BFMLALT(Vd_4S, Vn_8H, Vm_8H));
    /// <summary>
    /// BFloat16 floating-point matrix multiply-accumulate into 2x2 matrix.
    /// </summary>
    /// <remarks><code>BFMMLA Vd.4S, Vn.8H, Vm.8H</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFMMLA_asimdsame2_e), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BFMMLA(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_8H Vn_8H, Arm64RegisterV_8H Vm_8H)
         => AddInstruction(Arm64InstructionFactory.BFMMLA(Vd_4S, Vn_8H, Vm_8H));
    /// <summary>
    /// Bitwise bit clear (vector, immediate).
    /// </summary>
    /// <remarks><code>BIC Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BIC_asimdimm_l_hl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BIC(Arm64RegisterV_4H Vd_T, byte imm8, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.BIC(Vd_T, imm8, LSL, amount));
    /// <summary>
    /// Bitwise bit clear (vector, immediate).
    /// </summary>
    /// <remarks><code>BIC Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BIC_asimdimm_l_hl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BIC(Arm64RegisterV_8H Vd_T, byte imm8, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.BIC(Vd_T, imm8, LSL, amount));
    /// <summary>
    /// Bitwise bit clear (vector, immediate).
    /// </summary>
    /// <remarks><code>BIC Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BIC_asimdimm_l_sl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BIC(Arm64RegisterV_2S Vd_T, byte imm8, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.BIC(Vd_T, imm8, LSL, amount));
    /// <summary>
    /// Bitwise bit clear (vector, immediate).
    /// </summary>
    /// <remarks><code>BIC Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BIC_asimdimm_l_sl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BIC(Arm64RegisterV_4S Vd_T, byte imm8, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.BIC(Vd_T, imm8, LSL, amount));
    /// <summary>
    /// Bitwise bit clear (vector, register).
    /// </summary>
    /// <remarks><code>BIC Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BIC_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BIC(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.BIC(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Bitwise bit clear (vector, register).
    /// </summary>
    /// <remarks><code>BIC Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BIC_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BIC(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.BIC(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Bitwise insert if false.
    /// </summary>
    /// <remarks><code>BIF Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BIF_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BIF(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.BIF(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Bitwise insert if false.
    /// </summary>
    /// <remarks><code>BIF Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BIF_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BIF(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.BIF(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Bitwise insert if true.
    /// </summary>
    /// <remarks><code>BIT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BIT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BIT(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.BIT(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Bitwise insert if true.
    /// </summary>
    /// <remarks><code>BIT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BIT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BIT(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.BIT(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Bitwise select.
    /// </summary>
    /// <remarks><code>BSL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BSL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BSL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.BSL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Bitwise select.
    /// </summary>
    /// <remarks><code>BSL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BSL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BSL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.BSL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Count leading sign bits (vector).
    /// </summary>
    /// <remarks><code>CLS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CLS(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
         => AddInstruction(Arm64InstructionFactory.CLS(Vd_T, Vn_T));
    /// <summary>
    /// Count leading sign bits (vector).
    /// </summary>
    /// <remarks><code>CLS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CLS(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
         => AddInstruction(Arm64InstructionFactory.CLS(Vd_T, Vn_T));
    /// <summary>
    /// Count leading sign bits (vector).
    /// </summary>
    /// <remarks><code>CLS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CLS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.CLS(Vd_T, Vn_T));
    /// <summary>
    /// Count leading sign bits (vector).
    /// </summary>
    /// <remarks><code>CLS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CLS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.CLS(Vd_T, Vn_T));
    /// <summary>
    /// Count leading sign bits (vector).
    /// </summary>
    /// <remarks><code>CLS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CLS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.CLS(Vd_T, Vn_T));
    /// <summary>
    /// Count leading sign bits (vector).
    /// </summary>
    /// <remarks><code>CLS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CLS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.CLS(Vd_T, Vn_T));
    /// <summary>
    /// Count leading zero bits (vector).
    /// </summary>
    /// <remarks><code>CLZ Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLZ_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CLZ(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
         => AddInstruction(Arm64InstructionFactory.CLZ(Vd_T, Vn_T));
    /// <summary>
    /// Count leading zero bits (vector).
    /// </summary>
    /// <remarks><code>CLZ Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLZ_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CLZ(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
         => AddInstruction(Arm64InstructionFactory.CLZ(Vd_T, Vn_T));
    /// <summary>
    /// Count leading zero bits (vector).
    /// </summary>
    /// <remarks><code>CLZ Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLZ_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CLZ(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.CLZ(Vd_T, Vn_T));
    /// <summary>
    /// Count leading zero bits (vector).
    /// </summary>
    /// <remarks><code>CLZ Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLZ_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CLZ(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.CLZ(Vd_T, Vn_T));
    /// <summary>
    /// Count leading zero bits (vector).
    /// </summary>
    /// <remarks><code>CLZ Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLZ_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CLZ(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.CLZ(Vd_T, Vn_T));
    /// <summary>
    /// Count leading zero bits (vector).
    /// </summary>
    /// <remarks><code>CLZ Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CLZ_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CLZ(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.CLZ(Vd_T, Vn_T));
    /// <summary>
    /// Compare bitwise equal (vector).
    /// </summary>
    /// <remarks><code>CMEQ Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMEQ(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
         => AddInstruction(Arm64InstructionFactory.CMEQ(Dd, Dn, Dm));
    /// <summary>
    /// Compare bitwise equal (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMEQ(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMEQ(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare bitwise equal (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMEQ(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMEQ(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare bitwise equal (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMEQ(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMEQ(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare bitwise equal (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMEQ(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMEQ(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare bitwise equal (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMEQ(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMEQ(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare bitwise equal (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMEQ(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMEQ(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare bitwise equal (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMEQ(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMEQ(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare bitwise equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMEQ Dd, Dn, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asisdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMEQ(Arm64RegisterD Dd, Arm64RegisterD Dn, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMEQ(Dd, Dn, value0));
    /// <summary>
    /// Compare bitwise equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMEQ(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMEQ(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare bitwise equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMEQ(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMEQ(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare bitwise equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMEQ(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMEQ(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare bitwise equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMEQ(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMEQ(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare bitwise equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMEQ(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMEQ(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare bitwise equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMEQ(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMEQ(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare bitwise equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMEQ Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMEQ_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMEQ(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMEQ(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed greater than or equal (vector).
    /// </summary>
    /// <remarks><code>CMGE Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGE(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
         => AddInstruction(Arm64InstructionFactory.CMGE(Dd, Dn, Dm));
    /// <summary>
    /// Compare signed greater than or equal (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGE(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMGE(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare signed greater than or equal (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGE(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMGE(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare signed greater than or equal (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGE(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMGE(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare signed greater than or equal (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGE(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMGE(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare signed greater than or equal (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGE(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMGE(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare signed greater than or equal (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGE(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMGE(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare signed greater than or equal (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGE(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMGE(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare signed greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMGE Dd, Dn, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asisdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGE(Arm64RegisterD Dd, Arm64RegisterD Dn, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMGE(Dd, Dn, value0));
    /// <summary>
    /// Compare signed greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGE(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMGE(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGE(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMGE(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGE(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMGE(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGE(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMGE(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGE(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMGE(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGE(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMGE(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMGE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGE(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMGE(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed greater than (vector).
    /// </summary>
    /// <remarks><code>CMGT Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGT(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
         => AddInstruction(Arm64InstructionFactory.CMGT(Dd, Dn, Dm));
    /// <summary>
    /// Compare signed greater than (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGT(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMGT(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare signed greater than (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGT(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMGT(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare signed greater than (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGT(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMGT(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare signed greater than (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGT(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMGT(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare signed greater than (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGT(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMGT(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare signed greater than (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGT(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMGT(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare signed greater than (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGT(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMGT(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare signed greater than zero (vector).
    /// </summary>
    /// <remarks><code>CMGT Dd, Dn, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asisdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGT(Arm64RegisterD Dd, Arm64RegisterD Dn, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMGT(Dd, Dn, value0));
    /// <summary>
    /// Compare signed greater than zero (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGT(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMGT(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed greater than zero (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGT(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMGT(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed greater than zero (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGT(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMGT(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed greater than zero (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGT(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMGT(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed greater than zero (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGT(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMGT(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed greater than zero (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGT(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMGT(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed greater than zero (vector).
    /// </summary>
    /// <remarks><code>CMGT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMGT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMGT(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMGT(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare unsigned higher (vector).
    /// </summary>
    /// <remarks><code>CMHI Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHI_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMHI(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
         => AddInstruction(Arm64InstructionFactory.CMHI(Dd, Dn, Dm));
    /// <summary>
    /// Compare unsigned higher (vector).
    /// </summary>
    /// <remarks><code>CMHI Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHI_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMHI(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMHI(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare unsigned higher (vector).
    /// </summary>
    /// <remarks><code>CMHI Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHI_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMHI(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMHI(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare unsigned higher (vector).
    /// </summary>
    /// <remarks><code>CMHI Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHI_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMHI(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMHI(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare unsigned higher (vector).
    /// </summary>
    /// <remarks><code>CMHI Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHI_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMHI(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMHI(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare unsigned higher (vector).
    /// </summary>
    /// <remarks><code>CMHI Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHI_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMHI(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMHI(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare unsigned higher (vector).
    /// </summary>
    /// <remarks><code>CMHI Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHI_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMHI(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMHI(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare unsigned higher (vector).
    /// </summary>
    /// <remarks><code>CMHI Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHI_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMHI(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMHI(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare unsigned higher or same (vector).
    /// </summary>
    /// <remarks><code>CMHS Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHS_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMHS(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
         => AddInstruction(Arm64InstructionFactory.CMHS(Dd, Dn, Dm));
    /// <summary>
    /// Compare unsigned higher or same (vector).
    /// </summary>
    /// <remarks><code>CMHS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMHS(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMHS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare unsigned higher or same (vector).
    /// </summary>
    /// <remarks><code>CMHS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMHS(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMHS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare unsigned higher or same (vector).
    /// </summary>
    /// <remarks><code>CMHS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMHS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMHS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare unsigned higher or same (vector).
    /// </summary>
    /// <remarks><code>CMHS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMHS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMHS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare unsigned higher or same (vector).
    /// </summary>
    /// <remarks><code>CMHS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMHS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMHS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare unsigned higher or same (vector).
    /// </summary>
    /// <remarks><code>CMHS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMHS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMHS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare unsigned higher or same (vector).
    /// </summary>
    /// <remarks><code>CMHS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMHS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMHS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMHS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare signed less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMLE Dd, Dn, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLE_asisdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMLE(Arm64RegisterD Dd, Arm64RegisterD Dn, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMLE(Dd, Dn, value0));
    /// <summary>
    /// Compare signed less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMLE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMLE(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMLE(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMLE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMLE(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMLE(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMLE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMLE(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMLE(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMLE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMLE(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMLE(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMLE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMLE(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMLE(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMLE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMLE(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMLE(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>CMLE Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLE_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMLE(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMLE(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed less than zero (vector).
    /// </summary>
    /// <remarks><code>CMLT Dd, Dn, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLT_asisdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMLT(Arm64RegisterD Dd, Arm64RegisterD Dn, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMLT(Dd, Dn, value0));
    /// <summary>
    /// Compare signed less than zero (vector).
    /// </summary>
    /// <remarks><code>CMLT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMLT(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMLT(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed less than zero (vector).
    /// </summary>
    /// <remarks><code>CMLT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMLT(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMLT(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed less than zero (vector).
    /// </summary>
    /// <remarks><code>CMLT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMLT(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMLT(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed less than zero (vector).
    /// </summary>
    /// <remarks><code>CMLT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMLT(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMLT(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed less than zero (vector).
    /// </summary>
    /// <remarks><code>CMLT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMLT(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMLT(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed less than zero (vector).
    /// </summary>
    /// <remarks><code>CMLT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMLT(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMLT(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare signed less than zero (vector).
    /// </summary>
    /// <remarks><code>CMLT Vd.T, Vn.T, #0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMLT_asimdmisc_z), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMLT(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte value0 = 0)
         => AddInstruction(Arm64InstructionFactory.CMLT(Vd_T, Vn_T, value0));
    /// <summary>
    /// Compare bitwise test bits nonzero (vector).
    /// </summary>
    /// <remarks><code>CMTST Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMTST_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMTST(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
         => AddInstruction(Arm64InstructionFactory.CMTST(Dd, Dn, Dm));
    /// <summary>
    /// Compare bitwise test bits nonzero (vector).
    /// </summary>
    /// <remarks><code>CMTST Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMTST_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMTST(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMTST(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare bitwise test bits nonzero (vector).
    /// </summary>
    /// <remarks><code>CMTST Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMTST_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMTST(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMTST(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare bitwise test bits nonzero (vector).
    /// </summary>
    /// <remarks><code>CMTST Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMTST_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMTST(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMTST(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare bitwise test bits nonzero (vector).
    /// </summary>
    /// <remarks><code>CMTST Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMTST_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMTST(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMTST(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare bitwise test bits nonzero (vector).
    /// </summary>
    /// <remarks><code>CMTST Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMTST_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMTST(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMTST(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare bitwise test bits nonzero (vector).
    /// </summary>
    /// <remarks><code>CMTST Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMTST_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMTST(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMTST(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Compare bitwise test bits nonzero (vector).
    /// </summary>
    /// <remarks><code>CMTST Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CMTST_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CMTST(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.CMTST(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Population count per byte.
    /// </summary>
    /// <remarks><code>CNT Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CNT_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CNT(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
         => AddInstruction(Arm64InstructionFactory.CNT(Vd_T, Vn_T));
    /// <summary>
    /// Population count per byte.
    /// </summary>
    /// <remarks><code>CNT Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.CNT_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void CNT(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
         => AddInstruction(Arm64InstructionFactory.CNT(Vd_T, Vn_T));
    /// <summary>
    /// Duplicate vector element to vector or scalar.
    /// </summary>
    /// <remarks><code>DUP Vd, Vn.T[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asisdone_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void DUP(Arm64RegisterB Vd, Arm64RegisterV_B.Indexed Vn_T)
         => AddInstruction(Arm64InstructionFactory.DUP(Vd, Vn_T));
    /// <summary>
    /// Duplicate vector element to vector or scalar.
    /// </summary>
    /// <remarks><code>DUP Vd, Vn.T[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asisdone_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void DUP(Arm64RegisterH Vd, Arm64RegisterV_H.Indexed Vn_T)
         => AddInstruction(Arm64InstructionFactory.DUP(Vd, Vn_T));
    /// <summary>
    /// Duplicate vector element to vector or scalar.
    /// </summary>
    /// <remarks><code>DUP Vd, Vn.T[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asisdone_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void DUP(Arm64RegisterS Vd, Arm64RegisterV_S.Indexed Vn_T)
         => AddInstruction(Arm64InstructionFactory.DUP(Vd, Vn_T));
    /// <summary>
    /// Duplicate vector element to vector or scalar.
    /// </summary>
    /// <remarks><code>DUP Vd, Vn.T[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asisdone_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void DUP(Arm64RegisterD Vd, Arm64RegisterV_D.Indexed Vn_T)
         => AddInstruction(Arm64InstructionFactory.DUP(Vd, Vn_T));
    /// <summary>
    /// Duplicate vector element to vector or scalar.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void DUP(Arm64RegisterV_8B Vd_T, Arm64RegisterV_B.Indexed Vn_Ts)
         => AddInstruction(Arm64InstructionFactory.DUP(Vd_T, Vn_Ts));
    /// <summary>
    /// Duplicate vector element to vector or scalar.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void DUP(Arm64RegisterV_16B Vd_T, Arm64RegisterV_B.Indexed Vn_Ts)
         => AddInstruction(Arm64InstructionFactory.DUP(Vd_T, Vn_Ts));
    /// <summary>
    /// Duplicate vector element to vector or scalar.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void DUP(Arm64RegisterV_4H Vd_T, Arm64RegisterV_H.Indexed Vn_Ts)
         => AddInstruction(Arm64InstructionFactory.DUP(Vd_T, Vn_Ts));
    /// <summary>
    /// Duplicate vector element to vector or scalar.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void DUP(Arm64RegisterV_8H Vd_T, Arm64RegisterV_H.Indexed Vn_Ts)
         => AddInstruction(Arm64InstructionFactory.DUP(Vd_T, Vn_Ts));
    /// <summary>
    /// Duplicate vector element to vector or scalar.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void DUP(Arm64RegisterV_2S Vd_T, Arm64RegisterV_S.Indexed Vn_Ts)
         => AddInstruction(Arm64InstructionFactory.DUP(Vd_T, Vn_Ts));
    /// <summary>
    /// Duplicate vector element to vector or scalar.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void DUP(Arm64RegisterV_4S Vd_T, Arm64RegisterV_S.Indexed Vn_Ts)
         => AddInstruction(Arm64InstructionFactory.DUP(Vd_T, Vn_Ts));
    /// <summary>
    /// Duplicate vector element to vector or scalar.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void DUP(Arm64RegisterV_2D Vd_T, Arm64RegisterV_D.Indexed Vn_Ts)
         => AddInstruction(Arm64InstructionFactory.DUP(Vd_T, Vn_Ts));
    /// <summary>
    /// Duplicate general-purpose register to vector.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dr_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void DUP(Arm64RegisterV_8B Vd_T, Arm64RegisterW Rn)
         => AddInstruction(Arm64InstructionFactory.DUP(Vd_T, Rn));
    /// <summary>
    /// Duplicate general-purpose register to vector.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dr_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void DUP(Arm64RegisterV_16B Vd_T, Arm64RegisterW Rn)
         => AddInstruction(Arm64InstructionFactory.DUP(Vd_T, Rn));
    /// <summary>
    /// Duplicate general-purpose register to vector.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dr_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void DUP(Arm64RegisterV_4H Vd_T, Arm64RegisterW Rn)
         => AddInstruction(Arm64InstructionFactory.DUP(Vd_T, Rn));
    /// <summary>
    /// Duplicate general-purpose register to vector.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dr_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void DUP(Arm64RegisterV_8H Vd_T, Arm64RegisterW Rn)
         => AddInstruction(Arm64InstructionFactory.DUP(Vd_T, Rn));
    /// <summary>
    /// Duplicate general-purpose register to vector.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dr_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void DUP(Arm64RegisterV_2S Vd_T, Arm64RegisterW Rn)
         => AddInstruction(Arm64InstructionFactory.DUP(Vd_T, Rn));
    /// <summary>
    /// Duplicate general-purpose register to vector.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dr_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void DUP(Arm64RegisterV_4S Vd_T, Arm64RegisterW Rn)
         => AddInstruction(Arm64InstructionFactory.DUP(Vd_T, Rn));
    /// <summary>
    /// Duplicate general-purpose register to vector.
    /// </summary>
    /// <remarks><code>DUP Vd.T, Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.DUP_asimdins_dr_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void DUP(Arm64RegisterV_2D Vd_T, Arm64RegisterX Rn)
         => AddInstruction(Arm64InstructionFactory.DUP(Vd_T, Rn));
    /// <summary>
    /// Bitwise exclusive-OR (vector).
    /// </summary>
    /// <remarks><code>EOR Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.EOR_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void EOR(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.EOR(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Bitwise exclusive-OR (vector).
    /// </summary>
    /// <remarks><code>EOR Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.EOR_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void EOR(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.EOR(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Three-way exclusive-OR.
    /// </summary>
    /// <remarks><code>EOR3 Vd.16B, Vn.16B, Vm.16B, Va.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.EOR3_vvv16_crypto4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void EOR3(Arm64RegisterV_16B Vd_16B, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B, Arm64RegisterV_16B Va_16B)
         => AddInstruction(Arm64InstructionFactory.EOR3(Vd_16B, Vn_16B, Vm_16B, Va_16B));
    /// <summary>
    /// Extract vector from pair of vectors.
    /// </summary>
    /// <remarks><code>EXT Vd.T, Vn.T, Vm.T, #index</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.EXT_asimdext_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void EXT(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T, byte index)
         => AddInstruction(Arm64InstructionFactory.EXT(Vd_T, Vn_T, Vm_T, index));
    /// <summary>
    /// Extract vector from pair of vectors.
    /// </summary>
    /// <remarks><code>EXT Vd.T, Vn.T, Vm.T, #index</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.EXT_asimdext_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void EXT(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T, byte index)
         => AddInstruction(Arm64InstructionFactory.EXT(Vd_T, Vn_T, Vm_T, index));
    /// <summary>
    /// 8-bit floating-point convert to half-precision (vector).
    /// </summary>
    /// <remarks><code>F1CVTL Vd.8H, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.F1CVTL_asimdmisc_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void F1CVTL(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_8B Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.F1CVTL(Vd_8H, Vn_Ta));
    /// <summary>
    /// 8-bit floating-point convert to half-precision (vector).
    /// </summary>
    /// <remarks><code>F1CVTL2 Vd.8H, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.F1CVTL2_asimdmisc_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void F1CVTL2(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_16B Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.F1CVTL2(Vd_8H, Vn_Ta));
    /// <summary>
    /// 8-bit floating-point convert to half-precision (vector).
    /// </summary>
    /// <remarks><code>F2CVTL Vd.8H, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.F2CVTL_asimdmisc_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void F2CVTL(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_8B Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.F2CVTL(Vd_8H, Vn_Ta));
    /// <summary>
    /// 8-bit floating-point convert to half-precision (vector).
    /// </summary>
    /// <remarks><code>F2CVTL2 Vd.8H, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.F2CVTL2_asimdmisc_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void F2CVTL2(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_16B Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.F2CVTL2(Vd_8H, Vn_Ta));
    /// <summary>
    /// Floating-point absolute difference (vector).
    /// </summary>
    /// <remarks><code>FABD Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABD_asisdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FABD(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
         => AddInstruction(Arm64InstructionFactory.FABD(Hd, Hn, Hm));
    /// <summary>
    /// Floating-point absolute difference (vector).
    /// </summary>
    /// <remarks><code>FABD Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABD_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FABD(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
         => AddInstruction(Arm64InstructionFactory.FABD(Vd, Vn, Vm));
    /// <summary>
    /// Floating-point absolute difference (vector).
    /// </summary>
    /// <remarks><code>FABD Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABD_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FABD(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
         => AddInstruction(Arm64InstructionFactory.FABD(Vd, Vn, Vm));
    /// <summary>
    /// Floating-point absolute difference (vector).
    /// </summary>
    /// <remarks><code>FABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABD_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FABD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FABD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point absolute difference (vector).
    /// </summary>
    /// <remarks><code>FABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABD_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FABD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FABD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point absolute difference (vector).
    /// </summary>
    /// <remarks><code>FABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FABD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FABD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point absolute difference (vector).
    /// </summary>
    /// <remarks><code>FABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FABD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FABD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point absolute difference (vector).
    /// </summary>
    /// <remarks><code>FABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FABD(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FABD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point absolute value (vector).
    /// </summary>
    /// <remarks><code>FABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABS_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FABS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FABS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point absolute value (vector).
    /// </summary>
    /// <remarks><code>FABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABS_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FABS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FABS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point absolute value (vector).
    /// </summary>
    /// <remarks><code>FABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FABS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FABS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point absolute value (vector).
    /// </summary>
    /// <remarks><code>FABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FABS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FABS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point absolute value (vector).
    /// </summary>
    /// <remarks><code>FABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FABS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FABS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point absolute compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FACGE Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGE_asisdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FACGE(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
         => AddInstruction(Arm64InstructionFactory.FACGE(Hd, Hn, Hm));
    /// <summary>
    /// Floating-point absolute compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FACGE Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGE_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FACGE(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
         => AddInstruction(Arm64InstructionFactory.FACGE(Vd, Vn, Vm));
    /// <summary>
    /// Floating-point absolute compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FACGE Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGE_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FACGE(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
         => AddInstruction(Arm64InstructionFactory.FACGE(Vd, Vn, Vm));
    /// <summary>
    /// Floating-point absolute compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FACGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGE_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FACGE(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FACGE(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point absolute compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FACGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGE_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FACGE(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FACGE(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point absolute compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FACGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FACGE(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FACGE(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point absolute compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FACGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FACGE(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FACGE(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point absolute compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FACGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FACGE(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FACGE(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point absolute compare greater than (vector).
    /// </summary>
    /// <remarks><code>FACGT Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGT_asisdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FACGT(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
         => AddInstruction(Arm64InstructionFactory.FACGT(Hd, Hn, Hm));
    /// <summary>
    /// Floating-point absolute compare greater than (vector).
    /// </summary>
    /// <remarks><code>FACGT Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGT_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FACGT(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
         => AddInstruction(Arm64InstructionFactory.FACGT(Vd, Vn, Vm));
    /// <summary>
    /// Floating-point absolute compare greater than (vector).
    /// </summary>
    /// <remarks><code>FACGT Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGT_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FACGT(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
         => AddInstruction(Arm64InstructionFactory.FACGT(Vd, Vn, Vm));
    /// <summary>
    /// Floating-point absolute compare greater than (vector).
    /// </summary>
    /// <remarks><code>FACGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGT_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FACGT(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FACGT(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point absolute compare greater than (vector).
    /// </summary>
    /// <remarks><code>FACGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGT_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FACGT(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FACGT(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point absolute compare greater than (vector).
    /// </summary>
    /// <remarks><code>FACGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FACGT(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FACGT(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point absolute compare greater than (vector).
    /// </summary>
    /// <remarks><code>FACGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FACGT(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FACGT(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point absolute compare greater than (vector).
    /// </summary>
    /// <remarks><code>FACGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FACGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FACGT(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FACGT(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point add (vector).
    /// </summary>
    /// <remarks><code>FADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADD_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FADD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point add (vector).
    /// </summary>
    /// <remarks><code>FADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADD_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FADD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point add (vector).
    /// </summary>
    /// <remarks><code>FADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FADD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point add (vector).
    /// </summary>
    /// <remarks><code>FADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FADD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point add (vector).
    /// </summary>
    /// <remarks><code>FADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FADD(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point add pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FADDP Hd, Vn.2H</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADDP_asisdpair_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FADDP(Arm64RegisterH Hd, Arm64RegisterV_2H Vn_2H)
         => AddInstruction(Arm64InstructionFactory.FADDP(Hd, Vn_2H));
    /// <summary>
    /// Floating-point add pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FADDP Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADDP_asisdpair_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FADDP(Arm64RegisterS Vd, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FADDP(Vd, Vn_T));
    /// <summary>
    /// Floating-point add pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FADDP Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADDP_asisdpair_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FADDP(Arm64RegisterD Vd, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FADDP(Vd, Vn_T));
    /// <summary>
    /// Floating-point add pairwise (vector).
    /// </summary>
    /// <remarks><code>FADDP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADDP_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FADDP(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FADDP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point add pairwise (vector).
    /// </summary>
    /// <remarks><code>FADDP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADDP_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FADDP(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FADDP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point add pairwise (vector).
    /// </summary>
    /// <remarks><code>FADDP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADDP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FADDP(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FADDP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point add pairwise (vector).
    /// </summary>
    /// <remarks><code>FADDP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADDP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FADDP(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FADDP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point add pairwise (vector).
    /// </summary>
    /// <remarks><code>FADDP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADDP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FADDP(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FADDP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point absolute maximum.
    /// </summary>
    /// <remarks><code>FAMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FAMAX_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FAMAX(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FAMAX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point absolute maximum.
    /// </summary>
    /// <remarks><code>FAMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FAMAX_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FAMAX(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FAMAX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point absolute maximum.
    /// </summary>
    /// <remarks><code>FAMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FAMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FAMAX(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FAMAX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point absolute maximum.
    /// </summary>
    /// <remarks><code>FAMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FAMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FAMAX(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FAMAX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point absolute maximum.
    /// </summary>
    /// <remarks><code>FAMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FAMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FAMAX(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FAMAX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point absolute minimum.
    /// </summary>
    /// <remarks><code>FAMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FAMIN_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FAMIN(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FAMIN(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point absolute minimum.
    /// </summary>
    /// <remarks><code>FAMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FAMIN_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FAMIN(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FAMIN(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point absolute minimum.
    /// </summary>
    /// <remarks><code>FAMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FAMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FAMIN(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FAMIN(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point absolute minimum.
    /// </summary>
    /// <remarks><code>FAMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FAMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FAMIN(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FAMIN(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point absolute minimum.
    /// </summary>
    /// <remarks><code>FAMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FAMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FAMIN(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FAMIN(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point complex add.
    /// </summary>
    /// <remarks><code>FCADD Vd.T, Vn.T, Vm.T, #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCADD_asimdsame2_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCADD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T, ushort rotate)
         => AddInstruction(Arm64InstructionFactory.FCADD(Vd_T, Vn_T, Vm_T, rotate));
    /// <summary>
    /// Floating-point complex add.
    /// </summary>
    /// <remarks><code>FCADD Vd.T, Vn.T, Vm.T, #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCADD_asimdsame2_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCADD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T, ushort rotate)
         => AddInstruction(Arm64InstructionFactory.FCADD(Vd_T, Vn_T, Vm_T, rotate));
    /// <summary>
    /// Floating-point complex add.
    /// </summary>
    /// <remarks><code>FCADD Vd.T, Vn.T, Vm.T, #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCADD_asimdsame2_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCADD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T, ushort rotate)
         => AddInstruction(Arm64InstructionFactory.FCADD(Vd_T, Vn_T, Vm_T, rotate));
    /// <summary>
    /// Floating-point complex add.
    /// </summary>
    /// <remarks><code>FCADD Vd.T, Vn.T, Vm.T, #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCADD_asimdsame2_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCADD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T, ushort rotate)
         => AddInstruction(Arm64InstructionFactory.FCADD(Vd_T, Vn_T, Vm_T, rotate));
    /// <summary>
    /// Floating-point complex add.
    /// </summary>
    /// <remarks><code>FCADD Vd.T, Vn.T, Vm.T, #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCADD_asimdsame2_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCADD(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T, ushort rotate)
         => AddInstruction(Arm64InstructionFactory.FCADD(Vd_T, Vn_T, Vm_T, rotate));
    /// <summary>
    /// Floating-point compare equal (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asisdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMEQ(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
         => AddInstruction(Arm64InstructionFactory.FCMEQ(Hd, Hn, Hm));
    /// <summary>
    /// Floating-point compare equal (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMEQ(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
         => AddInstruction(Arm64InstructionFactory.FCMEQ(Vd, Vn, Vm));
    /// <summary>
    /// Floating-point compare equal (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMEQ(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
         => AddInstruction(Arm64InstructionFactory.FCMEQ(Vd, Vn, Vm));
    /// <summary>
    /// Floating-point compare equal (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMEQ(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FCMEQ(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point compare equal (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMEQ(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FCMEQ(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point compare equal (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMEQ(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FCMEQ(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point compare equal (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMEQ(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FCMEQ(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point compare equal (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMEQ(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FCMEQ(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point compare equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Hd, Hn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asisdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMEQ(Arm64RegisterH Hd, Arm64RegisterH Hn, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMEQ(Hd, Hn, zero));
    /// <summary>
    /// Floating-point compare equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd, Vn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asisdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMEQ(Arm64RegisterS Vd, Arm64RegisterS Vn, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMEQ(Vd, Vn, zero));
    /// <summary>
    /// Floating-point compare equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd, Vn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asisdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMEQ(Arm64RegisterD Vd, Arm64RegisterD Vn, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMEQ(Vd, Vn, zero));
    /// <summary>
    /// Floating-point compare equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asimdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMEQ(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMEQ(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point compare equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asimdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMEQ(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMEQ(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point compare equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMEQ(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMEQ(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point compare equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMEQ(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMEQ(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point compare equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMEQ Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMEQ_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMEQ(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMEQ(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FCMGE Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asisdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGE(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
         => AddInstruction(Arm64InstructionFactory.FCMGE(Hd, Hn, Hm));
    /// <summary>
    /// Floating-point compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGE(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
         => AddInstruction(Arm64InstructionFactory.FCMGE(Vd, Vn, Vm));
    /// <summary>
    /// Floating-point compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGE(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
         => AddInstruction(Arm64InstructionFactory.FCMGE(Vd, Vn, Vm));
    /// <summary>
    /// Floating-point compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGE(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FCMGE(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGE(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FCMGE(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGE(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FCMGE(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGE(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FCMGE(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point compare greater than or equal (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGE(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FCMGE(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point compare greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMGE Hd, Hn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asisdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGE(Arm64RegisterH Hd, Arm64RegisterH Hn, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMGE(Hd, Hn, zero));
    /// <summary>
    /// Floating-point compare greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd, Vn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asisdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGE(Arm64RegisterS Vd, Arm64RegisterS Vn, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMGE(Vd, Vn, zero));
    /// <summary>
    /// Floating-point compare greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd, Vn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asisdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGE(Arm64RegisterD Vd, Arm64RegisterD Vn, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMGE(Vd, Vn, zero));
    /// <summary>
    /// Floating-point compare greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asimdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGE(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMGE(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point compare greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asimdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGE(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMGE(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point compare greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGE(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMGE(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point compare greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGE(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMGE(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point compare greater than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMGE Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGE_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGE(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMGE(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point compare greater than (vector).
    /// </summary>
    /// <remarks><code>FCMGT Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asisdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGT(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
         => AddInstruction(Arm64InstructionFactory.FCMGT(Hd, Hn, Hm));
    /// <summary>
    /// Floating-point compare greater than (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGT(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
         => AddInstruction(Arm64InstructionFactory.FCMGT(Vd, Vn, Vm));
    /// <summary>
    /// Floating-point compare greater than (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGT(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
         => AddInstruction(Arm64InstructionFactory.FCMGT(Vd, Vn, Vm));
    /// <summary>
    /// Floating-point compare greater than (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGT(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FCMGT(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point compare greater than (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGT(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FCMGT(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point compare greater than (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGT(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FCMGT(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point compare greater than (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGT(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FCMGT(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point compare greater than (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGT(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FCMGT(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point compare greater than zero (vector).
    /// </summary>
    /// <remarks><code>FCMGT Hd, Hn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asisdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGT(Arm64RegisterH Hd, Arm64RegisterH Hn, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMGT(Hd, Hn, zero));
    /// <summary>
    /// Floating-point compare greater than zero (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd, Vn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asisdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGT(Arm64RegisterS Vd, Arm64RegisterS Vn, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMGT(Vd, Vn, zero));
    /// <summary>
    /// Floating-point compare greater than zero (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd, Vn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asisdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGT(Arm64RegisterD Vd, Arm64RegisterD Vn, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMGT(Vd, Vn, zero));
    /// <summary>
    /// Floating-point compare greater than zero (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asimdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGT(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMGT(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point compare greater than zero (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asimdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGT(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMGT(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point compare greater than zero (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGT(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMGT(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point compare greater than zero (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGT(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMGT(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point compare greater than zero (vector).
    /// </summary>
    /// <remarks><code>FCMGT Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMGT_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMGT(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMGT(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point complex multiply accumulate.
    /// </summary>
    /// <remarks><code>FCMLA Vd.T, Vn.T, Vm.T, #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLA_asimdsame2_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMLA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T, ushort rotate)
         => AddInstruction(Arm64InstructionFactory.FCMLA(Vd_T, Vn_T, Vm_T, rotate));
    /// <summary>
    /// Floating-point complex multiply accumulate.
    /// </summary>
    /// <remarks><code>FCMLA Vd.T, Vn.T, Vm.T, #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLA_asimdsame2_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMLA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T, ushort rotate)
         => AddInstruction(Arm64InstructionFactory.FCMLA(Vd_T, Vn_T, Vm_T, rotate));
    /// <summary>
    /// Floating-point complex multiply accumulate.
    /// </summary>
    /// <remarks><code>FCMLA Vd.T, Vn.T, Vm.T, #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLA_asimdsame2_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMLA(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T, ushort rotate)
         => AddInstruction(Arm64InstructionFactory.FCMLA(Vd_T, Vn_T, Vm_T, rotate));
    /// <summary>
    /// Floating-point complex multiply accumulate.
    /// </summary>
    /// <remarks><code>FCMLA Vd.T, Vn.T, Vm.T, #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLA_asimdsame2_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMLA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T, ushort rotate)
         => AddInstruction(Arm64InstructionFactory.FCMLA(Vd_T, Vn_T, Vm_T, rotate));
    /// <summary>
    /// Floating-point complex multiply accumulate.
    /// </summary>
    /// <remarks><code>FCMLA Vd.T, Vn.T, Vm.T, #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLA_asimdsame2_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMLA(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T, ushort rotate)
         => AddInstruction(Arm64InstructionFactory.FCMLA(Vd_T, Vn_T, Vm_T, rotate));
    /// <summary>
    /// Floating-point complex multiply accumulate (by element).
    /// </summary>
    /// <remarks><code>FCMLA Vd.T, Vn.T, Vm.Ts[index], #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLA_advsimd_elt), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMLA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts, ushort rotate)
         => AddInstruction(Arm64InstructionFactory.FCMLA(Vd_T, Vn_T, Vm_Ts, rotate));
    /// <summary>
    /// Floating-point complex multiply accumulate (by element).
    /// </summary>
    /// <remarks><code>FCMLA Vd.T, Vn.T, Vm.Ts[index], #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLA_advsimd_elt), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMLA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts, ushort rotate)
         => AddInstruction(Arm64InstructionFactory.FCMLA(Vd_T, Vn_T, Vm_Ts, rotate));
    /// <summary>
    /// Floating-point complex multiply accumulate (by element).
    /// </summary>
    /// <remarks><code>FCMLA Vd.T, Vn.T, Vm.Ts[index], #rotate</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLA_advsimd_elt), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMLA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts, ushort rotate)
         => AddInstruction(Arm64InstructionFactory.FCMLA(Vd_T, Vn_T, Vm_Ts, rotate));
    /// <summary>
    /// Floating-point compare less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMLE Hd, Hn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLE_asisdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMLE(Arm64RegisterH Hd, Arm64RegisterH Hn, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMLE(Hd, Hn, zero));
    /// <summary>
    /// Floating-point compare less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMLE Vd, Vn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLE_asisdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMLE(Arm64RegisterS Vd, Arm64RegisterS Vn, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMLE(Vd, Vn, zero));
    /// <summary>
    /// Floating-point compare less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMLE Vd, Vn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLE_asisdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMLE(Arm64RegisterD Vd, Arm64RegisterD Vn, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMLE(Vd, Vn, zero));
    /// <summary>
    /// Floating-point compare less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMLE Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLE_asimdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMLE(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMLE(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point compare less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMLE Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLE_asimdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMLE(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMLE(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point compare less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMLE Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLE_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMLE(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMLE(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point compare less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMLE Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLE_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMLE(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMLE(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point compare less than or equal to zero (vector).
    /// </summary>
    /// <remarks><code>FCMLE Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLE_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMLE(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMLE(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point compare less than zero (vector).
    /// </summary>
    /// <remarks><code>FCMLT Hd, Hn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLT_asisdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMLT(Arm64RegisterH Hd, Arm64RegisterH Hn, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMLT(Hd, Hn, zero));
    /// <summary>
    /// Floating-point compare less than zero (vector).
    /// </summary>
    /// <remarks><code>FCMLT Vd, Vn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLT_asisdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMLT(Arm64RegisterS Vd, Arm64RegisterS Vn, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMLT(Vd, Vn, zero));
    /// <summary>
    /// Floating-point compare less than zero (vector).
    /// </summary>
    /// <remarks><code>FCMLT Vd, Vn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLT_asisdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMLT(Arm64RegisterD Vd, Arm64RegisterD Vn, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMLT(Vd, Vn, zero));
    /// <summary>
    /// Floating-point compare less than zero (vector).
    /// </summary>
    /// <remarks><code>FCMLT Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLT_asimdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMLT(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMLT(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point compare less than zero (vector).
    /// </summary>
    /// <remarks><code>FCMLT Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLT_asimdmiscfp16_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMLT(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMLT(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point compare less than zero (vector).
    /// </summary>
    /// <remarks><code>FCMLT Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLT_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMLT(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMLT(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point compare less than zero (vector).
    /// </summary>
    /// <remarks><code>FCMLT Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLT_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMLT(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMLT(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point compare less than zero (vector).
    /// </summary>
    /// <remarks><code>FCMLT Vd.T, Vn.T, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMLT_asimdmisc_fz), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMLT(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMLT(Vd_T, Vn_T, zero));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAS Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAS(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTAS(Hd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAS(Arm64RegisterS Vd, Arm64RegisterS Vn)
         => AddInstruction(Arm64InstructionFactory.FCVTAS(Vd, Vn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAS(Arm64RegisterD Vd, Arm64RegisterD Vn)
         => AddInstruction(Arm64InstructionFactory.FCVTAS(Vd, Vn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTAS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTAS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTAS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTAS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTAS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAU Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAU(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTAU(Hd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAU Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAU(Arm64RegisterS Vd, Arm64RegisterS Vn)
         => AddInstruction(Arm64InstructionFactory.FCVTAU(Vd, Vn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAU Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAU(Arm64RegisterD Vd, Arm64RegisterD Vn)
         => AddInstruction(Arm64InstructionFactory.FCVTAU(Vd, Vn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAU(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTAU(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAU(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTAU(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAU(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTAU(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAU(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTAU(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FCVTAU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAU(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTAU(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to higher precision long (vector).
    /// </summary>
    /// <remarks><code>FCVTL Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTL_asimdmisc_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.FCVTL(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Floating-point convert to higher precision long (vector).
    /// </summary>
    /// <remarks><code>FCVTL Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTL_asimdmisc_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.FCVTL(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Floating-point convert to higher precision long (vector).
    /// </summary>
    /// <remarks><code>FCVTL2 Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTL2_asimdmisc_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.FCVTL2(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Floating-point convert to higher precision long (vector).
    /// </summary>
    /// <remarks><code>FCVTL2 Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTL2_asimdmisc_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.FCVTL2(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMS Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMS(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTMS(Hd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMS(Arm64RegisterS Vd, Arm64RegisterS Vn)
         => AddInstruction(Arm64InstructionFactory.FCVTMS(Vd, Vn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMS(Arm64RegisterD Vd, Arm64RegisterD Vn)
         => AddInstruction(Arm64InstructionFactory.FCVTMS(Vd, Vn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTMS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTMS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTMS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTMS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTMS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMU Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMU(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTMU(Hd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMU Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMU(Arm64RegisterS Vd, Arm64RegisterS Vn)
         => AddInstruction(Arm64InstructionFactory.FCVTMU(Vd, Vn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMU Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMU(Arm64RegisterD Vd, Arm64RegisterD Vn)
         => AddInstruction(Arm64InstructionFactory.FCVTMU(Vd, Vn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMU(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTMU(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMU(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTMU(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMU(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTMU(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMU(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTMU(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTMU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMU(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTMU(Vd_T, Vn_T));
    /// <summary>
    /// Half-precision to 8-bit floating-point convert and narrow (vector).
    /// </summary>
    /// <remarks><code>FCVTN Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTN_asimdsame2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTN(Arm64RegisterV_8B Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.FCVTN(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Half-precision to 8-bit floating-point convert and narrow (vector).
    /// </summary>
    /// <remarks><code>FCVTN Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTN_asimdsame2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTN(Arm64RegisterV_16B Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.FCVTN(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Floating-point convert to lower precision narrow (vector).
    /// </summary>
    /// <remarks><code>FCVTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.FCVTN(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Floating-point convert to lower precision narrow (vector).
    /// </summary>
    /// <remarks><code>FCVTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.FCVTN(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Single-precision to 8-bit floating-point convert and narrow (vector).
    /// </summary>
    /// <remarks><code>FCVTN Vd.Ta, Vn.4S, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTN_asimdsame2_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTN(Arm64RegisterV_8B Vd_Ta, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_4S Vm_4S)
         => AddInstruction(Arm64InstructionFactory.FCVTN(Vd_Ta, Vn_4S, Vm_4S));
    /// <summary>
    /// Floating-point convert to lower precision narrow (vector).
    /// </summary>
    /// <remarks><code>FCVTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.FCVTN2(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Floating-point convert to lower precision narrow (vector).
    /// </summary>
    /// <remarks><code>FCVTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.FCVTN2(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Single-precision to 8-bit floating-point convert and narrow (vector).
    /// </summary>
    /// <remarks><code>FCVTN2 Vd.Ta, Vn.4S, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTN2_asimdsame2_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTN2(Arm64RegisterV_16B Vd_Ta, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_4S Vm_4S)
         => AddInstruction(Arm64InstructionFactory.FCVTN2(Vd_Ta, Vn_4S, Vm_4S));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNS Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNS(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTNS(Hd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNS(Arm64RegisterS Vd, Arm64RegisterS Vn)
         => AddInstruction(Arm64InstructionFactory.FCVTNS(Vd, Vn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNS(Arm64RegisterD Vd, Arm64RegisterD Vn)
         => AddInstruction(Arm64InstructionFactory.FCVTNS(Vd, Vn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTNS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTNS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTNS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTNS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTNS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNU Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNU(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTNU(Hd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNU Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNU(Arm64RegisterS Vd, Arm64RegisterS Vn)
         => AddInstruction(Arm64InstructionFactory.FCVTNU(Vd, Vn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNU Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNU(Arm64RegisterD Vd, Arm64RegisterD Vn)
         => AddInstruction(Arm64InstructionFactory.FCVTNU(Vd, Vn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNU(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTNU(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNU(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTNU(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNU(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTNU(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNU(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTNU(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FCVTNU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNU(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTNU(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPS Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPS(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTPS(Hd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPS(Arm64RegisterS Vd, Arm64RegisterS Vn)
         => AddInstruction(Arm64InstructionFactory.FCVTPS(Vd, Vn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPS(Arm64RegisterD Vd, Arm64RegisterD Vn)
         => AddInstruction(Arm64InstructionFactory.FCVTPS(Vd, Vn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTPS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTPS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTPS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTPS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTPS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPU Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPU(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTPU(Hd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPU Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPU(Arm64RegisterS Vd, Arm64RegisterS Vn)
         => AddInstruction(Arm64InstructionFactory.FCVTPU(Vd, Vn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPU Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPU(Arm64RegisterD Vd, Arm64RegisterD Vn)
         => AddInstruction(Arm64InstructionFactory.FCVTPU(Vd, Vn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPU(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTPU(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPU(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTPU(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPU(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTPU(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPU(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTPU(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FCVTPU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPU(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTPU(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to lower precision narrow, rounding to odd (vector).
    /// </summary>
    /// <remarks><code>FCVTXN Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTXN_asisdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTXN(Arm64RegisterS Sd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTXN(Sd, Dn));
    /// <summary>
    /// Floating-point convert to lower precision narrow, rounding to odd (vector).
    /// </summary>
    /// <remarks><code>FCVTXN Vd.Tb, Vn.2D</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTXN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTXN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_2D)
         => AddInstruction(Arm64InstructionFactory.FCVTXN(Vd_Tb, Vn_2D));
    /// <summary>
    /// Floating-point convert to lower precision narrow, rounding to odd (vector).
    /// </summary>
    /// <remarks><code>FCVTXN2 Vd.Tb, Vn.2D</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTXN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTXN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_2D)
         => AddInstruction(Arm64InstructionFactory.FCVTXN2(Vd_Tb, Vn_2D));
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd, Vn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asisdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterH Vd, Arm64RegisterH Vn, byte fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Vd, Vn, fbits));
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd, Vn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asisdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterS Vd, Arm64RegisterS Vn, byte fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Vd, Vn, fbits));
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd, Vn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asisdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterD Vd, Arm64RegisterD Vn, byte fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Vd, Vn, fbits));
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Vd_T, Vn_T, fbits));
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Vd_T, Vn_T, fbits));
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Vd_T, Vn_T, fbits));
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Vd_T, Vn_T, fbits));
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Vd_T, Vn_T, fbits));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Hd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterS Vd, Arm64RegisterS Vn)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Vd, Vn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterD Vd, Arm64RegisterD Vn)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Vd, Vn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd, Vn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asisdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterH Vd, Arm64RegisterH Vn, byte fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Vd, Vn, fbits));
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd, Vn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asisdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterS Vd, Arm64RegisterS Vn, byte fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Vd, Vn, fbits));
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd, Vn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asisdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterD Vd, Arm64RegisterD Vn, byte fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Vd, Vn, fbits));
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Vd_T, Vn_T, fbits));
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Vd_T, Vn_T, fbits));
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Vd_T, Vn_T, fbits));
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Vd_T, Vn_T, fbits));
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Vd_T, Vn_T, fbits));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Hd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterS Vd, Arm64RegisterS Vn)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Vd, Vn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterD Vd, Arm64RegisterD Vn)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Vd, Vn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (vector).
    /// </summary>
    /// <remarks><code>FCVTZU Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point divide (vector).
    /// </summary>
    /// <remarks><code>FDIV Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDIV_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FDIV(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FDIV(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point divide (vector).
    /// </summary>
    /// <remarks><code>FDIV Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDIV_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FDIV(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FDIV(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point divide (vector).
    /// </summary>
    /// <remarks><code>FDIV Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDIV_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FDIV(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FDIV(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point divide (vector).
    /// </summary>
    /// <remarks><code>FDIV Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDIV_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FDIV(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FDIV(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point divide (vector).
    /// </summary>
    /// <remarks><code>FDIV Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDIV_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FDIV(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FDIV(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// 8-bit floating-point dot product to half-precision (vector, by element).
    /// </summary>
    /// <remarks><code>FDOT Vd.Ta, Vn.Tb, Vm.2B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDOT_asimdelem_g), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FDOT(Arm64RegisterV_4H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_2B.Indexed Vm_2B)
         => AddInstruction(Arm64InstructionFactory.FDOT(Vd_Ta, Vn_Tb, Vm_2B));
    /// <summary>
    /// 8-bit floating-point dot product to half-precision (vector, by element).
    /// </summary>
    /// <remarks><code>FDOT Vd.Ta, Vn.Tb, Vm.2B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDOT_asimdelem_g), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FDOT(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_2B.Indexed Vm_2B)
         => AddInstruction(Arm64InstructionFactory.FDOT(Vd_Ta, Vn_Tb, Vm_2B));
    /// <summary>
    /// 8-bit floating-point dot product to half-precision (vector).
    /// </summary>
    /// <remarks><code>FDOT Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDOT_asimdsame2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FDOT(Arm64RegisterV_4H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.FDOT(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// 8-bit floating-point dot product to half-precision (vector).
    /// </summary>
    /// <remarks><code>FDOT Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDOT_asimdsame2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FDOT(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.FDOT(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// 8-bit floating-point dot product to single-precision (vector, by element).
    /// </summary>
    /// <remarks><code>FDOT Vd.Ta, Vn.Tb, Vm.4B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDOT_asimdelem_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FDOT(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_4B.Indexed Vm_4B)
         => AddInstruction(Arm64InstructionFactory.FDOT(Vd_Ta, Vn_Tb, Vm_4B));
    /// <summary>
    /// 8-bit floating-point dot product to single-precision (vector, by element).
    /// </summary>
    /// <remarks><code>FDOT Vd.Ta, Vn.Tb, Vm.4B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDOT_asimdelem_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FDOT(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_4B.Indexed Vm_4B)
         => AddInstruction(Arm64InstructionFactory.FDOT(Vd_Ta, Vn_Tb, Vm_4B));
    /// <summary>
    /// 8-bit floating-point dot product to single-precision (vector).
    /// </summary>
    /// <remarks><code>FDOT Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDOT_asimdsame2_dd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FDOT(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.FDOT(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// 8-bit floating-point dot product to single-precision (vector).
    /// </summary>
    /// <remarks><code>FDOT Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDOT_asimdsame2_dd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FDOT(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.FDOT(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Floating-point maximum (vector).
    /// </summary>
    /// <remarks><code>FMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAX_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAX(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMAX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point maximum (vector).
    /// </summary>
    /// <remarks><code>FMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAX_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAX(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMAX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point maximum (vector).
    /// </summary>
    /// <remarks><code>FMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAX(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMAX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point maximum (vector).
    /// </summary>
    /// <remarks><code>FMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAX(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMAX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point maximum (vector).
    /// </summary>
    /// <remarks><code>FMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAX(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMAX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point maximum number (vector).
    /// </summary>
    /// <remarks><code>FMAXNM Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNM_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXNM(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMAXNM(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point maximum number (vector).
    /// </summary>
    /// <remarks><code>FMAXNM Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNM_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXNM(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMAXNM(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point maximum number (vector).
    /// </summary>
    /// <remarks><code>FMAXNM Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNM_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXNM(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMAXNM(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point maximum number (vector).
    /// </summary>
    /// <remarks><code>FMAXNM Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNM_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXNM(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMAXNM(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point maximum number (vector).
    /// </summary>
    /// <remarks><code>FMAXNM Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNM_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXNM(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMAXNM(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point maximum number of pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FMAXNMP Hd, Vn.2H</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNMP_asisdpair_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXNMP(Arm64RegisterH Hd, Arm64RegisterV_2H Vn_2H)
         => AddInstruction(Arm64InstructionFactory.FMAXNMP(Hd, Vn_2H));
    /// <summary>
    /// Floating-point maximum number of pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FMAXNMP Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNMP_asisdpair_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXNMP(Arm64RegisterS Vd, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FMAXNMP(Vd, Vn_T));
    /// <summary>
    /// Floating-point maximum number of pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FMAXNMP Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNMP_asisdpair_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXNMP(Arm64RegisterD Vd, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FMAXNMP(Vd, Vn_T));
    /// <summary>
    /// Floating-point maximum number pairwise (vector).
    /// </summary>
    /// <remarks><code>FMAXNMP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNMP_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXNMP(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMAXNMP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point maximum number pairwise (vector).
    /// </summary>
    /// <remarks><code>FMAXNMP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNMP_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXNMP(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMAXNMP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point maximum number pairwise (vector).
    /// </summary>
    /// <remarks><code>FMAXNMP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNMP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXNMP(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMAXNMP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point maximum number pairwise (vector).
    /// </summary>
    /// <remarks><code>FMAXNMP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNMP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXNMP(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMAXNMP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point maximum number pairwise (vector).
    /// </summary>
    /// <remarks><code>FMAXNMP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNMP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXNMP(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMAXNMP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point maximum number across vector.
    /// </summary>
    /// <remarks><code>FMAXNMV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNMV_asimdall_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXNMV(Arm64RegisterH Vd, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FMAXNMV(Vd, Vn_T));
    /// <summary>
    /// Floating-point maximum number across vector.
    /// </summary>
    /// <remarks><code>FMAXNMV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNMV_asimdall_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXNMV(Arm64RegisterH Vd, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FMAXNMV(Vd, Vn_T));
    /// <summary>
    /// Floating-point maximum number across vector.
    /// </summary>
    /// <remarks><code>FMAXNMV Sd, Vn.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNMV_asimdall_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXNMV(Arm64RegisterS Sd, Arm64RegisterV_4S Vn_4S)
         => AddInstruction(Arm64InstructionFactory.FMAXNMV(Sd, Vn_4S));
    /// <summary>
    /// Floating-point maximum of pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FMAXP Hd, Vn.2H</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXP_asisdpair_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXP(Arm64RegisterH Hd, Arm64RegisterV_2H Vn_2H)
         => AddInstruction(Arm64InstructionFactory.FMAXP(Hd, Vn_2H));
    /// <summary>
    /// Floating-point maximum of pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FMAXP Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXP_asisdpair_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXP(Arm64RegisterS Vd, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FMAXP(Vd, Vn_T));
    /// <summary>
    /// Floating-point maximum of pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FMAXP Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXP_asisdpair_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXP(Arm64RegisterD Vd, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FMAXP(Vd, Vn_T));
    /// <summary>
    /// Floating-point maximum pairwise (vector).
    /// </summary>
    /// <remarks><code>FMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXP_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXP(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMAXP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point maximum pairwise (vector).
    /// </summary>
    /// <remarks><code>FMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXP_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXP(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMAXP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point maximum pairwise (vector).
    /// </summary>
    /// <remarks><code>FMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXP(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMAXP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point maximum pairwise (vector).
    /// </summary>
    /// <remarks><code>FMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXP(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMAXP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point maximum pairwise (vector).
    /// </summary>
    /// <remarks><code>FMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXP(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMAXP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point maximum across vector.
    /// </summary>
    /// <remarks><code>FMAXV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXV_asimdall_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXV(Arm64RegisterH Vd, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FMAXV(Vd, Vn_T));
    /// <summary>
    /// Floating-point maximum across vector.
    /// </summary>
    /// <remarks><code>FMAXV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXV_asimdall_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXV(Arm64RegisterH Vd, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FMAXV(Vd, Vn_T));
    /// <summary>
    /// Floating-point maximum across vector.
    /// </summary>
    /// <remarks><code>FMAXV Sd, Vn.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXV_asimdall_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXV(Arm64RegisterS Sd, Arm64RegisterV_4S Vn_4S)
         => AddInstruction(Arm64InstructionFactory.FMAXV(Sd, Vn_4S));
    /// <summary>
    /// Floating-point minimum (vector).
    /// </summary>
    /// <remarks><code>FMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMIN_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMIN(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMIN(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point minimum (vector).
    /// </summary>
    /// <remarks><code>FMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMIN_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMIN(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMIN(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point minimum (vector).
    /// </summary>
    /// <remarks><code>FMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMIN(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMIN(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point minimum (vector).
    /// </summary>
    /// <remarks><code>FMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMIN(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMIN(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point minimum (vector).
    /// </summary>
    /// <remarks><code>FMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMIN(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMIN(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point minimum number (vector).
    /// </summary>
    /// <remarks><code>FMINNM Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNM_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINNM(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMINNM(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point minimum number (vector).
    /// </summary>
    /// <remarks><code>FMINNM Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNM_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINNM(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMINNM(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point minimum number (vector).
    /// </summary>
    /// <remarks><code>FMINNM Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNM_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINNM(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMINNM(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point minimum number (vector).
    /// </summary>
    /// <remarks><code>FMINNM Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNM_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINNM(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMINNM(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point minimum number (vector).
    /// </summary>
    /// <remarks><code>FMINNM Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNM_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINNM(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMINNM(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point minimum number of pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FMINNMP Hd, Vn.2H</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNMP_asisdpair_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINNMP(Arm64RegisterH Hd, Arm64RegisterV_2H Vn_2H)
         => AddInstruction(Arm64InstructionFactory.FMINNMP(Hd, Vn_2H));
    /// <summary>
    /// Floating-point minimum number of pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FMINNMP Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNMP_asisdpair_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINNMP(Arm64RegisterS Vd, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FMINNMP(Vd, Vn_T));
    /// <summary>
    /// Floating-point minimum number of pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FMINNMP Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNMP_asisdpair_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINNMP(Arm64RegisterD Vd, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FMINNMP(Vd, Vn_T));
    /// <summary>
    /// Floating-point minimum number pairwise (vector).
    /// </summary>
    /// <remarks><code>FMINNMP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNMP_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINNMP(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMINNMP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point minimum number pairwise (vector).
    /// </summary>
    /// <remarks><code>FMINNMP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNMP_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINNMP(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMINNMP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point minimum number pairwise (vector).
    /// </summary>
    /// <remarks><code>FMINNMP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNMP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINNMP(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMINNMP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point minimum number pairwise (vector).
    /// </summary>
    /// <remarks><code>FMINNMP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNMP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINNMP(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMINNMP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point minimum number pairwise (vector).
    /// </summary>
    /// <remarks><code>FMINNMP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNMP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINNMP(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMINNMP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point minimum number across vector.
    /// </summary>
    /// <remarks><code>FMINNMV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNMV_asimdall_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINNMV(Arm64RegisterH Vd, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FMINNMV(Vd, Vn_T));
    /// <summary>
    /// Floating-point minimum number across vector.
    /// </summary>
    /// <remarks><code>FMINNMV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNMV_asimdall_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINNMV(Arm64RegisterH Vd, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FMINNMV(Vd, Vn_T));
    /// <summary>
    /// Floating-point minimum number across vector.
    /// </summary>
    /// <remarks><code>FMINNMV Sd, Vn.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNMV_asimdall_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINNMV(Arm64RegisterS Sd, Arm64RegisterV_4S Vn_4S)
         => AddInstruction(Arm64InstructionFactory.FMINNMV(Sd, Vn_4S));
    /// <summary>
    /// Floating-point minimum of pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FMINP Hd, Vn.2H</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINP_asisdpair_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINP(Arm64RegisterH Hd, Arm64RegisterV_2H Vn_2H)
         => AddInstruction(Arm64InstructionFactory.FMINP(Hd, Vn_2H));
    /// <summary>
    /// Floating-point minimum of pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FMINP Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINP_asisdpair_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINP(Arm64RegisterS Vd, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FMINP(Vd, Vn_T));
    /// <summary>
    /// Floating-point minimum of pair of elements (scalar).
    /// </summary>
    /// <remarks><code>FMINP Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINP_asisdpair_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINP(Arm64RegisterD Vd, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FMINP(Vd, Vn_T));
    /// <summary>
    /// Floating-point minimum pairwise (vector).
    /// </summary>
    /// <remarks><code>FMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINP_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINP(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMINP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point minimum pairwise (vector).
    /// </summary>
    /// <remarks><code>FMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINP_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINP(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMINP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point minimum pairwise (vector).
    /// </summary>
    /// <remarks><code>FMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINP(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMINP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point minimum pairwise (vector).
    /// </summary>
    /// <remarks><code>FMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINP(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMINP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point minimum pairwise (vector).
    /// </summary>
    /// <remarks><code>FMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINP(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMINP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point minimum across vector.
    /// </summary>
    /// <remarks><code>FMINV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINV_asimdall_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINV(Arm64RegisterH Vd, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FMINV(Vd, Vn_T));
    /// <summary>
    /// Floating-point minimum across vector.
    /// </summary>
    /// <remarks><code>FMINV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINV_asimdall_only_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINV(Arm64RegisterH Vd, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FMINV(Vd, Vn_T));
    /// <summary>
    /// Floating-point minimum across vector.
    /// </summary>
    /// <remarks><code>FMINV Sd, Vn.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINV_asimdall_only_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINV(Arm64RegisterS Sd, Arm64RegisterV_4S Vn_4S)
         => AddInstruction(Arm64InstructionFactory.FMINV(Sd, Vn_4S));
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLA Hd, Hn, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asisdelem_rh_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLA(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterV_H.Indexed Vm_H)
         => AddInstruction(Arm64InstructionFactory.FMLA(Hd, Hn, Vm_H));
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLA Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asisdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLA(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.FMLA(Vd, Vn, Vm_Ts));
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLA Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asisdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLA(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterV_D.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.FMLA(Vd, Vn, Vm_Ts));
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLA Vd.T, Vn.T, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asimdelem_rh_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_H.Indexed Vm_H)
         => AddInstruction(Arm64InstructionFactory.FMLA(Vd_T, Vn_T, Vm_H));
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLA Vd.T, Vn.T, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asimdelem_rh_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_H.Indexed Vm_H)
         => AddInstruction(Arm64InstructionFactory.FMLA(Vd_T, Vn_T, Vm_H));
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLA Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asimdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLA(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.FMLA(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLA Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asimdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.FMLA(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLA Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asimdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLA(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_D.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.FMLA(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMLA(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMLA(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLA(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMLA(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMLA(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point fused multiply-add to accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLA(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMLA(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point fused multiply-add long to accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLAL Vd.Ta, Vn.Tb, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLAL_asimdelem_lh), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLAL(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_2H Vn_Tb, Arm64RegisterV_H.Indexed Vm_H)
         => AddInstruction(Arm64InstructionFactory.FMLAL(Vd_Ta, Vn_Tb, Vm_H));
    /// <summary>
    /// Floating-point fused multiply-add long to accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLAL Vd.Ta, Vn.Tb, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLAL_asimdelem_lh), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_H)
         => AddInstruction(Arm64InstructionFactory.FMLAL(Vd_Ta, Vn_Tb, Vm_H));
    /// <summary>
    /// Floating-point fused multiply-add long to accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLAL_asimdsame_f), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLAL(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_2H Vn_Tb, Arm64RegisterV_2H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.FMLAL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Floating-point fused multiply-add long to accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLAL_asimdsame_f), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.FMLAL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Floating-point fused multiply-add long to accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLAL2 Vd.Ta, Vn.Tb, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLAL2_asimdelem_lh), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLAL2(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_2H Vn_Tb, Arm64RegisterV_H.Indexed Vm_H)
         => AddInstruction(Arm64InstructionFactory.FMLAL2(Vd_Ta, Vn_Tb, Vm_H));
    /// <summary>
    /// Floating-point fused multiply-add long to accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLAL2 Vd.Ta, Vn.Tb, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLAL2_asimdelem_lh), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_H)
         => AddInstruction(Arm64InstructionFactory.FMLAL2(Vd_Ta, Vn_Tb, Vm_H));
    /// <summary>
    /// Floating-point fused multiply-add long to accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLAL2_asimdsame_f), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLAL2(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_2H Vn_Tb, Arm64RegisterV_2H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.FMLAL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Floating-point fused multiply-add long to accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLAL2_asimdsame_f), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.FMLAL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// 8-bit floating-point multiply-add long to half-precision (vector, by element).
    /// </summary>
    /// <remarks><code>FMLALB Vd.8H, Vn.16B, Vm.B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLALB_asimdelem_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLALB(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_B.Indexed Vm_B)
         => AddInstruction(Arm64InstructionFactory.FMLALB(Vd_8H, Vn_16B, Vm_B));
    /// <summary>
    /// 8-bit floating-point multiply-add long to half-precision (vector).
    /// </summary>
    /// <remarks><code>FMLALB Vd.8H, Vn.16B, Vm.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLALB_asimdsame2_j), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLALB(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B)
         => AddInstruction(Arm64InstructionFactory.FMLALB(Vd_8H, Vn_16B, Vm_16B));
    /// <summary>
    /// 8-bit floating-point multiply-add long-long to single-precision (vector, by element).
    /// </summary>
    /// <remarks><code>FMLALLBB Vd.4S, Vn.16B, Vm.B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLALLBB_asimdelem_j), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLALLBB(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_B.Indexed Vm_B)
         => AddInstruction(Arm64InstructionFactory.FMLALLBB(Vd_4S, Vn_16B, Vm_B));
    /// <summary>
    /// 8-bit floating-point multiply-add long-long to single-precision (vector).
    /// </summary>
    /// <remarks><code>FMLALLBB Vd.4S, Vn.16B, Vm.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLALLBB_asimdsame2_g), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLALLBB(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B)
         => AddInstruction(Arm64InstructionFactory.FMLALLBB(Vd_4S, Vn_16B, Vm_16B));
    /// <summary>
    /// 8-bit floating-point multiply-add long-long to single-precision (vector, by element).
    /// </summary>
    /// <remarks><code>FMLALLBT Vd.4S, Vn.16B, Vm.B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLALLBT_asimdelem_j), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLALLBT(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_B.Indexed Vm_B)
         => AddInstruction(Arm64InstructionFactory.FMLALLBT(Vd_4S, Vn_16B, Vm_B));
    /// <summary>
    /// 8-bit floating-point multiply-add long-long to single-precision (vector).
    /// </summary>
    /// <remarks><code>FMLALLBT Vd.4S, Vn.16B, Vm.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLALLBT_asimdsame2_g), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLALLBT(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B)
         => AddInstruction(Arm64InstructionFactory.FMLALLBT(Vd_4S, Vn_16B, Vm_16B));
    /// <summary>
    /// 8-bit floating-point multiply-add long-long to single-precision (vector, by element).
    /// </summary>
    /// <remarks><code>FMLALLTB Vd.4S, Vn.16B, Vm.B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLALLTB_asimdelem_j), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLALLTB(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_B.Indexed Vm_B)
         => AddInstruction(Arm64InstructionFactory.FMLALLTB(Vd_4S, Vn_16B, Vm_B));
    /// <summary>
    /// 8-bit floating-point multiply-add long-long to single-precision (vector).
    /// </summary>
    /// <remarks><code>FMLALLTB Vd.4S, Vn.16B, Vm.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLALLTB_asimdsame2_g), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLALLTB(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B)
         => AddInstruction(Arm64InstructionFactory.FMLALLTB(Vd_4S, Vn_16B, Vm_16B));
    /// <summary>
    /// 8-bit floating-point multiply-add long-long to single-precision (vector, by element).
    /// </summary>
    /// <remarks><code>FMLALLTT Vd.4S, Vn.16B, Vm.B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLALLTT_asimdelem_j), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLALLTT(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_B.Indexed Vm_B)
         => AddInstruction(Arm64InstructionFactory.FMLALLTT(Vd_4S, Vn_16B, Vm_B));
    /// <summary>
    /// 8-bit floating-point multiply-add long-long to single-precision (vector).
    /// </summary>
    /// <remarks><code>FMLALLTT Vd.4S, Vn.16B, Vm.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLALLTT_asimdsame2_g), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLALLTT(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B)
         => AddInstruction(Arm64InstructionFactory.FMLALLTT(Vd_4S, Vn_16B, Vm_16B));
    /// <summary>
    /// 8-bit floating-point multiply-add long to half-precision (vector, by element).
    /// </summary>
    /// <remarks><code>FMLALT Vd.8H, Vn.16B, Vm.B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLALT_asimdelem_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLALT(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_B.Indexed Vm_B)
         => AddInstruction(Arm64InstructionFactory.FMLALT(Vd_8H, Vn_16B, Vm_B));
    /// <summary>
    /// 8-bit floating-point multiply-add long to half-precision (vector).
    /// </summary>
    /// <remarks><code>FMLALT Vd.8H, Vn.16B, Vm.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLALT_asimdsame2_j), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLALT(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B)
         => AddInstruction(Arm64InstructionFactory.FMLALT(Vd_8H, Vn_16B, Vm_16B));
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLS Hd, Hn, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asisdelem_rh_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLS(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterV_H.Indexed Vm_H)
         => AddInstruction(Arm64InstructionFactory.FMLS(Hd, Hn, Vm_H));
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLS Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asisdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLS(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.FMLS(Vd, Vn, Vm_Ts));
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLS Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asisdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLS(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterV_D.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.FMLS(Vd, Vn, Vm_Ts));
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLS Vd.T, Vn.T, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asimdelem_rh_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_H.Indexed Vm_H)
         => AddInstruction(Arm64InstructionFactory.FMLS(Vd_T, Vn_T, Vm_H));
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLS Vd.T, Vn.T, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asimdelem_rh_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_H.Indexed Vm_H)
         => AddInstruction(Arm64InstructionFactory.FMLS(Vd_T, Vn_T, Vm_H));
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLS Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asimdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.FMLS(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLS Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asimdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.FMLS(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLS Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asimdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_D.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.FMLS(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMLS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMLS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMLS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMLS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point fused multiply-subtract from accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMLS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point fused multiply-subtract long from accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLSL Vd.Ta, Vn.Tb, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLSL_asimdelem_lh), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLSL(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_2H Vn_Tb, Arm64RegisterV_H.Indexed Vm_H)
         => AddInstruction(Arm64InstructionFactory.FMLSL(Vd_Ta, Vn_Tb, Vm_H));
    /// <summary>
    /// Floating-point fused multiply-subtract long from accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLSL Vd.Ta, Vn.Tb, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLSL_asimdelem_lh), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLSL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_H)
         => AddInstruction(Arm64InstructionFactory.FMLSL(Vd_Ta, Vn_Tb, Vm_H));
    /// <summary>
    /// Floating-point fused multiply-subtract long from accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLSL_asimdsame_f), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLSL(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_2H Vn_Tb, Arm64RegisterV_2H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.FMLSL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Floating-point fused multiply-subtract long from accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLSL_asimdsame_f), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLSL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.FMLSL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Floating-point fused multiply-subtract long from accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLSL2 Vd.Ta, Vn.Tb, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLSL2_asimdelem_lh), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLSL2(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_2H Vn_Tb, Arm64RegisterV_H.Indexed Vm_H)
         => AddInstruction(Arm64InstructionFactory.FMLSL2(Vd_Ta, Vn_Tb, Vm_H));
    /// <summary>
    /// Floating-point fused multiply-subtract long from accumulator (by element).
    /// </summary>
    /// <remarks><code>FMLSL2 Vd.Ta, Vn.Tb, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLSL2_asimdelem_lh), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLSL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_H)
         => AddInstruction(Arm64InstructionFactory.FMLSL2(Vd_Ta, Vn_Tb, Vm_H));
    /// <summary>
    /// Floating-point fused multiply-subtract long from accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLSL2_asimdsame_f), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLSL2(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_2H Vn_Tb, Arm64RegisterV_2H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.FMLSL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Floating-point fused multiply-subtract long from accumulator (vector).
    /// </summary>
    /// <remarks><code>FMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMLSL2_asimdsame_f), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMLSL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.FMLSL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// 8-bit floating-point matrix multiply-accumulate into 2x2 half-precision matrix.
    /// </summary>
    /// <remarks><code>FMMLA Vd.8H, Vn.16B, Vm.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMMLA_asimd_fp8fp16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMMLA(Arm64RegisterV_8H Vd_8H, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B)
         => AddInstruction(Arm64InstructionFactory.FMMLA(Vd_8H, Vn_16B, Vm_16B));
    /// <summary>
    /// 8-bit floating-point matrix multiply-accumulate into 2x2 single-precision matrix.
    /// </summary>
    /// <remarks><code>FMMLA Vd.4S, Vn.16B, Vm.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMMLA_asimd_fp8fp32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMMLA(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B)
         => AddInstruction(Arm64InstructionFactory.FMMLA(Vd_4S, Vn_16B, Vm_16B));
    /// <summary>
    /// Floating-point move immediate (vector).
    /// </summary>
    /// <remarks><code>FMOV Vd.T, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_asimdimm_h_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMOV(Arm64RegisterV_4H Vd_T, Arm64FloatImmediate imm)
         => AddInstruction(Arm64InstructionFactory.FMOV(Vd_T, imm));
    /// <summary>
    /// Floating-point move immediate (vector).
    /// </summary>
    /// <remarks><code>FMOV Vd.T, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_asimdimm_h_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMOV(Arm64RegisterV_8H Vd_T, Arm64FloatImmediate imm)
         => AddInstruction(Arm64InstructionFactory.FMOV(Vd_T, imm));
    /// <summary>
    /// Floating-point move immediate (vector).
    /// </summary>
    /// <remarks><code>FMOV Vd.T, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_asimdimm_s_s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMOV(Arm64RegisterV_2S Vd_T, Arm64FloatImmediate imm)
         => AddInstruction(Arm64InstructionFactory.FMOV(Vd_T, imm));
    /// <summary>
    /// Floating-point move immediate (vector).
    /// </summary>
    /// <remarks><code>FMOV Vd.T, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_asimdimm_s_s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMOV(Arm64RegisterV_4S Vd_T, Arm64FloatImmediate imm)
         => AddInstruction(Arm64InstructionFactory.FMOV(Vd_T, imm));
    /// <summary>
    /// Floating-point move immediate (vector).
    /// </summary>
    /// <remarks><code>FMOV Vd.2D, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_asimdimm_d2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMOV(Arm64RegisterV_2D Vd_2D, Arm64FloatImmediate imm)
         => AddInstruction(Arm64InstructionFactory.FMOV(Vd_2D, imm));
    /// <summary>
    /// Floating-point multiply (by element).
    /// </summary>
    /// <remarks><code>FMUL Hd, Hn, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asisdelem_rh_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMUL(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterV_H.Indexed Vm_H)
         => AddInstruction(Arm64InstructionFactory.FMUL(Hd, Hn, Vm_H));
    /// <summary>
    /// Floating-point multiply (by element).
    /// </summary>
    /// <remarks><code>FMUL Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asisdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMUL(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.FMUL(Vd, Vn, Vm_Ts));
    /// <summary>
    /// Floating-point multiply (by element).
    /// </summary>
    /// <remarks><code>FMUL Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asisdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMUL(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterV_D.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.FMUL(Vd, Vn, Vm_Ts));
    /// <summary>
    /// Floating-point multiply (by element).
    /// </summary>
    /// <remarks><code>FMUL Vd.T, Vn.T, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asimdelem_rh_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMUL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_H.Indexed Vm_H)
         => AddInstruction(Arm64InstructionFactory.FMUL(Vd_T, Vn_T, Vm_H));
    /// <summary>
    /// Floating-point multiply (by element).
    /// </summary>
    /// <remarks><code>FMUL Vd.T, Vn.T, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asimdelem_rh_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMUL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_H.Indexed Vm_H)
         => AddInstruction(Arm64InstructionFactory.FMUL(Vd_T, Vn_T, Vm_H));
    /// <summary>
    /// Floating-point multiply (by element).
    /// </summary>
    /// <remarks><code>FMUL Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asimdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMUL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.FMUL(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Floating-point multiply (by element).
    /// </summary>
    /// <remarks><code>FMUL Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asimdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMUL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.FMUL(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Floating-point multiply (by element).
    /// </summary>
    /// <remarks><code>FMUL Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asimdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMUL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_D.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.FMUL(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Floating-point multiply (vector).
    /// </summary>
    /// <remarks><code>FMUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMUL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMUL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point multiply (vector).
    /// </summary>
    /// <remarks><code>FMUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMUL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMUL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point multiply (vector).
    /// </summary>
    /// <remarks><code>FMUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMUL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMUL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point multiply (vector).
    /// </summary>
    /// <remarks><code>FMUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMUL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMUL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point multiply (vector).
    /// </summary>
    /// <remarks><code>FMUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMUL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMUL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point multiply extended.
    /// </summary>
    /// <remarks><code>FMULX Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asisdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMULX(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
         => AddInstruction(Arm64InstructionFactory.FMULX(Hd, Hn, Hm));
    /// <summary>
    /// Floating-point multiply extended.
    /// </summary>
    /// <remarks><code>FMULX Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMULX(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
         => AddInstruction(Arm64InstructionFactory.FMULX(Vd, Vn, Vm));
    /// <summary>
    /// Floating-point multiply extended.
    /// </summary>
    /// <remarks><code>FMULX Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMULX(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
         => AddInstruction(Arm64InstructionFactory.FMULX(Vd, Vn, Vm));
    /// <summary>
    /// Floating-point multiply extended.
    /// </summary>
    /// <remarks><code>FMULX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMULX(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMULX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point multiply extended.
    /// </summary>
    /// <remarks><code>FMULX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMULX(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMULX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point multiply extended.
    /// </summary>
    /// <remarks><code>FMULX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMULX(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMULX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point multiply extended.
    /// </summary>
    /// <remarks><code>FMULX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMULX(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMULX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point multiply extended.
    /// </summary>
    /// <remarks><code>FMULX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMULX(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FMULX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point multiply extended (by element).
    /// </summary>
    /// <remarks><code>FMULX Hd, Hn, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asisdelem_rh_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMULX(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterV_H.Indexed Vm_H)
         => AddInstruction(Arm64InstructionFactory.FMULX(Hd, Hn, Vm_H));
    /// <summary>
    /// Floating-point multiply extended (by element).
    /// </summary>
    /// <remarks><code>FMULX Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asisdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMULX(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.FMULX(Vd, Vn, Vm_Ts));
    /// <summary>
    /// Floating-point multiply extended (by element).
    /// </summary>
    /// <remarks><code>FMULX Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asisdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMULX(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterV_D.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.FMULX(Vd, Vn, Vm_Ts));
    /// <summary>
    /// Floating-point multiply extended (by element).
    /// </summary>
    /// <remarks><code>FMULX Vd.T, Vn.T, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asimdelem_rh_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMULX(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_H.Indexed Vm_H)
         => AddInstruction(Arm64InstructionFactory.FMULX(Vd_T, Vn_T, Vm_H));
    /// <summary>
    /// Floating-point multiply extended (by element).
    /// </summary>
    /// <remarks><code>FMULX Vd.T, Vn.T, Vm.H[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asimdelem_rh_h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMULX(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_H.Indexed Vm_H)
         => AddInstruction(Arm64InstructionFactory.FMULX(Vd_T, Vn_T, Vm_H));
    /// <summary>
    /// Floating-point multiply extended (by element).
    /// </summary>
    /// <remarks><code>FMULX Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asimdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMULX(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.FMULX(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Floating-point multiply extended (by element).
    /// </summary>
    /// <remarks><code>FMULX Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asimdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMULX(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.FMULX(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Floating-point multiply extended (by element).
    /// </summary>
    /// <remarks><code>FMULX Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMULX_asimdelem_r_sd), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMULX(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_D.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.FMULX(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Floating-point negate (vector).
    /// </summary>
    /// <remarks><code>FNEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNEG_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FNEG(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FNEG(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point negate (vector).
    /// </summary>
    /// <remarks><code>FNEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNEG_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FNEG(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FNEG(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point negate (vector).
    /// </summary>
    /// <remarks><code>FNEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FNEG(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FNEG(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point negate (vector).
    /// </summary>
    /// <remarks><code>FNEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FNEG(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FNEG(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point negate (vector).
    /// </summary>
    /// <remarks><code>FNEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FNEG(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FNEG(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point reciprocal estimate.
    /// </summary>
    /// <remarks><code>FRECPE Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPE_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRECPE(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FRECPE(Hd, Hn));
    /// <summary>
    /// Floating-point reciprocal estimate.
    /// </summary>
    /// <remarks><code>FRECPE Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPE_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRECPE(Arm64RegisterS Vd, Arm64RegisterS Vn)
         => AddInstruction(Arm64InstructionFactory.FRECPE(Vd, Vn));
    /// <summary>
    /// Floating-point reciprocal estimate.
    /// </summary>
    /// <remarks><code>FRECPE Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPE_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRECPE(Arm64RegisterD Vd, Arm64RegisterD Vn)
         => AddInstruction(Arm64InstructionFactory.FRECPE(Vd, Vn));
    /// <summary>
    /// Floating-point reciprocal estimate.
    /// </summary>
    /// <remarks><code>FRECPE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPE_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRECPE(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRECPE(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point reciprocal estimate.
    /// </summary>
    /// <remarks><code>FRECPE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPE_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRECPE(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRECPE(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point reciprocal estimate.
    /// </summary>
    /// <remarks><code>FRECPE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPE_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRECPE(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRECPE(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point reciprocal estimate.
    /// </summary>
    /// <remarks><code>FRECPE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPE_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRECPE(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRECPE(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point reciprocal estimate.
    /// </summary>
    /// <remarks><code>FRECPE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPE_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRECPE(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRECPE(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point reciprocal step.
    /// </summary>
    /// <remarks><code>FRECPS Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPS_asisdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRECPS(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
         => AddInstruction(Arm64InstructionFactory.FRECPS(Hd, Hn, Hm));
    /// <summary>
    /// Floating-point reciprocal step.
    /// </summary>
    /// <remarks><code>FRECPS Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPS_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRECPS(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
         => AddInstruction(Arm64InstructionFactory.FRECPS(Vd, Vn, Vm));
    /// <summary>
    /// Floating-point reciprocal step.
    /// </summary>
    /// <remarks><code>FRECPS Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPS_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRECPS(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
         => AddInstruction(Arm64InstructionFactory.FRECPS(Vd, Vn, Vm));
    /// <summary>
    /// Floating-point reciprocal step.
    /// </summary>
    /// <remarks><code>FRECPS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPS_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRECPS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FRECPS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point reciprocal step.
    /// </summary>
    /// <remarks><code>FRECPS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPS_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRECPS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FRECPS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point reciprocal step.
    /// </summary>
    /// <remarks><code>FRECPS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRECPS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FRECPS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point reciprocal step.
    /// </summary>
    /// <remarks><code>FRECPS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRECPS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FRECPS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point reciprocal step.
    /// </summary>
    /// <remarks><code>FRECPS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRECPS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FRECPS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point reciprocal exponent (scalar).
    /// </summary>
    /// <remarks><code>FRECPX Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPX_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRECPX(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FRECPX(Hd, Hn));
    /// <summary>
    /// Floating-point reciprocal exponent (scalar).
    /// </summary>
    /// <remarks><code>FRECPX Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPX_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRECPX(Arm64RegisterS Vd, Arm64RegisterS Vn)
         => AddInstruction(Arm64InstructionFactory.FRECPX(Vd, Vn));
    /// <summary>
    /// Floating-point reciprocal exponent (scalar).
    /// </summary>
    /// <remarks><code>FRECPX Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRECPX_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRECPX(Arm64RegisterD Vd, Arm64RegisterD Vn)
         => AddInstruction(Arm64InstructionFactory.FRECPX(Vd, Vn));
    /// <summary>
    /// Floating-point round to 32-bit integer, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINT32X Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT32X_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINT32X(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINT32X(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to 32-bit integer, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINT32X Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT32X_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINT32X(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINT32X(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to 32-bit integer, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINT32X Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT32X_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINT32X(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINT32X(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to 32-bit integer toward zero (vector).
    /// </summary>
    /// <remarks><code>FRINT32Z Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT32Z_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINT32Z(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINT32Z(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to 32-bit integer toward zero (vector).
    /// </summary>
    /// <remarks><code>FRINT32Z Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT32Z_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINT32Z(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINT32Z(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to 32-bit integer toward zero (vector).
    /// </summary>
    /// <remarks><code>FRINT32Z Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT32Z_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINT32Z(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINT32Z(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to 64-bit integer, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINT64X Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT64X_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINT64X(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINT64X(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to 64-bit integer, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINT64X Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT64X_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINT64X(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINT64X(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to 64-bit integer, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINT64X Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT64X_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINT64X(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINT64X(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to 64-bit integer toward zero (vector).
    /// </summary>
    /// <remarks><code>FRINT64Z Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT64Z_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINT64Z(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINT64Z(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to 64-bit integer toward zero (vector).
    /// </summary>
    /// <remarks><code>FRINT64Z Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT64Z_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINT64Z(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINT64Z(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to 64-bit integer toward zero (vector).
    /// </summary>
    /// <remarks><code>FRINT64Z Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT64Z_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINT64Z(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINT64Z(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FRINTA Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTA_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTA(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FRINTA Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTA_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTA(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FRINTA Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTA_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTA(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTA(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FRINTA Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTA_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTA(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to away (vector).
    /// </summary>
    /// <remarks><code>FRINTA Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTA_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTA(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTA(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINTI Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTI_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTI(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTI(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINTI Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTI_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTI(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTI(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINTI Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTI_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTI(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTI(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINTI Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTI_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTI(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTI(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINTI Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTI_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTI(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTI(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FRINTM Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTM_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTM(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTM(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FRINTM Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTM_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTM(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTM(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FRINTM Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTM_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTM(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTM(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FRINTM Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTM_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTM(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTM(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, toward minus infinity (vector).
    /// </summary>
    /// <remarks><code>FRINTM Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTM_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTM(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTM(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FRINTN Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTN_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTN(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTN(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FRINTN Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTN_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTN(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTN(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FRINTN Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTN_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTN(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTN(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FRINTN Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTN_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTN(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTN(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to even (vector).
    /// </summary>
    /// <remarks><code>FRINTN Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTN_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTN(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTN(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FRINTP Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTP_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTP(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTP(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FRINTP Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTP_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTP(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTP(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FRINTP Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTP_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTP(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTP(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FRINTP Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTP_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTP(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTP(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, toward plus infinity (vector).
    /// </summary>
    /// <remarks><code>FRINTP Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTP_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTP(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTP(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral exact, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINTX Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTX_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTX(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTX(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral exact, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINTX Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTX_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTX(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTX(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral exact, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINTX Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTX_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTX(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTX(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral exact, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINTX Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTX_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTX(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTX(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral exact, using current rounding mode (vector).
    /// </summary>
    /// <remarks><code>FRINTX Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTX_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTX(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTX(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, toward zero (vector).
    /// </summary>
    /// <remarks><code>FRINTZ Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTZ_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTZ(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTZ(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, toward zero (vector).
    /// </summary>
    /// <remarks><code>FRINTZ Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTZ_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTZ(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTZ(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, toward zero (vector).
    /// </summary>
    /// <remarks><code>FRINTZ Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTZ_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTZ(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTZ(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, toward zero (vector).
    /// </summary>
    /// <remarks><code>FRINTZ Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTZ_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTZ(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTZ(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point round to integral, toward zero (vector).
    /// </summary>
    /// <remarks><code>FRINTZ Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTZ_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTZ(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRINTZ(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point reciprocal square root estimate.
    /// </summary>
    /// <remarks><code>FRSQRTE Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTE_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRSQRTE(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FRSQRTE(Hd, Hn));
    /// <summary>
    /// Floating-point reciprocal square root estimate.
    /// </summary>
    /// <remarks><code>FRSQRTE Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTE_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRSQRTE(Arm64RegisterS Vd, Arm64RegisterS Vn)
         => AddInstruction(Arm64InstructionFactory.FRSQRTE(Vd, Vn));
    /// <summary>
    /// Floating-point reciprocal square root estimate.
    /// </summary>
    /// <remarks><code>FRSQRTE Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTE_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRSQRTE(Arm64RegisterD Vd, Arm64RegisterD Vn)
         => AddInstruction(Arm64InstructionFactory.FRSQRTE(Vd, Vn));
    /// <summary>
    /// Floating-point reciprocal square root estimate.
    /// </summary>
    /// <remarks><code>FRSQRTE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTE_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRSQRTE(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRSQRTE(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point reciprocal square root estimate.
    /// </summary>
    /// <remarks><code>FRSQRTE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTE_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRSQRTE(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRSQRTE(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point reciprocal square root estimate.
    /// </summary>
    /// <remarks><code>FRSQRTE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTE_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRSQRTE(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRSQRTE(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point reciprocal square root estimate.
    /// </summary>
    /// <remarks><code>FRSQRTE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTE_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRSQRTE(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRSQRTE(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point reciprocal square root estimate.
    /// </summary>
    /// <remarks><code>FRSQRTE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTE_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRSQRTE(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FRSQRTE(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point reciprocal square root step.
    /// </summary>
    /// <remarks><code>FRSQRTS Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTS_asisdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRSQRTS(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
         => AddInstruction(Arm64InstructionFactory.FRSQRTS(Hd, Hn, Hm));
    /// <summary>
    /// Floating-point reciprocal square root step.
    /// </summary>
    /// <remarks><code>FRSQRTS Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTS_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRSQRTS(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
         => AddInstruction(Arm64InstructionFactory.FRSQRTS(Vd, Vn, Vm));
    /// <summary>
    /// Floating-point reciprocal square root step.
    /// </summary>
    /// <remarks><code>FRSQRTS Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTS_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRSQRTS(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
         => AddInstruction(Arm64InstructionFactory.FRSQRTS(Vd, Vn, Vm));
    /// <summary>
    /// Floating-point reciprocal square root step.
    /// </summary>
    /// <remarks><code>FRSQRTS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTS_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRSQRTS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FRSQRTS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point reciprocal square root step.
    /// </summary>
    /// <remarks><code>FRSQRTS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTS_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRSQRTS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FRSQRTS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point reciprocal square root step.
    /// </summary>
    /// <remarks><code>FRSQRTS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRSQRTS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FRSQRTS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point reciprocal square root step.
    /// </summary>
    /// <remarks><code>FRSQRTS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRSQRTS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FRSQRTS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point reciprocal square root step.
    /// </summary>
    /// <remarks><code>FRSQRTS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRSQRTS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRSQRTS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FRSQRTS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point adjust exponent by vector.
    /// </summary>
    /// <remarks><code>FSCALE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSCALE_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FSCALE(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FSCALE(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point adjust exponent by vector.
    /// </summary>
    /// <remarks><code>FSCALE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSCALE_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FSCALE(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FSCALE(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point adjust exponent by vector.
    /// </summary>
    /// <remarks><code>FSCALE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSCALE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FSCALE(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FSCALE(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point adjust exponent by vector.
    /// </summary>
    /// <remarks><code>FSCALE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSCALE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FSCALE(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FSCALE(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point adjust exponent by vector.
    /// </summary>
    /// <remarks><code>FSCALE Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSCALE_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FSCALE(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FSCALE(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point square root (vector).
    /// </summary>
    /// <remarks><code>FSQRT Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSQRT_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FSQRT(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FSQRT(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point square root (vector).
    /// </summary>
    /// <remarks><code>FSQRT Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSQRT_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FSQRT(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.FSQRT(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point square root (vector).
    /// </summary>
    /// <remarks><code>FSQRT Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSQRT_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FSQRT(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FSQRT(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point square root (vector).
    /// </summary>
    /// <remarks><code>FSQRT Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSQRT_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FSQRT(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.FSQRT(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point square root (vector).
    /// </summary>
    /// <remarks><code>FSQRT Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSQRT_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FSQRT(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.FSQRT(Vd_T, Vn_T));
    /// <summary>
    /// Floating-point subtract (vector).
    /// </summary>
    /// <remarks><code>FSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSUB_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FSUB(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point subtract (vector).
    /// </summary>
    /// <remarks><code>FSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSUB_asimdsamefp16_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FSUB(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.FSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point subtract (vector).
    /// </summary>
    /// <remarks><code>FSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FSUB(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point subtract (vector).
    /// </summary>
    /// <remarks><code>FSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FSUB(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.FSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Floating-point subtract (vector).
    /// </summary>
    /// <remarks><code>FSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FSUB(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.FSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Insert vector element from another vector element.
    /// </summary>
    /// <remarks><code>INS Vd.Ts[index1], Vn.Ts[index2]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.INS_asimdins_iv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void INS(Arm64RegisterV_B.Indexed Vd_Ts, Arm64RegisterV_B.Indexed Vn_Ts)
         => AddInstruction(Arm64InstructionFactory.INS(Vd_Ts, Vn_Ts));
    /// <summary>
    /// Insert vector element from another vector element.
    /// </summary>
    /// <remarks><code>INS Vd.Ts[index1], Vn.Ts[index2]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.INS_asimdins_iv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void INS(Arm64RegisterV_H.Indexed Vd_Ts, Arm64RegisterV_H.Indexed Vn_Ts)
         => AddInstruction(Arm64InstructionFactory.INS(Vd_Ts, Vn_Ts));
    /// <summary>
    /// Insert vector element from another vector element.
    /// </summary>
    /// <remarks><code>INS Vd.Ts[index1], Vn.Ts[index2]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.INS_asimdins_iv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void INS(Arm64RegisterV_S.Indexed Vd_Ts, Arm64RegisterV_S.Indexed Vn_Ts)
         => AddInstruction(Arm64InstructionFactory.INS(Vd_Ts, Vn_Ts));
    /// <summary>
    /// Insert vector element from another vector element.
    /// </summary>
    /// <remarks><code>INS Vd.Ts[index1], Vn.Ts[index2]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.INS_asimdins_iv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void INS(Arm64RegisterV_D.Indexed Vd_Ts, Arm64RegisterV_D.Indexed Vn_Ts)
         => AddInstruction(Arm64InstructionFactory.INS(Vd_Ts, Vn_Ts));
    /// <summary>
    /// Insert vector element from general-purpose register.
    /// </summary>
    /// <remarks><code>INS Vd.Ts[index], Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.INS_asimdins_ir_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void INS(Arm64RegisterV_B.Indexed Vd_Ts, Arm64RegisterW Rn)
         => AddInstruction(Arm64InstructionFactory.INS(Vd_Ts, Rn));
    /// <summary>
    /// Insert vector element from general-purpose register.
    /// </summary>
    /// <remarks><code>INS Vd.Ts[index], Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.INS_asimdins_ir_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void INS(Arm64RegisterV_H.Indexed Vd_Ts, Arm64RegisterW Rn)
         => AddInstruction(Arm64InstructionFactory.INS(Vd_Ts, Rn));
    /// <summary>
    /// Insert vector element from general-purpose register.
    /// </summary>
    /// <remarks><code>INS Vd.Ts[index], Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.INS_asimdins_ir_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void INS(Arm64RegisterV_S.Indexed Vd_Ts, Arm64RegisterW Rn)
         => AddInstruction(Arm64InstructionFactory.INS(Vd_Ts, Rn));
    /// <summary>
    /// Insert vector element from general-purpose register.
    /// </summary>
    /// <remarks><code>INS Vd.Ts[index], Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.INS_asimdins_ir_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void INS(Arm64RegisterV_D.Indexed Vd_Ts, Arm64RegisterX Rn)
         => AddInstruction(Arm64InstructionFactory.INS(Vd_Ts, Rn));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup2<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup3<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup4<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 8)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 8)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 8)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 8)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup2<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup2<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 24)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 48)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 24)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 48)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 24)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 48)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup3<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 24)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 48)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup3<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 64)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 64)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 64)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup4<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 64)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, imm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup4<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple single-element structures to one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>LD1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_T, src, Xm));
    /// <summary>
    /// Load one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LD1 {Vt.B}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlso_b1_1b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_B, src));
    /// <summary>
    /// Load one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LD1 {Vt.H}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlso_h1_1h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_H, src));
    /// <summary>
    /// Load one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LD1 {Vt.S}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlso_s1_1s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_S, src));
    /// <summary>
    /// Load one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LD1 {Vt.D}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlso_d1_1d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_D, src));
    /// <summary>
    /// Load one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LD1 {Vt.B}[index], [Xn|SP], #1</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsop_b1_i1b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor src, byte value1 = 1)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_B, src, value1));
    /// <summary>
    /// Load one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LD1 {Vt.B}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsop_bx1_r1b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_B, src, Xm));
    /// <summary>
    /// Load one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LD1 {Vt.D}[index], [Xn|SP], #8</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsop_d1_i1d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src, byte value8 = 8)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_D, src, value8));
    /// <summary>
    /// Load one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LD1 {Vt.D}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsop_dx1_r1d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_D, src, Xm));
    /// <summary>
    /// Load one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LD1 {Vt.H}[index], [Xn|SP], #2</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsop_h1_i1h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor src, byte value2 = 2)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_H, src, value2));
    /// <summary>
    /// Load one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LD1 {Vt.H}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsop_hx1_r1h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_H, src, Xm));
    /// <summary>
    /// Load one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LD1 {Vt.S}[index], [Xn|SP], #4</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsop_s1_i1s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor src, byte value4 = 4)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_S, src, value4));
    /// <summary>
    /// Load one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LD1 {Vt.S}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1_asisdlsop_sx1_r1s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1(Arm64RegisterGroup1<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1(Vt_S, src, Xm));
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlso_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1R(Arm64RegisterGroup1<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1R(Vt_T, src));
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlso_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1R(Arm64RegisterGroup1<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1R(Vt_T, src));
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlso_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1R(Arm64RegisterGroup1<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1R(Vt_T, src));
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlso_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1R(Arm64RegisterGroup1<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1R(Vt_T, src));
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlso_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1R(Arm64RegisterGroup1<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1R(Vt_T, src));
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlso_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1R(Arm64RegisterGroup1<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1R(Vt_T, src));
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlso_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1R(Arm64RegisterGroup1<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1R(Vt_T, src));
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlso_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1R(Arm64RegisterGroup1<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD1R(Vt_T, src));
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_r1_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1R(Arm64RegisterGroup1<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 1)
         => AddInstruction(Arm64InstructionFactory.LD1R(Vt_T, src, imm));
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_r1_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1R(Arm64RegisterGroup1<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 1)
         => AddInstruction(Arm64InstructionFactory.LD1R(Vt_T, src, imm));
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_r1_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1R(Arm64RegisterGroup1<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 2)
         => AddInstruction(Arm64InstructionFactory.LD1R(Vt_T, src, imm));
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_r1_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1R(Arm64RegisterGroup1<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 2)
         => AddInstruction(Arm64InstructionFactory.LD1R(Vt_T, src, imm));
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_r1_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1R(Arm64RegisterGroup1<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 4)
         => AddInstruction(Arm64InstructionFactory.LD1R(Vt_T, src, imm));
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_r1_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1R(Arm64RegisterGroup1<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 4)
         => AddInstruction(Arm64InstructionFactory.LD1R(Vt_T, src, imm));
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_r1_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1R(Arm64RegisterGroup1<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 8)
         => AddInstruction(Arm64InstructionFactory.LD1R(Vt_T, src, imm));
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_r1_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1R(Arm64RegisterGroup1<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 8)
         => AddInstruction(Arm64InstructionFactory.LD1R(Vt_T, src, imm));
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_rx1_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1R(Arm64RegisterGroup1<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1R(Vt_T, src, Xm));
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_rx1_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1R(Arm64RegisterGroup1<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1R(Vt_T, src, Xm));
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_rx1_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1R(Arm64RegisterGroup1<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1R(Vt_T, src, Xm));
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_rx1_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1R(Arm64RegisterGroup1<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1R(Vt_T, src, Xm));
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_rx1_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1R(Arm64RegisterGroup1<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1R(Vt_T, src, Xm));
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_rx1_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1R(Arm64RegisterGroup1<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1R(Vt_T, src, Xm));
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_rx1_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1R(Arm64RegisterGroup1<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1R(Vt_T, src, Xm));
    /// <summary>
    /// Load one single-element structure and replicate to all lanes (of one register).
    /// </summary>
    /// <remarks><code>LD1R {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD1R_asisdlsop_rx1_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD1R(Arm64RegisterGroup1<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD1R(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_T, src));
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_T, src));
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_T, src));
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_T, src));
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_T, src));
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_T, src));
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_T, src));
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_T, src, imm));
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_T, src, imm));
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_T, src, imm));
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_T, src, imm));
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_T, src, imm));
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_T, src, imm));
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_T, src, imm));
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple 2-element structures to two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_T, src, Xm));
    /// <summary>
    /// Load single 2-element structure to one lane of two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.B, Vt2.B}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlso_b2_2b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_B, src));
    /// <summary>
    /// Load single 2-element structure to one lane of two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.H, Vt2.H}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlso_h2_2h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_H, src));
    /// <summary>
    /// Load single 2-element structure to one lane of two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.S, Vt2.S}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlso_s2_2s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_S, src));
    /// <summary>
    /// Load single 2-element structure to one lane of two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.D, Vt2.D}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlso_d2_2d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_D, src));
    /// <summary>
    /// Load single 2-element structure to one lane of two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.B, Vt2.B}[index], [Xn|SP], #2</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsop_b2_i2b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor src, byte value2 = 2)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_B, src, value2));
    /// <summary>
    /// Load single 2-element structure to one lane of two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.B, Vt2.B}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsop_bx2_r2b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_B, src, Xm));
    /// <summary>
    /// Load single 2-element structure to one lane of two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.H, Vt2.H}[index], [Xn|SP], #4</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsop_h2_i2h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor src, byte value4 = 4)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_H, src, value4));
    /// <summary>
    /// Load single 2-element structure to one lane of two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.H, Vt2.H}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsop_hx2_r2h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_H, src, Xm));
    /// <summary>
    /// Load single 2-element structure to one lane of two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.S, Vt2.S}[index], [Xn|SP], #8</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsop_s2_i2s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor src, byte value8 = 8)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_S, src, value8));
    /// <summary>
    /// Load single 2-element structure to one lane of two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.S, Vt2.S}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsop_sx2_r2s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_S, src, Xm));
    /// <summary>
    /// Load single 2-element structure to one lane of two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.D, Vt2.D}[index], [Xn|SP], #16</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsop_d2_i2d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src, byte value16 = 16)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_D, src, value16));
    /// <summary>
    /// Load single 2-element structure to one lane of two registers.
    /// </summary>
    /// <remarks><code>LD2 {Vt.D, Vt2.D}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2_asisdlsop_dx2_r2d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2(Arm64RegisterGroup2<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD2(Vt_D, src, Xm));
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlso_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2R(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD2R(Vt_T, src));
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlso_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2R(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD2R(Vt_T, src));
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlso_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2R(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD2R(Vt_T, src));
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlso_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2R(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD2R(Vt_T, src));
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlso_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2R(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD2R(Vt_T, src));
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlso_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2R(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD2R(Vt_T, src));
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlso_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2R(Arm64RegisterGroup2<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD2R(Vt_T, src));
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlso_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2R(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD2R(Vt_T, src));
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_r2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2R(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 2)
         => AddInstruction(Arm64InstructionFactory.LD2R(Vt_T, src, imm));
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_r2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2R(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 2)
         => AddInstruction(Arm64InstructionFactory.LD2R(Vt_T, src, imm));
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_r2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2R(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 4)
         => AddInstruction(Arm64InstructionFactory.LD2R(Vt_T, src, imm));
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_r2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2R(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 4)
         => AddInstruction(Arm64InstructionFactory.LD2R(Vt_T, src, imm));
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_r2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2R(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 8)
         => AddInstruction(Arm64InstructionFactory.LD2R(Vt_T, src, imm));
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_r2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2R(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 8)
         => AddInstruction(Arm64InstructionFactory.LD2R(Vt_T, src, imm));
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_r2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2R(Arm64RegisterGroup2<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.LD2R(Vt_T, src, imm));
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_r2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2R(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.LD2R(Vt_T, src, imm));
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_rx2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2R(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD2R(Vt_T, src, Xm));
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_rx2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2R(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD2R(Vt_T, src, Xm));
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_rx2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2R(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD2R(Vt_T, src, Xm));
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_rx2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2R(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD2R(Vt_T, src, Xm));
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_rx2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2R(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD2R(Vt_T, src, Xm));
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_rx2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2R(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD2R(Vt_T, src, Xm));
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_rx2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2R(Arm64RegisterGroup2<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD2R(Vt_T, src, Xm));
    /// <summary>
    /// Load single 2-element structure and replicate to all lanes of two registers.
    /// </summary>
    /// <remarks><code>LD2R {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD2R_asisdlsop_rx2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD2R(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD2R(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_T, src));
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_T, src));
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_T, src));
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_T, src));
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_T, src));
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_T, src));
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_T, src));
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 24)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_T, src, imm));
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 48)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_T, src, imm));
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 24)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_T, src, imm));
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 48)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_T, src, imm));
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 24)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_T, src, imm));
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 48)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_T, src, imm));
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 48)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_T, src, imm));
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple 3-element structures to three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_T, src, Xm));
    /// <summary>
    /// Load single 3-element structure to one lane of three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.B, Vt2.B, Vt3.B}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlso_b3_3b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_B, src));
    /// <summary>
    /// Load single 3-element structure to one lane of three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.H, Vt2.H, Vt3.H}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlso_h3_3h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_H, src));
    /// <summary>
    /// Load single 3-element structure to one lane of three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.S, Vt2.S, Vt3.S}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlso_s3_3s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_S, src));
    /// <summary>
    /// Load single 3-element structure to one lane of three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.D, Vt2.D, Vt3.D}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlso_d3_3d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_D, src));
    /// <summary>
    /// Load single 3-element structure to one lane of three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.B, Vt2.B, Vt3.B}[index], [Xn|SP], #3</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsop_b3_i3b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor src, byte value3 = 3)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_B, src, value3));
    /// <summary>
    /// Load single 3-element structure to one lane of three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.B, Vt2.B, Vt3.B}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsop_bx3_r3b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_B, src, Xm));
    /// <summary>
    /// Load single 3-element structure to one lane of three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.H, Vt2.H, Vt3.H}[index], [Xn|SP], #6</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsop_h3_i3h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor src, byte value6 = 6)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_H, src, value6));
    /// <summary>
    /// Load single 3-element structure to one lane of three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.H, Vt2.H, Vt3.H}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsop_hx3_r3h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_H, src, Xm));
    /// <summary>
    /// Load single 3-element structure to one lane of three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.S, Vt2.S, Vt3.S}[index], [Xn|SP], #12</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsop_s3_i3s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor src, byte value12 = 12)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_S, src, value12));
    /// <summary>
    /// Load single 3-element structure to one lane of three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.S, Vt2.S, Vt3.S}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsop_sx3_r3s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_S, src, Xm));
    /// <summary>
    /// Load single 3-element structure to one lane of three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.D, Vt2.D, Vt3.D}[index], [Xn|SP], #24</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsop_d3_i3d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src, byte value24 = 24)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_D, src, value24));
    /// <summary>
    /// Load single 3-element structure to one lane of three registers.
    /// </summary>
    /// <remarks><code>LD3 {Vt.D, Vt2.D, Vt3.D}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3_asisdlsop_dx3_r3d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3(Arm64RegisterGroup3<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD3(Vt_D, src, Xm));
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlso_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3R(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD3R(Vt_T, src));
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlso_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3R(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD3R(Vt_T, src));
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlso_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3R(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD3R(Vt_T, src));
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlso_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3R(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD3R(Vt_T, src));
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlso_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3R(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD3R(Vt_T, src));
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlso_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3R(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD3R(Vt_T, src));
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlso_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3R(Arm64RegisterGroup3<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD3R(Vt_T, src));
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlso_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3R(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD3R(Vt_T, src));
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_r3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3R(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 3)
         => AddInstruction(Arm64InstructionFactory.LD3R(Vt_T, src, imm));
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_r3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3R(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 3)
         => AddInstruction(Arm64InstructionFactory.LD3R(Vt_T, src, imm));
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_r3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3R(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 6)
         => AddInstruction(Arm64InstructionFactory.LD3R(Vt_T, src, imm));
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_r3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3R(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 6)
         => AddInstruction(Arm64InstructionFactory.LD3R(Vt_T, src, imm));
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_r3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3R(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 12)
         => AddInstruction(Arm64InstructionFactory.LD3R(Vt_T, src, imm));
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_r3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3R(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 12)
         => AddInstruction(Arm64InstructionFactory.LD3R(Vt_T, src, imm));
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_r3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3R(Arm64RegisterGroup3<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 24)
         => AddInstruction(Arm64InstructionFactory.LD3R(Vt_T, src, imm));
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_r3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3R(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 24)
         => AddInstruction(Arm64InstructionFactory.LD3R(Vt_T, src, imm));
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_rx3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3R(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD3R(Vt_T, src, Xm));
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_rx3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3R(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD3R(Vt_T, src, Xm));
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_rx3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3R(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD3R(Vt_T, src, Xm));
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_rx3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3R(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD3R(Vt_T, src, Xm));
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_rx3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3R(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD3R(Vt_T, src, Xm));
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_rx3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3R(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD3R(Vt_T, src, Xm));
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_rx3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3R(Arm64RegisterGroup3<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD3R(Vt_T, src, Xm));
    /// <summary>
    /// Load single 3-element structure and replicate to all lanes of three registers.
    /// </summary>
    /// <remarks><code>LD3R {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD3R_asisdlsop_rx3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD3R(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD3R(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_T, src));
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_T, src));
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_T, src));
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_T, src));
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_T, src));
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_T, src));
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_T, src));
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_T, src, imm));
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 64)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_T, src, imm));
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_T, src, imm));
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 64)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_T, src, imm));
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_T, src, imm));
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 64)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_T, src, imm));
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 64)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_T, src, imm));
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_T, src, Xm));
    /// <summary>
    /// Load multiple 4-element structures to four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_T, src, Xm));
    /// <summary>
    /// Load single 4-element structure to one lane of four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.B, Vt2.B, Vt3.B, Vt4.B}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlso_b4_4b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_B, src));
    /// <summary>
    /// Load single 4-element structure to one lane of four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.H, Vt2.H, Vt3.H, Vt4.H}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlso_h4_4h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_H, src));
    /// <summary>
    /// Load single 4-element structure to one lane of four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.S, Vt2.S, Vt3.S, Vt4.S}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlso_s4_4s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_S, src));
    /// <summary>
    /// Load single 4-element structure to one lane of four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.D, Vt2.D, Vt3.D, Vt4.D}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlso_d4_4d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_D, src));
    /// <summary>
    /// Load single 4-element structure to one lane of four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.B, Vt2.B, Vt3.B, Vt4.B}[index], [Xn|SP], #4</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsop_b4_i4b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor src, byte value4 = 4)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_B, src, value4));
    /// <summary>
    /// Load single 4-element structure to one lane of four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.B, Vt2.B, Vt3.B, Vt4.B}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsop_bx4_r4b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_B, src, Xm));
    /// <summary>
    /// Load single 4-element structure to one lane of four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.H, Vt2.H, Vt3.H, Vt4.H}[index], [Xn|SP], #8</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsop_h4_i4h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor src, byte value8 = 8)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_H, src, value8));
    /// <summary>
    /// Load single 4-element structure to one lane of four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.H, Vt2.H, Vt3.H, Vt4.H}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsop_hx4_r4h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_H, src, Xm));
    /// <summary>
    /// Load single 4-element structure to one lane of four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.S, Vt2.S, Vt3.S, Vt4.S}[index], [Xn|SP], #16</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsop_s4_i4s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor src, byte value16 = 16)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_S, src, value16));
    /// <summary>
    /// Load single 4-element structure to one lane of four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.S, Vt2.S, Vt3.S, Vt4.S}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsop_sx4_r4s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_S, src, Xm));
    /// <summary>
    /// Load single 4-element structure to one lane of four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.D, Vt2.D, Vt3.D, Vt4.D}[index], [Xn|SP], #32</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsop_d4_i4d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src, byte value32 = 32)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_D, src, value32));
    /// <summary>
    /// Load single 4-element structure to one lane of four registers.
    /// </summary>
    /// <remarks><code>LD4 {Vt.D, Vt2.D, Vt3.D, Vt4.D}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4_asisdlsop_dx4_r4d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4(Arm64RegisterGroup4<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD4(Vt_D, src, Xm));
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlso_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4R(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD4R(Vt_T, src));
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlso_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4R(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD4R(Vt_T, src));
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlso_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4R(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD4R(Vt_T, src));
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlso_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4R(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD4R(Vt_T, src));
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlso_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4R(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD4R(Vt_T, src));
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlso_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4R(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD4R(Vt_T, src));
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlso_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4R(Arm64RegisterGroup4<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD4R(Vt_T, src));
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlso_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4R(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LD4R(Vt_T, src));
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_r4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4R(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 4)
         => AddInstruction(Arm64InstructionFactory.LD4R(Vt_T, src, imm));
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_r4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4R(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 4)
         => AddInstruction(Arm64InstructionFactory.LD4R(Vt_T, src, imm));
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_r4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4R(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 8)
         => AddInstruction(Arm64InstructionFactory.LD4R(Vt_T, src, imm));
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_r4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4R(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 8)
         => AddInstruction(Arm64InstructionFactory.LD4R(Vt_T, src, imm));
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_r4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4R(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.LD4R(Vt_T, src, imm));
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_r4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4R(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.LD4R(Vt_T, src, imm));
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_r4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4R(Arm64RegisterGroup4<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.LD4R(Vt_T, src, imm));
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_r4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4R(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.LD4R(Vt_T, src, imm));
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_rx4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4R(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD4R(Vt_T, src, Xm));
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_rx4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4R(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD4R(Vt_T, src, Xm));
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_rx4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4R(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD4R(Vt_T, src, Xm));
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_rx4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4R(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD4R(Vt_T, src, Xm));
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_rx4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4R(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD4R(Vt_T, src, Xm));
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_rx4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4R(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD4R(Vt_T, src, Xm));
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_rx4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4R(Arm64RegisterGroup4<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD4R(Vt_T, src, Xm));
    /// <summary>
    /// Load single 4-element structure and replicate to all lanes of four registers.
    /// </summary>
    /// <remarks><code>LD4R {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LD4R_asisdlsop_rx4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LD4R(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor src, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.LD4R(Vt_T, src, Xm));
    /// <summary>
    /// Load-acquire RCpc one single-element structure to one lane of one register.
    /// </summary>
    /// <remarks><code>LDAP1 {Vt.D}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDAP1_asisdlso_d1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDAP1(Arm64RegisterGroup1<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDAP1(Vt_D, src));
    /// <summary>
    /// BFloat16 floating-point add in memory.
    /// </summary>
    /// <remarks><code>LDBFADD Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFADD_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDBFADD(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDBFADD(Hs, Ht, src));
    /// <summary>
    /// BFloat16 floating-point add in memory.
    /// </summary>
    /// <remarks><code>LDBFADDA Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFADDA_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDBFADDA(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDBFADDA(Hs, Ht, src));
    /// <summary>
    /// BFloat16 floating-point add in memory.
    /// </summary>
    /// <remarks><code>LDBFADDAL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFADDAL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDBFADDAL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDBFADDAL(Hs, Ht, src));
    /// <summary>
    /// BFloat16 floating-point add in memory.
    /// </summary>
    /// <remarks><code>LDBFADDL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFADDL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDBFADDL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDBFADDL(Hs, Ht, src));
    /// <summary>
    /// BFloat16 floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDBFMAX Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMAX_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDBFMAX(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDBFMAX(Hs, Ht, src));
    /// <summary>
    /// BFloat16 floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDBFMAXA Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMAXA_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDBFMAXA(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDBFMAXA(Hs, Ht, src));
    /// <summary>
    /// BFloat16 floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDBFMAXAL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMAXAL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDBFMAXAL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDBFMAXAL(Hs, Ht, src));
    /// <summary>
    /// BFloat16 floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDBFMAXL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMAXL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDBFMAXL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDBFMAXL(Hs, Ht, src));
    /// <summary>
    /// BFloat16 floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDBFMAXNM Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMAXNM_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDBFMAXNM(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDBFMAXNM(Hs, Ht, src));
    /// <summary>
    /// BFloat16 floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDBFMAXNMA Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMAXNMA_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDBFMAXNMA(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDBFMAXNMA(Hs, Ht, src));
    /// <summary>
    /// BFloat16 floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDBFMAXNMAL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMAXNMAL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDBFMAXNMAL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDBFMAXNMAL(Hs, Ht, src));
    /// <summary>
    /// BFloat16 floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDBFMAXNML Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMAXNML_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDBFMAXNML(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDBFMAXNML(Hs, Ht, src));
    /// <summary>
    /// BFloat16 floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDBFMIN Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMIN_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDBFMIN(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDBFMIN(Hs, Ht, src));
    /// <summary>
    /// BFloat16 floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDBFMINA Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMINA_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDBFMINA(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDBFMINA(Hs, Ht, src));
    /// <summary>
    /// BFloat16 floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDBFMINAL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMINAL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDBFMINAL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDBFMINAL(Hs, Ht, src));
    /// <summary>
    /// BFloat16 floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDBFMINL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMINL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDBFMINL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDBFMINL(Hs, Ht, src));
    /// <summary>
    /// BFloat16 floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDBFMINNM Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMINNM_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDBFMINNM(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDBFMINNM(Hs, Ht, src));
    /// <summary>
    /// BFloat16 floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDBFMINNMA Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMINNMA_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDBFMINNMA(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDBFMINNMA(Hs, Ht, src));
    /// <summary>
    /// BFloat16 floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDBFMINNMAL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMINNMAL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDBFMINNMAL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDBFMINNMAL(Hs, Ht, src));
    /// <summary>
    /// BFloat16 floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDBFMINNML Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDBFMINNML_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDBFMINNML(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDBFMINNML(Hs, Ht, src));
    /// <summary>
    /// Floating-point atomic add in memory.
    /// </summary>
    /// <remarks><code>LDFADD Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFADD_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFADD(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFADD(Hs, Ht, src));
    /// <summary>
    /// Floating-point atomic add in memory.
    /// </summary>
    /// <remarks><code>LDFADD Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFADD_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFADD(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFADD(Ss, St, src));
    /// <summary>
    /// Floating-point atomic add in memory.
    /// </summary>
    /// <remarks><code>LDFADD Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFADD_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFADD(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFADD(Ds, Dt, src));
    /// <summary>
    /// Floating-point atomic add in memory.
    /// </summary>
    /// <remarks><code>LDFADDA Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFADDA_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFADDA(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFADDA(Hs, Ht, src));
    /// <summary>
    /// Floating-point atomic add in memory.
    /// </summary>
    /// <remarks><code>LDFADDA Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFADDA_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFADDA(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFADDA(Ss, St, src));
    /// <summary>
    /// Floating-point atomic add in memory.
    /// </summary>
    /// <remarks><code>LDFADDA Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFADDA_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFADDA(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFADDA(Ds, Dt, src));
    /// <summary>
    /// Floating-point atomic add in memory.
    /// </summary>
    /// <remarks><code>LDFADDAL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFADDAL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFADDAL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFADDAL(Hs, Ht, src));
    /// <summary>
    /// Floating-point atomic add in memory.
    /// </summary>
    /// <remarks><code>LDFADDAL Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFADDAL_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFADDAL(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFADDAL(Ss, St, src));
    /// <summary>
    /// Floating-point atomic add in memory.
    /// </summary>
    /// <remarks><code>LDFADDAL Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFADDAL_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFADDAL(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFADDAL(Ds, Dt, src));
    /// <summary>
    /// Floating-point atomic add in memory.
    /// </summary>
    /// <remarks><code>LDFADDL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFADDL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFADDL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFADDL(Hs, Ht, src));
    /// <summary>
    /// Floating-point atomic add in memory.
    /// </summary>
    /// <remarks><code>LDFADDL Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFADDL_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFADDL(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFADDL(Ss, St, src));
    /// <summary>
    /// Floating-point atomic add in memory.
    /// </summary>
    /// <remarks><code>LDFADDL Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFADDL_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFADDL(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFADDL(Ds, Dt, src));
    /// <summary>
    /// Floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDFMAX Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAX_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMAX(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMAX(Hs, Ht, src));
    /// <summary>
    /// Floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDFMAX Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAX_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMAX(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMAX(Ss, St, src));
    /// <summary>
    /// Floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDFMAX Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAX_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMAX(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMAX(Ds, Dt, src));
    /// <summary>
    /// Floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDFMAXA Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXA_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMAXA(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMAXA(Hs, Ht, src));
    /// <summary>
    /// Floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDFMAXA Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXA_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMAXA(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMAXA(Ss, St, src));
    /// <summary>
    /// Floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDFMAXA Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXA_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMAXA(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMAXA(Ds, Dt, src));
    /// <summary>
    /// Floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDFMAXAL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXAL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMAXAL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMAXAL(Hs, Ht, src));
    /// <summary>
    /// Floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDFMAXAL Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXAL_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMAXAL(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMAXAL(Ss, St, src));
    /// <summary>
    /// Floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDFMAXAL Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXAL_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMAXAL(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMAXAL(Ds, Dt, src));
    /// <summary>
    /// Floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDFMAXL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMAXL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMAXL(Hs, Ht, src));
    /// <summary>
    /// Floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDFMAXL Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXL_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMAXL(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMAXL(Ss, St, src));
    /// <summary>
    /// Floating-point atomic maximum in memory.
    /// </summary>
    /// <remarks><code>LDFMAXL Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXL_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMAXL(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMAXL(Ds, Dt, src));
    /// <summary>
    /// Floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDFMAXNM Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXNM_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMAXNM(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMAXNM(Hs, Ht, src));
    /// <summary>
    /// Floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDFMAXNM Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXNM_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMAXNM(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMAXNM(Ss, St, src));
    /// <summary>
    /// Floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDFMAXNM Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXNM_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMAXNM(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMAXNM(Ds, Dt, src));
    /// <summary>
    /// Floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDFMAXNMA Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXNMA_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMAXNMA(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMAXNMA(Hs, Ht, src));
    /// <summary>
    /// Floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDFMAXNMA Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXNMA_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMAXNMA(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMAXNMA(Ss, St, src));
    /// <summary>
    /// Floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDFMAXNMA Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXNMA_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMAXNMA(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMAXNMA(Ds, Dt, src));
    /// <summary>
    /// Floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDFMAXNMAL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXNMAL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMAXNMAL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMAXNMAL(Hs, Ht, src));
    /// <summary>
    /// Floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDFMAXNMAL Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXNMAL_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMAXNMAL(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMAXNMAL(Ss, St, src));
    /// <summary>
    /// Floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDFMAXNMAL Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXNMAL_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMAXNMAL(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMAXNMAL(Ds, Dt, src));
    /// <summary>
    /// Floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDFMAXNML Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXNML_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMAXNML(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMAXNML(Hs, Ht, src));
    /// <summary>
    /// Floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDFMAXNML Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXNML_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMAXNML(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMAXNML(Ss, St, src));
    /// <summary>
    /// Floating-point atomic maximum number in memory.
    /// </summary>
    /// <remarks><code>LDFMAXNML Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMAXNML_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMAXNML(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMAXNML(Ds, Dt, src));
    /// <summary>
    /// Floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDFMIN Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMIN_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMIN(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMIN(Hs, Ht, src));
    /// <summary>
    /// Floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDFMIN Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMIN_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMIN(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMIN(Ss, St, src));
    /// <summary>
    /// Floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDFMIN Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMIN_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMIN(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMIN(Ds, Dt, src));
    /// <summary>
    /// Floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDFMINA Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINA_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMINA(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMINA(Hs, Ht, src));
    /// <summary>
    /// Floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDFMINA Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINA_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMINA(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMINA(Ss, St, src));
    /// <summary>
    /// Floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDFMINA Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINA_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMINA(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMINA(Ds, Dt, src));
    /// <summary>
    /// Floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDFMINAL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINAL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMINAL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMINAL(Hs, Ht, src));
    /// <summary>
    /// Floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDFMINAL Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINAL_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMINAL(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMINAL(Ss, St, src));
    /// <summary>
    /// Floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDFMINAL Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINAL_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMINAL(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMINAL(Ds, Dt, src));
    /// <summary>
    /// Floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDFMINL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMINL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMINL(Hs, Ht, src));
    /// <summary>
    /// Floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDFMINL Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINL_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMINL(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMINL(Ss, St, src));
    /// <summary>
    /// Floating-point atomic minimum in memory.
    /// </summary>
    /// <remarks><code>LDFMINL Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINL_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMINL(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMINL(Ds, Dt, src));
    /// <summary>
    /// Floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDFMINNM Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINNM_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMINNM(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMINNM(Hs, Ht, src));
    /// <summary>
    /// Floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDFMINNM Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINNM_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMINNM(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMINNM(Ss, St, src));
    /// <summary>
    /// Floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDFMINNM Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINNM_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMINNM(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMINNM(Ds, Dt, src));
    /// <summary>
    /// Floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDFMINNMA Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINNMA_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMINNMA(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMINNMA(Hs, Ht, src));
    /// <summary>
    /// Floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDFMINNMA Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINNMA_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMINNMA(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMINNMA(Ss, St, src));
    /// <summary>
    /// Floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDFMINNMA Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINNMA_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMINNMA(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMINNMA(Ds, Dt, src));
    /// <summary>
    /// Floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDFMINNMAL Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINNMAL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMINNMAL(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMINNMAL(Hs, Ht, src));
    /// <summary>
    /// Floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDFMINNMAL Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINNMAL_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMINNMAL(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMINNMAL(Ss, St, src));
    /// <summary>
    /// Floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDFMINNMAL Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINNMAL_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMINNMAL(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMINNMAL(Ds, Dt, src));
    /// <summary>
    /// Floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDFMINNML Hs, Ht, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINNML_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMINNML(Arm64RegisterH Hs, Arm64RegisterH Ht, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMINNML(Hs, Ht, src));
    /// <summary>
    /// Floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDFMINNML Ss, St, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINNML_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMINNML(Arm64RegisterS Ss, Arm64RegisterS St, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMINNML(Ss, St, src));
    /// <summary>
    /// Floating-point atomic minimum number in memory.
    /// </summary>
    /// <remarks><code>LDFMINNML Ds, Dt, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LDFMINNML_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LDFMINNML(Arm64RegisterD Ds, Arm64RegisterD Dt, Arm64BaseMemoryAccessor src)
         => AddInstruction(Arm64InstructionFactory.LDFMINNML(Ds, Dt, src));
    /// <summary>
    /// Lookup table read with 2-bit indices.
    /// </summary>
    /// <remarks><code>LUTI2 Vd.16B, {Vn.16B}, Vm[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LUTI2_asimdtbl_l5), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LUTI2(Arm64RegisterV_16B Vd_16B, Arm64RegisterGroup1<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV.Indexed Vm)
         => AddInstruction(Arm64InstructionFactory.LUTI2(Vd_16B, Vn_16B, Vm));
    /// <summary>
    /// Lookup table read with 2-bit indices.
    /// </summary>
    /// <remarks><code>LUTI2 Vd.8H, {Vn.8H}, Vm[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LUTI2_asimdtbl_l6), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LUTI2(Arm64RegisterV_8H Vd_8H, Arm64RegisterGroup1<Arm64RegisterV_8H> Vn_8H, Arm64RegisterV.Indexed Vm)
         => AddInstruction(Arm64InstructionFactory.LUTI2(Vd_8H, Vn_8H, Vm));
    /// <summary>
    /// Lookup table read with 4-bit indices.
    /// </summary>
    /// <remarks><code>LUTI4 Vd.16B, {Vn.16B}, Vm[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LUTI4_asimdtbl_l5), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LUTI4(Arm64RegisterV_16B Vd_16B, Arm64RegisterGroup1<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV.Indexed Vm)
         => AddInstruction(Arm64InstructionFactory.LUTI4(Vd_16B, Vn_16B, Vm));
    /// <summary>
    /// Lookup table read with 4-bit indices.
    /// </summary>
    /// <remarks><code>LUTI4 Vd.8H, {Vn1.8H, Vn2.8H}, Vm[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.LUTI4_asimdtbl_l7), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void LUTI4(Arm64RegisterV_8H Vd_8H, Arm64RegisterGroup2<Arm64RegisterV_8H> Vn1_8H, Arm64RegisterV.Indexed Vm)
         => AddInstruction(Arm64InstructionFactory.LUTI4(Vd_8H, Vn1_8H, Vm));
    /// <summary>
    /// Multiply-add to accumulator (vector, by element).
    /// </summary>
    /// <remarks><code>MLA Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLA_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MLA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.MLA(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Multiply-add to accumulator (vector, by element).
    /// </summary>
    /// <remarks><code>MLA Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLA_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MLA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.MLA(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Multiply-add to accumulator (vector, by element).
    /// </summary>
    /// <remarks><code>MLA Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLA_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MLA(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.MLA(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Multiply-add to accumulator (vector, by element).
    /// </summary>
    /// <remarks><code>MLA Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLA_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MLA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.MLA(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Multiply-add to accumulator (vector).
    /// </summary>
    /// <remarks><code>MLA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MLA(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.MLA(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Multiply-add to accumulator (vector).
    /// </summary>
    /// <remarks><code>MLA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MLA(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.MLA(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Multiply-add to accumulator (vector).
    /// </summary>
    /// <remarks><code>MLA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MLA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.MLA(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Multiply-add to accumulator (vector).
    /// </summary>
    /// <remarks><code>MLA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MLA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.MLA(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Multiply-add to accumulator (vector).
    /// </summary>
    /// <remarks><code>MLA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MLA(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.MLA(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Multiply-add to accumulator (vector).
    /// </summary>
    /// <remarks><code>MLA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MLA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.MLA(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Multiply-subtract from accumulator (vector, by element).
    /// </summary>
    /// <remarks><code>MLS Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLS_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MLS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.MLS(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Multiply-subtract from accumulator (vector, by element).
    /// </summary>
    /// <remarks><code>MLS Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLS_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MLS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.MLS(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Multiply-subtract from accumulator (vector, by element).
    /// </summary>
    /// <remarks><code>MLS Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLS_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MLS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.MLS(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Multiply-subtract from accumulator (vector, by element).
    /// </summary>
    /// <remarks><code>MLS Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLS_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MLS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.MLS(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Multiply-subtract from accumulator (vector).
    /// </summary>
    /// <remarks><code>MLS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MLS(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.MLS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Multiply-subtract from accumulator (vector).
    /// </summary>
    /// <remarks><code>MLS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MLS(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.MLS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Multiply-subtract from accumulator (vector).
    /// </summary>
    /// <remarks><code>MLS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MLS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.MLS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Multiply-subtract from accumulator (vector).
    /// </summary>
    /// <remarks><code>MLS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MLS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.MLS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Multiply-subtract from accumulator (vector).
    /// </summary>
    /// <remarks><code>MLS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MLS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.MLS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Multiply-subtract from accumulator (vector).
    /// </summary>
    /// <remarks><code>MLS Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MLS_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MLS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.MLS(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Move vector element to another vector element.
    /// </summary>
    /// <remarks><code>MOV Vd.Ts[index1], Vn.Ts[index2]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_ins_asimdins_iv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV(Arm64RegisterV_B.Indexed Vd_Ts, Arm64RegisterV_B.Indexed Vn_Ts)
         => AddInstruction(Arm64InstructionFactory.MOV(Vd_Ts, Vn_Ts));
    /// <summary>
    /// Move vector element to another vector element.
    /// </summary>
    /// <remarks><code>MOV Vd.Ts[index1], Vn.Ts[index2]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_ins_asimdins_iv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV(Arm64RegisterV_H.Indexed Vd_Ts, Arm64RegisterV_H.Indexed Vn_Ts)
         => AddInstruction(Arm64InstructionFactory.MOV(Vd_Ts, Vn_Ts));
    /// <summary>
    /// Move vector element to another vector element.
    /// </summary>
    /// <remarks><code>MOV Vd.Ts[index1], Vn.Ts[index2]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_ins_asimdins_iv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV(Arm64RegisterV_S.Indexed Vd_Ts, Arm64RegisterV_S.Indexed Vn_Ts)
         => AddInstruction(Arm64InstructionFactory.MOV(Vd_Ts, Vn_Ts));
    /// <summary>
    /// Move vector element to another vector element.
    /// </summary>
    /// <remarks><code>MOV Vd.Ts[index1], Vn.Ts[index2]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_ins_asimdins_iv_v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV(Arm64RegisterV_D.Indexed Vd_Ts, Arm64RegisterV_D.Indexed Vn_Ts)
         => AddInstruction(Arm64InstructionFactory.MOV(Vd_Ts, Vn_Ts));
    /// <summary>
    /// Move general-purpose register to a vector element.
    /// </summary>
    /// <remarks><code>MOV Vd.Ts[index], Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_ins_asimdins_ir_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV(Arm64RegisterV_B.Indexed Vd_Ts, Arm64RegisterW Rn)
         => AddInstruction(Arm64InstructionFactory.MOV(Vd_Ts, Rn));
    /// <summary>
    /// Move general-purpose register to a vector element.
    /// </summary>
    /// <remarks><code>MOV Vd.Ts[index], Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_ins_asimdins_ir_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV(Arm64RegisterV_H.Indexed Vd_Ts, Arm64RegisterW Rn)
         => AddInstruction(Arm64InstructionFactory.MOV(Vd_Ts, Rn));
    /// <summary>
    /// Move general-purpose register to a vector element.
    /// </summary>
    /// <remarks><code>MOV Vd.Ts[index], Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_ins_asimdins_ir_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV(Arm64RegisterV_S.Indexed Vd_Ts, Arm64RegisterW Rn)
         => AddInstruction(Arm64InstructionFactory.MOV(Vd_Ts, Rn));
    /// <summary>
    /// Move general-purpose register to a vector element.
    /// </summary>
    /// <remarks><code>MOV Vd.Ts[index], Rn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_ins_asimdins_ir_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV(Arm64RegisterV_D.Indexed Vd_Ts, Arm64RegisterX Rn)
         => AddInstruction(Arm64InstructionFactory.MOV(Vd_Ts, Rn));
    /// <summary>
    /// Move vector element to scalar.
    /// </summary>
    /// <remarks><code>MOV Vd, Vn.T[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_dup_asisdone_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV(Arm64RegisterB Vd, Arm64RegisterV_B.Indexed Vn_T)
         => AddInstruction(Arm64InstructionFactory.MOV(Vd, Vn_T));
    /// <summary>
    /// Move vector element to scalar.
    /// </summary>
    /// <remarks><code>MOV Vd, Vn.T[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_dup_asisdone_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV(Arm64RegisterH Vd, Arm64RegisterV_H.Indexed Vn_T)
         => AddInstruction(Arm64InstructionFactory.MOV(Vd, Vn_T));
    /// <summary>
    /// Move vector element to scalar.
    /// </summary>
    /// <remarks><code>MOV Vd, Vn.T[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_dup_asisdone_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV(Arm64RegisterS Vd, Arm64RegisterV_S.Indexed Vn_T)
         => AddInstruction(Arm64InstructionFactory.MOV(Vd, Vn_T));
    /// <summary>
    /// Move vector element to scalar.
    /// </summary>
    /// <remarks><code>MOV Vd, Vn.T[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_dup_asisdone_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV(Arm64RegisterD Vd, Arm64RegisterV_D.Indexed Vn_T)
         => AddInstruction(Arm64InstructionFactory.MOV(Vd, Vn_T));
    /// <summary>
    /// Move vector element to general-purpose register.
    /// </summary>
    /// <remarks><code>MOV Wd, Vn.S[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_umov_asimdins_w_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV(Arm64RegisterW Wd, Arm64RegisterV_S.Indexed Vn_S)
         => AddInstruction(Arm64InstructionFactory.MOV(Wd, Vn_S));
    /// <summary>
    /// Move vector element to general-purpose register.
    /// </summary>
    /// <remarks><code>MOV Xd, Vn.D[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_umov_asimdins_x_x), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV(Arm64RegisterX Xd, Arm64RegisterV_D.Indexed Vn_D)
         => AddInstruction(Arm64InstructionFactory.MOV(Xd, Vn_D));
    /// <summary>
    /// Move vector.
    /// </summary>
    /// <remarks><code>MOV Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_orr_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
         => AddInstruction(Arm64InstructionFactory.MOV(Vd_T, Vn_T));
    /// <summary>
    /// Move vector.
    /// </summary>
    /// <remarks><code>MOV Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOV_orr_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOV(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
         => AddInstruction(Arm64InstructionFactory.MOV(Vd_T, Vn_T));
    /// <summary>
    /// Move immediate (vector).
    /// </summary>
    /// <remarks><code>MOVI Vd.T, #imm8 {, LSL #0}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVI_asimdimm_n_b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOVI(Arm64RegisterV_8B Vd_T, byte imm8, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.MOVI(Vd_T, imm8, LSL, amount));
    /// <summary>
    /// Move immediate (vector).
    /// </summary>
    /// <remarks><code>MOVI Vd.T, #imm8 {, LSL #0}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVI_asimdimm_n_b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOVI(Arm64RegisterV_16B Vd_T, byte imm8, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.MOVI(Vd_T, imm8, LSL, amount));
    /// <summary>
    /// Move immediate (vector).
    /// </summary>
    /// <remarks><code>MOVI Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVI_asimdimm_l_hl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOVI(Arm64RegisterV_4H Vd_T, byte imm8, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.MOVI(Vd_T, imm8, LSL, amount));
    /// <summary>
    /// Move immediate (vector).
    /// </summary>
    /// <remarks><code>MOVI Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVI_asimdimm_l_hl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOVI(Arm64RegisterV_8H Vd_T, byte imm8, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.MOVI(Vd_T, imm8, LSL, amount));
    /// <summary>
    /// Move immediate (vector).
    /// </summary>
    /// <remarks><code>MOVI Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVI_asimdimm_l_sl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOVI(Arm64RegisterV_2S Vd_T, byte imm8, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.MOVI(Vd_T, imm8, LSL, amount));
    /// <summary>
    /// Move immediate (vector).
    /// </summary>
    /// <remarks><code>MOVI Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVI_asimdimm_l_sl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOVI(Arm64RegisterV_4S Vd_T, byte imm8, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.MOVI(Vd_T, imm8, LSL, amount));
    /// <summary>
    /// Move immediate (vector).
    /// </summary>
    /// <remarks><code>MOVI Vd.T, #imm8, MSL #amount</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVI_asimdimm_m_sm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOVI(Arm64RegisterV_2S Vd_T, byte imm8, IArm64ShiftKind.MSL MSL, int amount)
         => AddInstruction(Arm64InstructionFactory.MOVI(Vd_T, imm8, MSL, amount));
    /// <summary>
    /// Move immediate (vector).
    /// </summary>
    /// <remarks><code>MOVI Vd.T, #imm8, MSL #amount</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVI_asimdimm_m_sm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOVI(Arm64RegisterV_4S Vd_T, byte imm8, IArm64ShiftKind.MSL MSL, int amount)
         => AddInstruction(Arm64InstructionFactory.MOVI(Vd_T, imm8, MSL, amount));
    /// <summary>
    /// Move immediate (vector).
    /// </summary>
    /// <remarks><code>MOVI Dd, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVI_asimdimm_d_ds), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOVI(Arm64RegisterD Dd, Arm64BitMaskImmediate64 imm)
         => AddInstruction(Arm64InstructionFactory.MOVI(Dd, imm));
    /// <summary>
    /// Move immediate (vector).
    /// </summary>
    /// <remarks><code>MOVI Vd.2D, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MOVI_asimdimm_d2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MOVI(Arm64RegisterV_2D Vd_2D, Arm64BitMaskImmediate64 imm)
         => AddInstruction(Arm64InstructionFactory.MOVI(Vd_2D, imm));
    /// <summary>
    /// Multiply (vector, by element).
    /// </summary>
    /// <remarks><code>MUL Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MUL_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MUL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.MUL(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Multiply (vector, by element).
    /// </summary>
    /// <remarks><code>MUL Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MUL_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MUL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.MUL(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Multiply (vector, by element).
    /// </summary>
    /// <remarks><code>MUL Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MUL_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MUL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.MUL(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Multiply (vector, by element).
    /// </summary>
    /// <remarks><code>MUL Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MUL_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MUL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.MUL(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Multiply (vector).
    /// </summary>
    /// <remarks><code>MUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MUL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MUL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.MUL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Multiply (vector).
    /// </summary>
    /// <remarks><code>MUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MUL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MUL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.MUL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Multiply (vector).
    /// </summary>
    /// <remarks><code>MUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MUL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MUL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.MUL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Multiply (vector).
    /// </summary>
    /// <remarks><code>MUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MUL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MUL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.MUL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Multiply (vector).
    /// </summary>
    /// <remarks><code>MUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MUL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MUL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.MUL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Multiply (vector).
    /// </summary>
    /// <remarks><code>MUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MUL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MUL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.MUL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Bitwise NOT (vector).
    /// </summary>
    /// <remarks><code>MVN Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MVN_not_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MVN(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
         => AddInstruction(Arm64InstructionFactory.MVN(Vd_T, Vn_T));
    /// <summary>
    /// Bitwise NOT (vector).
    /// </summary>
    /// <remarks><code>MVN Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MVN_not_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MVN(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
         => AddInstruction(Arm64InstructionFactory.MVN(Vd_T, Vn_T));
    /// <summary>
    /// Move inverted immediate (vector).
    /// </summary>
    /// <remarks><code>MVNI Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MVNI_asimdimm_l_hl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MVNI(Arm64RegisterV_4H Vd_T, byte imm8, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.MVNI(Vd_T, imm8, LSL, amount));
    /// <summary>
    /// Move inverted immediate (vector).
    /// </summary>
    /// <remarks><code>MVNI Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MVNI_asimdimm_l_hl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MVNI(Arm64RegisterV_8H Vd_T, byte imm8, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.MVNI(Vd_T, imm8, LSL, amount));
    /// <summary>
    /// Move inverted immediate (vector).
    /// </summary>
    /// <remarks><code>MVNI Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MVNI_asimdimm_l_sl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MVNI(Arm64RegisterV_2S Vd_T, byte imm8, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.MVNI(Vd_T, imm8, LSL, amount));
    /// <summary>
    /// Move inverted immediate (vector).
    /// </summary>
    /// <remarks><code>MVNI Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MVNI_asimdimm_l_sl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MVNI(Arm64RegisterV_4S Vd_T, byte imm8, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.MVNI(Vd_T, imm8, LSL, amount));
    /// <summary>
    /// Move inverted immediate (vector).
    /// </summary>
    /// <remarks><code>MVNI Vd.T, #imm8, MSL #amount</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MVNI_asimdimm_m_sm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MVNI(Arm64RegisterV_2S Vd_T, byte imm8, IArm64ShiftKind.MSL MSL, int amount)
         => AddInstruction(Arm64InstructionFactory.MVNI(Vd_T, imm8, MSL, amount));
    /// <summary>
    /// Move inverted immediate (vector).
    /// </summary>
    /// <remarks><code>MVNI Vd.T, #imm8, MSL #amount</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.MVNI_asimdimm_m_sm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void MVNI(Arm64RegisterV_4S Vd_T, byte imm8, IArm64ShiftKind.MSL MSL, int amount)
         => AddInstruction(Arm64InstructionFactory.MVNI(Vd_T, imm8, MSL, amount));
    /// <summary>
    /// Negate (vector).
    /// </summary>
    /// <remarks><code>NEG Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NEG_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void NEG(Arm64RegisterD Dd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.NEG(Dd, Dn));
    /// <summary>
    /// Negate (vector).
    /// </summary>
    /// <remarks><code>NEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void NEG(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
         => AddInstruction(Arm64InstructionFactory.NEG(Vd_T, Vn_T));
    /// <summary>
    /// Negate (vector).
    /// </summary>
    /// <remarks><code>NEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void NEG(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
         => AddInstruction(Arm64InstructionFactory.NEG(Vd_T, Vn_T));
    /// <summary>
    /// Negate (vector).
    /// </summary>
    /// <remarks><code>NEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void NEG(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.NEG(Vd_T, Vn_T));
    /// <summary>
    /// Negate (vector).
    /// </summary>
    /// <remarks><code>NEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void NEG(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.NEG(Vd_T, Vn_T));
    /// <summary>
    /// Negate (vector).
    /// </summary>
    /// <remarks><code>NEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void NEG(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.NEG(Vd_T, Vn_T));
    /// <summary>
    /// Negate (vector).
    /// </summary>
    /// <remarks><code>NEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void NEG(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.NEG(Vd_T, Vn_T));
    /// <summary>
    /// Negate (vector).
    /// </summary>
    /// <remarks><code>NEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void NEG(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.NEG(Vd_T, Vn_T));
    /// <summary>
    /// Bitwise NOT (vector).
    /// </summary>
    /// <remarks><code>NOT Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NOT_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void NOT(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
         => AddInstruction(Arm64InstructionFactory.NOT(Vd_T, Vn_T));
    /// <summary>
    /// Bitwise NOT (vector).
    /// </summary>
    /// <remarks><code>NOT Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.NOT_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void NOT(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
         => AddInstruction(Arm64InstructionFactory.NOT(Vd_T, Vn_T));
    /// <summary>
    /// Bitwise inclusive OR NOT (vector).
    /// </summary>
    /// <remarks><code>ORN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ORN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ORN(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.ORN(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Bitwise inclusive OR NOT (vector).
    /// </summary>
    /// <remarks><code>ORN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ORN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ORN(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.ORN(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Bitwise inclusive OR (vector, immediate).
    /// </summary>
    /// <remarks><code>ORR Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ORR_asimdimm_l_hl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ORR(Arm64RegisterV_4H Vd_T, byte imm8, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.ORR(Vd_T, imm8, LSL, amount));
    /// <summary>
    /// Bitwise inclusive OR (vector, immediate).
    /// </summary>
    /// <remarks><code>ORR Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ORR_asimdimm_l_hl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ORR(Arm64RegisterV_8H Vd_T, byte imm8, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.ORR(Vd_T, imm8, LSL, amount));
    /// <summary>
    /// Bitwise inclusive OR (vector, immediate).
    /// </summary>
    /// <remarks><code>ORR Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ORR_asimdimm_l_sl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ORR(Arm64RegisterV_2S Vd_T, byte imm8, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.ORR(Vd_T, imm8, LSL, amount));
    /// <summary>
    /// Bitwise inclusive OR (vector, immediate).
    /// </summary>
    /// <remarks><code>ORR Vd.T, #imm8 {, LSL #amount}</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ORR_asimdimm_l_sl), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ORR(Arm64RegisterV_4S Vd_T, byte imm8, IArm64ShiftKind.LSL LSL = default, int amount = 0)
         => AddInstruction(Arm64InstructionFactory.ORR(Vd_T, imm8, LSL, amount));
    /// <summary>
    /// Bitwise inclusive OR (vector, register).
    /// </summary>
    /// <remarks><code>ORR Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ORR_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ORR(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.ORR(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Bitwise inclusive OR (vector, register).
    /// </summary>
    /// <remarks><code>ORR Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ORR_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ORR(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.ORR(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Polynomial multiply.
    /// </summary>
    /// <remarks><code>PMUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PMUL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PMUL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.PMUL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Polynomial multiply.
    /// </summary>
    /// <remarks><code>PMUL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PMUL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PMUL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.PMUL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Polynomial multiply long.
    /// </summary>
    /// <remarks><code>PMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PMULL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.PMULL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Polynomial multiply long.
    /// </summary>
    /// <remarks><code>PMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PMULL(Arm64RegisterV_1Q Vd_Ta, Arm64RegisterV_1D Vn_Tb, Arm64RegisterV_1D Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.PMULL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Polynomial multiply long.
    /// </summary>
    /// <remarks><code>PMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PMULL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.PMULL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Polynomial multiply long.
    /// </summary>
    /// <remarks><code>PMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.PMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void PMULL2(Arm64RegisterV_1Q Vd_Ta, Arm64RegisterV_2D Vn_Tb, Arm64RegisterV_2D Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.PMULL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Rounding add returning high narrow.
    /// </summary>
    /// <remarks><code>RADDHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RADDHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RADDHN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8H Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.RADDHN(Vd_Tb, Vn_Ta, Vm_Ta));
    /// <summary>
    /// Rounding add returning high narrow.
    /// </summary>
    /// <remarks><code>RADDHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RADDHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RADDHN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4S Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.RADDHN(Vd_Tb, Vn_Ta, Vm_Ta));
    /// <summary>
    /// Rounding add returning high narrow.
    /// </summary>
    /// <remarks><code>RADDHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RADDHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RADDHN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2D Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.RADDHN(Vd_Tb, Vn_Ta, Vm_Ta));
    /// <summary>
    /// Rounding add returning high narrow.
    /// </summary>
    /// <remarks><code>RADDHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RADDHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RADDHN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8H Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.RADDHN2(Vd_Tb, Vn_Ta, Vm_Ta));
    /// <summary>
    /// Rounding add returning high narrow.
    /// </summary>
    /// <remarks><code>RADDHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RADDHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RADDHN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4S Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.RADDHN2(Vd_Tb, Vn_Ta, Vm_Ta));
    /// <summary>
    /// Rounding add returning high narrow.
    /// </summary>
    /// <remarks><code>RADDHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RADDHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RADDHN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2D Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.RADDHN2(Vd_Tb, Vn_Ta, Vm_Ta));
    /// <summary>
    /// Rotate and exclusive-OR.
    /// </summary>
    /// <remarks><code>RAX1 Vd.2D, Vn.2D, Vm.2D</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RAX1_vvv2_cryptosha512_3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RAX1(Arm64RegisterV_2D Vd_2D, Arm64RegisterV_2D Vn_2D, Arm64RegisterV_2D Vm_2D)
         => AddInstruction(Arm64InstructionFactory.RAX1(Vd_2D, Vn_2D, Vm_2D));
    /// <summary>
    /// Reverse bit order (vector).
    /// </summary>
    /// <remarks><code>RBIT Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RBIT_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RBIT(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
         => AddInstruction(Arm64InstructionFactory.RBIT(Vd_T, Vn_T));
    /// <summary>
    /// Reverse bit order (vector).
    /// </summary>
    /// <remarks><code>RBIT Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RBIT_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RBIT(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
         => AddInstruction(Arm64InstructionFactory.RBIT(Vd_T, Vn_T));
    /// <summary>
    /// Reverse elements in 16-bit halfwords (vector).
    /// </summary>
    /// <remarks><code>REV16 Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV16_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void REV16(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
         => AddInstruction(Arm64InstructionFactory.REV16(Vd_T, Vn_T));
    /// <summary>
    /// Reverse elements in 16-bit halfwords (vector).
    /// </summary>
    /// <remarks><code>REV16 Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV16_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void REV16(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
         => AddInstruction(Arm64InstructionFactory.REV16(Vd_T, Vn_T));
    /// <summary>
    /// Reverse elements in 32-bit words (vector).
    /// </summary>
    /// <remarks><code>REV32 Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV32_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void REV32(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
         => AddInstruction(Arm64InstructionFactory.REV32(Vd_T, Vn_T));
    /// <summary>
    /// Reverse elements in 32-bit words (vector).
    /// </summary>
    /// <remarks><code>REV32 Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV32_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void REV32(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
         => AddInstruction(Arm64InstructionFactory.REV32(Vd_T, Vn_T));
    /// <summary>
    /// Reverse elements in 32-bit words (vector).
    /// </summary>
    /// <remarks><code>REV32 Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV32_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void REV32(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.REV32(Vd_T, Vn_T));
    /// <summary>
    /// Reverse elements in 32-bit words (vector).
    /// </summary>
    /// <remarks><code>REV32 Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV32_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void REV32(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.REV32(Vd_T, Vn_T));
    /// <summary>
    /// Reverse elements in 64-bit doublewords (vector).
    /// </summary>
    /// <remarks><code>REV64 Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV64_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void REV64(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
         => AddInstruction(Arm64InstructionFactory.REV64(Vd_T, Vn_T));
    /// <summary>
    /// Reverse elements in 64-bit doublewords (vector).
    /// </summary>
    /// <remarks><code>REV64 Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV64_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void REV64(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
         => AddInstruction(Arm64InstructionFactory.REV64(Vd_T, Vn_T));
    /// <summary>
    /// Reverse elements in 64-bit doublewords (vector).
    /// </summary>
    /// <remarks><code>REV64 Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV64_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void REV64(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.REV64(Vd_T, Vn_T));
    /// <summary>
    /// Reverse elements in 64-bit doublewords (vector).
    /// </summary>
    /// <remarks><code>REV64 Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV64_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void REV64(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.REV64(Vd_T, Vn_T));
    /// <summary>
    /// Reverse elements in 64-bit doublewords (vector).
    /// </summary>
    /// <remarks><code>REV64 Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV64_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void REV64(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.REV64(Vd_T, Vn_T));
    /// <summary>
    /// Reverse elements in 64-bit doublewords (vector).
    /// </summary>
    /// <remarks><code>REV64 Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.REV64_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void REV64(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.REV64(Vd_T, Vn_T));
    /// <summary>
    /// Rounding shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>RSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RSHRN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.RSHRN(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Rounding shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>RSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RSHRN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.RSHRN(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Rounding shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>RSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RSHRN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.RSHRN(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Rounding shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>RSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RSHRN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.RSHRN2(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Rounding shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>RSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RSHRN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.RSHRN2(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Rounding shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>RSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RSHRN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.RSHRN2(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Rounding subtract returning high narrow.
    /// </summary>
    /// <remarks><code>RSUBHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSUBHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RSUBHN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8H Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.RSUBHN(Vd_Tb, Vn_Ta, Vm_Ta));
    /// <summary>
    /// Rounding subtract returning high narrow.
    /// </summary>
    /// <remarks><code>RSUBHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSUBHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RSUBHN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4S Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.RSUBHN(Vd_Tb, Vn_Ta, Vm_Ta));
    /// <summary>
    /// Rounding subtract returning high narrow.
    /// </summary>
    /// <remarks><code>RSUBHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSUBHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RSUBHN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2D Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.RSUBHN(Vd_Tb, Vn_Ta, Vm_Ta));
    /// <summary>
    /// Rounding subtract returning high narrow.
    /// </summary>
    /// <remarks><code>RSUBHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSUBHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RSUBHN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8H Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.RSUBHN2(Vd_Tb, Vn_Ta, Vm_Ta));
    /// <summary>
    /// Rounding subtract returning high narrow.
    /// </summary>
    /// <remarks><code>RSUBHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSUBHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RSUBHN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4S Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.RSUBHN2(Vd_Tb, Vn_Ta, Vm_Ta));
    /// <summary>
    /// Rounding subtract returning high narrow.
    /// </summary>
    /// <remarks><code>RSUBHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.RSUBHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void RSUBHN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2D Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.RSUBHN2(Vd_Tb, Vn_Ta, Vm_Ta));
    /// <summary>
    /// Signed absolute difference and accumulate.
    /// </summary>
    /// <remarks><code>SABA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SABA(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SABA(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed absolute difference and accumulate.
    /// </summary>
    /// <remarks><code>SABA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SABA(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SABA(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed absolute difference and accumulate.
    /// </summary>
    /// <remarks><code>SABA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SABA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SABA(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed absolute difference and accumulate.
    /// </summary>
    /// <remarks><code>SABA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SABA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SABA(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed absolute difference and accumulate.
    /// </summary>
    /// <remarks><code>SABA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SABA(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SABA(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed absolute difference and accumulate.
    /// </summary>
    /// <remarks><code>SABA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SABA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SABA(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>SABAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SABAL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SABAL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>SABAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SABAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SABAL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>SABAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SABAL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SABAL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>SABAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SABAL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SABAL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>SABAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SABAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SABAL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>SABAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SABAL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SABAL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed absolute difference.
    /// </summary>
    /// <remarks><code>SABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SABD(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SABD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed absolute difference.
    /// </summary>
    /// <remarks><code>SABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SABD(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SABD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed absolute difference.
    /// </summary>
    /// <remarks><code>SABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SABD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SABD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed absolute difference.
    /// </summary>
    /// <remarks><code>SABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SABD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SABD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed absolute difference.
    /// </summary>
    /// <remarks><code>SABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SABD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SABD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed absolute difference.
    /// </summary>
    /// <remarks><code>SABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SABD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SABD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed absolute difference long.
    /// </summary>
    /// <remarks><code>SABDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SABDL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SABDL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed absolute difference long.
    /// </summary>
    /// <remarks><code>SABDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SABDL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SABDL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed absolute difference long.
    /// </summary>
    /// <remarks><code>SABDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SABDL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SABDL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed absolute difference long.
    /// </summary>
    /// <remarks><code>SABDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SABDL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SABDL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed absolute difference long.
    /// </summary>
    /// <remarks><code>SABDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SABDL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SABDL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed absolute difference long.
    /// </summary>
    /// <remarks><code>SABDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SABDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SABDL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SABDL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed add and accumulate long pairwise.
    /// </summary>
    /// <remarks><code>SADALP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADALP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADALP(Arm64RegisterV_4H Vd_Ta, Arm64RegisterV_8B Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.SADALP(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Signed add and accumulate long pairwise.
    /// </summary>
    /// <remarks><code>SADALP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADALP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADALP(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.SADALP(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Signed add and accumulate long pairwise.
    /// </summary>
    /// <remarks><code>SADALP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADALP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADALP(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_4H Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.SADALP(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Signed add and accumulate long pairwise.
    /// </summary>
    /// <remarks><code>SADALP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADALP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADALP(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.SADALP(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Signed add and accumulate long pairwise.
    /// </summary>
    /// <remarks><code>SADALP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADALP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADALP(Arm64RegisterV_1D Vd_Ta, Arm64RegisterV_2S Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.SADALP(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Signed add and accumulate long pairwise.
    /// </summary>
    /// <remarks><code>SADALP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADALP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADALP(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.SADALP(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Signed add long (vector).
    /// </summary>
    /// <remarks><code>SADDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADDL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SADDL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed add long (vector).
    /// </summary>
    /// <remarks><code>SADDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADDL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SADDL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed add long (vector).
    /// </summary>
    /// <remarks><code>SADDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADDL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SADDL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed add long (vector).
    /// </summary>
    /// <remarks><code>SADDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADDL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SADDL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed add long (vector).
    /// </summary>
    /// <remarks><code>SADDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADDL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SADDL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed add long (vector).
    /// </summary>
    /// <remarks><code>SADDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADDL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SADDL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed add long pairwise.
    /// </summary>
    /// <remarks><code>SADDLP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDLP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADDLP(Arm64RegisterV_4H Vd_Ta, Arm64RegisterV_8B Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.SADDLP(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Signed add long pairwise.
    /// </summary>
    /// <remarks><code>SADDLP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDLP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADDLP(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.SADDLP(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Signed add long pairwise.
    /// </summary>
    /// <remarks><code>SADDLP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDLP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADDLP(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_4H Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.SADDLP(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Signed add long pairwise.
    /// </summary>
    /// <remarks><code>SADDLP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDLP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADDLP(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.SADDLP(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Signed add long pairwise.
    /// </summary>
    /// <remarks><code>SADDLP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDLP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADDLP(Arm64RegisterV_1D Vd_Ta, Arm64RegisterV_2S Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.SADDLP(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Signed add long pairwise.
    /// </summary>
    /// <remarks><code>SADDLP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDLP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADDLP(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.SADDLP(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Signed add long across vector.
    /// </summary>
    /// <remarks><code>SADDLV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDLV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADDLV(Arm64RegisterH Vd, Arm64RegisterV_8B Vn_T)
         => AddInstruction(Arm64InstructionFactory.SADDLV(Vd, Vn_T));
    /// <summary>
    /// Signed add long across vector.
    /// </summary>
    /// <remarks><code>SADDLV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDLV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADDLV(Arm64RegisterH Vd, Arm64RegisterV_16B Vn_T)
         => AddInstruction(Arm64InstructionFactory.SADDLV(Vd, Vn_T));
    /// <summary>
    /// Signed add long across vector.
    /// </summary>
    /// <remarks><code>SADDLV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDLV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADDLV(Arm64RegisterS Vd, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.SADDLV(Vd, Vn_T));
    /// <summary>
    /// Signed add long across vector.
    /// </summary>
    /// <remarks><code>SADDLV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDLV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADDLV(Arm64RegisterS Vd, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.SADDLV(Vd, Vn_T));
    /// <summary>
    /// Signed add long across vector.
    /// </summary>
    /// <remarks><code>SADDLV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDLV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADDLV(Arm64RegisterD Vd, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.SADDLV(Vd, Vn_T));
    /// <summary>
    /// Signed add wide.
    /// </summary>
    /// <remarks><code>SADDW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADDW(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SADDW(Vd_Ta, Vn_Ta, Vm_Tb));
    /// <summary>
    /// Signed add wide.
    /// </summary>
    /// <remarks><code>SADDW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADDW(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SADDW(Vd_Ta, Vn_Ta, Vm_Tb));
    /// <summary>
    /// Signed add wide.
    /// </summary>
    /// <remarks><code>SADDW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADDW(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SADDW(Vd_Ta, Vn_Ta, Vm_Tb));
    /// <summary>
    /// Signed add wide.
    /// </summary>
    /// <remarks><code>SADDW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADDW2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_16B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SADDW2(Vd_Ta, Vn_Ta, Vm_Tb));
    /// <summary>
    /// Signed add wide.
    /// </summary>
    /// <remarks><code>SADDW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADDW2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_8H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SADDW2(Vd_Ta, Vn_Ta, Vm_Tb));
    /// <summary>
    /// Signed add wide.
    /// </summary>
    /// <remarks><code>SADDW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SADDW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SADDW2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_4S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SADDW2(Vd_Ta, Vn_Ta, Vm_Tb));
    /// <summary>
    /// Signed fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd, Vn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asisdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterH Vd, Arm64RegisterH Vn, byte fbits)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Vd, Vn, fbits));
    /// <summary>
    /// Signed fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd, Vn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asisdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterS Vd, Arm64RegisterS Vn, byte fbits)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Vd, Vn, fbits));
    /// <summary>
    /// Signed fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd, Vn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asisdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterD Vd, Arm64RegisterD Vn, byte fbits)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Vd, Vn, fbits));
    /// <summary>
    /// Signed fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte fbits)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Vd_T, Vn_T, fbits));
    /// <summary>
    /// Signed fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte fbits)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Vd_T, Vn_T, fbits));
    /// <summary>
    /// Signed fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte fbits)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Vd_T, Vn_T, fbits));
    /// <summary>
    /// Signed fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte fbits)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Vd_T, Vn_T, fbits));
    /// <summary>
    /// Signed fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte fbits)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Vd_T, Vn_T, fbits));
    /// <summary>
    /// Signed integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Hd, Hn));
    /// <summary>
    /// Signed integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterS Vd, Arm64RegisterS Vn)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Vd, Vn));
    /// <summary>
    /// Signed integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterD Vd, Arm64RegisterD Vn)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Vd, Vn));
    /// <summary>
    /// Signed integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Vd_T, Vn_T));
    /// <summary>
    /// Signed integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Vd_T, Vn_T));
    /// <summary>
    /// Signed integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Vd_T, Vn_T));
    /// <summary>
    /// Signed integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Vd_T, Vn_T));
    /// <summary>
    /// Signed integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>SCVTF Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Vd_T, Vn_T));
    /// <summary>
    /// Dot product signed arithmetic (vector, by element).
    /// </summary>
    /// <remarks><code>SDOT Vd.Ta, Vn.Tb, Vm.4B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SDOT_asimdelem_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SDOT(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_4B.Indexed Vm_4B)
         => AddInstruction(Arm64InstructionFactory.SDOT(Vd_Ta, Vn_Tb, Vm_4B));
    /// <summary>
    /// Dot product signed arithmetic (vector, by element).
    /// </summary>
    /// <remarks><code>SDOT Vd.Ta, Vn.Tb, Vm.4B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SDOT_asimdelem_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SDOT(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_4B.Indexed Vm_4B)
         => AddInstruction(Arm64InstructionFactory.SDOT(Vd_Ta, Vn_Tb, Vm_4B));
    /// <summary>
    /// Dot product signed arithmetic (vector).
    /// </summary>
    /// <remarks><code>SDOT Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SDOT_asimdsame2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SDOT(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SDOT(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Dot product signed arithmetic (vector).
    /// </summary>
    /// <remarks><code>SDOT Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SDOT_asimdsame2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SDOT(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SDOT(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// SHA1 hash update (choose).
    /// </summary>
    /// <remarks><code>SHA1C Qd, Sn, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA1C_qsv_cryptosha3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHA1C(Arm64RegisterQ Qd, Arm64RegisterS Sn, Arm64RegisterV_4S Vm_4S)
         => AddInstruction(Arm64InstructionFactory.SHA1C(Qd, Sn, Vm_4S));
    /// <summary>
    /// SHA1 fixed rotate.
    /// </summary>
    /// <remarks><code>SHA1H Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA1H_ss_cryptosha2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHA1H(Arm64RegisterS Sd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.SHA1H(Sd, Sn));
    /// <summary>
    /// SHA1 hash update (majority).
    /// </summary>
    /// <remarks><code>SHA1M Qd, Sn, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA1M_qsv_cryptosha3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHA1M(Arm64RegisterQ Qd, Arm64RegisterS Sn, Arm64RegisterV_4S Vm_4S)
         => AddInstruction(Arm64InstructionFactory.SHA1M(Qd, Sn, Vm_4S));
    /// <summary>
    /// SHA1 hash update (parity).
    /// </summary>
    /// <remarks><code>SHA1P Qd, Sn, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA1P_qsv_cryptosha3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHA1P(Arm64RegisterQ Qd, Arm64RegisterS Sn, Arm64RegisterV_4S Vm_4S)
         => AddInstruction(Arm64InstructionFactory.SHA1P(Qd, Sn, Vm_4S));
    /// <summary>
    /// SHA1 schedule update 0.
    /// </summary>
    /// <remarks><code>SHA1SU0 Vd.4S, Vn.4S, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA1SU0_vvv_cryptosha3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHA1SU0(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_4S Vm_4S)
         => AddInstruction(Arm64InstructionFactory.SHA1SU0(Vd_4S, Vn_4S, Vm_4S));
    /// <summary>
    /// SHA1 schedule update 1.
    /// </summary>
    /// <remarks><code>SHA1SU1 Vd.4S, Vn.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA1SU1_vv_cryptosha2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHA1SU1(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S)
         => AddInstruction(Arm64InstructionFactory.SHA1SU1(Vd_4S, Vn_4S));
    /// <summary>
    /// SHA256 hash update (part 1).
    /// </summary>
    /// <remarks><code>SHA256H Qd, Qn, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA256H_qqv_cryptosha3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHA256H(Arm64RegisterQ Qd, Arm64RegisterQ Qn, Arm64RegisterV_4S Vm_4S)
         => AddInstruction(Arm64InstructionFactory.SHA256H(Qd, Qn, Vm_4S));
    /// <summary>
    /// SHA256 hash update (part 2).
    /// </summary>
    /// <remarks><code>SHA256H2 Qd, Qn, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA256H2_qqv_cryptosha3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHA256H2(Arm64RegisterQ Qd, Arm64RegisterQ Qn, Arm64RegisterV_4S Vm_4S)
         => AddInstruction(Arm64InstructionFactory.SHA256H2(Qd, Qn, Vm_4S));
    /// <summary>
    /// SHA256 schedule update 0.
    /// </summary>
    /// <remarks><code>SHA256SU0 Vd.4S, Vn.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA256SU0_vv_cryptosha2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHA256SU0(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S)
         => AddInstruction(Arm64InstructionFactory.SHA256SU0(Vd_4S, Vn_4S));
    /// <summary>
    /// SHA256 schedule update 1.
    /// </summary>
    /// <remarks><code>SHA256SU1 Vd.4S, Vn.4S, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA256SU1_vvv_cryptosha3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHA256SU1(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_4S Vm_4S)
         => AddInstruction(Arm64InstructionFactory.SHA256SU1(Vd_4S, Vn_4S, Vm_4S));
    /// <summary>
    /// SHA512 hash update part 1.
    /// </summary>
    /// <remarks><code>SHA512H Qd, Qn, Vm.2D</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA512H_qqv_cryptosha512_3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHA512H(Arm64RegisterQ Qd, Arm64RegisterQ Qn, Arm64RegisterV_2D Vm_2D)
         => AddInstruction(Arm64InstructionFactory.SHA512H(Qd, Qn, Vm_2D));
    /// <summary>
    /// SHA512 hash update part 2.
    /// </summary>
    /// <remarks><code>SHA512H2 Qd, Qn, Vm.2D</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA512H2_qqv_cryptosha512_3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHA512H2(Arm64RegisterQ Qd, Arm64RegisterQ Qn, Arm64RegisterV_2D Vm_2D)
         => AddInstruction(Arm64InstructionFactory.SHA512H2(Qd, Qn, Vm_2D));
    /// <summary>
    /// SHA512 schedule update 0.
    /// </summary>
    /// <remarks><code>SHA512SU0 Vd.2D, Vn.2D</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA512SU0_vv2_cryptosha512_2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHA512SU0(Arm64RegisterV_2D Vd_2D, Arm64RegisterV_2D Vn_2D)
         => AddInstruction(Arm64InstructionFactory.SHA512SU0(Vd_2D, Vn_2D));
    /// <summary>
    /// SHA512 schedule update 1.
    /// </summary>
    /// <remarks><code>SHA512SU1 Vd.2D, Vn.2D, Vm.2D</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHA512SU1_vvv2_cryptosha512_3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHA512SU1(Arm64RegisterV_2D Vd_2D, Arm64RegisterV_2D Vn_2D, Arm64RegisterV_2D Vm_2D)
         => AddInstruction(Arm64InstructionFactory.SHA512SU1(Vd_2D, Vn_2D, Vm_2D));
    /// <summary>
    /// Signed halving add.
    /// </summary>
    /// <remarks><code>SHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHADD(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SHADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed halving add.
    /// </summary>
    /// <remarks><code>SHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHADD(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SHADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed halving add.
    /// </summary>
    /// <remarks><code>SHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHADD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SHADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed halving add.
    /// </summary>
    /// <remarks><code>SHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHADD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SHADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed halving add.
    /// </summary>
    /// <remarks><code>SHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHADD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SHADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed halving add.
    /// </summary>
    /// <remarks><code>SHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHADD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SHADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Shift left (immediate).
    /// </summary>
    /// <remarks><code>SHL Dd, Dn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHL_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHL(Arm64RegisterD Dd, Arm64RegisterD Dn, uint shift)
         => AddInstruction(Arm64InstructionFactory.SHL(Dd, Dn, shift));
    /// <summary>
    /// Shift left (immediate).
    /// </summary>
    /// <remarks><code>SHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SHL(Vd_T, Vn_T, shift));
    /// <summary>
    /// Shift left (immediate).
    /// </summary>
    /// <remarks><code>SHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SHL(Vd_T, Vn_T, shift));
    /// <summary>
    /// Shift left (immediate).
    /// </summary>
    /// <remarks><code>SHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SHL(Vd_T, Vn_T, shift));
    /// <summary>
    /// Shift left (immediate).
    /// </summary>
    /// <remarks><code>SHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SHL(Vd_T, Vn_T, shift));
    /// <summary>
    /// Shift left (immediate).
    /// </summary>
    /// <remarks><code>SHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SHL(Vd_T, Vn_T, shift));
    /// <summary>
    /// Shift left (immediate).
    /// </summary>
    /// <remarks><code>SHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SHL(Vd_T, Vn_T, shift));
    /// <summary>
    /// Shift left (immediate).
    /// </summary>
    /// <remarks><code>SHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SHL(Vd_T, Vn_T, shift));
    /// <summary>
    /// Shift left long (by element size).
    /// </summary>
    /// <remarks><code>SHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHLL_asimdmisc_s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHLL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, byte shift = 8)
         => AddInstruction(Arm64InstructionFactory.SHLL(Vd_Ta, Vn_Tb, shift));
    /// <summary>
    /// Shift left long (by element size).
    /// </summary>
    /// <remarks><code>SHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHLL_asimdmisc_s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHLL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, byte shift = 16)
         => AddInstruction(Arm64InstructionFactory.SHLL(Vd_Ta, Vn_Tb, shift));
    /// <summary>
    /// Shift left long (by element size).
    /// </summary>
    /// <remarks><code>SHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHLL_asimdmisc_s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHLL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, byte shift = 32)
         => AddInstruction(Arm64InstructionFactory.SHLL(Vd_Ta, Vn_Tb, shift));
    /// <summary>
    /// Shift left long (by element size).
    /// </summary>
    /// <remarks><code>SHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHLL2_asimdmisc_s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHLL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, byte shift = 8)
         => AddInstruction(Arm64InstructionFactory.SHLL2(Vd_Ta, Vn_Tb, shift));
    /// <summary>
    /// Shift left long (by element size).
    /// </summary>
    /// <remarks><code>SHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHLL2_asimdmisc_s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHLL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, byte shift = 16)
         => AddInstruction(Arm64InstructionFactory.SHLL2(Vd_Ta, Vn_Tb, shift));
    /// <summary>
    /// Shift left long (by element size).
    /// </summary>
    /// <remarks><code>SHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHLL2_asimdmisc_s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHLL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, byte shift = 32)
         => AddInstruction(Arm64InstructionFactory.SHLL2(Vd_Ta, Vn_Tb, shift));
    /// <summary>
    /// Shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHRN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SHRN(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHRN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SHRN(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHRN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SHRN(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHRN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SHRN2(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHRN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SHRN2(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHRN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SHRN2(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed halving subtract.
    /// </summary>
    /// <remarks><code>SHSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHSUB(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SHSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed halving subtract.
    /// </summary>
    /// <remarks><code>SHSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHSUB(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SHSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed halving subtract.
    /// </summary>
    /// <remarks><code>SHSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHSUB(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SHSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed halving subtract.
    /// </summary>
    /// <remarks><code>SHSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHSUB(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SHSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed halving subtract.
    /// </summary>
    /// <remarks><code>SHSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHSUB(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SHSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed halving subtract.
    /// </summary>
    /// <remarks><code>SHSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SHSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SHSUB(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SHSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Shift left and insert (immediate).
    /// </summary>
    /// <remarks><code>SLI Dd, Dn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SLI_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SLI(Arm64RegisterD Dd, Arm64RegisterD Dn, uint shift)
         => AddInstruction(Arm64InstructionFactory.SLI(Dd, Dn, shift));
    /// <summary>
    /// Shift left and insert (immediate).
    /// </summary>
    /// <remarks><code>SLI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SLI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SLI(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SLI(Vd_T, Vn_T, shift));
    /// <summary>
    /// Shift left and insert (immediate).
    /// </summary>
    /// <remarks><code>SLI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SLI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SLI(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SLI(Vd_T, Vn_T, shift));
    /// <summary>
    /// Shift left and insert (immediate).
    /// </summary>
    /// <remarks><code>SLI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SLI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SLI(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SLI(Vd_T, Vn_T, shift));
    /// <summary>
    /// Shift left and insert (immediate).
    /// </summary>
    /// <remarks><code>SLI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SLI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SLI(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SLI(Vd_T, Vn_T, shift));
    /// <summary>
    /// Shift left and insert (immediate).
    /// </summary>
    /// <remarks><code>SLI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SLI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SLI(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SLI(Vd_T, Vn_T, shift));
    /// <summary>
    /// Shift left and insert (immediate).
    /// </summary>
    /// <remarks><code>SLI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SLI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SLI(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SLI(Vd_T, Vn_T, shift));
    /// <summary>
    /// Shift left and insert (immediate).
    /// </summary>
    /// <remarks><code>SLI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SLI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SLI(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SLI(Vd_T, Vn_T, shift));
    /// <summary>
    /// SM3PARTW1.
    /// </summary>
    /// <remarks><code>SM3PARTW1 Vd.4S, Vn.4S, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SM3PARTW1_vvv4_cryptosha512_3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SM3PARTW1(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_4S Vm_4S)
         => AddInstruction(Arm64InstructionFactory.SM3PARTW1(Vd_4S, Vn_4S, Vm_4S));
    /// <summary>
    /// SM3PARTW2.
    /// </summary>
    /// <remarks><code>SM3PARTW2 Vd.4S, Vn.4S, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SM3PARTW2_vvv4_cryptosha512_3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SM3PARTW2(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_4S Vm_4S)
         => AddInstruction(Arm64InstructionFactory.SM3PARTW2(Vd_4S, Vn_4S, Vm_4S));
    /// <summary>
    /// SM3SS1.
    /// </summary>
    /// <remarks><code>SM3SS1 Vd.4S, Vn.4S, Vm.4S, Va.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SM3SS1_vvv4_crypto4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SM3SS1(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_4S Vm_4S, Arm64RegisterV_4S Va_4S)
         => AddInstruction(Arm64InstructionFactory.SM3SS1(Vd_4S, Vn_4S, Vm_4S, Va_4S));
    /// <summary>
    /// SM3TT1A.
    /// </summary>
    /// <remarks><code>SM3TT1A Vd.4S, Vn.4S, Vm.S[imm2]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SM3TT1A_vvv4_crypto3_imm2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SM3TT1A(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_S.Indexed Vm_S)
         => AddInstruction(Arm64InstructionFactory.SM3TT1A(Vd_4S, Vn_4S, Vm_S));
    /// <summary>
    /// SM3TT1B.
    /// </summary>
    /// <remarks><code>SM3TT1B Vd.4S, Vn.4S, Vm.S[imm2]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SM3TT1B_vvv4_crypto3_imm2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SM3TT1B(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_S.Indexed Vm_S)
         => AddInstruction(Arm64InstructionFactory.SM3TT1B(Vd_4S, Vn_4S, Vm_S));
    /// <summary>
    /// SM3TT2A.
    /// </summary>
    /// <remarks><code>SM3TT2A Vd.4S, Vn.4S, Vm.S[imm2]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SM3TT2A_vvv4_crypto3_imm2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SM3TT2A(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_S.Indexed Vm_S)
         => AddInstruction(Arm64InstructionFactory.SM3TT2A(Vd_4S, Vn_4S, Vm_S));
    /// <summary>
    /// SM3TT2B.
    /// </summary>
    /// <remarks><code>SM3TT2B Vd.4S, Vn.4S, Vm.S[imm2]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SM3TT2B_vvv_crypto3_imm2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SM3TT2B(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_S.Indexed Vm_S)
         => AddInstruction(Arm64InstructionFactory.SM3TT2B(Vd_4S, Vn_4S, Vm_S));
    /// <summary>
    /// SM4 encode.
    /// </summary>
    /// <remarks><code>SM4E Vd.4S, Vn.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SM4E_vv4_cryptosha512_2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SM4E(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S)
         => AddInstruction(Arm64InstructionFactory.SM4E(Vd_4S, Vn_4S));
    /// <summary>
    /// SM4 key.
    /// </summary>
    /// <remarks><code>SM4EKEY Vd.4S, Vn.4S, Vm.4S</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SM4EKEY_vvv4_cryptosha512_3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SM4EKEY(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_4S Vn_4S, Arm64RegisterV_4S Vm_4S)
         => AddInstruction(Arm64InstructionFactory.SM4EKEY(Vd_4S, Vn_4S, Vm_4S));
    /// <summary>
    /// Signed maximum (vector).
    /// </summary>
    /// <remarks><code>SMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMAX(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SMAX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed maximum (vector).
    /// </summary>
    /// <remarks><code>SMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMAX(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SMAX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed maximum (vector).
    /// </summary>
    /// <remarks><code>SMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMAX(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SMAX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed maximum (vector).
    /// </summary>
    /// <remarks><code>SMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMAX(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SMAX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed maximum (vector).
    /// </summary>
    /// <remarks><code>SMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMAX(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SMAX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed maximum (vector).
    /// </summary>
    /// <remarks><code>SMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMAX(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SMAX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed maximum pairwise.
    /// </summary>
    /// <remarks><code>SMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMAXP(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SMAXP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed maximum pairwise.
    /// </summary>
    /// <remarks><code>SMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMAXP(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SMAXP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed maximum pairwise.
    /// </summary>
    /// <remarks><code>SMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMAXP(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SMAXP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed maximum pairwise.
    /// </summary>
    /// <remarks><code>SMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMAXP(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SMAXP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed maximum pairwise.
    /// </summary>
    /// <remarks><code>SMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMAXP(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SMAXP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed maximum pairwise.
    /// </summary>
    /// <remarks><code>SMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMAXP(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SMAXP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed maximum across vector.
    /// </summary>
    /// <remarks><code>SMAXV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAXV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMAXV(Arm64RegisterB Vd, Arm64RegisterV_8B Vn_T)
         => AddInstruction(Arm64InstructionFactory.SMAXV(Vd, Vn_T));
    /// <summary>
    /// Signed maximum across vector.
    /// </summary>
    /// <remarks><code>SMAXV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAXV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMAXV(Arm64RegisterB Vd, Arm64RegisterV_16B Vn_T)
         => AddInstruction(Arm64InstructionFactory.SMAXV(Vd, Vn_T));
    /// <summary>
    /// Signed maximum across vector.
    /// </summary>
    /// <remarks><code>SMAXV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAXV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMAXV(Arm64RegisterH Vd, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.SMAXV(Vd, Vn_T));
    /// <summary>
    /// Signed maximum across vector.
    /// </summary>
    /// <remarks><code>SMAXV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAXV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMAXV(Arm64RegisterH Vd, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.SMAXV(Vd, Vn_T));
    /// <summary>
    /// Signed maximum across vector.
    /// </summary>
    /// <remarks><code>SMAXV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMAXV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMAXV(Arm64RegisterS Vd, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.SMAXV(Vd, Vn_T));
    /// <summary>
    /// Signed minimum (vector).
    /// </summary>
    /// <remarks><code>SMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMIN(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SMIN(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed minimum (vector).
    /// </summary>
    /// <remarks><code>SMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMIN(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SMIN(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed minimum (vector).
    /// </summary>
    /// <remarks><code>SMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMIN(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SMIN(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed minimum (vector).
    /// </summary>
    /// <remarks><code>SMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMIN(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SMIN(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed minimum (vector).
    /// </summary>
    /// <remarks><code>SMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMIN(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SMIN(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed minimum (vector).
    /// </summary>
    /// <remarks><code>SMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMIN(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SMIN(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed minimum pairwise.
    /// </summary>
    /// <remarks><code>SMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMINP(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SMINP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed minimum pairwise.
    /// </summary>
    /// <remarks><code>SMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMINP(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SMINP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed minimum pairwise.
    /// </summary>
    /// <remarks><code>SMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMINP(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SMINP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed minimum pairwise.
    /// </summary>
    /// <remarks><code>SMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMINP(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SMINP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed minimum pairwise.
    /// </summary>
    /// <remarks><code>SMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMINP(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SMINP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed minimum pairwise.
    /// </summary>
    /// <remarks><code>SMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMINP(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SMINP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed minimum across vector.
    /// </summary>
    /// <remarks><code>SMINV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMINV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMINV(Arm64RegisterB Vd, Arm64RegisterV_8B Vn_T)
         => AddInstruction(Arm64InstructionFactory.SMINV(Vd, Vn_T));
    /// <summary>
    /// Signed minimum across vector.
    /// </summary>
    /// <remarks><code>SMINV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMINV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMINV(Arm64RegisterB Vd, Arm64RegisterV_16B Vn_T)
         => AddInstruction(Arm64InstructionFactory.SMINV(Vd, Vn_T));
    /// <summary>
    /// Signed minimum across vector.
    /// </summary>
    /// <remarks><code>SMINV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMINV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMINV(Arm64RegisterH Vd, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.SMINV(Vd, Vn_T));
    /// <summary>
    /// Signed minimum across vector.
    /// </summary>
    /// <remarks><code>SMINV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMINV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMINV(Arm64RegisterH Vd, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.SMINV(Vd, Vn_T));
    /// <summary>
    /// Signed minimum across vector.
    /// </summary>
    /// <remarks><code>SMINV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMINV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMINV(Arm64RegisterS Vd, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.SMINV(Vd, Vn_T));
    /// <summary>
    /// Signed multiply-add long (vector, by element).
    /// </summary>
    /// <remarks><code>SMLAL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMLAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SMLAL(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Signed multiply-add long (vector, by element).
    /// </summary>
    /// <remarks><code>SMLAL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMLAL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SMLAL(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Signed multiply-add long (vector).
    /// </summary>
    /// <remarks><code>SMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMLAL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SMLAL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed multiply-add long (vector).
    /// </summary>
    /// <remarks><code>SMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMLAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SMLAL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed multiply-add long (vector).
    /// </summary>
    /// <remarks><code>SMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMLAL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SMLAL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed multiply-add long (vector, by element).
    /// </summary>
    /// <remarks><code>SMLAL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMLAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SMLAL2(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Signed multiply-add long (vector, by element).
    /// </summary>
    /// <remarks><code>SMLAL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMLAL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SMLAL2(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Signed multiply-add long (vector).
    /// </summary>
    /// <remarks><code>SMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMLAL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SMLAL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed multiply-add long (vector).
    /// </summary>
    /// <remarks><code>SMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMLAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SMLAL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed multiply-add long (vector).
    /// </summary>
    /// <remarks><code>SMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMLAL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SMLAL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed multiply-subtract long (vector, by element).
    /// </summary>
    /// <remarks><code>SMLSL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMLSL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SMLSL(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Signed multiply-subtract long (vector, by element).
    /// </summary>
    /// <remarks><code>SMLSL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMLSL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SMLSL(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Signed multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>SMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMLSL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SMLSL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>SMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMLSL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SMLSL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>SMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMLSL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SMLSL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed multiply-subtract long (vector, by element).
    /// </summary>
    /// <remarks><code>SMLSL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMLSL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SMLSL2(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Signed multiply-subtract long (vector, by element).
    /// </summary>
    /// <remarks><code>SMLSL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMLSL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SMLSL2(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Signed multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>SMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMLSL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SMLSL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>SMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMLSL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SMLSL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>SMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMLSL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMLSL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SMLSL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed 8-bit integer matrix multiply-accumulate (vector).
    /// </summary>
    /// <remarks><code>SMMLA Vd.4S, Vn.16B, Vm.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMMLA_asimdsame2_g), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMMLA(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B)
         => AddInstruction(Arm64InstructionFactory.SMMLA(Vd_4S, Vn_16B, Vm_16B));
    /// <summary>
    /// Signed move vector element to general-purpose register.
    /// </summary>
    /// <remarks><code>SMOV Wd, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMOV_asimdins_w_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMOV(Arm64RegisterW Wd, Arm64RegisterV_B.Indexed Vn_Ts)
         => AddInstruction(Arm64InstructionFactory.SMOV(Wd, Vn_Ts));
    /// <summary>
    /// Signed move vector element to general-purpose register.
    /// </summary>
    /// <remarks><code>SMOV Wd, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMOV_asimdins_w_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMOV(Arm64RegisterW Wd, Arm64RegisterV_H.Indexed Vn_Ts)
         => AddInstruction(Arm64InstructionFactory.SMOV(Wd, Vn_Ts));
    /// <summary>
    /// Signed move vector element to general-purpose register.
    /// </summary>
    /// <remarks><code>SMOV Xd, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMOV_asimdins_x_x), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMOV(Arm64RegisterX Xd, Arm64RegisterV_B.Indexed Vn_Ts)
         => AddInstruction(Arm64InstructionFactory.SMOV(Xd, Vn_Ts));
    /// <summary>
    /// Signed move vector element to general-purpose register.
    /// </summary>
    /// <remarks><code>SMOV Xd, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMOV_asimdins_x_x), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMOV(Arm64RegisterX Xd, Arm64RegisterV_H.Indexed Vn_Ts)
         => AddInstruction(Arm64InstructionFactory.SMOV(Xd, Vn_Ts));
    /// <summary>
    /// Signed move vector element to general-purpose register.
    /// </summary>
    /// <remarks><code>SMOV Xd, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMOV_asimdins_x_x), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMOV(Arm64RegisterX Xd, Arm64RegisterV_S.Indexed Vn_Ts)
         => AddInstruction(Arm64InstructionFactory.SMOV(Xd, Vn_Ts));
    /// <summary>
    /// Signed multiply long (vector, by element).
    /// </summary>
    /// <remarks><code>SMULL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMULL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SMULL(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Signed multiply long (vector, by element).
    /// </summary>
    /// <remarks><code>SMULL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMULL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SMULL(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Signed multiply long (vector).
    /// </summary>
    /// <remarks><code>SMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMULL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SMULL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed multiply long (vector).
    /// </summary>
    /// <remarks><code>SMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMULL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SMULL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed multiply long (vector).
    /// </summary>
    /// <remarks><code>SMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMULL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SMULL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed multiply long (vector, by element).
    /// </summary>
    /// <remarks><code>SMULL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMULL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SMULL2(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Signed multiply long (vector, by element).
    /// </summary>
    /// <remarks><code>SMULL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMULL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SMULL2(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Signed multiply long (vector).
    /// </summary>
    /// <remarks><code>SMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMULL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SMULL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed multiply long (vector).
    /// </summary>
    /// <remarks><code>SMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMULL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SMULL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed multiply long (vector).
    /// </summary>
    /// <remarks><code>SMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SMULL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SMULL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed saturating absolute value.
    /// </summary>
    /// <remarks><code>SQABS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQABS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQABS(Arm64RegisterB Vd, Arm64RegisterB Vn)
         => AddInstruction(Arm64InstructionFactory.SQABS(Vd, Vn));
    /// <summary>
    /// Signed saturating absolute value.
    /// </summary>
    /// <remarks><code>SQABS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQABS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQABS(Arm64RegisterH Vd, Arm64RegisterH Vn)
         => AddInstruction(Arm64InstructionFactory.SQABS(Vd, Vn));
    /// <summary>
    /// Signed saturating absolute value.
    /// </summary>
    /// <remarks><code>SQABS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQABS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQABS(Arm64RegisterS Vd, Arm64RegisterS Vn)
         => AddInstruction(Arm64InstructionFactory.SQABS(Vd, Vn));
    /// <summary>
    /// Signed saturating absolute value.
    /// </summary>
    /// <remarks><code>SQABS Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQABS_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQABS(Arm64RegisterD Vd, Arm64RegisterD Vn)
         => AddInstruction(Arm64InstructionFactory.SQABS(Vd, Vn));
    /// <summary>
    /// Signed saturating absolute value.
    /// </summary>
    /// <remarks><code>SQABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQABS(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
         => AddInstruction(Arm64InstructionFactory.SQABS(Vd_T, Vn_T));
    /// <summary>
    /// Signed saturating absolute value.
    /// </summary>
    /// <remarks><code>SQABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQABS(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
         => AddInstruction(Arm64InstructionFactory.SQABS(Vd_T, Vn_T));
    /// <summary>
    /// Signed saturating absolute value.
    /// </summary>
    /// <remarks><code>SQABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQABS(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.SQABS(Vd_T, Vn_T));
    /// <summary>
    /// Signed saturating absolute value.
    /// </summary>
    /// <remarks><code>SQABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQABS(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.SQABS(Vd_T, Vn_T));
    /// <summary>
    /// Signed saturating absolute value.
    /// </summary>
    /// <remarks><code>SQABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQABS(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.SQABS(Vd_T, Vn_T));
    /// <summary>
    /// Signed saturating absolute value.
    /// </summary>
    /// <remarks><code>SQABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQABS(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.SQABS(Vd_T, Vn_T));
    /// <summary>
    /// Signed saturating absolute value.
    /// </summary>
    /// <remarks><code>SQABS Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQABS_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQABS(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.SQABS(Vd_T, Vn_T));
    /// <summary>
    /// Signed saturating add.
    /// </summary>
    /// <remarks><code>SQADD Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQADD_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQADD(Arm64RegisterB Vd, Arm64RegisterB Vn, Arm64RegisterB Vm)
         => AddInstruction(Arm64InstructionFactory.SQADD(Vd, Vn, Vm));
    /// <summary>
    /// Signed saturating add.
    /// </summary>
    /// <remarks><code>SQADD Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQADD_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQADD(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterH Vm)
         => AddInstruction(Arm64InstructionFactory.SQADD(Vd, Vn, Vm));
    /// <summary>
    /// Signed saturating add.
    /// </summary>
    /// <remarks><code>SQADD Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQADD_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQADD(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
         => AddInstruction(Arm64InstructionFactory.SQADD(Vd, Vn, Vm));
    /// <summary>
    /// Signed saturating add.
    /// </summary>
    /// <remarks><code>SQADD Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQADD_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQADD(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
         => AddInstruction(Arm64InstructionFactory.SQADD(Vd, Vn, Vm));
    /// <summary>
    /// Signed saturating add.
    /// </summary>
    /// <remarks><code>SQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQADD(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating add.
    /// </summary>
    /// <remarks><code>SQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQADD(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating add.
    /// </summary>
    /// <remarks><code>SQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQADD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating add.
    /// </summary>
    /// <remarks><code>SQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQADD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating add.
    /// </summary>
    /// <remarks><code>SQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQADD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating add.
    /// </summary>
    /// <remarks><code>SQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQADD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating add.
    /// </summary>
    /// <remarks><code>SQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQADD(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating doubling multiply-add long (by element).
    /// </summary>
    /// <remarks><code>SQDMLAL Vad, Vbn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL_asisdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMLAL(Arm64RegisterS Vad, Arm64RegisterH Vbn, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQDMLAL(Vad, Vbn, Vm_Ts));
    /// <summary>
    /// Signed saturating doubling multiply-add long (by element).
    /// </summary>
    /// <remarks><code>SQDMLAL Vad, Vbn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL_asisdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMLAL(Arm64RegisterD Vad, Arm64RegisterS Vbn, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQDMLAL(Vad, Vbn, Vm_Ts));
    /// <summary>
    /// Signed saturating doubling multiply-add long (by element).
    /// </summary>
    /// <remarks><code>SQDMLAL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMLAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQDMLAL(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Signed saturating doubling multiply-add long (by element).
    /// </summary>
    /// <remarks><code>SQDMLAL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMLAL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQDMLAL(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Signed saturating doubling multiply-add long.
    /// </summary>
    /// <remarks><code>SQDMLAL Vad, Vbn, Vbm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL_asisddiff_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMLAL(Arm64RegisterS Vad, Arm64RegisterH Vbn, Arm64RegisterH Vbm)
         => AddInstruction(Arm64InstructionFactory.SQDMLAL(Vad, Vbn, Vbm));
    /// <summary>
    /// Signed saturating doubling multiply-add long.
    /// </summary>
    /// <remarks><code>SQDMLAL Vad, Vbn, Vbm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL_asisddiff_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMLAL(Arm64RegisterD Vad, Arm64RegisterS Vbn, Arm64RegisterS Vbm)
         => AddInstruction(Arm64InstructionFactory.SQDMLAL(Vad, Vbn, Vbm));
    /// <summary>
    /// Signed saturating doubling multiply-add long.
    /// </summary>
    /// <remarks><code>SQDMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMLAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SQDMLAL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed saturating doubling multiply-add long.
    /// </summary>
    /// <remarks><code>SQDMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMLAL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SQDMLAL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed saturating doubling multiply-add long (by element).
    /// </summary>
    /// <remarks><code>SQDMLAL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMLAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQDMLAL2(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Signed saturating doubling multiply-add long (by element).
    /// </summary>
    /// <remarks><code>SQDMLAL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMLAL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQDMLAL2(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Signed saturating doubling multiply-add long.
    /// </summary>
    /// <remarks><code>SQDMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMLAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SQDMLAL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed saturating doubling multiply-add long.
    /// </summary>
    /// <remarks><code>SQDMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMLAL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SQDMLAL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed saturating doubling multiply-subtract long (by element).
    /// </summary>
    /// <remarks><code>SQDMLSL Vad, Vbn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL_asisdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMLSL(Arm64RegisterS Vad, Arm64RegisterH Vbn, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQDMLSL(Vad, Vbn, Vm_Ts));
    /// <summary>
    /// Signed saturating doubling multiply-subtract long (by element).
    /// </summary>
    /// <remarks><code>SQDMLSL Vad, Vbn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL_asisdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMLSL(Arm64RegisterD Vad, Arm64RegisterS Vbn, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQDMLSL(Vad, Vbn, Vm_Ts));
    /// <summary>
    /// Signed saturating doubling multiply-subtract long (by element).
    /// </summary>
    /// <remarks><code>SQDMLSL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMLSL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQDMLSL(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Signed saturating doubling multiply-subtract long (by element).
    /// </summary>
    /// <remarks><code>SQDMLSL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMLSL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQDMLSL(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Signed saturating doubling multiply-subtract long.
    /// </summary>
    /// <remarks><code>SQDMLSL Vad, Vbn, Vbm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL_asisddiff_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMLSL(Arm64RegisterS Vad, Arm64RegisterH Vbn, Arm64RegisterH Vbm)
         => AddInstruction(Arm64InstructionFactory.SQDMLSL(Vad, Vbn, Vbm));
    /// <summary>
    /// Signed saturating doubling multiply-subtract long.
    /// </summary>
    /// <remarks><code>SQDMLSL Vad, Vbn, Vbm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL_asisddiff_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMLSL(Arm64RegisterD Vad, Arm64RegisterS Vbn, Arm64RegisterS Vbm)
         => AddInstruction(Arm64InstructionFactory.SQDMLSL(Vad, Vbn, Vbm));
    /// <summary>
    /// Signed saturating doubling multiply-subtract long.
    /// </summary>
    /// <remarks><code>SQDMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMLSL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SQDMLSL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed saturating doubling multiply-subtract long.
    /// </summary>
    /// <remarks><code>SQDMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMLSL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SQDMLSL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed saturating doubling multiply-subtract long (by element).
    /// </summary>
    /// <remarks><code>SQDMLSL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMLSL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQDMLSL2(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Signed saturating doubling multiply-subtract long (by element).
    /// </summary>
    /// <remarks><code>SQDMLSL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMLSL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQDMLSL2(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Signed saturating doubling multiply-subtract long.
    /// </summary>
    /// <remarks><code>SQDMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMLSL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SQDMLSL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed saturating doubling multiply-subtract long.
    /// </summary>
    /// <remarks><code>SQDMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMLSL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMLSL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SQDMLSL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed saturating doubling multiply returning high half (by element).
    /// </summary>
    /// <remarks><code>SQDMULH Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULH_asisdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMULH(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQDMULH(Vd, Vn, Vm_Ts));
    /// <summary>
    /// Signed saturating doubling multiply returning high half (by element).
    /// </summary>
    /// <remarks><code>SQDMULH Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULH_asisdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMULH(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQDMULH(Vd, Vn, Vm_Ts));
    /// <summary>
    /// Signed saturating doubling multiply returning high half (by element).
    /// </summary>
    /// <remarks><code>SQDMULH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMULH(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQDMULH(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Signed saturating doubling multiply returning high half (by element).
    /// </summary>
    /// <remarks><code>SQDMULH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMULH(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQDMULH(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Signed saturating doubling multiply returning high half (by element).
    /// </summary>
    /// <remarks><code>SQDMULH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMULH(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQDMULH(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Signed saturating doubling multiply returning high half (by element).
    /// </summary>
    /// <remarks><code>SQDMULH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMULH(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQDMULH(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Signed saturating doubling multiply returning high half.
    /// </summary>
    /// <remarks><code>SQDMULH Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULH_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMULH(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterH Vm)
         => AddInstruction(Arm64InstructionFactory.SQDMULH(Vd, Vn, Vm));
    /// <summary>
    /// Signed saturating doubling multiply returning high half.
    /// </summary>
    /// <remarks><code>SQDMULH Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULH_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMULH(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
         => AddInstruction(Arm64InstructionFactory.SQDMULH(Vd, Vn, Vm));
    /// <summary>
    /// Signed saturating doubling multiply returning high half.
    /// </summary>
    /// <remarks><code>SQDMULH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULH_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMULH(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQDMULH(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating doubling multiply returning high half.
    /// </summary>
    /// <remarks><code>SQDMULH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULH_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMULH(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQDMULH(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating doubling multiply returning high half.
    /// </summary>
    /// <remarks><code>SQDMULH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULH_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMULH(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQDMULH(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating doubling multiply returning high half.
    /// </summary>
    /// <remarks><code>SQDMULH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULH_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMULH(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQDMULH(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating doubling multiply long (by element).
    /// </summary>
    /// <remarks><code>SQDMULL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMULL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQDMULL(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Signed saturating doubling multiply long (by element).
    /// </summary>
    /// <remarks><code>SQDMULL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMULL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQDMULL(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Signed saturating doubling multiply long (by element).
    /// </summary>
    /// <remarks><code>SQDMULL Vad, Vbn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL_asisdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMULL(Arm64RegisterS Vad, Arm64RegisterH Vbn, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQDMULL(Vad, Vbn, Vm_Ts));
    /// <summary>
    /// Signed saturating doubling multiply long (by element).
    /// </summary>
    /// <remarks><code>SQDMULL Vad, Vbn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL_asisdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMULL(Arm64RegisterD Vad, Arm64RegisterS Vbn, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQDMULL(Vad, Vbn, Vm_Ts));
    /// <summary>
    /// Signed saturating doubling multiply long.
    /// </summary>
    /// <remarks><code>SQDMULL Vad, Vbn, Vbm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL_asisddiff_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMULL(Arm64RegisterS Vad, Arm64RegisterH Vbn, Arm64RegisterH Vbm)
         => AddInstruction(Arm64InstructionFactory.SQDMULL(Vad, Vbn, Vbm));
    /// <summary>
    /// Signed saturating doubling multiply long.
    /// </summary>
    /// <remarks><code>SQDMULL Vad, Vbn, Vbm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL_asisddiff_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMULL(Arm64RegisterD Vad, Arm64RegisterS Vbn, Arm64RegisterS Vbm)
         => AddInstruction(Arm64InstructionFactory.SQDMULL(Vad, Vbn, Vbm));
    /// <summary>
    /// Signed saturating doubling multiply long.
    /// </summary>
    /// <remarks><code>SQDMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMULL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SQDMULL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed saturating doubling multiply long.
    /// </summary>
    /// <remarks><code>SQDMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMULL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SQDMULL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed saturating doubling multiply long (by element).
    /// </summary>
    /// <remarks><code>SQDMULL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMULL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQDMULL2(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Signed saturating doubling multiply long (by element).
    /// </summary>
    /// <remarks><code>SQDMULL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMULL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQDMULL2(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Signed saturating doubling multiply long.
    /// </summary>
    /// <remarks><code>SQDMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMULL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SQDMULL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed saturating doubling multiply long.
    /// </summary>
    /// <remarks><code>SQDMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQDMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQDMULL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SQDMULL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed saturating negate.
    /// </summary>
    /// <remarks><code>SQNEG Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQNEG_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQNEG(Arm64RegisterB Vd, Arm64RegisterB Vn)
         => AddInstruction(Arm64InstructionFactory.SQNEG(Vd, Vn));
    /// <summary>
    /// Signed saturating negate.
    /// </summary>
    /// <remarks><code>SQNEG Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQNEG_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQNEG(Arm64RegisterH Vd, Arm64RegisterH Vn)
         => AddInstruction(Arm64InstructionFactory.SQNEG(Vd, Vn));
    /// <summary>
    /// Signed saturating negate.
    /// </summary>
    /// <remarks><code>SQNEG Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQNEG_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQNEG(Arm64RegisterS Vd, Arm64RegisterS Vn)
         => AddInstruction(Arm64InstructionFactory.SQNEG(Vd, Vn));
    /// <summary>
    /// Signed saturating negate.
    /// </summary>
    /// <remarks><code>SQNEG Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQNEG_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQNEG(Arm64RegisterD Vd, Arm64RegisterD Vn)
         => AddInstruction(Arm64InstructionFactory.SQNEG(Vd, Vn));
    /// <summary>
    /// Signed saturating negate.
    /// </summary>
    /// <remarks><code>SQNEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQNEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQNEG(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
         => AddInstruction(Arm64InstructionFactory.SQNEG(Vd_T, Vn_T));
    /// <summary>
    /// Signed saturating negate.
    /// </summary>
    /// <remarks><code>SQNEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQNEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQNEG(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
         => AddInstruction(Arm64InstructionFactory.SQNEG(Vd_T, Vn_T));
    /// <summary>
    /// Signed saturating negate.
    /// </summary>
    /// <remarks><code>SQNEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQNEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQNEG(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.SQNEG(Vd_T, Vn_T));
    /// <summary>
    /// Signed saturating negate.
    /// </summary>
    /// <remarks><code>SQNEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQNEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQNEG(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.SQNEG(Vd_T, Vn_T));
    /// <summary>
    /// Signed saturating negate.
    /// </summary>
    /// <remarks><code>SQNEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQNEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQNEG(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.SQNEG(Vd_T, Vn_T));
    /// <summary>
    /// Signed saturating negate.
    /// </summary>
    /// <remarks><code>SQNEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQNEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQNEG(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.SQNEG(Vd_T, Vn_T));
    /// <summary>
    /// Signed saturating negate.
    /// </summary>
    /// <remarks><code>SQNEG Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQNEG_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQNEG(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.SQNEG(Vd_T, Vn_T));
    /// <summary>
    /// Signed saturating rounding doubling multiply accumulate returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMLAH Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLAH_asisdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMLAH(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQRDMLAH(Vd, Vn, Vm_Ts));
    /// <summary>
    /// Signed saturating rounding doubling multiply accumulate returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMLAH Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLAH_asisdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMLAH(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQRDMLAH(Vd, Vn, Vm_Ts));
    /// <summary>
    /// Signed saturating rounding doubling multiply accumulate returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMLAH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLAH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMLAH(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQRDMLAH(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Signed saturating rounding doubling multiply accumulate returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMLAH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLAH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMLAH(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQRDMLAH(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Signed saturating rounding doubling multiply accumulate returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMLAH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLAH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMLAH(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQRDMLAH(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Signed saturating rounding doubling multiply accumulate returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMLAH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLAH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMLAH(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQRDMLAH(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Signed saturating rounding doubling multiply accumulate returning high half (vector).
    /// </summary>
    /// <remarks><code>SQRDMLAH Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLAH_asisdsame2_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMLAH(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterH Vm)
         => AddInstruction(Arm64InstructionFactory.SQRDMLAH(Vd, Vn, Vm));
    /// <summary>
    /// Signed saturating rounding doubling multiply accumulate returning high half (vector).
    /// </summary>
    /// <remarks><code>SQRDMLAH Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLAH_asisdsame2_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMLAH(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
         => AddInstruction(Arm64InstructionFactory.SQRDMLAH(Vd, Vn, Vm));
    /// <summary>
    /// Signed saturating rounding doubling multiply accumulate returning high half (vector).
    /// </summary>
    /// <remarks><code>SQRDMLAH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLAH_asimdsame2_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMLAH(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQRDMLAH(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating rounding doubling multiply accumulate returning high half (vector).
    /// </summary>
    /// <remarks><code>SQRDMLAH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLAH_asimdsame2_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMLAH(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQRDMLAH(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating rounding doubling multiply accumulate returning high half (vector).
    /// </summary>
    /// <remarks><code>SQRDMLAH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLAH_asimdsame2_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMLAH(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQRDMLAH(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating rounding doubling multiply accumulate returning high half (vector).
    /// </summary>
    /// <remarks><code>SQRDMLAH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLAH_asimdsame2_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMLAH(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQRDMLAH(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating rounding doubling multiply subtract returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMLSH Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLSH_asisdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMLSH(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQRDMLSH(Vd, Vn, Vm_Ts));
    /// <summary>
    /// Signed saturating rounding doubling multiply subtract returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMLSH Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLSH_asisdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMLSH(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQRDMLSH(Vd, Vn, Vm_Ts));
    /// <summary>
    /// Signed saturating rounding doubling multiply subtract returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMLSH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLSH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMLSH(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQRDMLSH(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Signed saturating rounding doubling multiply subtract returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMLSH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLSH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMLSH(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQRDMLSH(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Signed saturating rounding doubling multiply subtract returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMLSH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLSH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMLSH(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQRDMLSH(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Signed saturating rounding doubling multiply subtract returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMLSH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLSH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMLSH(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQRDMLSH(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Signed saturating rounding doubling multiply subtract returning high half (vector).
    /// </summary>
    /// <remarks><code>SQRDMLSH Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLSH_asisdsame2_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMLSH(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterH Vm)
         => AddInstruction(Arm64InstructionFactory.SQRDMLSH(Vd, Vn, Vm));
    /// <summary>
    /// Signed saturating rounding doubling multiply subtract returning high half (vector).
    /// </summary>
    /// <remarks><code>SQRDMLSH Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLSH_asisdsame2_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMLSH(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
         => AddInstruction(Arm64InstructionFactory.SQRDMLSH(Vd, Vn, Vm));
    /// <summary>
    /// Signed saturating rounding doubling multiply subtract returning high half (vector).
    /// </summary>
    /// <remarks><code>SQRDMLSH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLSH_asimdsame2_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMLSH(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQRDMLSH(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating rounding doubling multiply subtract returning high half (vector).
    /// </summary>
    /// <remarks><code>SQRDMLSH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLSH_asimdsame2_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMLSH(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQRDMLSH(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating rounding doubling multiply subtract returning high half (vector).
    /// </summary>
    /// <remarks><code>SQRDMLSH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLSH_asimdsame2_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMLSH(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQRDMLSH(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating rounding doubling multiply subtract returning high half (vector).
    /// </summary>
    /// <remarks><code>SQRDMLSH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMLSH_asimdsame2_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMLSH(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQRDMLSH(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating rounding doubling multiply returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMULH Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMULH_asisdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMULH(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQRDMULH(Vd, Vn, Vm_Ts));
    /// <summary>
    /// Signed saturating rounding doubling multiply returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMULH Vd, Vn, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMULH_asisdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMULH(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQRDMULH(Vd, Vn, Vm_Ts));
    /// <summary>
    /// Signed saturating rounding doubling multiply returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMULH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMULH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMULH(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQRDMULH(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Signed saturating rounding doubling multiply returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMULH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMULH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMULH(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQRDMULH(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Signed saturating rounding doubling multiply returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMULH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMULH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMULH(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQRDMULH(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Signed saturating rounding doubling multiply returning high half (by element).
    /// </summary>
    /// <remarks><code>SQRDMULH Vd.T, Vn.T, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMULH_asimdelem_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMULH(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.SQRDMULH(Vd_T, Vn_T, Vm_Ts));
    /// <summary>
    /// Signed saturating rounding doubling multiply returning high half.
    /// </summary>
    /// <remarks><code>SQRDMULH Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMULH_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMULH(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterH Vm)
         => AddInstruction(Arm64InstructionFactory.SQRDMULH(Vd, Vn, Vm));
    /// <summary>
    /// Signed saturating rounding doubling multiply returning high half.
    /// </summary>
    /// <remarks><code>SQRDMULH Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMULH_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMULH(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
         => AddInstruction(Arm64InstructionFactory.SQRDMULH(Vd, Vn, Vm));
    /// <summary>
    /// Signed saturating rounding doubling multiply returning high half.
    /// </summary>
    /// <remarks><code>SQRDMULH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMULH_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMULH(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQRDMULH(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating rounding doubling multiply returning high half.
    /// </summary>
    /// <remarks><code>SQRDMULH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMULH_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMULH(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQRDMULH(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating rounding doubling multiply returning high half.
    /// </summary>
    /// <remarks><code>SQRDMULH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMULH_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMULH(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQRDMULH(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating rounding doubling multiply returning high half.
    /// </summary>
    /// <remarks><code>SQRDMULH Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRDMULH_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRDMULH(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQRDMULH(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>SQRSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHL(Arm64RegisterB Vd, Arm64RegisterB Vn, Arm64RegisterB Vm)
         => AddInstruction(Arm64InstructionFactory.SQRSHL(Vd, Vn, Vm));
    /// <summary>
    /// Signed saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>SQRSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHL(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterH Vm)
         => AddInstruction(Arm64InstructionFactory.SQRSHL(Vd, Vn, Vm));
    /// <summary>
    /// Signed saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>SQRSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHL(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
         => AddInstruction(Arm64InstructionFactory.SQRSHL(Vd, Vn, Vm));
    /// <summary>
    /// Signed saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>SQRSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHL(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
         => AddInstruction(Arm64InstructionFactory.SQRSHL(Vd, Vn, Vm));
    /// <summary>
    /// Signed saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>SQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQRSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>SQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQRSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>SQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQRSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>SQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQRSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>SQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQRSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>SQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQRSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>SQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQRSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHRN(Arm64RegisterB Vbd, Arm64RegisterH Van, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQRSHRN(Vbd, Van, shift));
    /// <summary>
    /// Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHRN(Arm64RegisterH Vbd, Arm64RegisterS Van, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQRSHRN(Vbd, Van, shift));
    /// <summary>
    /// Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHRN(Arm64RegisterS Vbd, Arm64RegisterD Van, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQRSHRN(Vbd, Van, shift));
    /// <summary>
    /// Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHRN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQRSHRN(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHRN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQRSHRN(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHRN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQRSHRN(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHRN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQRSHRN2(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHRN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQRSHRN2(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHRN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQRSHRN2(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRUN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRUN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHRUN(Arm64RegisterB Vbd, Arm64RegisterH Van, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQRSHRUN(Vbd, Van, shift));
    /// <summary>
    /// Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRUN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRUN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHRUN(Arm64RegisterH Vbd, Arm64RegisterS Van, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQRSHRUN(Vbd, Van, shift));
    /// <summary>
    /// Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRUN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRUN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHRUN(Arm64RegisterS Vbd, Arm64RegisterD Van, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQRSHRUN(Vbd, Van, shift));
    /// <summary>
    /// Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRUN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRUN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHRUN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQRSHRUN(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRUN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRUN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHRUN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQRSHRUN(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRUN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRUN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHRUN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQRSHRUN(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRUN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRUN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHRUN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQRSHRUN2(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRUN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRUN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHRUN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQRSHRUN2(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed saturating rounded shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQRSHRUN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQRSHRUN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQRSHRUN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQRSHRUN2(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>SQSHL Vd, Vn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHL(Arm64RegisterB Vd, Arm64RegisterB Vn, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHL(Vd, Vn, shift));
    /// <summary>
    /// Signed saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>SQSHL Vd, Vn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHL(Arm64RegisterH Vd, Arm64RegisterH Vn, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHL(Vd, Vn, shift));
    /// <summary>
    /// Signed saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>SQSHL Vd, Vn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHL(Arm64RegisterS Vd, Arm64RegisterS Vn, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHL(Vd, Vn, shift));
    /// <summary>
    /// Signed saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>SQSHL Vd, Vn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHL(Arm64RegisterD Vd, Arm64RegisterD Vn, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHL(Vd, Vn, shift));
    /// <summary>
    /// Signed saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHL(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHL(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHL(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHL(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHL(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHL(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHL(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed saturating shift left (register).
    /// </summary>
    /// <remarks><code>SQSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHL(Arm64RegisterB Vd, Arm64RegisterB Vn, Arm64RegisterB Vm)
         => AddInstruction(Arm64InstructionFactory.SQSHL(Vd, Vn, Vm));
    /// <summary>
    /// Signed saturating shift left (register).
    /// </summary>
    /// <remarks><code>SQSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHL(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterH Vm)
         => AddInstruction(Arm64InstructionFactory.SQSHL(Vd, Vn, Vm));
    /// <summary>
    /// Signed saturating shift left (register).
    /// </summary>
    /// <remarks><code>SQSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHL(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
         => AddInstruction(Arm64InstructionFactory.SQSHL(Vd, Vn, Vm));
    /// <summary>
    /// Signed saturating shift left (register).
    /// </summary>
    /// <remarks><code>SQSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHL(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
         => AddInstruction(Arm64InstructionFactory.SQSHL(Vd, Vn, Vm));
    /// <summary>
    /// Signed saturating shift left (register).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating shift left (register).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating shift left (register).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating shift left (register).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating shift left (register).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating shift left (register).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating shift left (register).
    /// </summary>
    /// <remarks><code>SQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating shift left unsigned (immediate).
    /// </summary>
    /// <remarks><code>SQSHLU Vd, Vn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHLU_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHLU(Arm64RegisterB Vd, Arm64RegisterB Vn, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHLU(Vd, Vn, shift));
    /// <summary>
    /// Signed saturating shift left unsigned (immediate).
    /// </summary>
    /// <remarks><code>SQSHLU Vd, Vn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHLU_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHLU(Arm64RegisterH Vd, Arm64RegisterH Vn, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHLU(Vd, Vn, shift));
    /// <summary>
    /// Signed saturating shift left unsigned (immediate).
    /// </summary>
    /// <remarks><code>SQSHLU Vd, Vn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHLU_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHLU(Arm64RegisterS Vd, Arm64RegisterS Vn, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHLU(Vd, Vn, shift));
    /// <summary>
    /// Signed saturating shift left unsigned (immediate).
    /// </summary>
    /// <remarks><code>SQSHLU Vd, Vn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHLU_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHLU(Arm64RegisterD Vd, Arm64RegisterD Vn, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHLU(Vd, Vn, shift));
    /// <summary>
    /// Signed saturating shift left unsigned (immediate).
    /// </summary>
    /// <remarks><code>SQSHLU Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHLU_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHLU(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHLU(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed saturating shift left unsigned (immediate).
    /// </summary>
    /// <remarks><code>SQSHLU Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHLU_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHLU(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHLU(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed saturating shift left unsigned (immediate).
    /// </summary>
    /// <remarks><code>SQSHLU Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHLU_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHLU(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHLU(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed saturating shift left unsigned (immediate).
    /// </summary>
    /// <remarks><code>SQSHLU Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHLU_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHLU(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHLU(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed saturating shift left unsigned (immediate).
    /// </summary>
    /// <remarks><code>SQSHLU Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHLU_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHLU(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHLU(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed saturating shift left unsigned (immediate).
    /// </summary>
    /// <remarks><code>SQSHLU Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHLU_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHLU(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHLU(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed saturating shift left unsigned (immediate).
    /// </summary>
    /// <remarks><code>SQSHLU Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHLU_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHLU(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHLU(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHRN(Arm64RegisterB Vbd, Arm64RegisterH Van, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHRN(Vbd, Van, shift));
    /// <summary>
    /// Signed saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHRN(Arm64RegisterH Vbd, Arm64RegisterS Van, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHRN(Vbd, Van, shift));
    /// <summary>
    /// Signed saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHRN(Arm64RegisterS Vbd, Arm64RegisterD Van, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHRN(Vbd, Van, shift));
    /// <summary>
    /// Signed saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHRN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHRN(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHRN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHRN(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHRN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHRN(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHRN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHRN2(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHRN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHRN2(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHRN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHRN2(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRUN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRUN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHRUN(Arm64RegisterB Vbd, Arm64RegisterH Van, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHRUN(Vbd, Van, shift));
    /// <summary>
    /// Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRUN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRUN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHRUN(Arm64RegisterH Vbd, Arm64RegisterS Van, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHRUN(Vbd, Van, shift));
    /// <summary>
    /// Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRUN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRUN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHRUN(Arm64RegisterS Vbd, Arm64RegisterD Van, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHRUN(Vbd, Van, shift));
    /// <summary>
    /// Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRUN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRUN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHRUN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHRUN(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRUN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRUN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHRUN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHRUN(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRUN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRUN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHRUN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHRUN(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRUN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRUN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHRUN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHRUN2(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRUN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRUN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHRUN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHRUN2(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed saturating shift right unsigned narrow (immediate).
    /// </summary>
    /// <remarks><code>SQSHRUN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSHRUN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSHRUN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.SQSHRUN2(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Signed saturating subtract.
    /// </summary>
    /// <remarks><code>SQSUB Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSUB_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSUB(Arm64RegisterB Vd, Arm64RegisterB Vn, Arm64RegisterB Vm)
         => AddInstruction(Arm64InstructionFactory.SQSUB(Vd, Vn, Vm));
    /// <summary>
    /// Signed saturating subtract.
    /// </summary>
    /// <remarks><code>SQSUB Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSUB_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSUB(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterH Vm)
         => AddInstruction(Arm64InstructionFactory.SQSUB(Vd, Vn, Vm));
    /// <summary>
    /// Signed saturating subtract.
    /// </summary>
    /// <remarks><code>SQSUB Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSUB_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSUB(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
         => AddInstruction(Arm64InstructionFactory.SQSUB(Vd, Vn, Vm));
    /// <summary>
    /// Signed saturating subtract.
    /// </summary>
    /// <remarks><code>SQSUB Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSUB_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSUB(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
         => AddInstruction(Arm64InstructionFactory.SQSUB(Vd, Vn, Vm));
    /// <summary>
    /// Signed saturating subtract.
    /// </summary>
    /// <remarks><code>SQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSUB(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating subtract.
    /// </summary>
    /// <remarks><code>SQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSUB(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating subtract.
    /// </summary>
    /// <remarks><code>SQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSUB(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating subtract.
    /// </summary>
    /// <remarks><code>SQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSUB(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating subtract.
    /// </summary>
    /// <remarks><code>SQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSUB(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating subtract.
    /// </summary>
    /// <remarks><code>SQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSUB(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating subtract.
    /// </summary>
    /// <remarks><code>SQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQSUB(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.SQSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed saturating extract narrow.
    /// </summary>
    /// <remarks><code>SQXTN Vbd, Van</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTN_asisdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQXTN(Arm64RegisterB Vbd, Arm64RegisterH Van)
         => AddInstruction(Arm64InstructionFactory.SQXTN(Vbd, Van));
    /// <summary>
    /// Signed saturating extract narrow.
    /// </summary>
    /// <remarks><code>SQXTN Vbd, Van</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTN_asisdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQXTN(Arm64RegisterH Vbd, Arm64RegisterS Van)
         => AddInstruction(Arm64InstructionFactory.SQXTN(Vbd, Van));
    /// <summary>
    /// Signed saturating extract narrow.
    /// </summary>
    /// <remarks><code>SQXTN Vbd, Van</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTN_asisdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQXTN(Arm64RegisterS Vbd, Arm64RegisterD Van)
         => AddInstruction(Arm64InstructionFactory.SQXTN(Vbd, Van));
    /// <summary>
    /// Signed saturating extract narrow.
    /// </summary>
    /// <remarks><code>SQXTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQXTN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.SQXTN(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Signed saturating extract narrow.
    /// </summary>
    /// <remarks><code>SQXTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQXTN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.SQXTN(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Signed saturating extract narrow.
    /// </summary>
    /// <remarks><code>SQXTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQXTN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.SQXTN(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Signed saturating extract narrow.
    /// </summary>
    /// <remarks><code>SQXTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQXTN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.SQXTN2(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Signed saturating extract narrow.
    /// </summary>
    /// <remarks><code>SQXTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQXTN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.SQXTN2(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Signed saturating extract narrow.
    /// </summary>
    /// <remarks><code>SQXTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQXTN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.SQXTN2(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Signed saturating extract unsigned narrow.
    /// </summary>
    /// <remarks><code>SQXTUN Vbd, Van</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTUN_asisdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQXTUN(Arm64RegisterB Vbd, Arm64RegisterH Van)
         => AddInstruction(Arm64InstructionFactory.SQXTUN(Vbd, Van));
    /// <summary>
    /// Signed saturating extract unsigned narrow.
    /// </summary>
    /// <remarks><code>SQXTUN Vbd, Van</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTUN_asisdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQXTUN(Arm64RegisterH Vbd, Arm64RegisterS Van)
         => AddInstruction(Arm64InstructionFactory.SQXTUN(Vbd, Van));
    /// <summary>
    /// Signed saturating extract unsigned narrow.
    /// </summary>
    /// <remarks><code>SQXTUN Vbd, Van</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTUN_asisdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQXTUN(Arm64RegisterS Vbd, Arm64RegisterD Van)
         => AddInstruction(Arm64InstructionFactory.SQXTUN(Vbd, Van));
    /// <summary>
    /// Signed saturating extract unsigned narrow.
    /// </summary>
    /// <remarks><code>SQXTUN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTUN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQXTUN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.SQXTUN(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Signed saturating extract unsigned narrow.
    /// </summary>
    /// <remarks><code>SQXTUN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTUN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQXTUN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.SQXTUN(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Signed saturating extract unsigned narrow.
    /// </summary>
    /// <remarks><code>SQXTUN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTUN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQXTUN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.SQXTUN(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Signed saturating extract unsigned narrow.
    /// </summary>
    /// <remarks><code>SQXTUN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTUN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQXTUN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.SQXTUN2(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Signed saturating extract unsigned narrow.
    /// </summary>
    /// <remarks><code>SQXTUN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTUN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQXTUN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.SQXTUN2(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Signed saturating extract unsigned narrow.
    /// </summary>
    /// <remarks><code>SQXTUN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SQXTUN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SQXTUN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.SQXTUN2(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Signed rounding halving add.
    /// </summary>
    /// <remarks><code>SRHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRHADD(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SRHADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed rounding halving add.
    /// </summary>
    /// <remarks><code>SRHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRHADD(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SRHADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed rounding halving add.
    /// </summary>
    /// <remarks><code>SRHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRHADD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SRHADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed rounding halving add.
    /// </summary>
    /// <remarks><code>SRHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRHADD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SRHADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed rounding halving add.
    /// </summary>
    /// <remarks><code>SRHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRHADD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SRHADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed rounding halving add.
    /// </summary>
    /// <remarks><code>SRHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRHADD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SRHADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Shift right and insert (immediate).
    /// </summary>
    /// <remarks><code>SRI Dd, Dn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRI_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRI(Arm64RegisterD Dd, Arm64RegisterD Dn, uint shift)
         => AddInstruction(Arm64InstructionFactory.SRI(Dd, Dn, shift));
    /// <summary>
    /// Shift right and insert (immediate).
    /// </summary>
    /// <remarks><code>SRI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRI(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SRI(Vd_T, Vn_T, shift));
    /// <summary>
    /// Shift right and insert (immediate).
    /// </summary>
    /// <remarks><code>SRI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRI(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SRI(Vd_T, Vn_T, shift));
    /// <summary>
    /// Shift right and insert (immediate).
    /// </summary>
    /// <remarks><code>SRI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRI(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SRI(Vd_T, Vn_T, shift));
    /// <summary>
    /// Shift right and insert (immediate).
    /// </summary>
    /// <remarks><code>SRI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRI(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SRI(Vd_T, Vn_T, shift));
    /// <summary>
    /// Shift right and insert (immediate).
    /// </summary>
    /// <remarks><code>SRI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRI(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SRI(Vd_T, Vn_T, shift));
    /// <summary>
    /// Shift right and insert (immediate).
    /// </summary>
    /// <remarks><code>SRI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRI(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SRI(Vd_T, Vn_T, shift));
    /// <summary>
    /// Shift right and insert (immediate).
    /// </summary>
    /// <remarks><code>SRI Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRI_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRI(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SRI(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed rounding shift left (register).
    /// </summary>
    /// <remarks><code>SRSHL Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRSHL(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
         => AddInstruction(Arm64InstructionFactory.SRSHL(Dd, Dn, Dm));
    /// <summary>
    /// Signed rounding shift left (register).
    /// </summary>
    /// <remarks><code>SRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRSHL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SRSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed rounding shift left (register).
    /// </summary>
    /// <remarks><code>SRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRSHL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SRSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed rounding shift left (register).
    /// </summary>
    /// <remarks><code>SRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRSHL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SRSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed rounding shift left (register).
    /// </summary>
    /// <remarks><code>SRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRSHL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SRSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed rounding shift left (register).
    /// </summary>
    /// <remarks><code>SRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRSHL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SRSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed rounding shift left (register).
    /// </summary>
    /// <remarks><code>SRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRSHL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SRSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed rounding shift left (register).
    /// </summary>
    /// <remarks><code>SRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRSHL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.SRSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>SRSHR Dd, Dn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHR_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRSHR(Arm64RegisterD Dd, Arm64RegisterD Dn, uint shift)
         => AddInstruction(Arm64InstructionFactory.SRSHR(Dd, Dn, shift));
    /// <summary>
    /// Signed rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>SRSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRSHR(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SRSHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>SRSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRSHR(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SRSHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>SRSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRSHR(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SRSHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>SRSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRSHR(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SRSHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>SRSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRSHR(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SRSHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>SRSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRSHR(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SRSHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>SRSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRSHR(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SRSHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SRSRA Dd, Dn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSRA_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRSRA(Arm64RegisterD Dd, Arm64RegisterD Dn, uint shift)
         => AddInstruction(Arm64InstructionFactory.SRSRA(Dd, Dn, shift));
    /// <summary>
    /// Signed rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SRSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRSRA(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SRSRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SRSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRSRA(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SRSRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SRSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRSRA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SRSRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SRSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRSRA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SRSRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SRSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRSRA(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SRSRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SRSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRSRA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SRSRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SRSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SRSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SRSRA(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SRSRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed shift left (register).
    /// </summary>
    /// <remarks><code>SSHL Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSHL(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
         => AddInstruction(Arm64InstructionFactory.SSHL(Dd, Dn, Dm));
    /// <summary>
    /// Signed shift left (register).
    /// </summary>
    /// <remarks><code>SSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSHL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed shift left (register).
    /// </summary>
    /// <remarks><code>SSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSHL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed shift left (register).
    /// </summary>
    /// <remarks><code>SSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSHL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed shift left (register).
    /// </summary>
    /// <remarks><code>SSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSHL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed shift left (register).
    /// </summary>
    /// <remarks><code>SSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSHL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed shift left (register).
    /// </summary>
    /// <remarks><code>SSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSHL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed shift left (register).
    /// </summary>
    /// <remarks><code>SSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSHL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.SSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Signed shift left long (immediate).
    /// </summary>
    /// <remarks><code>SSHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHLL_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSHLL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, byte shift)
         => AddInstruction(Arm64InstructionFactory.SSHLL(Vd_Ta, Vn_Tb, shift));
    /// <summary>
    /// Signed shift left long (immediate).
    /// </summary>
    /// <remarks><code>SSHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHLL_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSHLL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, byte shift)
         => AddInstruction(Arm64InstructionFactory.SSHLL(Vd_Ta, Vn_Tb, shift));
    /// <summary>
    /// Signed shift left long (immediate).
    /// </summary>
    /// <remarks><code>SSHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHLL_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSHLL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, byte shift)
         => AddInstruction(Arm64InstructionFactory.SSHLL(Vd_Ta, Vn_Tb, shift));
    /// <summary>
    /// Signed shift left long (immediate).
    /// </summary>
    /// <remarks><code>SSHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHLL2_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSHLL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, byte shift)
         => AddInstruction(Arm64InstructionFactory.SSHLL2(Vd_Ta, Vn_Tb, shift));
    /// <summary>
    /// Signed shift left long (immediate).
    /// </summary>
    /// <remarks><code>SSHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHLL2_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSHLL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, byte shift)
         => AddInstruction(Arm64InstructionFactory.SSHLL2(Vd_Ta, Vn_Tb, shift));
    /// <summary>
    /// Signed shift left long (immediate).
    /// </summary>
    /// <remarks><code>SSHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHLL2_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSHLL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, byte shift)
         => AddInstruction(Arm64InstructionFactory.SSHLL2(Vd_Ta, Vn_Tb, shift));
    /// <summary>
    /// Signed shift right (immediate).
    /// </summary>
    /// <remarks><code>SSHR Dd, Dn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHR_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSHR(Arm64RegisterD Dd, Arm64RegisterD Dn, uint shift)
         => AddInstruction(Arm64InstructionFactory.SSHR(Dd, Dn, shift));
    /// <summary>
    /// Signed shift right (immediate).
    /// </summary>
    /// <remarks><code>SSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSHR(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SSHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed shift right (immediate).
    /// </summary>
    /// <remarks><code>SSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSHR(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SSHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed shift right (immediate).
    /// </summary>
    /// <remarks><code>SSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSHR(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SSHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed shift right (immediate).
    /// </summary>
    /// <remarks><code>SSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSHR(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SSHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed shift right (immediate).
    /// </summary>
    /// <remarks><code>SSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSHR(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SSHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed shift right (immediate).
    /// </summary>
    /// <remarks><code>SSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSHR(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SSHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed shift right (immediate).
    /// </summary>
    /// <remarks><code>SSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSHR(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SSHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SSRA Dd, Dn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSRA_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSRA(Arm64RegisterD Dd, Arm64RegisterD Dn, uint shift)
         => AddInstruction(Arm64InstructionFactory.SSRA(Dd, Dn, shift));
    /// <summary>
    /// Signed shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSRA(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SSRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSRA(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SSRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSRA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SSRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSRA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SSRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSRA(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SSRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSRA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SSRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>SSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSRA(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.SSRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Signed subtract long.
    /// </summary>
    /// <remarks><code>SSUBL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSUBL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SSUBL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed subtract long.
    /// </summary>
    /// <remarks><code>SSUBL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSUBL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SSUBL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed subtract long.
    /// </summary>
    /// <remarks><code>SSUBL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSUBL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SSUBL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed subtract long.
    /// </summary>
    /// <remarks><code>SSUBL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSUBL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SSUBL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed subtract long.
    /// </summary>
    /// <remarks><code>SSUBL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSUBL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SSUBL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed subtract long.
    /// </summary>
    /// <remarks><code>SSUBL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSUBL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SSUBL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Signed subtract wide.
    /// </summary>
    /// <remarks><code>SSUBW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSUBW(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SSUBW(Vd_Ta, Vn_Ta, Vm_Tb));
    /// <summary>
    /// Signed subtract wide.
    /// </summary>
    /// <remarks><code>SSUBW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSUBW(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SSUBW(Vd_Ta, Vn_Ta, Vm_Tb));
    /// <summary>
    /// Signed subtract wide.
    /// </summary>
    /// <remarks><code>SSUBW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSUBW(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SSUBW(Vd_Ta, Vn_Ta, Vm_Tb));
    /// <summary>
    /// Signed subtract wide.
    /// </summary>
    /// <remarks><code>SSUBW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSUBW2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_16B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SSUBW2(Vd_Ta, Vn_Ta, Vm_Tb));
    /// <summary>
    /// Signed subtract wide.
    /// </summary>
    /// <remarks><code>SSUBW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSUBW2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_8H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SSUBW2(Vd_Ta, Vn_Ta, Vm_Tb));
    /// <summary>
    /// Signed subtract wide.
    /// </summary>
    /// <remarks><code>SSUBW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SSUBW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SSUBW2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_4S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.SSUBW2(Vd_Ta, Vn_Ta, Vm_Tb));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r1_1v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup2<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r2_2v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup3<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r3_3v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup4<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlse_r4_4v), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 8)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 8)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 8)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 8)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i1_i1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r1_r1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup2<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i2_i2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup2<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r2_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 24)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 48)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 24)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 48)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 24)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 48)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup3<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 24)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i3_i3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 48)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup3<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r3_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 64)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 64)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 64)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup4<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_i4_i4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 64)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup4<Arm64RegisterV_1D> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple single-element structures from one, two, three, or four registers.
    /// </summary>
    /// <remarks><code>ST1 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsep_r4_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_T, dst, Xm));
    /// <summary>
    /// Store a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>ST1 {Vt.B}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlso_b1_1b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_B, dst));
    /// <summary>
    /// Store a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>ST1 {Vt.H}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlso_h1_1h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_H, dst));
    /// <summary>
    /// Store a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>ST1 {Vt.S}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlso_s1_1s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_S, dst));
    /// <summary>
    /// Store a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>ST1 {Vt.D}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlso_d1_1d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_D, dst));
    /// <summary>
    /// Store a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>ST1 {Vt.B}[index], [Xn|SP], #1</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsop_b1_i1b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor dst, byte value1 = 1)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_B, dst, value1));
    /// <summary>
    /// Store a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>ST1 {Vt.B}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsop_bx1_r1b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_B, dst, Xm));
    /// <summary>
    /// Store a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>ST1 {Vt.H}[index], [Xn|SP], #2</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsop_h1_i1h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor dst, byte value2 = 2)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_H, dst, value2));
    /// <summary>
    /// Store a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>ST1 {Vt.H}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsop_hx1_r1h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_H, dst, Xm));
    /// <summary>
    /// Store a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>ST1 {Vt.S}[index], [Xn|SP], #4</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsop_s1_i1s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor dst, byte value4 = 4)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_S, dst, value4));
    /// <summary>
    /// Store a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>ST1 {Vt.S}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsop_sx1_r1s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_S, dst, Xm));
    /// <summary>
    /// Store a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>ST1 {Vt.D}[index], [Xn|SP], #8</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsop_d1_i1d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst, byte value8 = 8)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_D, dst, value8));
    /// <summary>
    /// Store a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>ST1 {Vt.D}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST1_asisdlsop_dx1_r1d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST1(Arm64RegisterGroup1<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST1(Vt_D, dst, Xm));
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_T, dst));
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_T, dst));
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_T, dst));
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_T, dst));
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_T, dst));
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_T, dst));
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlse_r2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_T, dst));
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 16)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_i2_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple 2-element structures from two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.T, Vt2.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsep_r2_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_T, dst, Xm));
    /// <summary>
    /// Store single 2-element structure from one lane of two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.B, Vt2.B}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlso_b2_2b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_B, dst));
    /// <summary>
    /// Store single 2-element structure from one lane of two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.H, Vt2.H}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlso_h2_2h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_H, dst));
    /// <summary>
    /// Store single 2-element structure from one lane of two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.S, Vt2.S}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlso_s2_2s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_S, dst));
    /// <summary>
    /// Store single 2-element structure from one lane of two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.D, Vt2.D}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlso_d2_2d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_D, dst));
    /// <summary>
    /// Store single 2-element structure from one lane of two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.B, Vt2.B}[index], [Xn|SP], #2</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsop_b2_i2b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor dst, byte value2 = 2)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_B, dst, value2));
    /// <summary>
    /// Store single 2-element structure from one lane of two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.B, Vt2.B}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsop_bx2_r2b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_B, dst, Xm));
    /// <summary>
    /// Store single 2-element structure from one lane of two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.H, Vt2.H}[index], [Xn|SP], #4</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsop_h2_i2h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor dst, byte value4 = 4)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_H, dst, value4));
    /// <summary>
    /// Store single 2-element structure from one lane of two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.H, Vt2.H}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsop_hx2_r2h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_H, dst, Xm));
    /// <summary>
    /// Store single 2-element structure from one lane of two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.S, Vt2.S}[index], [Xn|SP], #8</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsop_s2_i2s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor dst, byte value8 = 8)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_S, dst, value8));
    /// <summary>
    /// Store single 2-element structure from one lane of two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.S, Vt2.S}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsop_sx2_r2s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_S, dst, Xm));
    /// <summary>
    /// Store single 2-element structure from one lane of two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.D, Vt2.D}[index], [Xn|SP], #16</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsop_d2_i2d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst, byte value16 = 16)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_D, dst, value16));
    /// <summary>
    /// Store single 2-element structure from one lane of two registers.
    /// </summary>
    /// <remarks><code>ST2 {Vt.D, Vt2.D}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST2_asisdlsop_dx2_r2d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST2(Arm64RegisterGroup2<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST2(Vt_D, dst, Xm));
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_T, dst));
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_T, dst));
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_T, dst));
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_T, dst));
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_T, dst));
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_T, dst));
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlse_r3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_T, dst));
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 24)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 48)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 24)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 48)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 24)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 48)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_i3_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 48)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple 3-element structures from three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.T, Vt2.T, Vt3.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsep_r3_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_T, dst, Xm));
    /// <summary>
    /// Store single 3-element structure from one lane of three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.B, Vt2.B, Vt3.B}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlso_b3_3b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_B, dst));
    /// <summary>
    /// Store single 3-element structure from one lane of three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.H, Vt2.H, Vt3.H}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlso_h3_3h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_H, dst));
    /// <summary>
    /// Store single 3-element structure from one lane of three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.S, Vt2.S, Vt3.S}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlso_s3_3s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_S, dst));
    /// <summary>
    /// Store single 3-element structure from one lane of three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.D, Vt2.D, Vt3.D}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlso_d3_3d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_D, dst));
    /// <summary>
    /// Store single 3-element structure from one lane of three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.B, Vt2.B, Vt3.B}[index], [Xn|SP], #3</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsop_b3_i3b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor dst, byte value3 = 3)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_B, dst, value3));
    /// <summary>
    /// Store single 3-element structure from one lane of three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.B, Vt2.B, Vt3.B}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsop_bx3_r3b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_B, dst, Xm));
    /// <summary>
    /// Store single 3-element structure from one lane of three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.H, Vt2.H, Vt3.H}[index], [Xn|SP], #6</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsop_h3_i3h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor dst, byte value6 = 6)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_H, dst, value6));
    /// <summary>
    /// Store single 3-element structure from one lane of three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.H, Vt2.H, Vt3.H}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsop_hx3_r3h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_H, dst, Xm));
    /// <summary>
    /// Store single 3-element structure from one lane of three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.S, Vt2.S, Vt3.S}[index], [Xn|SP], #12</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsop_s3_i3s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor dst, byte value12 = 12)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_S, dst, value12));
    /// <summary>
    /// Store single 3-element structure from one lane of three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.S, Vt2.S, Vt3.S}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsop_sx3_r3s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_S, dst, Xm));
    /// <summary>
    /// Store single 3-element structure from one lane of three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.D, Vt2.D, Vt3.D}[index], [Xn|SP], #24</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsop_d3_i3d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst, byte value24 = 24)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_D, dst, value24));
    /// <summary>
    /// Store single 3-element structure from one lane of three registers.
    /// </summary>
    /// <remarks><code>ST3 {Vt.D, Vt2.D, Vt3.D}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST3_asisdlsop_dx3_r3d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST3(Arm64RegisterGroup3<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST3(Vt_D, dst, Xm));
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_T, dst));
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_T, dst));
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_T, dst));
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_T, dst));
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_T, dst));
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_T, dst));
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlse_r4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_T, dst));
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 64)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 64)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 32)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 64)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_i4_i), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, byte imm = 64)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_T, dst, imm));
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_8B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_16B> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_4H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_8H> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_2S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_4S> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_T, dst, Xm));
    /// <summary>
    /// Store multiple 4-element structures from four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.T, Vt2.T, Vt3.T, Vt4.T}, [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsep_r4_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_2D> Vt_T, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_T, dst, Xm));
    /// <summary>
    /// Store single 4-element structure from one lane of four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.B, Vt2.B, Vt3.B, Vt4.B}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlso_b4_4b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_B, dst));
    /// <summary>
    /// Store single 4-element structure from one lane of four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.H, Vt2.H, Vt3.H, Vt4.H}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlso_h4_4h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_H, dst));
    /// <summary>
    /// Store single 4-element structure from one lane of four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.S, Vt2.S, Vt3.S, Vt4.S}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlso_s4_4s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_S, dst));
    /// <summary>
    /// Store single 4-element structure from one lane of four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.D, Vt2.D, Vt3.D, Vt4.D}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlso_d4_4d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_D, dst));
    /// <summary>
    /// Store single 4-element structure from one lane of four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.B, Vt2.B, Vt3.B, Vt4.B}[index], [Xn|SP], #4</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsop_b4_i4b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor dst, byte value4 = 4)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_B, dst, value4));
    /// <summary>
    /// Store single 4-element structure from one lane of four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.B, Vt2.B, Vt3.B, Vt4.B}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsop_bx4_r4b), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_B>.Indexed Vt_B, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_B, dst, Xm));
    /// <summary>
    /// Store single 4-element structure from one lane of four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.H, Vt2.H, Vt3.H, Vt4.H}[index], [Xn|SP], #8</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsop_h4_i4h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor dst, byte value8 = 8)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_H, dst, value8));
    /// <summary>
    /// Store single 4-element structure from one lane of four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.H, Vt2.H, Vt3.H, Vt4.H}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsop_hx4_r4h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_H>.Indexed Vt_H, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_H, dst, Xm));
    /// <summary>
    /// Store single 4-element structure from one lane of four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.S, Vt2.S, Vt3.S, Vt4.S}[index], [Xn|SP], #16</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsop_s4_i4s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor dst, byte value16 = 16)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_S, dst, value16));
    /// <summary>
    /// Store single 4-element structure from one lane of four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.S, Vt2.S, Vt3.S, Vt4.S}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsop_sx4_r4s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_S>.Indexed Vt_S, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_S, dst, Xm));
    /// <summary>
    /// Store single 4-element structure from one lane of four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.D, Vt2.D, Vt3.D, Vt4.D}[index], [Xn|SP], #32</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsop_d4_i4d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst, byte value32 = 32)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_D, dst, value32));
    /// <summary>
    /// Store single 4-element structure from one lane of four registers.
    /// </summary>
    /// <remarks><code>ST4 {Vt.D, Vt2.D, Vt3.D, Vt4.D}[index], [Xn|SP], Xm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ST4_asisdlsop_dx4_r4d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ST4(Arm64RegisterGroup4<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst, Arm64RegisterX Xm)
         => AddInstruction(Arm64InstructionFactory.ST4(Vt_D, dst, Xm));
    /// <summary>
    /// BFloat16 floating-point atomic add in memory, without return.
    /// </summary>
    /// <remarks><code>STBFADD Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STBFADD_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STBFADD(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STBFADD(Hs, dst));
    /// <summary>
    /// BFloat16 floating-point atomic add in memory, without return.
    /// </summary>
    /// <remarks><code>STBFADDL Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STBFADDL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STBFADDL(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STBFADDL(Hs, dst));
    /// <summary>
    /// BFloat16 floating-point atomic maximum in memory, without return.
    /// </summary>
    /// <remarks><code>STBFMAX Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STBFMAX_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STBFMAX(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STBFMAX(Hs, dst));
    /// <summary>
    /// BFloat16 floating-point atomic maximum in memory, without return.
    /// </summary>
    /// <remarks><code>STBFMAXL Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STBFMAXL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STBFMAXL(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STBFMAXL(Hs, dst));
    /// <summary>
    /// BFloat16 floating-point atomic maximum number in memory, without return.
    /// </summary>
    /// <remarks><code>STBFMAXNM Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STBFMAXNM_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STBFMAXNM(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STBFMAXNM(Hs, dst));
    /// <summary>
    /// BFloat16 floating-point atomic maximum number in memory, without return.
    /// </summary>
    /// <remarks><code>STBFMAXNML Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STBFMAXNML_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STBFMAXNML(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STBFMAXNML(Hs, dst));
    /// <summary>
    /// BFloat16 floating-point atomic minimum in memory, without return.
    /// </summary>
    /// <remarks><code>STBFMIN Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STBFMIN_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STBFMIN(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STBFMIN(Hs, dst));
    /// <summary>
    /// BFloat16 floating-point atomic minimum in memory, without return.
    /// </summary>
    /// <remarks><code>STBFMINL Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STBFMINL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STBFMINL(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STBFMINL(Hs, dst));
    /// <summary>
    /// BFloat16 floating-point atomic minimum number in memory, without return.
    /// </summary>
    /// <remarks><code>STBFMINNM Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STBFMINNM_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STBFMINNM(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STBFMINNM(Hs, dst));
    /// <summary>
    /// BFloat16 floating-point atomic minimum number in memory, without return.
    /// </summary>
    /// <remarks><code>STBFMINNML Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STBFMINNML_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STBFMINNML(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STBFMINNML(Hs, dst));
    /// <summary>
    /// Floating-point atomic add in memory, without return.
    /// </summary>
    /// <remarks><code>STFADD Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFADD_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFADD(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFADD(Hs, dst));
    /// <summary>
    /// Floating-point atomic add in memory, without return.
    /// </summary>
    /// <remarks><code>STFADD Ss, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFADD_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFADD(Arm64RegisterS Ss, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFADD(Ss, dst));
    /// <summary>
    /// Floating-point atomic add in memory, without return.
    /// </summary>
    /// <remarks><code>STFADD Ds, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFADD_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFADD(Arm64RegisterD Ds, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFADD(Ds, dst));
    /// <summary>
    /// Floating-point atomic add in memory, without return.
    /// </summary>
    /// <remarks><code>STFADDL Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFADDL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFADDL(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFADDL(Hs, dst));
    /// <summary>
    /// Floating-point atomic add in memory, without return.
    /// </summary>
    /// <remarks><code>STFADDL Ss, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFADDL_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFADDL(Arm64RegisterS Ss, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFADDL(Ss, dst));
    /// <summary>
    /// Floating-point atomic add in memory, without return.
    /// </summary>
    /// <remarks><code>STFADDL Ds, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFADDL_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFADDL(Arm64RegisterD Ds, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFADDL(Ds, dst));
    /// <summary>
    /// Floating-point atomic maximum in memory, without return.
    /// </summary>
    /// <remarks><code>STFMAX Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMAX_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFMAX(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFMAX(Hs, dst));
    /// <summary>
    /// Floating-point atomic maximum in memory, without return.
    /// </summary>
    /// <remarks><code>STFMAX Ss, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMAX_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFMAX(Arm64RegisterS Ss, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFMAX(Ss, dst));
    /// <summary>
    /// Floating-point atomic maximum in memory, without return.
    /// </summary>
    /// <remarks><code>STFMAX Ds, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMAX_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFMAX(Arm64RegisterD Ds, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFMAX(Ds, dst));
    /// <summary>
    /// Floating-point atomic maximum in memory, without return.
    /// </summary>
    /// <remarks><code>STFMAXL Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMAXL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFMAXL(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFMAXL(Hs, dst));
    /// <summary>
    /// Floating-point atomic maximum in memory, without return.
    /// </summary>
    /// <remarks><code>STFMAXL Ss, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMAXL_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFMAXL(Arm64RegisterS Ss, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFMAXL(Ss, dst));
    /// <summary>
    /// Floating-point atomic maximum in memory, without return.
    /// </summary>
    /// <remarks><code>STFMAXL Ds, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMAXL_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFMAXL(Arm64RegisterD Ds, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFMAXL(Ds, dst));
    /// <summary>
    /// Floating-point atomic maximum number in memory, without return.
    /// </summary>
    /// <remarks><code>STFMAXNM Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMAXNM_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFMAXNM(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFMAXNM(Hs, dst));
    /// <summary>
    /// Floating-point atomic maximum number in memory, without return.
    /// </summary>
    /// <remarks><code>STFMAXNM Ss, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMAXNM_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFMAXNM(Arm64RegisterS Ss, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFMAXNM(Ss, dst));
    /// <summary>
    /// Floating-point atomic maximum number in memory, without return.
    /// </summary>
    /// <remarks><code>STFMAXNM Ds, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMAXNM_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFMAXNM(Arm64RegisterD Ds, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFMAXNM(Ds, dst));
    /// <summary>
    /// Floating-point atomic maximum number in memory, without return.
    /// </summary>
    /// <remarks><code>STFMAXNML Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMAXNML_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFMAXNML(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFMAXNML(Hs, dst));
    /// <summary>
    /// Floating-point atomic maximum number in memory, without return.
    /// </summary>
    /// <remarks><code>STFMAXNML Ss, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMAXNML_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFMAXNML(Arm64RegisterS Ss, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFMAXNML(Ss, dst));
    /// <summary>
    /// Floating-point atomic maximum number in memory, without return.
    /// </summary>
    /// <remarks><code>STFMAXNML Ds, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMAXNML_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFMAXNML(Arm64RegisterD Ds, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFMAXNML(Ds, dst));
    /// <summary>
    /// Floating-point atomic minimum in memory, without return.
    /// </summary>
    /// <remarks><code>STFMIN Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMIN_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFMIN(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFMIN(Hs, dst));
    /// <summary>
    /// Floating-point atomic minimum in memory, without return.
    /// </summary>
    /// <remarks><code>STFMIN Ss, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMIN_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFMIN(Arm64RegisterS Ss, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFMIN(Ss, dst));
    /// <summary>
    /// Floating-point atomic minimum in memory, without return.
    /// </summary>
    /// <remarks><code>STFMIN Ds, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMIN_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFMIN(Arm64RegisterD Ds, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFMIN(Ds, dst));
    /// <summary>
    /// Floating-point atomic minimum in memory, without return.
    /// </summary>
    /// <remarks><code>STFMINL Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMINL_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFMINL(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFMINL(Hs, dst));
    /// <summary>
    /// Floating-point atomic minimum in memory, without return.
    /// </summary>
    /// <remarks><code>STFMINL Ss, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMINL_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFMINL(Arm64RegisterS Ss, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFMINL(Ss, dst));
    /// <summary>
    /// Floating-point atomic minimum in memory, without return.
    /// </summary>
    /// <remarks><code>STFMINL Ds, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMINL_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFMINL(Arm64RegisterD Ds, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFMINL(Ds, dst));
    /// <summary>
    /// Floating-point atomic minimum number in memory, without return.
    /// </summary>
    /// <remarks><code>STFMINNM Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMINNM_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFMINNM(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFMINNM(Hs, dst));
    /// <summary>
    /// Floating-point atomic minimum number in memory, without return.
    /// </summary>
    /// <remarks><code>STFMINNM Ss, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMINNM_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFMINNM(Arm64RegisterS Ss, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFMINNM(Ss, dst));
    /// <summary>
    /// Floating-point atomic minimum number in memory, without return.
    /// </summary>
    /// <remarks><code>STFMINNM Ds, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMINNM_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFMINNM(Arm64RegisterD Ds, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFMINNM(Ds, dst));
    /// <summary>
    /// Floating-point atomic minimum number in memory, without return.
    /// </summary>
    /// <remarks><code>STFMINNML Hs, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMINNML_16), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFMINNML(Arm64RegisterH Hs, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFMINNML(Hs, dst));
    /// <summary>
    /// Floating-point atomic minimum number in memory, without return.
    /// </summary>
    /// <remarks><code>STFMINNML Ss, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMINNML_32), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFMINNML(Arm64RegisterS Ss, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFMINNML(Ss, dst));
    /// <summary>
    /// Floating-point atomic minimum number in memory, without return.
    /// </summary>
    /// <remarks><code>STFMINNML Ds, [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STFMINNML_64), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STFMINNML(Arm64RegisterD Ds, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STFMINNML(Ds, dst));
    /// <summary>
    /// Store-release a single-element structure from one lane of one register.
    /// </summary>
    /// <remarks><code>STL1 {Vt.D}[index], [Xn|SP]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.STL1_asisdlso_d1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void STL1(Arm64RegisterGroup1<Arm64RegisterV_D>.Indexed Vt_D, Arm64BaseMemoryAccessor dst)
         => AddInstruction(Arm64InstructionFactory.STL1(Vt_D, dst));
    /// <summary>
    /// Subtract (vector).
    /// </summary>
    /// <remarks><code>SUB Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUB_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUB(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
         => AddInstruction(Arm64InstructionFactory.SUB(Dd, Dn, Dm));
    /// <summary>
    /// Subtract (vector).
    /// </summary>
    /// <remarks><code>SUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUB(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Subtract (vector).
    /// </summary>
    /// <remarks><code>SUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUB(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.SUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Subtract (vector).
    /// </summary>
    /// <remarks><code>SUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUB(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Subtract (vector).
    /// </summary>
    /// <remarks><code>SUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUB(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.SUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Subtract (vector).
    /// </summary>
    /// <remarks><code>SUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUB(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Subtract (vector).
    /// </summary>
    /// <remarks><code>SUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUB(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.SUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Subtract (vector).
    /// </summary>
    /// <remarks><code>SUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUB(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.SUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Subtract returning high narrow.
    /// </summary>
    /// <remarks><code>SUBHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUBHN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8H Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.SUBHN(Vd_Tb, Vn_Ta, Vm_Ta));
    /// <summary>
    /// Subtract returning high narrow.
    /// </summary>
    /// <remarks><code>SUBHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUBHN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4S Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.SUBHN(Vd_Tb, Vn_Ta, Vm_Ta));
    /// <summary>
    /// Subtract returning high narrow.
    /// </summary>
    /// <remarks><code>SUBHN Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBHN_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUBHN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2D Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.SUBHN(Vd_Tb, Vn_Ta, Vm_Ta));
    /// <summary>
    /// Subtract returning high narrow.
    /// </summary>
    /// <remarks><code>SUBHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUBHN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8H Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.SUBHN2(Vd_Tb, Vn_Ta, Vm_Ta));
    /// <summary>
    /// Subtract returning high narrow.
    /// </summary>
    /// <remarks><code>SUBHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUBHN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4S Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.SUBHN2(Vd_Tb, Vn_Ta, Vm_Ta));
    /// <summary>
    /// Subtract returning high narrow.
    /// </summary>
    /// <remarks><code>SUBHN2 Vd.Tb, Vn.Ta, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUBHN2_asimddiff_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUBHN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2D Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.SUBHN2(Vd_Tb, Vn_Ta, Vm_Ta));
    /// <summary>
    /// Dot product with signed and unsigned integers (vector, by element).
    /// </summary>
    /// <remarks><code>SUDOT Vd.Ta, Vn.Tb, Vm.4B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUDOT_asimdelem_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUDOT(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_4B.Indexed Vm_4B)
         => AddInstruction(Arm64InstructionFactory.SUDOT(Vd_Ta, Vn_Tb, Vm_4B));
    /// <summary>
    /// Dot product with signed and unsigned integers (vector, by element).
    /// </summary>
    /// <remarks><code>SUDOT Vd.Ta, Vn.Tb, Vm.4B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUDOT_asimdelem_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUDOT(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_4B.Indexed Vm_4B)
         => AddInstruction(Arm64InstructionFactory.SUDOT(Vd_Ta, Vn_Tb, Vm_4B));
    /// <summary>
    /// Signed saturating accumulate of unsigned value.
    /// </summary>
    /// <remarks><code>SUQADD Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUQADD_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUQADD(Arm64RegisterB Vd, Arm64RegisterB Vn)
         => AddInstruction(Arm64InstructionFactory.SUQADD(Vd, Vn));
    /// <summary>
    /// Signed saturating accumulate of unsigned value.
    /// </summary>
    /// <remarks><code>SUQADD Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUQADD_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUQADD(Arm64RegisterH Vd, Arm64RegisterH Vn)
         => AddInstruction(Arm64InstructionFactory.SUQADD(Vd, Vn));
    /// <summary>
    /// Signed saturating accumulate of unsigned value.
    /// </summary>
    /// <remarks><code>SUQADD Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUQADD_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUQADD(Arm64RegisterS Vd, Arm64RegisterS Vn)
         => AddInstruction(Arm64InstructionFactory.SUQADD(Vd, Vn));
    /// <summary>
    /// Signed saturating accumulate of unsigned value.
    /// </summary>
    /// <remarks><code>SUQADD Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUQADD_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUQADD(Arm64RegisterD Vd, Arm64RegisterD Vn)
         => AddInstruction(Arm64InstructionFactory.SUQADD(Vd, Vn));
    /// <summary>
    /// Signed saturating accumulate of unsigned value.
    /// </summary>
    /// <remarks><code>SUQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUQADD(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
         => AddInstruction(Arm64InstructionFactory.SUQADD(Vd_T, Vn_T));
    /// <summary>
    /// Signed saturating accumulate of unsigned value.
    /// </summary>
    /// <remarks><code>SUQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUQADD(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
         => AddInstruction(Arm64InstructionFactory.SUQADD(Vd_T, Vn_T));
    /// <summary>
    /// Signed saturating accumulate of unsigned value.
    /// </summary>
    /// <remarks><code>SUQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUQADD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.SUQADD(Vd_T, Vn_T));
    /// <summary>
    /// Signed saturating accumulate of unsigned value.
    /// </summary>
    /// <remarks><code>SUQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUQADD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.SUQADD(Vd_T, Vn_T));
    /// <summary>
    /// Signed saturating accumulate of unsigned value.
    /// </summary>
    /// <remarks><code>SUQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUQADD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.SUQADD(Vd_T, Vn_T));
    /// <summary>
    /// Signed saturating accumulate of unsigned value.
    /// </summary>
    /// <remarks><code>SUQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUQADD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.SUQADD(Vd_T, Vn_T));
    /// <summary>
    /// Signed saturating accumulate of unsigned value.
    /// </summary>
    /// <remarks><code>SUQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SUQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SUQADD(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.SUQADD(Vd_T, Vn_T));
    /// <summary>
    /// Signed extend long.
    /// </summary>
    /// <remarks><code>SXTL Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SXTL_sshll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SXTL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.SXTL(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Signed extend long.
    /// </summary>
    /// <remarks><code>SXTL Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SXTL_sshll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SXTL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.SXTL(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Signed extend long.
    /// </summary>
    /// <remarks><code>SXTL Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SXTL_sshll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SXTL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.SXTL(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Signed extend long.
    /// </summary>
    /// <remarks><code>SXTL2 Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SXTL2_sshll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SXTL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.SXTL2(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Signed extend long.
    /// </summary>
    /// <remarks><code>SXTL2 Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SXTL2_sshll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SXTL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.SXTL2(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Signed extend long.
    /// </summary>
    /// <remarks><code>SXTL2 Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SXTL2_sshll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SXTL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.SXTL2(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Table vector lookup.
    /// </summary>
    /// <remarks><code>TBL Vd.Ta, {Vn.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBL_asimdtbl_l1_1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TBL(Arm64RegisterV_8B Vd_Ta, Arm64RegisterGroup1<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_8B Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.TBL(Vd_Ta, Vn_16B, Vm_Ta));
    /// <summary>
    /// Table vector lookup.
    /// </summary>
    /// <remarks><code>TBL Vd.Ta, {Vn.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBL_asimdtbl_l1_1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TBL(Arm64RegisterV_16B Vd_Ta, Arm64RegisterGroup1<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_16B Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.TBL(Vd_Ta, Vn_16B, Vm_Ta));
    /// <summary>
    /// Table vector lookup.
    /// </summary>
    /// <remarks><code>TBL Vd.Ta, {Vn.16B, Vn+1.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBL_asimdtbl_l2_2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TBL(Arm64RegisterV_8B Vd_Ta, Arm64RegisterGroup2<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_8B Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.TBL(Vd_Ta, Vn_16B, Vm_Ta));
    /// <summary>
    /// Table vector lookup.
    /// </summary>
    /// <remarks><code>TBL Vd.Ta, {Vn.16B, Vn+1.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBL_asimdtbl_l2_2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TBL(Arm64RegisterV_16B Vd_Ta, Arm64RegisterGroup2<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_16B Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.TBL(Vd_Ta, Vn_16B, Vm_Ta));
    /// <summary>
    /// Table vector lookup.
    /// </summary>
    /// <remarks><code>TBL Vd.Ta, {Vn.16B, Vn+1.16B, Vn+2.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBL_asimdtbl_l3_3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TBL(Arm64RegisterV_8B Vd_Ta, Arm64RegisterGroup3<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_8B Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.TBL(Vd_Ta, Vn_16B, Vm_Ta));
    /// <summary>
    /// Table vector lookup.
    /// </summary>
    /// <remarks><code>TBL Vd.Ta, {Vn.16B, Vn+1.16B, Vn+2.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBL_asimdtbl_l3_3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TBL(Arm64RegisterV_16B Vd_Ta, Arm64RegisterGroup3<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_16B Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.TBL(Vd_Ta, Vn_16B, Vm_Ta));
    /// <summary>
    /// Table vector lookup.
    /// </summary>
    /// <remarks><code>TBL Vd.Ta, {Vn.16B, Vn+1.16B, Vn+2.16B, Vn+3.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBL_asimdtbl_l4_4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TBL(Arm64RegisterV_8B Vd_Ta, Arm64RegisterGroup4<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_8B Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.TBL(Vd_Ta, Vn_16B, Vm_Ta));
    /// <summary>
    /// Table vector lookup.
    /// </summary>
    /// <remarks><code>TBL Vd.Ta, {Vn.16B, Vn+1.16B, Vn+2.16B, Vn+3.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBL_asimdtbl_l4_4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TBL(Arm64RegisterV_16B Vd_Ta, Arm64RegisterGroup4<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_16B Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.TBL(Vd_Ta, Vn_16B, Vm_Ta));
    /// <summary>
    /// Table vector lookup extension.
    /// </summary>
    /// <remarks><code>TBX Vd.Ta, {Vn.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBX_asimdtbl_l1_1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TBX(Arm64RegisterV_8B Vd_Ta, Arm64RegisterGroup1<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_8B Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.TBX(Vd_Ta, Vn_16B, Vm_Ta));
    /// <summary>
    /// Table vector lookup extension.
    /// </summary>
    /// <remarks><code>TBX Vd.Ta, {Vn.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBX_asimdtbl_l1_1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TBX(Arm64RegisterV_16B Vd_Ta, Arm64RegisterGroup1<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_16B Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.TBX(Vd_Ta, Vn_16B, Vm_Ta));
    /// <summary>
    /// Table vector lookup extension.
    /// </summary>
    /// <remarks><code>TBX Vd.Ta, {Vn.16B, Vn+1.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBX_asimdtbl_l2_2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TBX(Arm64RegisterV_8B Vd_Ta, Arm64RegisterGroup2<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_8B Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.TBX(Vd_Ta, Vn_16B, Vm_Ta));
    /// <summary>
    /// Table vector lookup extension.
    /// </summary>
    /// <remarks><code>TBX Vd.Ta, {Vn.16B, Vn+1.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBX_asimdtbl_l2_2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TBX(Arm64RegisterV_16B Vd_Ta, Arm64RegisterGroup2<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_16B Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.TBX(Vd_Ta, Vn_16B, Vm_Ta));
    /// <summary>
    /// Table vector lookup extension.
    /// </summary>
    /// <remarks><code>TBX Vd.Ta, {Vn.16B, Vn+1.16B, Vn+2.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBX_asimdtbl_l3_3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TBX(Arm64RegisterV_8B Vd_Ta, Arm64RegisterGroup3<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_8B Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.TBX(Vd_Ta, Vn_16B, Vm_Ta));
    /// <summary>
    /// Table vector lookup extension.
    /// </summary>
    /// <remarks><code>TBX Vd.Ta, {Vn.16B, Vn+1.16B, Vn+2.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBX_asimdtbl_l3_3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TBX(Arm64RegisterV_16B Vd_Ta, Arm64RegisterGroup3<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_16B Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.TBX(Vd_Ta, Vn_16B, Vm_Ta));
    /// <summary>
    /// Table vector lookup extension.
    /// </summary>
    /// <remarks><code>TBX Vd.Ta, {Vn.16B, Vn+1.16B, Vn+2.16B, Vn+3.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBX_asimdtbl_l4_4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TBX(Arm64RegisterV_8B Vd_Ta, Arm64RegisterGroup4<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_8B Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.TBX(Vd_Ta, Vn_16B, Vm_Ta));
    /// <summary>
    /// Table vector lookup extension.
    /// </summary>
    /// <remarks><code>TBX Vd.Ta, {Vn.16B, Vn+1.16B, Vn+2.16B, Vn+3.16B}, Vm.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TBX_asimdtbl_l4_4), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TBX(Arm64RegisterV_16B Vd_Ta, Arm64RegisterGroup4<Arm64RegisterV_16B> Vn_16B, Arm64RegisterV_16B Vm_Ta)
         => AddInstruction(Arm64InstructionFactory.TBX(Vd_Ta, Vn_16B, Vm_Ta));
    /// <summary>
    /// Transpose vectors (primary).
    /// </summary>
    /// <remarks><code>TRN1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TRN1(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.TRN1(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Transpose vectors (primary).
    /// </summary>
    /// <remarks><code>TRN1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TRN1(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.TRN1(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Transpose vectors (primary).
    /// </summary>
    /// <remarks><code>TRN1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TRN1(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.TRN1(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Transpose vectors (primary).
    /// </summary>
    /// <remarks><code>TRN1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TRN1(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.TRN1(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Transpose vectors (primary).
    /// </summary>
    /// <remarks><code>TRN1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TRN1(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.TRN1(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Transpose vectors (primary).
    /// </summary>
    /// <remarks><code>TRN1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TRN1(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.TRN1(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Transpose vectors (primary).
    /// </summary>
    /// <remarks><code>TRN1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TRN1(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.TRN1(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Transpose vectors (secondary).
    /// </summary>
    /// <remarks><code>TRN2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TRN2(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.TRN2(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Transpose vectors (secondary).
    /// </summary>
    /// <remarks><code>TRN2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TRN2(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.TRN2(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Transpose vectors (secondary).
    /// </summary>
    /// <remarks><code>TRN2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TRN2(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.TRN2(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Transpose vectors (secondary).
    /// </summary>
    /// <remarks><code>TRN2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TRN2(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.TRN2(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Transpose vectors (secondary).
    /// </summary>
    /// <remarks><code>TRN2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TRN2(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.TRN2(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Transpose vectors (secondary).
    /// </summary>
    /// <remarks><code>TRN2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TRN2(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.TRN2(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Transpose vectors (secondary).
    /// </summary>
    /// <remarks><code>TRN2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.TRN2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TRN2(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.TRN2(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned absolute difference and accumulate.
    /// </summary>
    /// <remarks><code>UABA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UABA(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UABA(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned absolute difference and accumulate.
    /// </summary>
    /// <remarks><code>UABA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UABA(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UABA(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned absolute difference and accumulate.
    /// </summary>
    /// <remarks><code>UABA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UABA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UABA(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned absolute difference and accumulate.
    /// </summary>
    /// <remarks><code>UABA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UABA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UABA(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned absolute difference and accumulate.
    /// </summary>
    /// <remarks><code>UABA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UABA(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UABA(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned absolute difference and accumulate.
    /// </summary>
    /// <remarks><code>UABA Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABA_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UABA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UABA(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>UABAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UABAL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UABAL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>UABAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UABAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UABAL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>UABAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UABAL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UABAL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>UABAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UABAL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UABAL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>UABAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UABAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UABAL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned absolute difference and accumulate long.
    /// </summary>
    /// <remarks><code>UABAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UABAL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UABAL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned absolute difference (vector).
    /// </summary>
    /// <remarks><code>UABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UABD(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UABD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned absolute difference (vector).
    /// </summary>
    /// <remarks><code>UABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UABD(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UABD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned absolute difference (vector).
    /// </summary>
    /// <remarks><code>UABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UABD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UABD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned absolute difference (vector).
    /// </summary>
    /// <remarks><code>UABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UABD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UABD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned absolute difference (vector).
    /// </summary>
    /// <remarks><code>UABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UABD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UABD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned absolute difference (vector).
    /// </summary>
    /// <remarks><code>UABD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UABD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UABD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned absolute difference long.
    /// </summary>
    /// <remarks><code>UABDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UABDL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UABDL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned absolute difference long.
    /// </summary>
    /// <remarks><code>UABDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UABDL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UABDL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned absolute difference long.
    /// </summary>
    /// <remarks><code>UABDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UABDL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UABDL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned absolute difference long.
    /// </summary>
    /// <remarks><code>UABDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UABDL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UABDL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned absolute difference long.
    /// </summary>
    /// <remarks><code>UABDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UABDL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UABDL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned absolute difference long.
    /// </summary>
    /// <remarks><code>UABDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UABDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UABDL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UABDL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned add and accumulate long pairwise.
    /// </summary>
    /// <remarks><code>UADALP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADALP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADALP(Arm64RegisterV_4H Vd_Ta, Arm64RegisterV_8B Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.UADALP(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Unsigned add and accumulate long pairwise.
    /// </summary>
    /// <remarks><code>UADALP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADALP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADALP(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.UADALP(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Unsigned add and accumulate long pairwise.
    /// </summary>
    /// <remarks><code>UADALP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADALP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADALP(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_4H Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.UADALP(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Unsigned add and accumulate long pairwise.
    /// </summary>
    /// <remarks><code>UADALP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADALP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADALP(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.UADALP(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Unsigned add and accumulate long pairwise.
    /// </summary>
    /// <remarks><code>UADALP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADALP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADALP(Arm64RegisterV_1D Vd_Ta, Arm64RegisterV_2S Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.UADALP(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Unsigned add and accumulate long pairwise.
    /// </summary>
    /// <remarks><code>UADALP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADALP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADALP(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.UADALP(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Unsigned add long (vector).
    /// </summary>
    /// <remarks><code>UADDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADDL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UADDL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned add long (vector).
    /// </summary>
    /// <remarks><code>UADDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADDL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UADDL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned add long (vector).
    /// </summary>
    /// <remarks><code>UADDL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADDL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UADDL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned add long (vector).
    /// </summary>
    /// <remarks><code>UADDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADDL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UADDL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned add long (vector).
    /// </summary>
    /// <remarks><code>UADDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADDL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UADDL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned add long (vector).
    /// </summary>
    /// <remarks><code>UADDL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADDL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UADDL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned add long pairwise.
    /// </summary>
    /// <remarks><code>UADDLP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDLP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADDLP(Arm64RegisterV_4H Vd_Ta, Arm64RegisterV_8B Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.UADDLP(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Unsigned add long pairwise.
    /// </summary>
    /// <remarks><code>UADDLP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDLP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADDLP(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.UADDLP(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Unsigned add long pairwise.
    /// </summary>
    /// <remarks><code>UADDLP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDLP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADDLP(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_4H Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.UADDLP(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Unsigned add long pairwise.
    /// </summary>
    /// <remarks><code>UADDLP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDLP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADDLP(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.UADDLP(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Unsigned add long pairwise.
    /// </summary>
    /// <remarks><code>UADDLP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDLP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADDLP(Arm64RegisterV_1D Vd_Ta, Arm64RegisterV_2S Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.UADDLP(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Unsigned add long pairwise.
    /// </summary>
    /// <remarks><code>UADDLP Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDLP_asimdmisc_p), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADDLP(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.UADDLP(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Unsigned sum long across vector.
    /// </summary>
    /// <remarks><code>UADDLV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDLV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADDLV(Arm64RegisterH Vd, Arm64RegisterV_8B Vn_T)
         => AddInstruction(Arm64InstructionFactory.UADDLV(Vd, Vn_T));
    /// <summary>
    /// Unsigned sum long across vector.
    /// </summary>
    /// <remarks><code>UADDLV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDLV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADDLV(Arm64RegisterH Vd, Arm64RegisterV_16B Vn_T)
         => AddInstruction(Arm64InstructionFactory.UADDLV(Vd, Vn_T));
    /// <summary>
    /// Unsigned sum long across vector.
    /// </summary>
    /// <remarks><code>UADDLV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDLV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADDLV(Arm64RegisterS Vd, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.UADDLV(Vd, Vn_T));
    /// <summary>
    /// Unsigned sum long across vector.
    /// </summary>
    /// <remarks><code>UADDLV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDLV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADDLV(Arm64RegisterS Vd, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.UADDLV(Vd, Vn_T));
    /// <summary>
    /// Unsigned sum long across vector.
    /// </summary>
    /// <remarks><code>UADDLV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDLV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADDLV(Arm64RegisterD Vd, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.UADDLV(Vd, Vn_T));
    /// <summary>
    /// Unsigned add wide.
    /// </summary>
    /// <remarks><code>UADDW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADDW(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UADDW(Vd_Ta, Vn_Ta, Vm_Tb));
    /// <summary>
    /// Unsigned add wide.
    /// </summary>
    /// <remarks><code>UADDW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADDW(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UADDW(Vd_Ta, Vn_Ta, Vm_Tb));
    /// <summary>
    /// Unsigned add wide.
    /// </summary>
    /// <remarks><code>UADDW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADDW(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UADDW(Vd_Ta, Vn_Ta, Vm_Tb));
    /// <summary>
    /// Unsigned add wide.
    /// </summary>
    /// <remarks><code>UADDW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADDW2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_16B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UADDW2(Vd_Ta, Vn_Ta, Vm_Tb));
    /// <summary>
    /// Unsigned add wide.
    /// </summary>
    /// <remarks><code>UADDW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADDW2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_8H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UADDW2(Vd_Ta, Vn_Ta, Vm_Tb));
    /// <summary>
    /// Unsigned add wide.
    /// </summary>
    /// <remarks><code>UADDW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UADDW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UADDW2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_4S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UADDW2(Vd_Ta, Vn_Ta, Vm_Tb));
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd, Vn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asisdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterH Vd, Arm64RegisterH Vn, byte fbits)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Vd, Vn, fbits));
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd, Vn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asisdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterS Vd, Arm64RegisterS Vn, byte fbits)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Vd, Vn, fbits));
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd, Vn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asisdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterD Vd, Arm64RegisterD Vn, byte fbits)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Vd, Vn, fbits));
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte fbits)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Vd_T, Vn_T, fbits));
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte fbits)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Vd_T, Vn_T, fbits));
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte fbits)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Vd_T, Vn_T, fbits));
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte fbits)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Vd_T, Vn_T, fbits));
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd.T, Vn.T, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asimdshf_c), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte fbits)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Vd_T, Vn_T, fbits));
    /// <summary>
    /// Unsigned integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asisdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Hd, Hn));
    /// <summary>
    /// Unsigned integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterS Vd, Arm64RegisterS Vn)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Vd, Vn));
    /// <summary>
    /// Unsigned integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterD Vd, Arm64RegisterD Vn)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Vd, Vn));
    /// <summary>
    /// Unsigned integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Vd_T, Vn_T));
    /// <summary>
    /// Unsigned integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asimdmiscfp16_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Vd_T, Vn_T));
    /// <summary>
    /// Unsigned integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Vd_T, Vn_T));
    /// <summary>
    /// Unsigned integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Vd_T, Vn_T));
    /// <summary>
    /// Unsigned integer convert to floating-point (vector).
    /// </summary>
    /// <remarks><code>UCVTF Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Vd_T, Vn_T));
    /// <summary>
    /// Dot product unsigned arithmetic (vector, by element).
    /// </summary>
    /// <remarks><code>UDOT Vd.Ta, Vn.Tb, Vm.4B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UDOT_asimdelem_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UDOT(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_4B.Indexed Vm_4B)
         => AddInstruction(Arm64InstructionFactory.UDOT(Vd_Ta, Vn_Tb, Vm_4B));
    /// <summary>
    /// Dot product unsigned arithmetic (vector, by element).
    /// </summary>
    /// <remarks><code>UDOT Vd.Ta, Vn.Tb, Vm.4B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UDOT_asimdelem_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UDOT(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_4B.Indexed Vm_4B)
         => AddInstruction(Arm64InstructionFactory.UDOT(Vd_Ta, Vn_Tb, Vm_4B));
    /// <summary>
    /// Dot product unsigned arithmetic (vector).
    /// </summary>
    /// <remarks><code>UDOT Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UDOT_asimdsame2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UDOT(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UDOT(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Dot product unsigned arithmetic (vector).
    /// </summary>
    /// <remarks><code>UDOT Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UDOT_asimdsame2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UDOT(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UDOT(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned halving add.
    /// </summary>
    /// <remarks><code>UHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UHADD(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UHADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned halving add.
    /// </summary>
    /// <remarks><code>UHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UHADD(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UHADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned halving add.
    /// </summary>
    /// <remarks><code>UHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UHADD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UHADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned halving add.
    /// </summary>
    /// <remarks><code>UHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UHADD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UHADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned halving add.
    /// </summary>
    /// <remarks><code>UHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UHADD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UHADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned halving add.
    /// </summary>
    /// <remarks><code>UHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UHADD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UHADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned halving subtract.
    /// </summary>
    /// <remarks><code>UHSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UHSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UHSUB(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UHSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned halving subtract.
    /// </summary>
    /// <remarks><code>UHSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UHSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UHSUB(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UHSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned halving subtract.
    /// </summary>
    /// <remarks><code>UHSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UHSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UHSUB(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UHSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned halving subtract.
    /// </summary>
    /// <remarks><code>UHSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UHSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UHSUB(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UHSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned halving subtract.
    /// </summary>
    /// <remarks><code>UHSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UHSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UHSUB(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UHSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned halving subtract.
    /// </summary>
    /// <remarks><code>UHSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UHSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UHSUB(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UHSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned maximum (vector).
    /// </summary>
    /// <remarks><code>UMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMAX(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UMAX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned maximum (vector).
    /// </summary>
    /// <remarks><code>UMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMAX(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UMAX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned maximum (vector).
    /// </summary>
    /// <remarks><code>UMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMAX(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UMAX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned maximum (vector).
    /// </summary>
    /// <remarks><code>UMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMAX(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UMAX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned maximum (vector).
    /// </summary>
    /// <remarks><code>UMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMAX(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UMAX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned maximum (vector).
    /// </summary>
    /// <remarks><code>UMAX Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAX_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMAX(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UMAX(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned maximum pairwise.
    /// </summary>
    /// <remarks><code>UMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMAXP(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UMAXP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned maximum pairwise.
    /// </summary>
    /// <remarks><code>UMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMAXP(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UMAXP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned maximum pairwise.
    /// </summary>
    /// <remarks><code>UMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMAXP(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UMAXP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned maximum pairwise.
    /// </summary>
    /// <remarks><code>UMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMAXP(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UMAXP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned maximum pairwise.
    /// </summary>
    /// <remarks><code>UMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMAXP(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UMAXP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned maximum pairwise.
    /// </summary>
    /// <remarks><code>UMAXP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAXP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMAXP(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UMAXP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned maximum across vector.
    /// </summary>
    /// <remarks><code>UMAXV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAXV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMAXV(Arm64RegisterB Vd, Arm64RegisterV_8B Vn_T)
         => AddInstruction(Arm64InstructionFactory.UMAXV(Vd, Vn_T));
    /// <summary>
    /// Unsigned maximum across vector.
    /// </summary>
    /// <remarks><code>UMAXV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAXV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMAXV(Arm64RegisterB Vd, Arm64RegisterV_16B Vn_T)
         => AddInstruction(Arm64InstructionFactory.UMAXV(Vd, Vn_T));
    /// <summary>
    /// Unsigned maximum across vector.
    /// </summary>
    /// <remarks><code>UMAXV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAXV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMAXV(Arm64RegisterH Vd, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.UMAXV(Vd, Vn_T));
    /// <summary>
    /// Unsigned maximum across vector.
    /// </summary>
    /// <remarks><code>UMAXV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAXV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMAXV(Arm64RegisterH Vd, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.UMAXV(Vd, Vn_T));
    /// <summary>
    /// Unsigned maximum across vector.
    /// </summary>
    /// <remarks><code>UMAXV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMAXV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMAXV(Arm64RegisterS Vd, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.UMAXV(Vd, Vn_T));
    /// <summary>
    /// Unsigned minimum (vector).
    /// </summary>
    /// <remarks><code>UMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMIN(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UMIN(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned minimum (vector).
    /// </summary>
    /// <remarks><code>UMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMIN(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UMIN(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned minimum (vector).
    /// </summary>
    /// <remarks><code>UMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMIN(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UMIN(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned minimum (vector).
    /// </summary>
    /// <remarks><code>UMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMIN(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UMIN(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned minimum (vector).
    /// </summary>
    /// <remarks><code>UMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMIN(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UMIN(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned minimum (vector).
    /// </summary>
    /// <remarks><code>UMIN Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMIN_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMIN(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UMIN(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned minimum pairwise.
    /// </summary>
    /// <remarks><code>UMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMINP(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UMINP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned minimum pairwise.
    /// </summary>
    /// <remarks><code>UMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMINP(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UMINP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned minimum pairwise.
    /// </summary>
    /// <remarks><code>UMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMINP(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UMINP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned minimum pairwise.
    /// </summary>
    /// <remarks><code>UMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMINP(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UMINP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned minimum pairwise.
    /// </summary>
    /// <remarks><code>UMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMINP(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UMINP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned minimum pairwise.
    /// </summary>
    /// <remarks><code>UMINP Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMINP_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMINP(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UMINP(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned minimum across vector.
    /// </summary>
    /// <remarks><code>UMINV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMINV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMINV(Arm64RegisterB Vd, Arm64RegisterV_8B Vn_T)
         => AddInstruction(Arm64InstructionFactory.UMINV(Vd, Vn_T));
    /// <summary>
    /// Unsigned minimum across vector.
    /// </summary>
    /// <remarks><code>UMINV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMINV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMINV(Arm64RegisterB Vd, Arm64RegisterV_16B Vn_T)
         => AddInstruction(Arm64InstructionFactory.UMINV(Vd, Vn_T));
    /// <summary>
    /// Unsigned minimum across vector.
    /// </summary>
    /// <remarks><code>UMINV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMINV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMINV(Arm64RegisterH Vd, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.UMINV(Vd, Vn_T));
    /// <summary>
    /// Unsigned minimum across vector.
    /// </summary>
    /// <remarks><code>UMINV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMINV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMINV(Arm64RegisterH Vd, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.UMINV(Vd, Vn_T));
    /// <summary>
    /// Unsigned minimum across vector.
    /// </summary>
    /// <remarks><code>UMINV Vd, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMINV_asimdall_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMINV(Arm64RegisterS Vd, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.UMINV(Vd, Vn_T));
    /// <summary>
    /// Unsigned multiply-add long (vector, by element).
    /// </summary>
    /// <remarks><code>UMLAL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMLAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.UMLAL(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Unsigned multiply-add long (vector, by element).
    /// </summary>
    /// <remarks><code>UMLAL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMLAL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.UMLAL(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Unsigned multiply-add long (vector).
    /// </summary>
    /// <remarks><code>UMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMLAL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UMLAL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned multiply-add long (vector).
    /// </summary>
    /// <remarks><code>UMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMLAL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UMLAL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned multiply-add long (vector).
    /// </summary>
    /// <remarks><code>UMLAL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMLAL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UMLAL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned multiply-add long (vector, by element).
    /// </summary>
    /// <remarks><code>UMLAL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMLAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.UMLAL2(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Unsigned multiply-add long (vector, by element).
    /// </summary>
    /// <remarks><code>UMLAL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMLAL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.UMLAL2(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Unsigned multiply-add long (vector).
    /// </summary>
    /// <remarks><code>UMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMLAL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UMLAL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned multiply-add long (vector).
    /// </summary>
    /// <remarks><code>UMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMLAL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UMLAL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned multiply-add long (vector).
    /// </summary>
    /// <remarks><code>UMLAL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLAL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMLAL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UMLAL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned multiply-subtract long (vector, by element).
    /// </summary>
    /// <remarks><code>UMLSL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMLSL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.UMLSL(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Unsigned multiply-subtract long (vector, by element).
    /// </summary>
    /// <remarks><code>UMLSL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMLSL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.UMLSL(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Unsigned multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>UMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMLSL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UMLSL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>UMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMLSL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UMLSL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>UMLSL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMLSL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UMLSL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned multiply-subtract long (vector, by element).
    /// </summary>
    /// <remarks><code>UMLSL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMLSL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.UMLSL2(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Unsigned multiply-subtract long (vector, by element).
    /// </summary>
    /// <remarks><code>UMLSL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMLSL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.UMLSL2(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Unsigned multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>UMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMLSL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UMLSL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>UMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMLSL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UMLSL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned multiply-subtract long (vector).
    /// </summary>
    /// <remarks><code>UMLSL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMLSL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMLSL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UMLSL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned 8-bit integer matrix multiply-accumulate (vector).
    /// </summary>
    /// <remarks><code>UMMLA Vd.4S, Vn.16B, Vm.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMMLA_asimdsame2_g), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMMLA(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B)
         => AddInstruction(Arm64InstructionFactory.UMMLA(Vd_4S, Vn_16B, Vm_16B));
    /// <summary>
    /// Unsigned move vector element to general-purpose register.
    /// </summary>
    /// <remarks><code>UMOV Wd, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMOV_asimdins_w_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMOV(Arm64RegisterW Wd, Arm64RegisterV_B.Indexed Vn_Ts)
         => AddInstruction(Arm64InstructionFactory.UMOV(Wd, Vn_Ts));
    /// <summary>
    /// Unsigned move vector element to general-purpose register.
    /// </summary>
    /// <remarks><code>UMOV Wd, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMOV_asimdins_w_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMOV(Arm64RegisterW Wd, Arm64RegisterV_H.Indexed Vn_Ts)
         => AddInstruction(Arm64InstructionFactory.UMOV(Wd, Vn_Ts));
    /// <summary>
    /// Unsigned move vector element to general-purpose register.
    /// </summary>
    /// <remarks><code>UMOV Wd, Vn.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMOV_asimdins_w_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMOV(Arm64RegisterW Wd, Arm64RegisterV_S.Indexed Vn_Ts)
         => AddInstruction(Arm64InstructionFactory.UMOV(Wd, Vn_Ts));
    /// <summary>
    /// Unsigned move vector element to general-purpose register.
    /// </summary>
    /// <remarks><code>UMOV Xd, Vn.D[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMOV_asimdins_x_x), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMOV(Arm64RegisterX Xd, Arm64RegisterV_D.Indexed Vn_D)
         => AddInstruction(Arm64InstructionFactory.UMOV(Xd, Vn_D));
    /// <summary>
    /// Unsigned multiply long (vector, by element).
    /// </summary>
    /// <remarks><code>UMULL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMULL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.UMULL(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Unsigned multiply long (vector, by element).
    /// </summary>
    /// <remarks><code>UMULL Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMULL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.UMULL(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Unsigned multiply long (vector).
    /// </summary>
    /// <remarks><code>UMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMULL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UMULL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned multiply long (vector).
    /// </summary>
    /// <remarks><code>UMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMULL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UMULL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned multiply long (vector).
    /// </summary>
    /// <remarks><code>UMULL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMULL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UMULL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned multiply long (vector, by element).
    /// </summary>
    /// <remarks><code>UMULL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMULL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_H.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.UMULL2(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Unsigned multiply long (vector, by element).
    /// </summary>
    /// <remarks><code>UMULL2 Vd.Ta, Vn.Tb, Vm.Ts[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL2_asimdelem_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMULL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_S.Indexed Vm_Ts)
         => AddInstruction(Arm64InstructionFactory.UMULL2(Vd_Ta, Vn_Tb, Vm_Ts));
    /// <summary>
    /// Unsigned multiply long (vector).
    /// </summary>
    /// <remarks><code>UMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMULL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UMULL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned multiply long (vector).
    /// </summary>
    /// <remarks><code>UMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMULL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UMULL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned multiply long (vector).
    /// </summary>
    /// <remarks><code>UMULL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UMULL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UMULL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.UMULL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned saturating add.
    /// </summary>
    /// <remarks><code>UQADD Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQADD_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQADD(Arm64RegisterB Vd, Arm64RegisterB Vn, Arm64RegisterB Vm)
         => AddInstruction(Arm64InstructionFactory.UQADD(Vd, Vn, Vm));
    /// <summary>
    /// Unsigned saturating add.
    /// </summary>
    /// <remarks><code>UQADD Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQADD_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQADD(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterH Vm)
         => AddInstruction(Arm64InstructionFactory.UQADD(Vd, Vn, Vm));
    /// <summary>
    /// Unsigned saturating add.
    /// </summary>
    /// <remarks><code>UQADD Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQADD_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQADD(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
         => AddInstruction(Arm64InstructionFactory.UQADD(Vd, Vn, Vm));
    /// <summary>
    /// Unsigned saturating add.
    /// </summary>
    /// <remarks><code>UQADD Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQADD_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQADD(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
         => AddInstruction(Arm64InstructionFactory.UQADD(Vd, Vn, Vm));
    /// <summary>
    /// Unsigned saturating add.
    /// </summary>
    /// <remarks><code>UQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQADD(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating add.
    /// </summary>
    /// <remarks><code>UQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQADD(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating add.
    /// </summary>
    /// <remarks><code>UQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQADD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating add.
    /// </summary>
    /// <remarks><code>UQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQADD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating add.
    /// </summary>
    /// <remarks><code>UQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQADD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating add.
    /// </summary>
    /// <remarks><code>UQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQADD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating add.
    /// </summary>
    /// <remarks><code>UQADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQADD(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>UQRSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQRSHL(Arm64RegisterB Vd, Arm64RegisterB Vn, Arm64RegisterB Vm)
         => AddInstruction(Arm64InstructionFactory.UQRSHL(Vd, Vn, Vm));
    /// <summary>
    /// Unsigned saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>UQRSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQRSHL(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterH Vm)
         => AddInstruction(Arm64InstructionFactory.UQRSHL(Vd, Vn, Vm));
    /// <summary>
    /// Unsigned saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>UQRSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQRSHL(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
         => AddInstruction(Arm64InstructionFactory.UQRSHL(Vd, Vn, Vm));
    /// <summary>
    /// Unsigned saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>UQRSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQRSHL(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
         => AddInstruction(Arm64InstructionFactory.UQRSHL(Vd, Vn, Vm));
    /// <summary>
    /// Unsigned saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>UQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQRSHL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQRSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>UQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQRSHL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQRSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>UQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQRSHL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQRSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>UQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQRSHL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQRSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>UQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQRSHL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQRSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>UQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQRSHL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQRSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating rounding shift left (register).
    /// </summary>
    /// <remarks><code>UQRSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQRSHL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQRSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQRSHRN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHRN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQRSHRN(Arm64RegisterB Vbd, Arm64RegisterH Van, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQRSHRN(Vbd, Van, shift));
    /// <summary>
    /// Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQRSHRN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHRN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQRSHRN(Arm64RegisterH Vbd, Arm64RegisterS Van, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQRSHRN(Vbd, Van, shift));
    /// <summary>
    /// Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQRSHRN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHRN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQRSHRN(Arm64RegisterS Vbd, Arm64RegisterD Van, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQRSHRN(Vbd, Van, shift));
    /// <summary>
    /// Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQRSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQRSHRN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQRSHRN(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQRSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQRSHRN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQRSHRN(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQRSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQRSHRN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQRSHRN(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQRSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQRSHRN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQRSHRN2(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQRSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQRSHRN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQRSHRN2(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Unsigned saturating rounded shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQRSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQRSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQRSHRN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQRSHRN2(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Unsigned saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>UQSHL Vd, Vn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHL(Arm64RegisterB Vd, Arm64RegisterB Vn, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQSHL(Vd, Vn, shift));
    /// <summary>
    /// Unsigned saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>UQSHL Vd, Vn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHL(Arm64RegisterH Vd, Arm64RegisterH Vn, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQSHL(Vd, Vn, shift));
    /// <summary>
    /// Unsigned saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>UQSHL Vd, Vn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHL(Arm64RegisterS Vd, Arm64RegisterS Vn, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQSHL(Vd, Vn, shift));
    /// <summary>
    /// Unsigned saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>UQSHL Vd, Vn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHL(Arm64RegisterD Vd, Arm64RegisterD Vn, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQSHL(Vd, Vn, shift));
    /// <summary>
    /// Unsigned saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQSHL(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQSHL(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQSHL(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQSHL(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQSHL(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQSHL(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned saturating shift left (immediate).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQSHL(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned saturating shift left (register).
    /// </summary>
    /// <remarks><code>UQSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHL(Arm64RegisterB Vd, Arm64RegisterB Vn, Arm64RegisterB Vm)
         => AddInstruction(Arm64InstructionFactory.UQSHL(Vd, Vn, Vm));
    /// <summary>
    /// Unsigned saturating shift left (register).
    /// </summary>
    /// <remarks><code>UQSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHL(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterH Vm)
         => AddInstruction(Arm64InstructionFactory.UQSHL(Vd, Vn, Vm));
    /// <summary>
    /// Unsigned saturating shift left (register).
    /// </summary>
    /// <remarks><code>UQSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHL(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
         => AddInstruction(Arm64InstructionFactory.UQSHL(Vd, Vn, Vm));
    /// <summary>
    /// Unsigned saturating shift left (register).
    /// </summary>
    /// <remarks><code>UQSHL Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHL(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
         => AddInstruction(Arm64InstructionFactory.UQSHL(Vd, Vn, Vm));
    /// <summary>
    /// Unsigned saturating shift left (register).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating shift left (register).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating shift left (register).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating shift left (register).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating shift left (register).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating shift left (register).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating shift left (register).
    /// </summary>
    /// <remarks><code>UQSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQSHRN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHRN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHRN(Arm64RegisterB Vbd, Arm64RegisterH Van, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQSHRN(Vbd, Van, shift));
    /// <summary>
    /// Unsigned saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQSHRN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHRN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHRN(Arm64RegisterH Vbd, Arm64RegisterS Van, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQSHRN(Vbd, Van, shift));
    /// <summary>
    /// Unsigned saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQSHRN Vbd, Van, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHRN_asisdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHRN(Arm64RegisterS Vbd, Arm64RegisterD Van, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQSHRN(Vbd, Van, shift));
    /// <summary>
    /// Unsigned saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHRN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQSHRN(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Unsigned saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHRN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQSHRN(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Unsigned saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQSHRN Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHRN_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHRN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQSHRN(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Unsigned saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHRN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQSHRN2(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Unsigned saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHRN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQSHRN2(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Unsigned saturating shift right narrow (immediate).
    /// </summary>
    /// <remarks><code>UQSHRN2 Vd.Tb, Vn.Ta, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSHRN2_asimdshf_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSHRN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta, byte shift)
         => AddInstruction(Arm64InstructionFactory.UQSHRN2(Vd_Tb, Vn_Ta, shift));
    /// <summary>
    /// Unsigned saturating subtract.
    /// </summary>
    /// <remarks><code>UQSUB Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSUB_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSUB(Arm64RegisterB Vd, Arm64RegisterB Vn, Arm64RegisterB Vm)
         => AddInstruction(Arm64InstructionFactory.UQSUB(Vd, Vn, Vm));
    /// <summary>
    /// Unsigned saturating subtract.
    /// </summary>
    /// <remarks><code>UQSUB Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSUB_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSUB(Arm64RegisterH Vd, Arm64RegisterH Vn, Arm64RegisterH Vm)
         => AddInstruction(Arm64InstructionFactory.UQSUB(Vd, Vn, Vm));
    /// <summary>
    /// Unsigned saturating subtract.
    /// </summary>
    /// <remarks><code>UQSUB Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSUB_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSUB(Arm64RegisterS Vd, Arm64RegisterS Vn, Arm64RegisterS Vm)
         => AddInstruction(Arm64InstructionFactory.UQSUB(Vd, Vn, Vm));
    /// <summary>
    /// Unsigned saturating subtract.
    /// </summary>
    /// <remarks><code>UQSUB Vd, Vn, Vm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSUB_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSUB(Arm64RegisterD Vd, Arm64RegisterD Vn, Arm64RegisterD Vm)
         => AddInstruction(Arm64InstructionFactory.UQSUB(Vd, Vn, Vm));
    /// <summary>
    /// Unsigned saturating subtract.
    /// </summary>
    /// <remarks><code>UQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSUB(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating subtract.
    /// </summary>
    /// <remarks><code>UQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSUB(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating subtract.
    /// </summary>
    /// <remarks><code>UQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSUB(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating subtract.
    /// </summary>
    /// <remarks><code>UQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSUB(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating subtract.
    /// </summary>
    /// <remarks><code>UQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSUB(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating subtract.
    /// </summary>
    /// <remarks><code>UQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSUB(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating subtract.
    /// </summary>
    /// <remarks><code>UQSUB Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQSUB_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQSUB(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.UQSUB(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned saturating extract narrow.
    /// </summary>
    /// <remarks><code>UQXTN Vbd, Van</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQXTN_asisdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQXTN(Arm64RegisterB Vbd, Arm64RegisterH Van)
         => AddInstruction(Arm64InstructionFactory.UQXTN(Vbd, Van));
    /// <summary>
    /// Unsigned saturating extract narrow.
    /// </summary>
    /// <remarks><code>UQXTN Vbd, Van</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQXTN_asisdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQXTN(Arm64RegisterH Vbd, Arm64RegisterS Van)
         => AddInstruction(Arm64InstructionFactory.UQXTN(Vbd, Van));
    /// <summary>
    /// Unsigned saturating extract narrow.
    /// </summary>
    /// <remarks><code>UQXTN Vbd, Van</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQXTN_asisdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQXTN(Arm64RegisterS Vbd, Arm64RegisterD Van)
         => AddInstruction(Arm64InstructionFactory.UQXTN(Vbd, Van));
    /// <summary>
    /// Unsigned saturating extract narrow.
    /// </summary>
    /// <remarks><code>UQXTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQXTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQXTN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.UQXTN(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Unsigned saturating extract narrow.
    /// </summary>
    /// <remarks><code>UQXTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQXTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQXTN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.UQXTN(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Unsigned saturating extract narrow.
    /// </summary>
    /// <remarks><code>UQXTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQXTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQXTN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.UQXTN(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Unsigned saturating extract narrow.
    /// </summary>
    /// <remarks><code>UQXTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQXTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQXTN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.UQXTN2(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Unsigned saturating extract narrow.
    /// </summary>
    /// <remarks><code>UQXTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQXTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQXTN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.UQXTN2(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Unsigned saturating extract narrow.
    /// </summary>
    /// <remarks><code>UQXTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UQXTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UQXTN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.UQXTN2(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Unsigned reciprocal estimate.
    /// </summary>
    /// <remarks><code>URECPE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URECPE_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URECPE(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.URECPE(Vd_T, Vn_T));
    /// <summary>
    /// Unsigned reciprocal estimate.
    /// </summary>
    /// <remarks><code>URECPE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URECPE_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URECPE(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.URECPE(Vd_T, Vn_T));
    /// <summary>
    /// Unsigned rounding halving add.
    /// </summary>
    /// <remarks><code>URHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URHADD(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.URHADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned rounding halving add.
    /// </summary>
    /// <remarks><code>URHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URHADD(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.URHADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned rounding halving add.
    /// </summary>
    /// <remarks><code>URHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URHADD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.URHADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned rounding halving add.
    /// </summary>
    /// <remarks><code>URHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URHADD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.URHADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned rounding halving add.
    /// </summary>
    /// <remarks><code>URHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URHADD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.URHADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned rounding halving add.
    /// </summary>
    /// <remarks><code>URHADD Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URHADD_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URHADD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.URHADD(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned rounding shift left (register).
    /// </summary>
    /// <remarks><code>URSHL Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSHL(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
         => AddInstruction(Arm64InstructionFactory.URSHL(Dd, Dn, Dm));
    /// <summary>
    /// Unsigned rounding shift left (register).
    /// </summary>
    /// <remarks><code>URSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSHL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.URSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned rounding shift left (register).
    /// </summary>
    /// <remarks><code>URSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSHL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.URSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned rounding shift left (register).
    /// </summary>
    /// <remarks><code>URSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSHL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.URSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned rounding shift left (register).
    /// </summary>
    /// <remarks><code>URSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSHL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.URSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned rounding shift left (register).
    /// </summary>
    /// <remarks><code>URSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSHL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.URSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned rounding shift left (register).
    /// </summary>
    /// <remarks><code>URSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSHL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.URSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned rounding shift left (register).
    /// </summary>
    /// <remarks><code>URSHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSHL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.URSHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>URSHR Dd, Dn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHR_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSHR(Arm64RegisterD Dd, Arm64RegisterD Dn, uint shift)
         => AddInstruction(Arm64InstructionFactory.URSHR(Dd, Dn, shift));
    /// <summary>
    /// Unsigned rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>URSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSHR(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.URSHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>URSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSHR(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.URSHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>URSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSHR(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.URSHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>URSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSHR(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.URSHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>URSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSHR(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.URSHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>URSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSHR(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.URSHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned rounding shift right (immediate).
    /// </summary>
    /// <remarks><code>URSHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSHR(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.URSHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned reciprocal square root estimate.
    /// </summary>
    /// <remarks><code>URSQRTE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSQRTE_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSQRTE(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.URSQRTE(Vd_T, Vn_T));
    /// <summary>
    /// Unsigned reciprocal square root estimate.
    /// </summary>
    /// <remarks><code>URSQRTE Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSQRTE_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSQRTE(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.URSQRTE(Vd_T, Vn_T));
    /// <summary>
    /// Unsigned rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>URSRA Dd, Dn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSRA_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSRA(Arm64RegisterD Dd, Arm64RegisterD Dn, uint shift)
         => AddInstruction(Arm64InstructionFactory.URSRA(Dd, Dn, shift));
    /// <summary>
    /// Unsigned rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>URSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSRA(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.URSRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>URSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSRA(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.URSRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>URSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSRA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.URSRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>URSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSRA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.URSRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>URSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSRA(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.URSRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>URSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSRA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.URSRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned rounding shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>URSRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.URSRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void URSRA(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.URSRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Dot product with unsigned and signed integers (vector, by element).
    /// </summary>
    /// <remarks><code>USDOT Vd.Ta, Vn.Tb, Vm.4B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USDOT_asimdelem_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USDOT(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_4B.Indexed Vm_4B)
         => AddInstruction(Arm64InstructionFactory.USDOT(Vd_Ta, Vn_Tb, Vm_4B));
    /// <summary>
    /// Dot product with unsigned and signed integers (vector, by element).
    /// </summary>
    /// <remarks><code>USDOT Vd.Ta, Vn.Tb, Vm.4B[index]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USDOT_asimdelem_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USDOT(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_4B.Indexed Vm_4B)
         => AddInstruction(Arm64InstructionFactory.USDOT(Vd_Ta, Vn_Tb, Vm_4B));
    /// <summary>
    /// Dot product with unsigned and signed integers (vector).
    /// </summary>
    /// <remarks><code>USDOT Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USDOT_asimdsame2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USDOT(Arm64RegisterV_2S Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.USDOT(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Dot product with unsigned and signed integers (vector).
    /// </summary>
    /// <remarks><code>USDOT Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USDOT_asimdsame2_d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USDOT(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.USDOT(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned shift left (register).
    /// </summary>
    /// <remarks><code>USHL Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHL_asisdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USHL(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
         => AddInstruction(Arm64InstructionFactory.USHL(Dd, Dn, Dm));
    /// <summary>
    /// Unsigned shift left (register).
    /// </summary>
    /// <remarks><code>USHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USHL(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.USHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned shift left (register).
    /// </summary>
    /// <remarks><code>USHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USHL(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.USHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned shift left (register).
    /// </summary>
    /// <remarks><code>USHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USHL(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.USHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned shift left (register).
    /// </summary>
    /// <remarks><code>USHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USHL(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.USHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned shift left (register).
    /// </summary>
    /// <remarks><code>USHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USHL(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.USHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned shift left (register).
    /// </summary>
    /// <remarks><code>USHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USHL(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.USHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned shift left (register).
    /// </summary>
    /// <remarks><code>USHL Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHL_asimdsame_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USHL(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.USHL(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unsigned shift left long (immediate).
    /// </summary>
    /// <remarks><code>USHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHLL_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USHLL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, byte shift)
         => AddInstruction(Arm64InstructionFactory.USHLL(Vd_Ta, Vn_Tb, shift));
    /// <summary>
    /// Unsigned shift left long (immediate).
    /// </summary>
    /// <remarks><code>USHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHLL_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USHLL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, byte shift)
         => AddInstruction(Arm64InstructionFactory.USHLL(Vd_Ta, Vn_Tb, shift));
    /// <summary>
    /// Unsigned shift left long (immediate).
    /// </summary>
    /// <remarks><code>USHLL Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHLL_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USHLL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, byte shift)
         => AddInstruction(Arm64InstructionFactory.USHLL(Vd_Ta, Vn_Tb, shift));
    /// <summary>
    /// Unsigned shift left long (immediate).
    /// </summary>
    /// <remarks><code>USHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHLL2_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USHLL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, byte shift)
         => AddInstruction(Arm64InstructionFactory.USHLL2(Vd_Ta, Vn_Tb, shift));
    /// <summary>
    /// Unsigned shift left long (immediate).
    /// </summary>
    /// <remarks><code>USHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHLL2_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USHLL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, byte shift)
         => AddInstruction(Arm64InstructionFactory.USHLL2(Vd_Ta, Vn_Tb, shift));
    /// <summary>
    /// Unsigned shift left long (immediate).
    /// </summary>
    /// <remarks><code>USHLL2 Vd.Ta, Vn.Tb, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHLL2_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USHLL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, byte shift)
         => AddInstruction(Arm64InstructionFactory.USHLL2(Vd_Ta, Vn_Tb, shift));
    /// <summary>
    /// Unsigned shift right (immediate).
    /// </summary>
    /// <remarks><code>USHR Dd, Dn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHR_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USHR(Arm64RegisterD Dd, Arm64RegisterD Dn, uint shift)
         => AddInstruction(Arm64InstructionFactory.USHR(Dd, Dn, shift));
    /// <summary>
    /// Unsigned shift right (immediate).
    /// </summary>
    /// <remarks><code>USHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USHR(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.USHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned shift right (immediate).
    /// </summary>
    /// <remarks><code>USHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USHR(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.USHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned shift right (immediate).
    /// </summary>
    /// <remarks><code>USHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USHR(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.USHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned shift right (immediate).
    /// </summary>
    /// <remarks><code>USHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USHR(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.USHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned shift right (immediate).
    /// </summary>
    /// <remarks><code>USHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USHR(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.USHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned shift right (immediate).
    /// </summary>
    /// <remarks><code>USHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USHR(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.USHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned shift right (immediate).
    /// </summary>
    /// <remarks><code>USHR Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USHR_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USHR(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.USHR(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned and signed 8-bit integer matrix multiply-accumulate (vector).
    /// </summary>
    /// <remarks><code>USMMLA Vd.4S, Vn.16B, Vm.16B</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USMMLA_asimdsame2_g), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USMMLA(Arm64RegisterV_4S Vd_4S, Arm64RegisterV_16B Vn_16B, Arm64RegisterV_16B Vm_16B)
         => AddInstruction(Arm64InstructionFactory.USMMLA(Vd_4S, Vn_16B, Vm_16B));
    /// <summary>
    /// Unsigned saturating accumulate of signed value.
    /// </summary>
    /// <remarks><code>USQADD Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USQADD_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USQADD(Arm64RegisterB Vd, Arm64RegisterB Vn)
         => AddInstruction(Arm64InstructionFactory.USQADD(Vd, Vn));
    /// <summary>
    /// Unsigned saturating accumulate of signed value.
    /// </summary>
    /// <remarks><code>USQADD Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USQADD_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USQADD(Arm64RegisterH Vd, Arm64RegisterH Vn)
         => AddInstruction(Arm64InstructionFactory.USQADD(Vd, Vn));
    /// <summary>
    /// Unsigned saturating accumulate of signed value.
    /// </summary>
    /// <remarks><code>USQADD Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USQADD_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USQADD(Arm64RegisterS Vd, Arm64RegisterS Vn)
         => AddInstruction(Arm64InstructionFactory.USQADD(Vd, Vn));
    /// <summary>
    /// Unsigned saturating accumulate of signed value.
    /// </summary>
    /// <remarks><code>USQADD Vd, Vn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USQADD_asisdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USQADD(Arm64RegisterD Vd, Arm64RegisterD Vn)
         => AddInstruction(Arm64InstructionFactory.USQADD(Vd, Vn));
    /// <summary>
    /// Unsigned saturating accumulate of signed value.
    /// </summary>
    /// <remarks><code>USQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USQADD(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T)
         => AddInstruction(Arm64InstructionFactory.USQADD(Vd_T, Vn_T));
    /// <summary>
    /// Unsigned saturating accumulate of signed value.
    /// </summary>
    /// <remarks><code>USQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USQADD(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T)
         => AddInstruction(Arm64InstructionFactory.USQADD(Vd_T, Vn_T));
    /// <summary>
    /// Unsigned saturating accumulate of signed value.
    /// </summary>
    /// <remarks><code>USQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USQADD(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T)
         => AddInstruction(Arm64InstructionFactory.USQADD(Vd_T, Vn_T));
    /// <summary>
    /// Unsigned saturating accumulate of signed value.
    /// </summary>
    /// <remarks><code>USQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USQADD(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T)
         => AddInstruction(Arm64InstructionFactory.USQADD(Vd_T, Vn_T));
    /// <summary>
    /// Unsigned saturating accumulate of signed value.
    /// </summary>
    /// <remarks><code>USQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USQADD(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T)
         => AddInstruction(Arm64InstructionFactory.USQADD(Vd_T, Vn_T));
    /// <summary>
    /// Unsigned saturating accumulate of signed value.
    /// </summary>
    /// <remarks><code>USQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USQADD(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T)
         => AddInstruction(Arm64InstructionFactory.USQADD(Vd_T, Vn_T));
    /// <summary>
    /// Unsigned saturating accumulate of signed value.
    /// </summary>
    /// <remarks><code>USQADD Vd.T, Vn.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USQADD_asimdmisc_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USQADD(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T)
         => AddInstruction(Arm64InstructionFactory.USQADD(Vd_T, Vn_T));
    /// <summary>
    /// Unsigned shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>USRA Dd, Dn, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USRA_asisdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USRA(Arm64RegisterD Dd, Arm64RegisterD Dn, uint shift)
         => AddInstruction(Arm64InstructionFactory.USRA(Dd, Dn, shift));
    /// <summary>
    /// Unsigned shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>USRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USRA(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.USRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>USRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USRA(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.USRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>USRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USRA(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.USRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>USRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USRA(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.USRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>USRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USRA(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.USRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>USRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USRA(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.USRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned shift right and accumulate (immediate).
    /// </summary>
    /// <remarks><code>USRA Vd.T, Vn.T, #shift</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USRA_asimdshf_r), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USRA(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, byte shift)
         => AddInstruction(Arm64InstructionFactory.USRA(Vd_T, Vn_T, shift));
    /// <summary>
    /// Unsigned subtract long.
    /// </summary>
    /// <remarks><code>USUBL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USUBL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb, Arm64RegisterV_8B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.USUBL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned subtract long.
    /// </summary>
    /// <remarks><code>USUBL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USUBL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.USUBL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned subtract long.
    /// </summary>
    /// <remarks><code>USUBL Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBL_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USUBL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb, Arm64RegisterV_2S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.USUBL(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned subtract long.
    /// </summary>
    /// <remarks><code>USUBL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USUBL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb, Arm64RegisterV_16B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.USUBL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned subtract long.
    /// </summary>
    /// <remarks><code>USUBL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USUBL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb, Arm64RegisterV_8H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.USUBL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned subtract long.
    /// </summary>
    /// <remarks><code>USUBL2 Vd.Ta, Vn.Tb, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBL2_asimddiff_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USUBL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb, Arm64RegisterV_4S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.USUBL2(Vd_Ta, Vn_Tb, Vm_Tb));
    /// <summary>
    /// Unsigned subtract wide.
    /// </summary>
    /// <remarks><code>USUBW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USUBW(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_8B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.USUBW(Vd_Ta, Vn_Ta, Vm_Tb));
    /// <summary>
    /// Unsigned subtract wide.
    /// </summary>
    /// <remarks><code>USUBW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USUBW(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_4H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.USUBW(Vd_Ta, Vn_Ta, Vm_Tb));
    /// <summary>
    /// Unsigned subtract wide.
    /// </summary>
    /// <remarks><code>USUBW Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBW_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USUBW(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_2S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.USUBW(Vd_Ta, Vn_Ta, Vm_Tb));
    /// <summary>
    /// Unsigned subtract wide.
    /// </summary>
    /// <remarks><code>USUBW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USUBW2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8H Vn_Ta, Arm64RegisterV_16B Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.USUBW2(Vd_Ta, Vn_Ta, Vm_Tb));
    /// <summary>
    /// Unsigned subtract wide.
    /// </summary>
    /// <remarks><code>USUBW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USUBW2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4S Vn_Ta, Arm64RegisterV_8H Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.USUBW2(Vd_Ta, Vn_Ta, Vm_Tb));
    /// <summary>
    /// Unsigned subtract wide.
    /// </summary>
    /// <remarks><code>USUBW2 Vd.Ta, Vn.Ta, Vm.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.USUBW2_asimddiff_w), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void USUBW2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2D Vn_Ta, Arm64RegisterV_4S Vm_Tb)
         => AddInstruction(Arm64InstructionFactory.USUBW2(Vd_Ta, Vn_Ta, Vm_Tb));
    /// <summary>
    /// Unsigned extend long.
    /// </summary>
    /// <remarks><code>UXTL Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UXTL_ushll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UXTL(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_8B Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.UXTL(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Unsigned extend long.
    /// </summary>
    /// <remarks><code>UXTL Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UXTL_ushll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UXTL(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_4H Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.UXTL(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Unsigned extend long.
    /// </summary>
    /// <remarks><code>UXTL Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UXTL_ushll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UXTL(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_2S Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.UXTL(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Unsigned extend long.
    /// </summary>
    /// <remarks><code>UXTL2 Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UXTL2_ushll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UXTL2(Arm64RegisterV_8H Vd_Ta, Arm64RegisterV_16B Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.UXTL2(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Unsigned extend long.
    /// </summary>
    /// <remarks><code>UXTL2 Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UXTL2_ushll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UXTL2(Arm64RegisterV_4S Vd_Ta, Arm64RegisterV_8H Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.UXTL2(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Unsigned extend long.
    /// </summary>
    /// <remarks><code>UXTL2 Vd.Ta, Vn.Tb</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UXTL2_ushll_asimdshf_l), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UXTL2(Arm64RegisterV_2D Vd_Ta, Arm64RegisterV_4S Vn_Tb)
         => AddInstruction(Arm64InstructionFactory.UXTL2(Vd_Ta, Vn_Tb));
    /// <summary>
    /// Unzip vectors (primary).
    /// </summary>
    /// <remarks><code>UZP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UZP1(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UZP1(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unzip vectors (primary).
    /// </summary>
    /// <remarks><code>UZP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UZP1(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UZP1(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unzip vectors (primary).
    /// </summary>
    /// <remarks><code>UZP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UZP1(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UZP1(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unzip vectors (primary).
    /// </summary>
    /// <remarks><code>UZP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UZP1(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UZP1(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unzip vectors (primary).
    /// </summary>
    /// <remarks><code>UZP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UZP1(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UZP1(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unzip vectors (primary).
    /// </summary>
    /// <remarks><code>UZP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UZP1(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UZP1(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unzip vectors (primary).
    /// </summary>
    /// <remarks><code>UZP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UZP1(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.UZP1(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unzip vectors (secondary).
    /// </summary>
    /// <remarks><code>UZP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UZP2(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UZP2(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unzip vectors (secondary).
    /// </summary>
    /// <remarks><code>UZP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UZP2(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.UZP2(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unzip vectors (secondary).
    /// </summary>
    /// <remarks><code>UZP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UZP2(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UZP2(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unzip vectors (secondary).
    /// </summary>
    /// <remarks><code>UZP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UZP2(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.UZP2(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unzip vectors (secondary).
    /// </summary>
    /// <remarks><code>UZP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UZP2(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UZP2(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unzip vectors (secondary).
    /// </summary>
    /// <remarks><code>UZP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UZP2(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.UZP2(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Unzip vectors (secondary).
    /// </summary>
    /// <remarks><code>UZP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UZP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UZP2(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.UZP2(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Exclusive-OR and rotate.
    /// </summary>
    /// <remarks><code>XAR Vd.2D, Vn.2D, Vm.2D, #imm6</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.XAR_vvv2_crypto3_imm6), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void XAR(Arm64RegisterV_2D Vd_2D, Arm64RegisterV_2D Vn_2D, Arm64RegisterV_2D Vm_2D, byte imm6)
         => AddInstruction(Arm64InstructionFactory.XAR(Vd_2D, Vn_2D, Vm_2D, imm6));
    /// <summary>
    /// Extract narrow.
    /// </summary>
    /// <remarks><code>XTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.XTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void XTN(Arm64RegisterV_8B Vd_Tb, Arm64RegisterV_8H Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.XTN(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Extract narrow.
    /// </summary>
    /// <remarks><code>XTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.XTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void XTN(Arm64RegisterV_4H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.XTN(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Extract narrow.
    /// </summary>
    /// <remarks><code>XTN Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.XTN_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void XTN(Arm64RegisterV_2S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.XTN(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Extract narrow.
    /// </summary>
    /// <remarks><code>XTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.XTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void XTN2(Arm64RegisterV_16B Vd_Tb, Arm64RegisterV_8H Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.XTN2(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Extract narrow.
    /// </summary>
    /// <remarks><code>XTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.XTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void XTN2(Arm64RegisterV_8H Vd_Tb, Arm64RegisterV_4S Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.XTN2(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Extract narrow.
    /// </summary>
    /// <remarks><code>XTN2 Vd.Tb, Vn.Ta</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.XTN2_asimdmisc_n), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void XTN2(Arm64RegisterV_4S Vd_Tb, Arm64RegisterV_2D Vn_Ta)
         => AddInstruction(Arm64InstructionFactory.XTN2(Vd_Tb, Vn_Ta));
    /// <summary>
    /// Zip vectors (primary).
    /// </summary>
    /// <remarks><code>ZIP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ZIP1(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.ZIP1(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Zip vectors (primary).
    /// </summary>
    /// <remarks><code>ZIP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ZIP1(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.ZIP1(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Zip vectors (primary).
    /// </summary>
    /// <remarks><code>ZIP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ZIP1(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.ZIP1(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Zip vectors (primary).
    /// </summary>
    /// <remarks><code>ZIP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ZIP1(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.ZIP1(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Zip vectors (primary).
    /// </summary>
    /// <remarks><code>ZIP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ZIP1(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.ZIP1(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Zip vectors (primary).
    /// </summary>
    /// <remarks><code>ZIP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ZIP1(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.ZIP1(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Zip vectors (primary).
    /// </summary>
    /// <remarks><code>ZIP1 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP1_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ZIP1(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.ZIP1(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Zip vectors (secondary).
    /// </summary>
    /// <remarks><code>ZIP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ZIP2(Arm64RegisterV_8B Vd_T, Arm64RegisterV_8B Vn_T, Arm64RegisterV_8B Vm_T)
         => AddInstruction(Arm64InstructionFactory.ZIP2(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Zip vectors (secondary).
    /// </summary>
    /// <remarks><code>ZIP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ZIP2(Arm64RegisterV_16B Vd_T, Arm64RegisterV_16B Vn_T, Arm64RegisterV_16B Vm_T)
         => AddInstruction(Arm64InstructionFactory.ZIP2(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Zip vectors (secondary).
    /// </summary>
    /// <remarks><code>ZIP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ZIP2(Arm64RegisterV_4H Vd_T, Arm64RegisterV_4H Vn_T, Arm64RegisterV_4H Vm_T)
         => AddInstruction(Arm64InstructionFactory.ZIP2(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Zip vectors (secondary).
    /// </summary>
    /// <remarks><code>ZIP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ZIP2(Arm64RegisterV_8H Vd_T, Arm64RegisterV_8H Vn_T, Arm64RegisterV_8H Vm_T)
         => AddInstruction(Arm64InstructionFactory.ZIP2(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Zip vectors (secondary).
    /// </summary>
    /// <remarks><code>ZIP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ZIP2(Arm64RegisterV_2S Vd_T, Arm64RegisterV_2S Vn_T, Arm64RegisterV_2S Vm_T)
         => AddInstruction(Arm64InstructionFactory.ZIP2(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Zip vectors (secondary).
    /// </summary>
    /// <remarks><code>ZIP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ZIP2(Arm64RegisterV_4S Vd_T, Arm64RegisterV_4S Vn_T, Arm64RegisterV_4S Vm_T)
         => AddInstruction(Arm64InstructionFactory.ZIP2(Vd_T, Vn_T, Vm_T));
    /// <summary>
    /// Zip vectors (secondary).
    /// </summary>
    /// <remarks><code>ZIP2 Vd.T, Vn.T, Vm.T</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.ZIP2_asimdperm_only), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ZIP2(Arm64RegisterV_2D Vd_T, Arm64RegisterV_2D Vn_T, Arm64RegisterV_2D Vm_T)
         => AddInstruction(Arm64InstructionFactory.ZIP2(Vd_T, Vn_T, Vm_T));
}
