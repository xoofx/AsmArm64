// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

namespace AsmArm64;

/// <summary>
/// Decode dynamic register from raw instruction.
/// </summary>
static class Arm64DynamicRegisterHelper
{
    public static bool TryDecode(Arm64RawInstruction rawValue, byte dynamicSelectorIndex, out Arm64RegisterEncodingKind registerEncodingKind)
    {
        switch (dynamicSelectorIndex)
        {
            case 1:
            {
                var bitValues = (rawValue >> 22) & 0x1;
                switch (bitValues)
                {
                    case 0:
                        registerEncodingKind = Arm64RegisterEncodingKind.S;
                        return true;
                    case 1:
                        registerEncodingKind = Arm64RegisterEncodingKind.D;
                        return true;
                }
                break;
            }
            case 2:
            {
                var bitValues = (rawValue >> 31) & 0x1;
                switch (bitValues)
                {
                    case 0:
                        registerEncodingKind = Arm64RegisterEncodingKind.W;
                        return true;
                    case 1:
                        registerEncodingKind = Arm64RegisterEncodingKind.X;
                        return true;
                }
                break;
            }
            case 3:
            {
                var bitValues = (rawValue >> 22) & 0x3;
                switch (bitValues)
                {
                    case 0:
                        registerEncodingKind = Arm64RegisterEncodingKind.B;
                        return true;
                    case 1:
                        registerEncodingKind = Arm64RegisterEncodingKind.H;
                        return true;
                    case 2:
                        registerEncodingKind = Arm64RegisterEncodingKind.S;
                        return true;
                    case 3:
                        registerEncodingKind = Arm64RegisterEncodingKind.D;
                        return true;
                }
                break;
            }
            case 4:
            {
                var bitValues = (rawValue >> 22) & 0x3;
                switch (bitValues)
                {
                    case 0:
                        registerEncodingKind = Arm64RegisterEncodingKind.B;
                        return true;
                    case 1:
                        registerEncodingKind = Arm64RegisterEncodingKind.H;
                        return true;
                    case 2:
                        registerEncodingKind = Arm64RegisterEncodingKind.S;
                        return true;
                }
                break;
            }
            case 5:
            {
                var bitValues = (rawValue >> 22) & 0x3;
                switch (bitValues)
                {
                    case 0:
                        registerEncodingKind = Arm64RegisterEncodingKind.H;
                        return true;
                    case 1:
                        registerEncodingKind = Arm64RegisterEncodingKind.S;
                        return true;
                    case 2:
                        registerEncodingKind = Arm64RegisterEncodingKind.D;
                        return true;
                }
                break;
            }
            case 6:
            {
                var bitValues = (rawValue >> 22) & 0x3;
                switch (bitValues)
                {
                    case 1:
                        registerEncodingKind = Arm64RegisterEncodingKind.H;
                        return true;
                    case 2:
                        registerEncodingKind = Arm64RegisterEncodingKind.S;
                        return true;
                }
                break;
            }
            case 7:
            {
                var bitValues = (rawValue >> 22) & 0x3;
                switch (bitValues)
                {
                    case 1:
                        registerEncodingKind = Arm64RegisterEncodingKind.S;
                        return true;
                    case 2:
                        registerEncodingKind = Arm64RegisterEncodingKind.D;
                        return true;
                }
                break;
            }
            case 8:
            {
                var bitValues = (rawValue >> 13) & 0x7;
                if (bitValues == 2)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.W;
                    return true;
                }
                if (bitValues == 6)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.W;
                    return true;
                }
                if ((bitValues & 0x6) == 0)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.W;
                    return true;
                }
                if ((bitValues & 0x3) == 3)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.X;
                    return true;
                }
                if ((bitValues & 0x6) == 4)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.W;
                    return true;
                }
                break;
            }
            case 9:
            {
                var bitValues = (rawValue >> 19) & 0xF;
                if (bitValues == 1)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.B;
                    return true;
                }
                if ((bitValues & 0xe) == 2)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.H;
                    return true;
                }
                if ((bitValues & 0xc) == 4)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.S;
                    return true;
                }
                if ((bitValues & 0x8) == 8)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.D;
                    return true;
                }
                break;
            }
            case 10:
            {
                var bitValues = (rawValue >> 19) & 0xF;
                if (bitValues == 1)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.B;
                    return true;
                }
                if ((bitValues & 0xe) == 2)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.H;
                    return true;
                }
                if ((bitValues & 0xc) == 4)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.S;
                    return true;
                }
                break;
            }
            case 11:
            {
                var bitValues = (rawValue >> 19) & 0xF;
                if (bitValues == 1)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.H;
                    return true;
                }
                if ((bitValues & 0xe) == 2)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.S;
                    return true;
                }
                if ((bitValues & 0xc) == 4)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.D;
                    return true;
                }
                break;
            }
            case 12:
            {
                var bitValues = (rawValue >> 19) & 0xF;
                if ((bitValues & 0xe) == 2)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.H;
                    return true;
                }
                if ((bitValues & 0xc) == 4)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.S;
                    return true;
                }
                if ((bitValues & 0x8) == 8)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.D;
                    return true;
                }
                break;
            }
            case 13:
            {
                var bitValues = (rawValue >> 16) & 0x1F;
                if ((bitValues & 0xf) == 8)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.D;
                    return true;
                }
                if ((bitValues & 0x7) == 4)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.S;
                    return true;
                }
                if ((bitValues & 0x3) == 2)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.H;
                    return true;
                }
                if ((bitValues & 0x1) == 1)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.B;
                    return true;
                }
                break;
            }
            case 14:
            {
                var bitValues = (rawValue >> 16) & 0x1F;
                if ((bitValues & 0xf) == 8)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.X;
                    return true;
                }
                if ((bitValues & 0x7) == 4)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.W;
                    return true;
                }
                if ((bitValues & 0x3) == 2)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.W;
                    return true;
                }
                if ((bitValues & 0x1) == 1)
                {
                    registerEncodingKind = Arm64RegisterEncodingKind.W;
                    return true;
                }
                break;
            }
        }
        
        registerEncodingKind = Arm64RegisterEncodingKind.None;
        return false;
    }
}
