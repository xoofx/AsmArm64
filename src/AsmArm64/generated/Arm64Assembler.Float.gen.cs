// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
namespace AsmArm64;
partial class Arm64Assembler
{
    /// <summary>
    /// Floating-point convert from single-precision to BFloat16 format (scalar).
    /// </summary>
    /// <remarks><code>BFCVT Hd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.BFCVT_bs_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void BFCVT(Arm64RegisterH Hd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.BFCVT(Hd, Sn));
    /// <summary>
    /// Floating-point absolute value (scalar).
    /// </summary>
    /// <remarks><code>FABS Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABS_h_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FABS(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FABS(Hd, Hn));
    /// <summary>
    /// Floating-point absolute value (scalar).
    /// </summary>
    /// <remarks><code>FABS Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABS_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FABS(Arm64RegisterS Sd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FABS(Sd, Sn));
    /// <summary>
    /// Floating-point absolute value (scalar).
    /// </summary>
    /// <remarks><code>FABS Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FABS_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FABS(Arm64RegisterD Dd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FABS(Dd, Dn));
    /// <summary>
    /// Floating-point add (scalar).
    /// </summary>
    /// <remarks><code>FADD Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADD_h_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FADD(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
         => AddInstruction(Arm64InstructionFactory.FADD(Hd, Hn, Hm));
    /// <summary>
    /// Floating-point add (scalar).
    /// </summary>
    /// <remarks><code>FADD Sd, Sn, Sm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADD_s_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FADD(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm)
         => AddInstruction(Arm64InstructionFactory.FADD(Sd, Sn, Sm));
    /// <summary>
    /// Floating-point add (scalar).
    /// </summary>
    /// <remarks><code>FADD Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FADD_d_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FADD(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
         => AddInstruction(Arm64InstructionFactory.FADD(Dd, Dn, Dm));
    /// <summary>
    /// Floating-point conditional quiet compare (scalar).
    /// </summary>
    /// <remarks><code>FCCMP Hn, Hm, #nzcv, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCCMP_h_floatccmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCCMP(Arm64RegisterH Hn, Arm64RegisterH Hm, byte nzcv, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.FCCMP(Hn, Hm, nzcv, cond));
    /// <summary>
    /// Floating-point conditional quiet compare (scalar).
    /// </summary>
    /// <remarks><code>FCCMP Sn, Sm, #nzcv, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCCMP_s_floatccmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCCMP(Arm64RegisterS Sn, Arm64RegisterS Sm, byte nzcv, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.FCCMP(Sn, Sm, nzcv, cond));
    /// <summary>
    /// Floating-point conditional quiet compare (scalar).
    /// </summary>
    /// <remarks><code>FCCMP Dn, Dm, #nzcv, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCCMP_d_floatccmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCCMP(Arm64RegisterD Dn, Arm64RegisterD Dm, byte nzcv, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.FCCMP(Dn, Dm, nzcv, cond));
    /// <summary>
    /// Floating-point conditional signaling compare (scalar).
    /// </summary>
    /// <remarks><code>FCCMPE Hn, Hm, #nzcv, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCCMPE_h_floatccmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCCMPE(Arm64RegisterH Hn, Arm64RegisterH Hm, byte nzcv, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.FCCMPE(Hn, Hm, nzcv, cond));
    /// <summary>
    /// Floating-point conditional signaling compare (scalar).
    /// </summary>
    /// <remarks><code>FCCMPE Sn, Sm, #nzcv, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCCMPE_s_floatccmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCCMPE(Arm64RegisterS Sn, Arm64RegisterS Sm, byte nzcv, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.FCCMPE(Sn, Sm, nzcv, cond));
    /// <summary>
    /// Floating-point conditional signaling compare (scalar).
    /// </summary>
    /// <remarks><code>FCCMPE Dn, Dm, #nzcv, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCCMPE_d_floatccmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCCMPE(Arm64RegisterD Dn, Arm64RegisterD Dm, byte nzcv, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.FCCMPE(Dn, Dm, nzcv, cond));
    /// <summary>
    /// Floating-point quiet compare (scalar).
    /// </summary>
    /// <remarks><code>FCMP Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMP_h_floatcmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMP(Arm64RegisterH Hn, Arm64RegisterH Hm)
         => AddInstruction(Arm64InstructionFactory.FCMP(Hn, Hm));
    /// <summary>
    /// Floating-point quiet compare (scalar).
    /// </summary>
    /// <remarks><code>FCMP Hn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMP_hz_floatcmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMP(Arm64RegisterH Hn, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMP(Hn, zero));
    /// <summary>
    /// Floating-point quiet compare (scalar).
    /// </summary>
    /// <remarks><code>FCMP Sn, Sm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMP_s_floatcmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMP(Arm64RegisterS Sn, Arm64RegisterS Sm)
         => AddInstruction(Arm64InstructionFactory.FCMP(Sn, Sm));
    /// <summary>
    /// Floating-point quiet compare (scalar).
    /// </summary>
    /// <remarks><code>FCMP Sn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMP_sz_floatcmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMP(Arm64RegisterS Sn, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMP(Sn, zero));
    /// <summary>
    /// Floating-point quiet compare (scalar).
    /// </summary>
    /// <remarks><code>FCMP Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMP_d_floatcmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMP(Arm64RegisterD Dn, Arm64RegisterD Dm)
         => AddInstruction(Arm64InstructionFactory.FCMP(Dn, Dm));
    /// <summary>
    /// Floating-point quiet compare (scalar).
    /// </summary>
    /// <remarks><code>FCMP Dn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMP_dz_floatcmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMP(Arm64RegisterD Dn, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMP(Dn, zero));
    /// <summary>
    /// Floating-point signaling compare (scalar).
    /// </summary>
    /// <remarks><code>FCMPE Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMPE_h_floatcmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMPE(Arm64RegisterH Hn, Arm64RegisterH Hm)
         => AddInstruction(Arm64InstructionFactory.FCMPE(Hn, Hm));
    /// <summary>
    /// Floating-point signaling compare (scalar).
    /// </summary>
    /// <remarks><code>FCMPE Hn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMPE_hz_floatcmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMPE(Arm64RegisterH Hn, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMPE(Hn, zero));
    /// <summary>
    /// Floating-point signaling compare (scalar).
    /// </summary>
    /// <remarks><code>FCMPE Sn, Sm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMPE_s_floatcmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMPE(Arm64RegisterS Sn, Arm64RegisterS Sm)
         => AddInstruction(Arm64InstructionFactory.FCMPE(Sn, Sm));
    /// <summary>
    /// Floating-point signaling compare (scalar).
    /// </summary>
    /// <remarks><code>FCMPE Sn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMPE_sz_floatcmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMPE(Arm64RegisterS Sn, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMPE(Sn, zero));
    /// <summary>
    /// Floating-point signaling compare (scalar).
    /// </summary>
    /// <remarks><code>FCMPE Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMPE_d_floatcmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMPE(Arm64RegisterD Dn, Arm64RegisterD Dm)
         => AddInstruction(Arm64InstructionFactory.FCMPE(Dn, Dm));
    /// <summary>
    /// Floating-point signaling compare (scalar).
    /// </summary>
    /// <remarks><code>FCMPE Dn, #0.0</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCMPE_dz_floatcmp), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCMPE(Arm64RegisterD Dn, float zero = 0.0f)
         => AddInstruction(Arm64InstructionFactory.FCMPE(Dn, zero));
    /// <summary>
    /// Floating-point conditional select (scalar).
    /// </summary>
    /// <remarks><code>FCSEL Hd, Hn, Hm, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCSEL_h_floatsel), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCSEL(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.FCSEL(Hd, Hn, Hm, cond));
    /// <summary>
    /// Floating-point conditional select (scalar).
    /// </summary>
    /// <remarks><code>FCSEL Sd, Sn, Sm, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCSEL_s_floatsel), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCSEL(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.FCSEL(Sd, Sn, Sm, cond));
    /// <summary>
    /// Floating-point conditional select (scalar).
    /// </summary>
    /// <remarks><code>FCSEL Dd, Dn, Dm, cond</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCSEL_d_floatsel), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCSEL(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm, Arm64ConditionalKind cond)
         => AddInstruction(Arm64InstructionFactory.FCSEL(Dd, Dn, Dm, cond));
    /// <summary>
    /// Floating-point convert precision (scalar).
    /// </summary>
    /// <remarks><code>FCVT Sd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVT_sh_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVT(Arm64RegisterS Sd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVT(Sd, Hn));
    /// <summary>
    /// Floating-point convert precision (scalar).
    /// </summary>
    /// <remarks><code>FCVT Dd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVT_dh_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVT(Arm64RegisterD Dd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVT(Dd, Hn));
    /// <summary>
    /// Floating-point convert precision (scalar).
    /// </summary>
    /// <remarks><code>FCVT Hd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVT_hs_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVT(Arm64RegisterH Hd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVT(Hd, Sn));
    /// <summary>
    /// Floating-point convert precision (scalar).
    /// </summary>
    /// <remarks><code>FCVT Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVT_ds_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVT(Arm64RegisterD Dd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVT(Dd, Sn));
    /// <summary>
    /// Floating-point convert precision (scalar).
    /// </summary>
    /// <remarks><code>FCVT Hd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVT_hd_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVT(Arm64RegisterH Hd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVT(Hd, Dn));
    /// <summary>
    /// Floating-point convert precision (scalar).
    /// </summary>
    /// <remarks><code>FCVT Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVT_sd_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVT(Arm64RegisterS Sd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVT(Sd, Dn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTAS Sd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_sisd_32h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAS(Arm64RegisterS Sd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTAS(Sd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTAS Dd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_sisd_64h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAS(Arm64RegisterD Dd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTAS(Dd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTAS Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_sisd_64s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAS(Arm64RegisterD Dd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTAS(Dd, Sn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTAS Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_sisd_32d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAS(Arm64RegisterS Sd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTAS(Sd, Dn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FCVTAS Wd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_32h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAS(Arm64RegisterW Wd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTAS(Wd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FCVTAS Xd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_64h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAS(Arm64RegisterX Xd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTAS(Xd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FCVTAS Wd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_32s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAS(Arm64RegisterW Wd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTAS(Wd, Sn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FCVTAS Xd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_64s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAS(Arm64RegisterX Xd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTAS(Xd, Sn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FCVTAS Wd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_32d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAS(Arm64RegisterW Wd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTAS(Wd, Dn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FCVTAS Xd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAS_64d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAS(Arm64RegisterX Xd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTAS(Xd, Dn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTAU Sd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_sisd_32h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAU(Arm64RegisterS Sd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTAU(Sd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTAU Dd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_sisd_64h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAU(Arm64RegisterD Dd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTAU(Dd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTAU Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_sisd_64s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAU(Arm64RegisterD Dd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTAU(Dd, Sn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTAU Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_sisd_32d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAU(Arm64RegisterS Sd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTAU(Sd, Dn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FCVTAU Wd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_32h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAU(Arm64RegisterW Wd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTAU(Wd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FCVTAU Xd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_64h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAU(Arm64RegisterX Xd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTAU(Xd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FCVTAU Wd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_32s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAU(Arm64RegisterW Wd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTAU(Wd, Sn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FCVTAU Xd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_64s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAU(Arm64RegisterX Xd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTAU(Xd, Sn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FCVTAU Wd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_32d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAU(Arm64RegisterW Wd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTAU(Wd, Dn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FCVTAU Xd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTAU_64d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTAU(Arm64RegisterX Xd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTAU(Xd, Dn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTMS Sd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_sisd_32h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMS(Arm64RegisterS Sd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTMS(Sd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTMS Dd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_sisd_64h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMS(Arm64RegisterD Dd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTMS(Dd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTMS Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_sisd_64s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMS(Arm64RegisterD Dd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTMS(Dd, Sn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTMS Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_sisd_32d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMS(Arm64RegisterS Sd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTMS(Sd, Dn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTMS Wd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_32h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMS(Arm64RegisterW Wd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTMS(Wd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTMS Xd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_64h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMS(Arm64RegisterX Xd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTMS(Xd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTMS Wd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_32s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMS(Arm64RegisterW Wd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTMS(Wd, Sn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTMS Xd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_64s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMS(Arm64RegisterX Xd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTMS(Xd, Sn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTMS Wd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_32d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMS(Arm64RegisterW Wd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTMS(Wd, Dn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTMS Xd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMS_64d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMS(Arm64RegisterX Xd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTMS(Xd, Dn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTMU Sd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_sisd_32h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMU(Arm64RegisterS Sd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTMU(Sd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTMU Dd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_sisd_64h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMU(Arm64RegisterD Dd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTMU(Dd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTMU Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_sisd_64s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMU(Arm64RegisterD Dd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTMU(Dd, Sn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTMU Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_sisd_32d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMU(Arm64RegisterS Sd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTMU(Sd, Dn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTMU Wd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_32h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMU(Arm64RegisterW Wd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTMU(Wd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTMU Xd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_64h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMU(Arm64RegisterX Xd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTMU(Xd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTMU Wd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_32s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMU(Arm64RegisterW Wd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTMU(Wd, Sn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTMU Xd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_64s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMU(Arm64RegisterX Xd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTMU(Xd, Sn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTMU Wd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_32d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMU(Arm64RegisterW Wd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTMU(Wd, Dn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTMU Xd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTMU_64d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTMU(Arm64RegisterX Xd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTMU(Xd, Dn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTNS Sd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_sisd_32h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNS(Arm64RegisterS Sd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTNS(Sd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTNS Dd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_sisd_64h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNS(Arm64RegisterD Dd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTNS(Dd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTNS Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_sisd_64s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNS(Arm64RegisterD Dd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTNS(Dd, Sn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTNS Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_sisd_32d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNS(Arm64RegisterS Sd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTNS(Sd, Dn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FCVTNS Wd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_32h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNS(Arm64RegisterW Wd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTNS(Wd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FCVTNS Xd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_64h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNS(Arm64RegisterX Xd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTNS(Xd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FCVTNS Wd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_32s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNS(Arm64RegisterW Wd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTNS(Wd, Sn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FCVTNS Xd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_64s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNS(Arm64RegisterX Xd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTNS(Xd, Sn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FCVTNS Wd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_32d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNS(Arm64RegisterW Wd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTNS(Wd, Dn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FCVTNS Xd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNS_64d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNS(Arm64RegisterX Xd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTNS(Xd, Dn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTNU Sd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_sisd_32h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNU(Arm64RegisterS Sd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTNU(Sd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTNU Dd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_sisd_64h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNU(Arm64RegisterD Dd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTNU(Dd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTNU Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_sisd_64s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNU(Arm64RegisterD Dd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTNU(Dd, Sn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTNU Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_sisd_32d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNU(Arm64RegisterS Sd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTNU(Sd, Dn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FCVTNU Wd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_32h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNU(Arm64RegisterW Wd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTNU(Wd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FCVTNU Xd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_64h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNU(Arm64RegisterX Xd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTNU(Xd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FCVTNU Wd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_32s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNU(Arm64RegisterW Wd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTNU(Wd, Sn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FCVTNU Xd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_64s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNU(Arm64RegisterX Xd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTNU(Xd, Sn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FCVTNU Wd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_32d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNU(Arm64RegisterW Wd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTNU(Wd, Dn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FCVTNU Xd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTNU_64d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTNU(Arm64RegisterX Xd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTNU(Xd, Dn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTPS Sd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_sisd_32h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPS(Arm64RegisterS Sd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTPS(Sd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTPS Dd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_sisd_64h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPS(Arm64RegisterD Dd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTPS(Dd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTPS Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_sisd_64s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPS(Arm64RegisterD Dd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTPS(Dd, Sn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTPS Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_sisd_32d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPS(Arm64RegisterS Sd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTPS(Sd, Dn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTPS Wd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_32h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPS(Arm64RegisterW Wd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTPS(Wd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTPS Xd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_64h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPS(Arm64RegisterX Xd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTPS(Xd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTPS Wd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_32s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPS(Arm64RegisterW Wd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTPS(Wd, Sn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTPS Xd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_64s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPS(Arm64RegisterX Xd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTPS(Xd, Sn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTPS Wd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_32d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPS(Arm64RegisterW Wd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTPS(Wd, Dn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTPS Xd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPS_64d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPS(Arm64RegisterX Xd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTPS(Xd, Dn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTPU Sd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_sisd_32h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPU(Arm64RegisterS Sd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTPU(Sd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTPU Dd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_sisd_64h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPU(Arm64RegisterD Dd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTPU(Dd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTPU Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_sisd_64s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPU(Arm64RegisterD Dd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTPU(Dd, Sn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTPU Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_sisd_32d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPU(Arm64RegisterS Sd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTPU(Sd, Dn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTPU Wd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_32h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPU(Arm64RegisterW Wd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTPU(Wd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTPU Xd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_64h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPU(Arm64RegisterX Xd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTPU(Xd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTPU Wd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_32s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPU(Arm64RegisterW Wd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTPU(Wd, Sn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTPU Xd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_64s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPU(Arm64RegisterX Xd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTPU(Xd, Sn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTPU Wd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_32d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPU(Arm64RegisterW Wd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTPU(Wd, Dn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FCVTPU Xd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTPU_64d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTPU(Arm64RegisterX Xd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTPU(Xd, Dn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTZS Sd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_sisd_32h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterS Sd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Sd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTZS Dd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_sisd_64h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterD Dd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Dd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTZS Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_sisd_64s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterD Dd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Dd, Sn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTZS Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_sisd_32d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterS Sd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Sd, Dn));
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZS Wd, Hn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_32h_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterW Wd, Arm64RegisterH Hn, uint fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Wd, Hn, fbits));
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZS Xd, Hn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_64h_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterX Xd, Arm64RegisterH Hn, uint fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Xd, Hn, fbits));
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZS Wd, Sn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_32s_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterW Wd, Arm64RegisterS Sn, uint fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Wd, Sn, fbits));
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZS Xd, Sn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_64s_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterX Xd, Arm64RegisterS Sn, uint fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Xd, Sn, fbits));
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZS Wd, Dn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_32d_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterW Wd, Arm64RegisterD Dn, uint fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Wd, Dn, fbits));
    /// <summary>
    /// Floating-point convert to signed fixed-point, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZS Xd, Dn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_64d_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterX Xd, Arm64RegisterD Dn, uint fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Xd, Dn, fbits));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZS Wd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_32h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterW Wd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Wd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZS Xd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_64h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterX Xd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Xd, Hn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZS Wd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_32s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterW Wd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Wd, Sn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZS Xd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_64s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterX Xd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Xd, Sn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZS Wd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_32d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterW Wd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Wd, Dn));
    /// <summary>
    /// Floating-point convert to signed integer, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZS Xd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZS_64d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZS(Arm64RegisterX Xd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTZS(Xd, Dn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTZU Sd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_sisd_32h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterS Sd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Sd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTZU Dd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_sisd_64h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterD Dd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Dd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTZU Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_sisd_64s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterD Dd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Dd, Sn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>FCVTZU Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_sisd_32d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterS Sd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Sd, Dn));
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZU Wd, Hn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_32h_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterW Wd, Arm64RegisterH Hn, uint fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Wd, Hn, fbits));
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZU Xd, Hn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_64h_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterX Xd, Arm64RegisterH Hn, uint fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Xd, Hn, fbits));
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZU Wd, Sn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_32s_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterW Wd, Arm64RegisterS Sn, uint fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Wd, Sn, fbits));
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZU Xd, Sn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_64s_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterX Xd, Arm64RegisterS Sn, uint fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Xd, Sn, fbits));
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZU Wd, Dn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_32d_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterW Wd, Arm64RegisterD Dn, uint fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Wd, Dn, fbits));
    /// <summary>
    /// Floating-point convert to unsigned fixed-point, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZU Xd, Dn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_64d_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterX Xd, Arm64RegisterD Dn, uint fbits)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Xd, Dn, fbits));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZU Wd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_32h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterW Wd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Wd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZU Xd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_64h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterX Xd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Xd, Hn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZU Wd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_32s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterW Wd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Wd, Sn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZU Xd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_64s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterX Xd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Xd, Sn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZU Wd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_32d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterW Wd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Wd, Dn));
    /// <summary>
    /// Floating-point convert to unsigned integer, rounding toward zero (scalar).
    /// </summary>
    /// <remarks><code>FCVTZU Xd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FCVTZU_64d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FCVTZU(Arm64RegisterX Xd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FCVTZU(Xd, Dn));
    /// <summary>
    /// Floating-point divide (scalar).
    /// </summary>
    /// <remarks><code>FDIV Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDIV_h_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FDIV(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
         => AddInstruction(Arm64InstructionFactory.FDIV(Hd, Hn, Hm));
    /// <summary>
    /// Floating-point divide (scalar).
    /// </summary>
    /// <remarks><code>FDIV Sd, Sn, Sm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDIV_s_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FDIV(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm)
         => AddInstruction(Arm64InstructionFactory.FDIV(Sd, Sn, Sm));
    /// <summary>
    /// Floating-point divide (scalar).
    /// </summary>
    /// <remarks><code>FDIV Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FDIV_d_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FDIV(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
         => AddInstruction(Arm64InstructionFactory.FDIV(Dd, Dn, Dm));
    /// <summary>
    /// Floating-point Javascript convert to signed fixed-point, rounding toward zero.
    /// </summary>
    /// <remarks><code>FJCVTZS Wd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FJCVTZS_32d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FJCVTZS(Arm64RegisterW Wd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FJCVTZS(Wd, Dn));
    /// <summary>
    /// Floating-point fused multiply-add (scalar).
    /// </summary>
    /// <remarks><code>FMADD Hd, Hn, Hm, Ha</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMADD_h_floatdp3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMADD(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm, Arm64RegisterH Ha)
         => AddInstruction(Arm64InstructionFactory.FMADD(Hd, Hn, Hm, Ha));
    /// <summary>
    /// Floating-point fused multiply-add (scalar).
    /// </summary>
    /// <remarks><code>FMADD Sd, Sn, Sm, Sa</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMADD_s_floatdp3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMADD(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm, Arm64RegisterS Sa)
         => AddInstruction(Arm64InstructionFactory.FMADD(Sd, Sn, Sm, Sa));
    /// <summary>
    /// Floating-point fused multiply-add (scalar).
    /// </summary>
    /// <remarks><code>FMADD Dd, Dn, Dm, Da</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMADD_d_floatdp3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMADD(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm, Arm64RegisterD Da)
         => AddInstruction(Arm64InstructionFactory.FMADD(Dd, Dn, Dm, Da));
    /// <summary>
    /// Floating-point maximum (scalar).
    /// </summary>
    /// <remarks><code>FMAX Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAX_h_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAX(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
         => AddInstruction(Arm64InstructionFactory.FMAX(Hd, Hn, Hm));
    /// <summary>
    /// Floating-point maximum (scalar).
    /// </summary>
    /// <remarks><code>FMAX Sd, Sn, Sm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAX_s_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAX(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm)
         => AddInstruction(Arm64InstructionFactory.FMAX(Sd, Sn, Sm));
    /// <summary>
    /// Floating-point maximum (scalar).
    /// </summary>
    /// <remarks><code>FMAX Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAX_d_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAX(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
         => AddInstruction(Arm64InstructionFactory.FMAX(Dd, Dn, Dm));
    /// <summary>
    /// Floating-point maximum number (scalar).
    /// </summary>
    /// <remarks><code>FMAXNM Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNM_h_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXNM(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
         => AddInstruction(Arm64InstructionFactory.FMAXNM(Hd, Hn, Hm));
    /// <summary>
    /// Floating-point maximum number (scalar).
    /// </summary>
    /// <remarks><code>FMAXNM Sd, Sn, Sm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNM_s_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXNM(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm)
         => AddInstruction(Arm64InstructionFactory.FMAXNM(Sd, Sn, Sm));
    /// <summary>
    /// Floating-point maximum number (scalar).
    /// </summary>
    /// <remarks><code>FMAXNM Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMAXNM_d_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMAXNM(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
         => AddInstruction(Arm64InstructionFactory.FMAXNM(Dd, Dn, Dm));
    /// <summary>
    /// Floating-point minimum (scalar).
    /// </summary>
    /// <remarks><code>FMIN Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMIN_h_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMIN(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
         => AddInstruction(Arm64InstructionFactory.FMIN(Hd, Hn, Hm));
    /// <summary>
    /// Floating-point minimum (scalar).
    /// </summary>
    /// <remarks><code>FMIN Sd, Sn, Sm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMIN_s_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMIN(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm)
         => AddInstruction(Arm64InstructionFactory.FMIN(Sd, Sn, Sm));
    /// <summary>
    /// Floating-point minimum (scalar).
    /// </summary>
    /// <remarks><code>FMIN Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMIN_d_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMIN(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
         => AddInstruction(Arm64InstructionFactory.FMIN(Dd, Dn, Dm));
    /// <summary>
    /// Floating-point minimum number (scalar).
    /// </summary>
    /// <remarks><code>FMINNM Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNM_h_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINNM(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
         => AddInstruction(Arm64InstructionFactory.FMINNM(Hd, Hn, Hm));
    /// <summary>
    /// Floating-point minimum number (scalar).
    /// </summary>
    /// <remarks><code>FMINNM Sd, Sn, Sm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNM_s_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINNM(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm)
         => AddInstruction(Arm64InstructionFactory.FMINNM(Sd, Sn, Sm));
    /// <summary>
    /// Floating-point minimum number (scalar).
    /// </summary>
    /// <remarks><code>FMINNM Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMINNM_d_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMINNM(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
         => AddInstruction(Arm64InstructionFactory.FMINNM(Dd, Dn, Dm));
    /// <summary>
    /// Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Wd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_32h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMOV(Arm64RegisterW Wd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FMOV(Wd, Hn));
    /// <summary>
    /// Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Xd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_64h_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMOV(Arm64RegisterX Xd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FMOV(Xd, Hn));
    /// <summary>
    /// Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Hd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_h32_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMOV(Arm64RegisterH Hd, Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.FMOV(Hd, Wn));
    /// <summary>
    /// Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Sd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_s32_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMOV(Arm64RegisterS Sd, Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.FMOV(Sd, Wn));
    /// <summary>
    /// Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Wd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_32s_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMOV(Arm64RegisterW Wd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FMOV(Wd, Sn));
    /// <summary>
    /// Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Hd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_h64_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMOV(Arm64RegisterH Hd, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.FMOV(Hd, Xn));
    /// <summary>
    /// Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Dd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_d64_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMOV(Arm64RegisterD Dd, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.FMOV(Dd, Xn));
    /// <summary>
    /// Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Vd.D[1], Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_v64i_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMOV(Arm64RegisterV_D.Indexed Vd_D, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.FMOV(Vd_D, Xn));
    /// <summary>
    /// Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Xd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_64d_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMOV(Arm64RegisterX Xd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FMOV(Xd, Dn));
    /// <summary>
    /// Floating-point move to or from general-purpose register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Xd, Vn.D[1]</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_64vx_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMOV(Arm64RegisterX Xd, Arm64RegisterV_D.Indexed Vn_D)
         => AddInstruction(Arm64InstructionFactory.FMOV(Xd, Vn_D));
    /// <summary>
    /// Floating-point move register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_h_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMOV(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FMOV(Hd, Hn));
    /// <summary>
    /// Floating-point move register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMOV(Arm64RegisterS Sd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FMOV(Sd, Sn));
    /// <summary>
    /// Floating-point move register without conversion.
    /// </summary>
    /// <remarks><code>FMOV Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMOV(Arm64RegisterD Dd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FMOV(Dd, Dn));
    /// <summary>
    /// Floating-point move immediate (scalar).
    /// </summary>
    /// <remarks><code>FMOV Hd, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_h_floatimm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMOV(Arm64RegisterH Hd, Arm64FloatImmediate imm)
         => AddInstruction(Arm64InstructionFactory.FMOV(Hd, imm));
    /// <summary>
    /// Floating-point move immediate (scalar).
    /// </summary>
    /// <remarks><code>FMOV Sd, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_s_floatimm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMOV(Arm64RegisterS Sd, Arm64FloatImmediate imm)
         => AddInstruction(Arm64InstructionFactory.FMOV(Sd, imm));
    /// <summary>
    /// Floating-point move immediate (scalar).
    /// </summary>
    /// <remarks><code>FMOV Dd, #imm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMOV_d_floatimm), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMOV(Arm64RegisterD Dd, Arm64FloatImmediate imm)
         => AddInstruction(Arm64InstructionFactory.FMOV(Dd, imm));
    /// <summary>
    /// Floating-point fused multiply-subtract (scalar).
    /// </summary>
    /// <remarks><code>FMSUB Hd, Hn, Hm, Ha</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMSUB_h_floatdp3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMSUB(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm, Arm64RegisterH Ha)
         => AddInstruction(Arm64InstructionFactory.FMSUB(Hd, Hn, Hm, Ha));
    /// <summary>
    /// Floating-point fused multiply-subtract (scalar).
    /// </summary>
    /// <remarks><code>FMSUB Sd, Sn, Sm, Sa</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMSUB_s_floatdp3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMSUB(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm, Arm64RegisterS Sa)
         => AddInstruction(Arm64InstructionFactory.FMSUB(Sd, Sn, Sm, Sa));
    /// <summary>
    /// Floating-point fused multiply-subtract (scalar).
    /// </summary>
    /// <remarks><code>FMSUB Dd, Dn, Dm, Da</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMSUB_d_floatdp3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMSUB(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm, Arm64RegisterD Da)
         => AddInstruction(Arm64InstructionFactory.FMSUB(Dd, Dn, Dm, Da));
    /// <summary>
    /// Floating-point multiply (scalar).
    /// </summary>
    /// <remarks><code>FMUL Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_h_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMUL(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
         => AddInstruction(Arm64InstructionFactory.FMUL(Hd, Hn, Hm));
    /// <summary>
    /// Floating-point multiply (scalar).
    /// </summary>
    /// <remarks><code>FMUL Sd, Sn, Sm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_s_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMUL(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm)
         => AddInstruction(Arm64InstructionFactory.FMUL(Sd, Sn, Sm));
    /// <summary>
    /// Floating-point multiply (scalar).
    /// </summary>
    /// <remarks><code>FMUL Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FMUL_d_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FMUL(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
         => AddInstruction(Arm64InstructionFactory.FMUL(Dd, Dn, Dm));
    /// <summary>
    /// Floating-point negate (scalar).
    /// </summary>
    /// <remarks><code>FNEG Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNEG_h_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FNEG(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FNEG(Hd, Hn));
    /// <summary>
    /// Floating-point negate (scalar).
    /// </summary>
    /// <remarks><code>FNEG Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNEG_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FNEG(Arm64RegisterS Sd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FNEG(Sd, Sn));
    /// <summary>
    /// Floating-point negate (scalar).
    /// </summary>
    /// <remarks><code>FNEG Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNEG_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FNEG(Arm64RegisterD Dd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FNEG(Dd, Dn));
    /// <summary>
    /// Floating-point negated fused multiply-add (scalar).
    /// </summary>
    /// <remarks><code>FNMADD Hd, Hn, Hm, Ha</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNMADD_h_floatdp3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FNMADD(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm, Arm64RegisterH Ha)
         => AddInstruction(Arm64InstructionFactory.FNMADD(Hd, Hn, Hm, Ha));
    /// <summary>
    /// Floating-point negated fused multiply-add (scalar).
    /// </summary>
    /// <remarks><code>FNMADD Sd, Sn, Sm, Sa</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNMADD_s_floatdp3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FNMADD(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm, Arm64RegisterS Sa)
         => AddInstruction(Arm64InstructionFactory.FNMADD(Sd, Sn, Sm, Sa));
    /// <summary>
    /// Floating-point negated fused multiply-add (scalar).
    /// </summary>
    /// <remarks><code>FNMADD Dd, Dn, Dm, Da</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNMADD_d_floatdp3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FNMADD(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm, Arm64RegisterD Da)
         => AddInstruction(Arm64InstructionFactory.FNMADD(Dd, Dn, Dm, Da));
    /// <summary>
    /// Floating-point negated fused multiply-subtract (scalar).
    /// </summary>
    /// <remarks><code>FNMSUB Hd, Hn, Hm, Ha</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNMSUB_h_floatdp3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FNMSUB(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm, Arm64RegisterH Ha)
         => AddInstruction(Arm64InstructionFactory.FNMSUB(Hd, Hn, Hm, Ha));
    /// <summary>
    /// Floating-point negated fused multiply-subtract (scalar).
    /// </summary>
    /// <remarks><code>FNMSUB Sd, Sn, Sm, Sa</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNMSUB_s_floatdp3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FNMSUB(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm, Arm64RegisterS Sa)
         => AddInstruction(Arm64InstructionFactory.FNMSUB(Sd, Sn, Sm, Sa));
    /// <summary>
    /// Floating-point negated fused multiply-subtract (scalar).
    /// </summary>
    /// <remarks><code>FNMSUB Dd, Dn, Dm, Da</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNMSUB_d_floatdp3), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FNMSUB(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm, Arm64RegisterD Da)
         => AddInstruction(Arm64InstructionFactory.FNMSUB(Dd, Dn, Dm, Da));
    /// <summary>
    /// Floating-point multiply-negate (scalar).
    /// </summary>
    /// <remarks><code>FNMUL Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNMUL_h_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FNMUL(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
         => AddInstruction(Arm64InstructionFactory.FNMUL(Hd, Hn, Hm));
    /// <summary>
    /// Floating-point multiply-negate (scalar).
    /// </summary>
    /// <remarks><code>FNMUL Sd, Sn, Sm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNMUL_s_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FNMUL(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm)
         => AddInstruction(Arm64InstructionFactory.FNMUL(Sd, Sn, Sm));
    /// <summary>
    /// Floating-point multiply-negate (scalar).
    /// </summary>
    /// <remarks><code>FNMUL Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FNMUL_d_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FNMUL(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
         => AddInstruction(Arm64InstructionFactory.FNMUL(Dd, Dn, Dm));
    /// <summary>
    /// Floating-point round to 32-bit integer, using current rounding mode (scalar).
    /// </summary>
    /// <remarks><code>FRINT32X Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT32X_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINT32X(Arm64RegisterS Sd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FRINT32X(Sd, Sn));
    /// <summary>
    /// Floating-point round to 32-bit integer, using current rounding mode (scalar).
    /// </summary>
    /// <remarks><code>FRINT32X Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT32X_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINT32X(Arm64RegisterD Dd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FRINT32X(Dd, Dn));
    /// <summary>
    /// Floating-point round to 32-bit integer toward zero (scalar).
    /// </summary>
    /// <remarks><code>FRINT32Z Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT32Z_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINT32Z(Arm64RegisterS Sd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FRINT32Z(Sd, Sn));
    /// <summary>
    /// Floating-point round to 32-bit integer toward zero (scalar).
    /// </summary>
    /// <remarks><code>FRINT32Z Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT32Z_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINT32Z(Arm64RegisterD Dd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FRINT32Z(Dd, Dn));
    /// <summary>
    /// Floating-point round to 64-bit integer, using current rounding mode (scalar).
    /// </summary>
    /// <remarks><code>FRINT64X Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT64X_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINT64X(Arm64RegisterS Sd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FRINT64X(Sd, Sn));
    /// <summary>
    /// Floating-point round to 64-bit integer, using current rounding mode (scalar).
    /// </summary>
    /// <remarks><code>FRINT64X Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT64X_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINT64X(Arm64RegisterD Dd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FRINT64X(Dd, Dn));
    /// <summary>
    /// Floating-point round to 64-bit integer toward zero (scalar).
    /// </summary>
    /// <remarks><code>FRINT64Z Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT64Z_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINT64Z(Arm64RegisterS Sd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FRINT64Z(Sd, Sn));
    /// <summary>
    /// Floating-point round to 64-bit integer toward zero (scalar).
    /// </summary>
    /// <remarks><code>FRINT64Z Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINT64Z_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINT64Z(Arm64RegisterD Dd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FRINT64Z(Dd, Dn));
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FRINTA Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTA_h_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTA(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FRINTA(Hd, Hn));
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FRINTA Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTA_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTA(Arm64RegisterS Sd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FRINTA(Sd, Sn));
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to away (scalar).
    /// </summary>
    /// <remarks><code>FRINTA Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTA_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTA(Arm64RegisterD Dd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FRINTA(Dd, Dn));
    /// <summary>
    /// Floating-point round to integral, using current rounding mode (scalar).
    /// </summary>
    /// <remarks><code>FRINTI Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTI_h_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTI(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FRINTI(Hd, Hn));
    /// <summary>
    /// Floating-point round to integral, using current rounding mode (scalar).
    /// </summary>
    /// <remarks><code>FRINTI Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTI_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTI(Arm64RegisterS Sd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FRINTI(Sd, Sn));
    /// <summary>
    /// Floating-point round to integral, using current rounding mode (scalar).
    /// </summary>
    /// <remarks><code>FRINTI Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTI_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTI(Arm64RegisterD Dd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FRINTI(Dd, Dn));
    /// <summary>
    /// Floating-point round to integral, toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FRINTM Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTM_h_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTM(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FRINTM(Hd, Hn));
    /// <summary>
    /// Floating-point round to integral, toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FRINTM Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTM_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTM(Arm64RegisterS Sd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FRINTM(Sd, Sn));
    /// <summary>
    /// Floating-point round to integral, toward minus infinity (scalar).
    /// </summary>
    /// <remarks><code>FRINTM Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTM_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTM(Arm64RegisterD Dd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FRINTM(Dd, Dn));
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FRINTN Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTN_h_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTN(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FRINTN(Hd, Hn));
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FRINTN Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTN_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTN(Arm64RegisterS Sd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FRINTN(Sd, Sn));
    /// <summary>
    /// Floating-point round to integral, to nearest with ties to even (scalar).
    /// </summary>
    /// <remarks><code>FRINTN Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTN_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTN(Arm64RegisterD Dd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FRINTN(Dd, Dn));
    /// <summary>
    /// Floating-point round to integral, toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FRINTP Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTP_h_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTP(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FRINTP(Hd, Hn));
    /// <summary>
    /// Floating-point round to integral, toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FRINTP Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTP_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTP(Arm64RegisterS Sd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FRINTP(Sd, Sn));
    /// <summary>
    /// Floating-point round to integral, toward plus infinity (scalar).
    /// </summary>
    /// <remarks><code>FRINTP Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTP_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTP(Arm64RegisterD Dd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FRINTP(Dd, Dn));
    /// <summary>
    /// Floating-point round to integral exact, using current rounding mode (scalar).
    /// </summary>
    /// <remarks><code>FRINTX Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTX_h_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTX(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FRINTX(Hd, Hn));
    /// <summary>
    /// Floating-point round to integral exact, using current rounding mode (scalar).
    /// </summary>
    /// <remarks><code>FRINTX Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTX_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTX(Arm64RegisterS Sd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FRINTX(Sd, Sn));
    /// <summary>
    /// Floating-point round to integral exact, using current rounding mode (scalar).
    /// </summary>
    /// <remarks><code>FRINTX Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTX_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTX(Arm64RegisterD Dd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FRINTX(Dd, Dn));
    /// <summary>
    /// Floating-point round to integral, toward zero (scalar).
    /// </summary>
    /// <remarks><code>FRINTZ Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTZ_h_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTZ(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FRINTZ(Hd, Hn));
    /// <summary>
    /// Floating-point round to integral, toward zero (scalar).
    /// </summary>
    /// <remarks><code>FRINTZ Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTZ_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTZ(Arm64RegisterS Sd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FRINTZ(Sd, Sn));
    /// <summary>
    /// Floating-point round to integral, toward zero (scalar).
    /// </summary>
    /// <remarks><code>FRINTZ Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FRINTZ_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FRINTZ(Arm64RegisterD Dd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FRINTZ(Dd, Dn));
    /// <summary>
    /// Floating-point square root (scalar).
    /// </summary>
    /// <remarks><code>FSQRT Hd, Hn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSQRT_h_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FSQRT(Arm64RegisterH Hd, Arm64RegisterH Hn)
         => AddInstruction(Arm64InstructionFactory.FSQRT(Hd, Hn));
    /// <summary>
    /// Floating-point square root (scalar).
    /// </summary>
    /// <remarks><code>FSQRT Sd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSQRT_s_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FSQRT(Arm64RegisterS Sd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.FSQRT(Sd, Sn));
    /// <summary>
    /// Floating-point square root (scalar).
    /// </summary>
    /// <remarks><code>FSQRT Dd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSQRT_d_floatdp1), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FSQRT(Arm64RegisterD Dd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.FSQRT(Dd, Dn));
    /// <summary>
    /// Floating-point subtract (scalar).
    /// </summary>
    /// <remarks><code>FSUB Hd, Hn, Hm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSUB_h_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FSUB(Arm64RegisterH Hd, Arm64RegisterH Hn, Arm64RegisterH Hm)
         => AddInstruction(Arm64InstructionFactory.FSUB(Hd, Hn, Hm));
    /// <summary>
    /// Floating-point subtract (scalar).
    /// </summary>
    /// <remarks><code>FSUB Sd, Sn, Sm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSUB_s_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FSUB(Arm64RegisterS Sd, Arm64RegisterS Sn, Arm64RegisterS Sm)
         => AddInstruction(Arm64InstructionFactory.FSUB(Sd, Sn, Sm));
    /// <summary>
    /// Floating-point subtract (scalar).
    /// </summary>
    /// <remarks><code>FSUB Dd, Dn, Dm</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.FSUB_d_floatdp2), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void FSUB(Arm64RegisterD Dd, Arm64RegisterD Dn, Arm64RegisterD Dm)
         => AddInstruction(Arm64InstructionFactory.FSUB(Dd, Dn, Dm));
    /// <summary>
    /// Signed integer convert to floating-point (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>SCVTF Hd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_sisd_32h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterH Hd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Hd, Sn));
    /// <summary>
    /// Signed integer convert to floating-point (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>SCVTF Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_sisd_32d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterD Dd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Dd, Sn));
    /// <summary>
    /// Signed integer convert to floating-point (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>SCVTF Hd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_sisd_64h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterH Hd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Hd, Dn));
    /// <summary>
    /// Signed integer convert to floating-point (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>SCVTF Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_sisd_64s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterS Sd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Sd, Dn));
    /// <summary>
    /// Signed fixed-point convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>SCVTF Hd, Wn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_h32_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterH Hd, Arm64RegisterW Wn, uint fbits)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Hd, Wn, fbits));
    /// <summary>
    /// Signed fixed-point convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>SCVTF Hd, Xn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_h64_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterH Hd, Arm64RegisterX Xn, uint fbits)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Hd, Xn, fbits));
    /// <summary>
    /// Signed fixed-point convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>SCVTF Sd, Wn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_s32_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterS Sd, Arm64RegisterW Wn, uint fbits)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Sd, Wn, fbits));
    /// <summary>
    /// Signed fixed-point convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>SCVTF Sd, Xn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_s64_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterS Sd, Arm64RegisterX Xn, uint fbits)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Sd, Xn, fbits));
    /// <summary>
    /// Signed fixed-point convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>SCVTF Dd, Wn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_d32_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterD Dd, Arm64RegisterW Wn, uint fbits)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Dd, Wn, fbits));
    /// <summary>
    /// Signed fixed-point convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>SCVTF Dd, Xn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_d64_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterD Dd, Arm64RegisterX Xn, uint fbits)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Dd, Xn, fbits));
    /// <summary>
    /// Signed integer convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>SCVTF Hd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_h32_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterH Hd, Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Hd, Wn));
    /// <summary>
    /// Signed integer convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>SCVTF Sd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_s32_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterS Sd, Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Sd, Wn));
    /// <summary>
    /// Signed integer convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>SCVTF Dd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_d32_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterD Dd, Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Dd, Wn));
    /// <summary>
    /// Signed integer convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>SCVTF Hd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_h64_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterH Hd, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Hd, Xn));
    /// <summary>
    /// Signed integer convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>SCVTF Sd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_s64_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterS Sd, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Sd, Xn));
    /// <summary>
    /// Signed integer convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>SCVTF Dd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.SCVTF_d64_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void SCVTF(Arm64RegisterD Dd, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.SCVTF(Dd, Xn));
    /// <summary>
    /// Unsigned integer convert to floating-point (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>UCVTF Hd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_sisd_32h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterH Hd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Hd, Sn));
    /// <summary>
    /// Unsigned integer convert to floating-point (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>UCVTF Dd, Sn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_sisd_32d), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterD Dd, Arm64RegisterS Sn)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Dd, Sn));
    /// <summary>
    /// Unsigned integer convert to floating-point (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>UCVTF Hd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_sisd_64h), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterH Hd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Hd, Dn));
    /// <summary>
    /// Unsigned integer convert to floating-point (scalar SIMD&amp;FP).
    /// </summary>
    /// <remarks><code>UCVTF Sd, Dn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_sisd_64s), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterS Sd, Arm64RegisterD Dn)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Sd, Dn));
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>UCVTF Hd, Wn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_h32_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterH Hd, Arm64RegisterW Wn, uint fbits)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Hd, Wn, fbits));
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>UCVTF Hd, Xn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_h64_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterH Hd, Arm64RegisterX Xn, uint fbits)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Hd, Xn, fbits));
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>UCVTF Sd, Wn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_s32_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterS Sd, Arm64RegisterW Wn, uint fbits)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Sd, Wn, fbits));
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>UCVTF Sd, Xn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_s64_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterS Sd, Arm64RegisterX Xn, uint fbits)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Sd, Xn, fbits));
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>UCVTF Dd, Wn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_d32_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterD Dd, Arm64RegisterW Wn, uint fbits)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Dd, Wn, fbits));
    /// <summary>
    /// Unsigned fixed-point convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>UCVTF Dd, Xn, #fbits</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_d64_float2fix), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterD Dd, Arm64RegisterX Xn, uint fbits)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Dd, Xn, fbits));
    /// <summary>
    /// Unsigned integer convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>UCVTF Hd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_h32_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterH Hd, Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Hd, Wn));
    /// <summary>
    /// Unsigned integer convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>UCVTF Sd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_s32_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterS Sd, Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Sd, Wn));
    /// <summary>
    /// Unsigned integer convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>UCVTF Dd, Wn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_d32_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterD Dd, Arm64RegisterW Wn)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Dd, Wn));
    /// <summary>
    /// Unsigned integer convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>UCVTF Hd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_h64_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterH Hd, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Hd, Xn));
    /// <summary>
    /// Unsigned integer convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>UCVTF Sd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_s64_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterS Sd, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Sd, Xn));
    /// <summary>
    /// Unsigned integer convert to floating-point (scalar).
    /// </summary>
    /// <remarks><code>UCVTF Dd, Xn</code></remarks>
    [Arm64LinkInstructionId(Arm64InstructionId.UCVTF_d64_float2int), MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void UCVTF(Arm64RegisterD Dd, Arm64RegisterX Xn)
         => AddInstruction(Arm64InstructionFactory.UCVTF(Dd, Xn));
}
