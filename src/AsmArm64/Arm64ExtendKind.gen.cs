// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.

// This file is automatically generated. DO NOT EDIT. Changes will be lost if the file is regenerated.

// ReSharper disable InconsistentNaming
// ReSharper disable IdentifierTypo
namespace AsmArm64;

/// <summary>
/// Represents the kind of an extend operation.
/// </summary>
public enum Arm64ExtendKind : byte
{
    None,
    UXTB,
    UXTH,
    UXTW,
    UXTX,
    SXTB,
    SXTH,
    SXTW,
    SXTX,
    LSL,
}

public interface IArm64ExtendKind
{
    Arm64ExtendKind ExtendKind { get; }


    /// <summary>
    /// Represents the kind UXTB of an extend operation.
    /// </summary>
    public struct UXTB : IArm64ExtendKind
    {
        public Arm64ExtendKind ExtendKind => Arm64ExtendKind.UXTB;
    
        public override string ToString() => this.ExtendToText();
    
        public static implicit operator Arm64ExtendKind(UXTB extendKind) => Arm64ExtendKind.UXTB;
    }

    /// <summary>
    /// Represents the kind UXTH of an extend operation.
    /// </summary>
    public struct UXTH : IArm64ExtendKind
    {
        public Arm64ExtendKind ExtendKind => Arm64ExtendKind.UXTH;
    
        public override string ToString() => this.ExtendToText();
    
        public static implicit operator Arm64ExtendKind(UXTH extendKind) => Arm64ExtendKind.UXTH;
    }

    /// <summary>
    /// Represents the kind UXTW of an extend operation.
    /// </summary>
    public struct UXTW : IArm64ExtendKind
    {
        public Arm64ExtendKind ExtendKind => Arm64ExtendKind.UXTW;
    
        public override string ToString() => this.ExtendToText();
    
        public static implicit operator Arm64ExtendKind(UXTW extendKind) => Arm64ExtendKind.UXTW;
    }

    /// <summary>
    /// Represents the kind UXTX of an extend operation.
    /// </summary>
    public struct UXTX : IArm64ExtendKind
    {
        public Arm64ExtendKind ExtendKind => Arm64ExtendKind.UXTX;
    
        public override string ToString() => this.ExtendToText();
    
        public static implicit operator Arm64ExtendKind(UXTX extendKind) => Arm64ExtendKind.UXTX;
    }

    /// <summary>
    /// Represents the kind SXTB of an extend operation.
    /// </summary>
    public struct SXTB : IArm64ExtendKind
    {
        public Arm64ExtendKind ExtendKind => Arm64ExtendKind.SXTB;
    
        public override string ToString() => this.ExtendToText();
    
        public static implicit operator Arm64ExtendKind(SXTB extendKind) => Arm64ExtendKind.SXTB;
    }

    /// <summary>
    /// Represents the kind SXTH of an extend operation.
    /// </summary>
    public struct SXTH : IArm64ExtendKind
    {
        public Arm64ExtendKind ExtendKind => Arm64ExtendKind.SXTH;
    
        public override string ToString() => this.ExtendToText();
    
        public static implicit operator Arm64ExtendKind(SXTH extendKind) => Arm64ExtendKind.SXTH;
    }

    /// <summary>
    /// Represents the kind SXTW of an extend operation.
    /// </summary>
    public struct SXTW : IArm64ExtendKind
    {
        public Arm64ExtendKind ExtendKind => Arm64ExtendKind.SXTW;
    
        public override string ToString() => this.ExtendToText();
    
        public static implicit operator Arm64ExtendKind(SXTW extendKind) => Arm64ExtendKind.SXTW;
    }

    /// <summary>
    /// Represents the kind SXTX of an extend operation.
    /// </summary>
    public struct SXTX : IArm64ExtendKind
    {
        public Arm64ExtendKind ExtendKind => Arm64ExtendKind.SXTX;
    
        public override string ToString() => this.ExtendToText();
    
        public static implicit operator Arm64ExtendKind(SXTX extendKind) => Arm64ExtendKind.SXTX;
    }

    /// <summary>
    /// Represents the kind LSL of an extend operation.
    /// </summary>
    public struct LSL : IArm64ExtendKind
    {
        public Arm64ExtendKind ExtendKind => Arm64ExtendKind.LSL;
    
        public override string ToString() => this.ExtendToText();
    
        public static implicit operator Arm64ExtendKind(LSL extendKind) => Arm64ExtendKind.LSL;
    }
}

partial class Arm64Factory
{

    /// <summary>
    /// Creates a new <see cref="IArm64ExtendKind.UXTB"/> instance.
    /// </summary>
    public static IArm64ExtendKind.UXTB _UXTB => new();

    /// <summary>
    /// Creates a new <see cref="IArm64ExtendKind.UXTH"/> instance.
    /// </summary>
    public static IArm64ExtendKind.UXTH _UXTH => new();

    /// <summary>
    /// Creates a new <see cref="IArm64ExtendKind.UXTW"/> instance.
    /// </summary>
    public static IArm64ExtendKind.UXTW _UXTW => new();

    /// <summary>
    /// Creates a new <see cref="IArm64ExtendKind.UXTX"/> instance.
    /// </summary>
    public static IArm64ExtendKind.UXTX _UXTX => new();

    /// <summary>
    /// Creates a new <see cref="IArm64ExtendKind.SXTB"/> instance.
    /// </summary>
    public static IArm64ExtendKind.SXTB _SXTB => new();

    /// <summary>
    /// Creates a new <see cref="IArm64ExtendKind.SXTH"/> instance.
    /// </summary>
    public static IArm64ExtendKind.SXTH _SXTH => new();

    /// <summary>
    /// Creates a new <see cref="IArm64ExtendKind.SXTW"/> instance.
    /// </summary>
    public static IArm64ExtendKind.SXTW _SXTW => new();

    /// <summary>
    /// Creates a new <see cref="IArm64ExtendKind.SXTX"/> instance.
    /// </summary>
    public static IArm64ExtendKind.SXTX _SXTX => new();
}

// Extension methods for Arm64ExtendKind
partial class Arm64Extensions
{
    private static readonly string[] ExtendTextLower =
    [
        "????",
        "uxtb",
        "uxth",
        "uxtw",
        "uxtx",
        "sxtb",
        "sxth",
        "sxtw",
        "sxtx",
        "lsl",
    ];

    private static readonly string[] ExtendTextUpper =
    [
        "????",
        "UXTB",
        "UXTH",
        "UXTW",
        "UXTX",
        "SXTB",
        "SXTH",
        "SXTW",
        "SXTX",
        "LSL",
    ];
    
    public static string ToText(this Arm64ExtendKind kind, bool upper = false) => upper ? ExtendTextUpper[(int)kind] : ExtendTextLower[(int)kind];

    public static string ExtendToText<T>(this T kind, bool upper = false) where T: struct, IArm64ExtendKind => upper ? ExtendTextUpper[(int)kind.ExtendKind] : ExtendTextLower[(int)kind.ExtendKind];
}
