<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".gen.cs" #>
<# var kinds = new string[] {
    "UXTB",
    "UXTH",
    "UXTW",
    "UXTX",
    "SXTB",
    "SXTH",
    "SXTW",
    "SXTX",
    "LSL"
};
#>
// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.

// This file is automatically generated. DO NOT EDIT. Changes will be lost if the file is regenerated.

// ReSharper disable InconsistentNaming
// ReSharper disable IdentifierTypo
namespace AsmArm64;

/// <summary>
/// Represents the kind of an extend operation.
/// </summary>
public enum Arm64ExtendKind : byte
{
    None,
<# foreach (var kind in kinds) { #>
    <#= kind #>,
<# } #>
}

public interface IArm64ExtendKind
{
    Arm64ExtendKind ExtendKind { get; }

<# foreach (var kind in kinds) { #>

    /// <summary>
    /// Represents the kind <#= kind #> of an extend operation.
    /// </summary>
    public struct <#= kind #> : IArm64ExtendKind
    {
        public Arm64ExtendKind ExtendKind => Arm64ExtendKind.<#= kind #>;
    
        public override string ToString() => this.ExtendToText();
    
        public static implicit operator Arm64ExtendKind(<#= kind #> extendKind) => Arm64ExtendKind.<#= kind #>;
    }
<# } #>
}

partial class Arm64Factory
{
<# foreach (var kind in kinds) { if (kind == "LSL") continue; #>

    /// <summary>
    /// Creates a new <see cref="IArm64ExtendKind.<#= kind #>"/> instance.
    /// </summary>
    public static IArm64ExtendKind.<#= kind #> _<#= kind #> => new();
<# } #>
}

// Extension methods for Arm64ExtendKind
partial class Arm64Extensions
{
    private static readonly string[] ExtendTextLower =
    [
        "????",
<# foreach (var kind in kinds) { #>
        "<#= kind.ToLowerInvariant() #>",
<# } #>
    ];

    private static readonly string[] ExtendTextUpper =
    [
        "????",
<# foreach (var kind in kinds) { #>
        "<#= kind.ToUpperInvariant() #>",
<# } #>
    ];
    
    public static string ToText(this Arm64ExtendKind kind, bool upper = false) => upper ? ExtendTextUpper[(int)kind] : ExtendTextLower[(int)kind];

    public static string ExtendToText<T>(this T kind, bool upper = false) where T: struct, IArm64ExtendKind => upper ? ExtendTextUpper[(int)kind.ExtendKind] : ExtendTextLower[(int)kind.ExtendKind];
}
