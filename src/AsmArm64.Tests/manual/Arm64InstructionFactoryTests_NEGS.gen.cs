// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.manual;

[TestClass]
public class Arm64InstructionFactoryTests_NEGS_General
{

    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.NEGS"/>.
    /// </summary>
    [TestMethod]
    public void Test_NEGS_subs_32_addsub_shift_0()
    {

        {
            var raw = NEGS(W0, W1, _LSL, 0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS W0, W1", asm);
        }

        {
            var raw = NEGS(W15, W1, _LSL, 0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS W15, W1", asm);
        }

        {
            var raw = NEGS(WZR, W1, _LSL, 0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS WZR, W1", asm);
        }

        {
            var raw = NEGS(W0, W16, _LSL, 0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS W0, W16", asm);
        }

        {
            var raw = NEGS(W15, W16, _LSL, 0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS W15, W16", asm);
        }

        {
            var raw = NEGS(WZR, W16, _LSL, 0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS WZR, W16", asm);
        }

        {
            var raw = NEGS(W0, WZR, _LSL, 0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS W0, WZR", asm);
        }

        {
            var raw = NEGS(W15, WZR, _LSL, 0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS W15, WZR", asm);
        }

        {
            var raw = NEGS(WZR, WZR, _LSL, 0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS WZR, WZR", asm);
        }

        {
            var raw = NEGS(W0, W1, _LSL, 1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS W0, W1, LSL #1", asm);
        }

        {
            var raw = NEGS(W15, W1, _LSL, 1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS W15, W1, LSL #1", asm);
        }

        {
            var raw = NEGS(WZR, W1, _LSL, 1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS WZR, W1, LSL #1", asm);
        }

        {
            var raw = NEGS(W0, W16, _LSL, 1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS W0, W16, LSL #1", asm);
        }

        {
            var raw = NEGS(W15, W16, _LSL, 1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS W15, W16, LSL #1", asm);
        }

        {
            var raw = NEGS(WZR, W16, _LSL, 1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS WZR, W16, LSL #1", asm);
        }

        {
            var raw = NEGS(W0, WZR, _LSL, 1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS W0, WZR, LSL #1", asm);
        }

        {
            var raw = NEGS(W15, WZR, _LSL, 1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS W15, WZR, LSL #1", asm);
        }

        {
            var raw = NEGS(WZR, WZR, _LSL, 1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS WZR, WZR, LSL #1", asm);
        }

        {
            var raw = NEGS(W0, W1, _LSR, 10);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS W0, W1, LSR #10", asm);
        }

        {
            var raw = NEGS(W15, W1, _LSR, 10);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS W15, W1, LSR #10", asm);
        }

        {
            var raw = NEGS(WZR, W1, _LSR, 10);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS WZR, W1, LSR #10", asm);
        }

        {
            var raw = NEGS(W0, W16, _LSR, 10);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS W0, W16, LSR #10", asm);
        }

        {
            var raw = NEGS(W15, W16, _LSR, 10);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS W15, W16, LSR #10", asm);
        }

        {
            var raw = NEGS(WZR, W16, _LSR, 10);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS WZR, W16, LSR #10", asm);
        }

        {
            var raw = NEGS(W0, WZR, _LSR, 10);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS W0, WZR, LSR #10", asm);
        }

        {
            var raw = NEGS(W15, WZR, _LSR, 10);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS W15, WZR, LSR #10", asm);
        }

        {
            var raw = NEGS(WZR, WZR, _LSR, 10);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS WZR, WZR, LSR #10", asm);
        }

        {
            var raw = NEGS(W0, W1, _ASR, 12);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS W0, W1, ASR #12", asm);
        }

        {
            var raw = NEGS(W15, W1, _ASR, 12);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS W15, W1, ASR #12", asm);
        }

        {
            var raw = NEGS(WZR, W1, _ASR, 12);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS WZR, W1, ASR #12", asm);
        }

        {
            var raw = NEGS(W0, W16, _ASR, 12);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS W0, W16, ASR #12", asm);
        }

        {
            var raw = NEGS(W15, W16, _ASR, 12);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS W15, W16, ASR #12", asm);
        }

        {
            var raw = NEGS(WZR, W16, _ASR, 12);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS WZR, W16, ASR #12", asm);
        }

        {
            var raw = NEGS(W0, WZR, _ASR, 12);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS W0, WZR, ASR #12", asm);
        }

        {
            var raw = NEGS(W15, WZR, _ASR, 12);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS W15, WZR, ASR #12", asm);
        }

        {
            var raw = NEGS(WZR, WZR, _ASR, 12);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_32_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS WZR, WZR, ASR #12", asm);
        }
    }

    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.NEGS"/>.
    /// </summary>
    [TestMethod]
    public void Test_NEGS_subs_64_addsub_shift_1()
    {

        {
            var raw = NEGS(X0, X1, _LSL, 0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_64_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS X0, X1", asm);
        }

        {
            var raw = NEGS(X15, X1, _LSL, 0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_64_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS X15, X1", asm);
        }

        {
            var raw = NEGS(X0, X16, _LSL, 0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_64_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS X0, X16", asm);
        }

        {
            var raw = NEGS(X15, X16, _LSL, 0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_64_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS X15, X16", asm);
        }

        {
            var raw = NEGS(X0, XZR, _LSL, 0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_64_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS X0, XZR", asm);
        }

        {
            var raw = NEGS(X15, XZR, _LSL, 0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_64_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS X15, XZR", asm);
        }

        {
            var raw = NEGS(X0, X1, _LSL, 1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_64_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS X0, X1, LSL #1", asm);
        }

        {
            var raw = NEGS(X15, X1, _LSL, 1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_64_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS X15, X1, LSL #1", asm);
        }

        {
            var raw = NEGS(X0, X16, _LSL, 1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_64_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS X0, X16, LSL #1", asm);
        }

        {
            var raw = NEGS(X15, X16, _LSL, 1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_64_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS X15, X16, LSL #1", asm);
        }

        {
            var raw = NEGS(X0, XZR, _LSL, 1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_64_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS X0, XZR, LSL #1", asm);
        }

        {
            var raw = NEGS(X15, XZR, _LSL, 1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_64_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS X15, XZR, LSL #1", asm);
        }

        {
            var raw = NEGS(X0, X1, _LSR, 10);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_64_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS X0, X1, LSR #10", asm);
        }

        {
            var raw = NEGS(X15, X1, _LSR, 10);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_64_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS X15, X1, LSR #10", asm);
        }

        {
            var raw = NEGS(X0, X16, _LSR, 10);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_64_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS X0, X16, LSR #10", asm);
        }

        {
            var raw = NEGS(X15, X16, _LSR, 10);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_64_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS X15, X16, LSR #10", asm);
        }

        {
            var raw = NEGS(X0, XZR, _LSR, 10);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_64_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS X0, XZR, LSR #10", asm);
        }

        {
            var raw = NEGS(X15, XZR, _LSR, 10);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_64_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS X15, XZR, LSR #10", asm);
        }

        {
            var raw = NEGS(X0, X1, _ASR, 12);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_64_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS X0, X1, ASR #12", asm);
        }

        {
            var raw = NEGS(X15, X1, _ASR, 12);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_64_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS X15, X1, ASR #12", asm);
        }

        {
            var raw = NEGS(X0, X16, _ASR, 12);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_64_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS X0, X16, ASR #12", asm);
        }

        {
            var raw = NEGS(X15, X16, _ASR, 12);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_64_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS X15, X16, ASR #12", asm);
        }

        {
            var raw = NEGS(X0, XZR, _ASR, 12);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_64_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS X0, XZR, ASR #12", asm);
        }

        {
            var raw = NEGS(X15, XZR, _ASR, 12);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NEGS_subs_64_addsub_shift, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NEGS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NEGS X15, XZR, ASR #12", asm);
        }
    }
}
