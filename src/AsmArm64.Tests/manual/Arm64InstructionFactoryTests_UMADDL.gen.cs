// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.manual;

[TestClass]
public class Arm64InstructionFactoryTests_UMADDL_General
{

    /// <summary>
    /// Test of <see cref="UMADDL"/>.
    /// </summary>
    [TestMethod]
    public void Test_UMADDL_64wa_dp_3src_0()
    {

        {
            var raw = UMADDL(X0, W1, W2, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, W1, W2, X3", asm);
        }

        {
            var raw = UMADDL(X15, W1, W2, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, W1, W2, X3", asm);
        }

        {
            var raw = UMADDL(XZR, W1, W2, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, W1, W2, X3", asm);
        }

        {
            var raw = UMADDL(X0, W16, W2, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, W16, W2, X3", asm);
        }

        {
            var raw = UMADDL(X15, W16, W2, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, W16, W2, X3", asm);
        }

        {
            var raw = UMADDL(XZR, W16, W2, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, W16, W2, X3", asm);
        }

        {
            var raw = UMADDL(X0, WZR, W2, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, WZR, W2, X3", asm);
        }

        {
            var raw = UMADDL(X15, WZR, W2, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, WZR, W2, X3", asm);
        }

        {
            var raw = UMADDL(XZR, WZR, W2, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, WZR, W2, X3", asm);
        }

        {
            var raw = UMADDL(X0, W1, W17, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, W1, W17, X3", asm);
        }

        {
            var raw = UMADDL(X15, W1, W17, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, W1, W17, X3", asm);
        }

        {
            var raw = UMADDL(XZR, W1, W17, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, W1, W17, X3", asm);
        }

        {
            var raw = UMADDL(X0, W16, W17, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, W16, W17, X3", asm);
        }

        {
            var raw = UMADDL(X15, W16, W17, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, W16, W17, X3", asm);
        }

        {
            var raw = UMADDL(XZR, W16, W17, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, W16, W17, X3", asm);
        }

        {
            var raw = UMADDL(X0, WZR, W17, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, WZR, W17, X3", asm);
        }

        {
            var raw = UMADDL(X15, WZR, W17, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, WZR, W17, X3", asm);
        }

        {
            var raw = UMADDL(XZR, WZR, W17, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, WZR, W17, X3", asm);
        }

        {
            var raw = UMADDL(X0, W1, WZR, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, W1, WZR, X3", asm);
        }

        {
            var raw = UMADDL(X15, W1, WZR, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, W1, WZR, X3", asm);
        }

        {
            var raw = UMADDL(XZR, W1, WZR, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, W1, WZR, X3", asm);
        }

        {
            var raw = UMADDL(X0, W16, WZR, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, W16, WZR, X3", asm);
        }

        {
            var raw = UMADDL(X15, W16, WZR, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, W16, WZR, X3", asm);
        }

        {
            var raw = UMADDL(XZR, W16, WZR, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, W16, WZR, X3", asm);
        }

        {
            var raw = UMADDL(X0, WZR, WZR, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, WZR, WZR, X3", asm);
        }

        {
            var raw = UMADDL(X15, WZR, WZR, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, WZR, WZR, X3", asm);
        }

        {
            var raw = UMADDL(XZR, WZR, WZR, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, WZR, WZR, X3", asm);
        }

        {
            var raw = UMADDL(X0, W1, W2, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, W1, W2, X18", asm);
        }

        {
            var raw = UMADDL(X15, W1, W2, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, W1, W2, X18", asm);
        }

        {
            var raw = UMADDL(XZR, W1, W2, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, W1, W2, X18", asm);
        }

        {
            var raw = UMADDL(X0, W16, W2, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, W16, W2, X18", asm);
        }

        {
            var raw = UMADDL(X15, W16, W2, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, W16, W2, X18", asm);
        }

        {
            var raw = UMADDL(XZR, W16, W2, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, W16, W2, X18", asm);
        }

        {
            var raw = UMADDL(X0, WZR, W2, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, WZR, W2, X18", asm);
        }

        {
            var raw = UMADDL(X15, WZR, W2, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, WZR, W2, X18", asm);
        }

        {
            var raw = UMADDL(XZR, WZR, W2, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, WZR, W2, X18", asm);
        }

        {
            var raw = UMADDL(X0, W1, W17, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, W1, W17, X18", asm);
        }

        {
            var raw = UMADDL(X15, W1, W17, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, W1, W17, X18", asm);
        }

        {
            var raw = UMADDL(XZR, W1, W17, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, W1, W17, X18", asm);
        }

        {
            var raw = UMADDL(X0, W16, W17, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, W16, W17, X18", asm);
        }

        {
            var raw = UMADDL(X15, W16, W17, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, W16, W17, X18", asm);
        }

        {
            var raw = UMADDL(XZR, W16, W17, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, W16, W17, X18", asm);
        }

        {
            var raw = UMADDL(X0, WZR, W17, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, WZR, W17, X18", asm);
        }

        {
            var raw = UMADDL(X15, WZR, W17, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, WZR, W17, X18", asm);
        }

        {
            var raw = UMADDL(XZR, WZR, W17, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, WZR, W17, X18", asm);
        }

        {
            var raw = UMADDL(X0, W1, WZR, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, W1, WZR, X18", asm);
        }

        {
            var raw = UMADDL(X15, W1, WZR, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, W1, WZR, X18", asm);
        }

        {
            var raw = UMADDL(XZR, W1, WZR, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, W1, WZR, X18", asm);
        }

        {
            var raw = UMADDL(X0, W16, WZR, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, W16, WZR, X18", asm);
        }

        {
            var raw = UMADDL(X15, W16, WZR, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, W16, WZR, X18", asm);
        }

        {
            var raw = UMADDL(XZR, W16, WZR, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, W16, WZR, X18", asm);
        }

        {
            var raw = UMADDL(X0, WZR, WZR, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, WZR, WZR, X18", asm);
        }

        {
            var raw = UMADDL(X15, WZR, WZR, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, WZR, WZR, X18", asm);
        }

        {
            var raw = UMADDL(XZR, WZR, WZR, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, WZR, WZR, X18", asm);
        }

        {
            var raw = UMADDL(X0, W1, W2, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, W1, W2, XZR", asm);
        }

        {
            var raw = UMADDL(X15, W1, W2, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, W1, W2, XZR", asm);
        }

        {
            var raw = UMADDL(XZR, W1, W2, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, W1, W2, XZR", asm);
        }

        {
            var raw = UMADDL(X0, W16, W2, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, W16, W2, XZR", asm);
        }

        {
            var raw = UMADDL(X15, W16, W2, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, W16, W2, XZR", asm);
        }

        {
            var raw = UMADDL(XZR, W16, W2, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, W16, W2, XZR", asm);
        }

        {
            var raw = UMADDL(X0, WZR, W2, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, WZR, W2, XZR", asm);
        }

        {
            var raw = UMADDL(X15, WZR, W2, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, WZR, W2, XZR", asm);
        }

        {
            var raw = UMADDL(XZR, WZR, W2, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, WZR, W2, XZR", asm);
        }

        {
            var raw = UMADDL(X0, W1, W17, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, W1, W17, XZR", asm);
        }

        {
            var raw = UMADDL(X15, W1, W17, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, W1, W17, XZR", asm);
        }

        {
            var raw = UMADDL(XZR, W1, W17, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, W1, W17, XZR", asm);
        }

        {
            var raw = UMADDL(X0, W16, W17, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, W16, W17, XZR", asm);
        }

        {
            var raw = UMADDL(X15, W16, W17, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, W16, W17, XZR", asm);
        }

        {
            var raw = UMADDL(XZR, W16, W17, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, W16, W17, XZR", asm);
        }

        {
            var raw = UMADDL(X0, WZR, W17, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, WZR, W17, XZR", asm);
        }

        {
            var raw = UMADDL(X15, WZR, W17, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, WZR, W17, XZR", asm);
        }

        {
            var raw = UMADDL(XZR, WZR, W17, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, WZR, W17, XZR", asm);
        }

        {
            var raw = UMADDL(X0, W1, WZR, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, W1, WZR, XZR", asm);
        }

        {
            var raw = UMADDL(X15, W1, WZR, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, W1, WZR, XZR", asm);
        }

        {
            var raw = UMADDL(XZR, W1, WZR, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, W1, WZR, XZR", asm);
        }

        {
            var raw = UMADDL(X0, W16, WZR, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, W16, WZR, XZR", asm);
        }

        {
            var raw = UMADDL(X15, W16, WZR, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, W16, WZR, XZR", asm);
        }

        {
            var raw = UMADDL(XZR, W16, WZR, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, W16, WZR, XZR", asm);
        }

        {
            var raw = UMADDL(X0, WZR, WZR, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X0, WZR, WZR, XZR", asm);
        }

        {
            var raw = UMADDL(X15, WZR, WZR, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL X15, WZR, WZR, XZR", asm);
        }

        {
            var raw = UMADDL(XZR, WZR, WZR, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMADDL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMADDL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMADDL XZR, WZR, WZR, XZR", asm);
        }
    }
}
