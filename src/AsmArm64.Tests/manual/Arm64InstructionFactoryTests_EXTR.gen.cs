// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.manual;

[TestClass]
public class Arm64InstructionFactoryTests_EXTR_General
{

    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.EXTR"/>.
    /// </summary>
    [TestMethod]
    public void Test_EXTR_32_extract_0()
    {

        {
            var raw = EXTR(W0, W1, W2, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR W0, W1, W2, #5", asm);
        }

        {
            var raw = EXTR(W15, W1, W2, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR W15, W1, W2, #5", asm);
        }

        {
            var raw = EXTR(WZR, W1, W2, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR WZR, W1, W2, #5", asm);
        }

        {
            var raw = EXTR(W0, W16, W2, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR W0, W16, W2, #5", asm);
        }

        {
            var raw = EXTR(W15, W16, W2, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR W15, W16, W2, #5", asm);
        }

        {
            var raw = EXTR(WZR, W16, W2, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR WZR, W16, W2, #5", asm);
        }

        {
            var raw = EXTR(W0, WZR, W2, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR W0, WZR, W2, #5", asm);
        }

        {
            var raw = EXTR(W15, WZR, W2, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR W15, WZR, W2, #5", asm);
        }

        {
            var raw = EXTR(WZR, WZR, W2, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR WZR, WZR, W2, #5", asm);
        }

        {
            var raw = EXTR(W0, W1, W17, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR W0, W1, W17, #5", asm);
        }

        {
            var raw = EXTR(W15, W1, W17, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR W15, W1, W17, #5", asm);
        }

        {
            var raw = EXTR(WZR, W1, W17, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR WZR, W1, W17, #5", asm);
        }

        {
            var raw = EXTR(W0, W16, W17, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR W0, W16, W17, #5", asm);
        }

        {
            var raw = EXTR(W15, W16, W17, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR W15, W16, W17, #5", asm);
        }

        {
            var raw = EXTR(WZR, W16, W17, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR WZR, W16, W17, #5", asm);
        }

        {
            var raw = EXTR(W0, WZR, W17, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR W0, WZR, W17, #5", asm);
        }

        {
            var raw = EXTR(W15, WZR, W17, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR W15, WZR, W17, #5", asm);
        }

        {
            var raw = EXTR(WZR, WZR, W17, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR WZR, WZR, W17, #5", asm);
        }

        {
            var raw = EXTR(W0, W1, WZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR W0, W1, WZR, #5", asm);
        }

        {
            var raw = EXTR(W15, W1, WZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR W15, W1, WZR, #5", asm);
        }

        {
            var raw = EXTR(WZR, W1, WZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR WZR, W1, WZR, #5", asm);
        }

        {
            var raw = EXTR(W0, W16, WZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR W0, W16, WZR, #5", asm);
        }

        {
            var raw = EXTR(W15, W16, WZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR W15, W16, WZR, #5", asm);
        }

        {
            var raw = EXTR(WZR, W16, WZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR WZR, W16, WZR, #5", asm);
        }

        {
            var raw = EXTR(W0, WZR, WZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR W0, WZR, WZR, #5", asm);
        }

        {
            var raw = EXTR(W15, WZR, WZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR W15, WZR, WZR, #5", asm);
        }

        {
            var raw = EXTR(WZR, WZR, WZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_32_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR WZR, WZR, WZR, #5", asm);
        }
    }

    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.EXTR"/>.
    /// </summary>
    [TestMethod]
    public void Test_EXTR_64_extract_1()
    {

        {
            var raw = EXTR(X0, X1, X2, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR X0, X1, X2, #5", asm);
        }

        {
            var raw = EXTR(X15, X1, X2, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR X15, X1, X2, #5", asm);
        }

        {
            var raw = EXTR(XZR, X1, X2, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR XZR, X1, X2, #5", asm);
        }

        {
            var raw = EXTR(X0, X16, X2, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR X0, X16, X2, #5", asm);
        }

        {
            var raw = EXTR(X15, X16, X2, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR X15, X16, X2, #5", asm);
        }

        {
            var raw = EXTR(XZR, X16, X2, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR XZR, X16, X2, #5", asm);
        }

        {
            var raw = EXTR(X0, XZR, X2, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR X0, XZR, X2, #5", asm);
        }

        {
            var raw = EXTR(X15, XZR, X2, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR X15, XZR, X2, #5", asm);
        }

        {
            var raw = EXTR(XZR, XZR, X2, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR XZR, XZR, X2, #5", asm);
        }

        {
            var raw = EXTR(X0, X1, X17, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR X0, X1, X17, #5", asm);
        }

        {
            var raw = EXTR(X15, X1, X17, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR X15, X1, X17, #5", asm);
        }

        {
            var raw = EXTR(XZR, X1, X17, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR XZR, X1, X17, #5", asm);
        }

        {
            var raw = EXTR(X0, X16, X17, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR X0, X16, X17, #5", asm);
        }

        {
            var raw = EXTR(X15, X16, X17, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR X15, X16, X17, #5", asm);
        }

        {
            var raw = EXTR(XZR, X16, X17, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR XZR, X16, X17, #5", asm);
        }

        {
            var raw = EXTR(X0, XZR, X17, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR X0, XZR, X17, #5", asm);
        }

        {
            var raw = EXTR(X15, XZR, X17, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR X15, XZR, X17, #5", asm);
        }

        {
            var raw = EXTR(XZR, XZR, X17, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR XZR, XZR, X17, #5", asm);
        }

        {
            var raw = EXTR(X0, X1, XZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR X0, X1, XZR, #5", asm);
        }

        {
            var raw = EXTR(X15, X1, XZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR X15, X1, XZR, #5", asm);
        }

        {
            var raw = EXTR(XZR, X1, XZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR XZR, X1, XZR, #5", asm);
        }

        {
            var raw = EXTR(X0, X16, XZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR X0, X16, XZR, #5", asm);
        }

        {
            var raw = EXTR(X15, X16, XZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR X15, X16, XZR, #5", asm);
        }

        {
            var raw = EXTR(XZR, X16, XZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR XZR, X16, XZR, #5", asm);
        }

        {
            var raw = EXTR(X0, XZR, XZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR X0, XZR, XZR, #5", asm);
        }

        {
            var raw = EXTR(X15, XZR, XZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR X15, XZR, XZR, #5", asm);
        }

        {
            var raw = EXTR(XZR, XZR, XZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.EXTR_64_extract, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.EXTR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("EXTR XZR, XZR, XZR, #5", asm);
        }
    }
}
