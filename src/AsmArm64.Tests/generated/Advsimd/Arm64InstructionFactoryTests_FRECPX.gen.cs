// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Advsimd;

[TestClass]
public class Arm64InstructionFactoryTests_FRECPX_Advsimd
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FRECPX"/>.
    /// </summary>
    [TestMethod]
    public void Test_FRECPX_asisdmiscfp16_r_0()
    {
        
        {
            var raw = FRECPX(H0, H1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FRECPX_asisdmiscfp16_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FRECPX, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FRECPX H0, H1", asm);
        }
        
        {
            var raw = FRECPX(H31, H1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FRECPX_asisdmiscfp16_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FRECPX, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FRECPX H31, H1", asm);
        }
        
        {
            var raw = FRECPX(H0, H31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FRECPX_asisdmiscfp16_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FRECPX, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FRECPX H0, H31", asm);
        }
        
        {
            var raw = FRECPX(H31, H31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FRECPX_asisdmiscfp16_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FRECPX, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FRECPX H31, H31", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FRECPX"/>.
    /// </summary>
    [TestMethod]
    public void Test_FRECPX_asisdmisc_r_1()
    {
        
        {
            var raw = FRECPX(S1, S2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FRECPX_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FRECPX, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FRECPX S1, S2", asm);
        }
        
        {
            var raw = FRECPX(S31, S2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FRECPX_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FRECPX, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FRECPX S31, S2", asm);
        }
        
        {
            var raw = FRECPX(S1, S0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FRECPX_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FRECPX, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FRECPX S1, S0", asm);
        }
        
        {
            var raw = FRECPX(S31, S0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FRECPX_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FRECPX, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FRECPX S31, S0", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FRECPX"/>.
    /// </summary>
    [TestMethod]
    public void Test_FRECPX_asisdmisc_r_2()
    {
        
        {
            var raw = FRECPX(D1, D2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FRECPX_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FRECPX, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FRECPX D1, D2", asm);
        }
        
        {
            var raw = FRECPX(D31, D2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FRECPX_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FRECPX, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FRECPX D31, D2", asm);
        }
        
        {
            var raw = FRECPX(D1, D0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FRECPX_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FRECPX, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FRECPX D1, D0", asm);
        }
        
        {
            var raw = FRECPX(D31, D0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FRECPX_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FRECPX, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FRECPX D31, D0", asm);
        }
    }
}
