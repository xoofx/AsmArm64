// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Advsimd;

[TestClass]
public class Arm64InstructionFactoryTests_FCVTN_Advsimd
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTN"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTN_asimdsame2_d_0()
    {
        
        {
            var raw = FCVTN(V0.T_8B, V1.T_4H, V2.T_4H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTN_asimdsame2_d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTN, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTN V0.8B, V1.4H, V2.4H", asm);
        }
        
        {
            var raw = FCVTN(V30.T_8B, V1.T_4H, V2.T_4H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTN_asimdsame2_d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTN, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTN V30.8B, V1.4H, V2.4H", asm);
        }
        
        {
            var raw = FCVTN(V0.T_8B, V31.T_4H, V2.T_4H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTN_asimdsame2_d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTN, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTN V0.8B, V31.4H, V2.4H", asm);
        }
        
        {
            var raw = FCVTN(V30.T_8B, V31.T_4H, V2.T_4H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTN_asimdsame2_d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTN, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTN V30.8B, V31.4H, V2.4H", asm);
        }
        
        {
            var raw = FCVTN(V0.T_8B, V1.T_4H, V0.T_4H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTN_asimdsame2_d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTN, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTN V0.8B, V1.4H, V0.4H", asm);
        }
        
        {
            var raw = FCVTN(V30.T_8B, V1.T_4H, V0.T_4H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTN_asimdsame2_d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTN, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTN V30.8B, V1.4H, V0.4H", asm);
        }
        
        {
            var raw = FCVTN(V0.T_8B, V31.T_4H, V0.T_4H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTN_asimdsame2_d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTN, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTN V0.8B, V31.4H, V0.4H", asm);
        }
        
        {
            var raw = FCVTN(V30.T_8B, V31.T_4H, V0.T_4H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTN_asimdsame2_d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTN, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTN V30.8B, V31.4H, V0.4H", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTN"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTN_asimdsame2_d_1()
    {
        
        {
            var raw = FCVTN(V0.T_16B, V1.T_8H, V2.T_8H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTN_asimdsame2_d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTN, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTN V0.16B, V1.8H, V2.8H", asm);
        }
        
        {
            var raw = FCVTN(V30.T_16B, V1.T_8H, V2.T_8H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTN_asimdsame2_d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTN, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTN V30.16B, V1.8H, V2.8H", asm);
        }
        
        {
            var raw = FCVTN(V0.T_16B, V31.T_8H, V2.T_8H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTN_asimdsame2_d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTN, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTN V0.16B, V31.8H, V2.8H", asm);
        }
        
        {
            var raw = FCVTN(V30.T_16B, V31.T_8H, V2.T_8H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTN_asimdsame2_d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTN, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTN V30.16B, V31.8H, V2.8H", asm);
        }
        
        {
            var raw = FCVTN(V0.T_16B, V1.T_8H, V0.T_8H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTN_asimdsame2_d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTN, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTN V0.16B, V1.8H, V0.8H", asm);
        }
        
        {
            var raw = FCVTN(V30.T_16B, V1.T_8H, V0.T_8H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTN_asimdsame2_d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTN, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTN V30.16B, V1.8H, V0.8H", asm);
        }
        
        {
            var raw = FCVTN(V0.T_16B, V31.T_8H, V0.T_8H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTN_asimdsame2_d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTN, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTN V0.16B, V31.8H, V0.8H", asm);
        }
        
        {
            var raw = FCVTN(V30.T_16B, V31.T_8H, V0.T_8H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTN_asimdsame2_d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTN, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTN V30.16B, V31.8H, V0.8H", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTN"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTN_asimdmisc_n_2()
    {
        
        {
            var raw = FCVTN(V0.T_4H, V1.T_4S);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTN_asimdmisc_n, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTN, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTN V0.4H, V1.4S", asm);
        }
        
        {
            var raw = FCVTN(V30.T_4H, V1.T_4S);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTN_asimdmisc_n, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTN, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTN V30.4H, V1.4S", asm);
        }
        
        {
            var raw = FCVTN(V0.T_4H, V31.T_4S);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTN_asimdmisc_n, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTN, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTN V0.4H, V31.4S", asm);
        }
        
        {
            var raw = FCVTN(V30.T_4H, V31.T_4S);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTN_asimdmisc_n, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTN, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTN V30.4H, V31.4S", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTN"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTN_asimdmisc_n_3()
    {
        
        {
            var raw = FCVTN(V0.T_2S, V1.T_2D);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTN_asimdmisc_n, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTN, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTN V0.2S, V1.2D", asm);
        }
        
        {
            var raw = FCVTN(V30.T_2S, V1.T_2D);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTN_asimdmisc_n, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTN, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTN V30.2S, V1.2D", asm);
        }
        
        {
            var raw = FCVTN(V0.T_2S, V31.T_2D);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTN_asimdmisc_n, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTN, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTN V0.2S, V31.2D", asm);
        }
        
        {
            var raw = FCVTN(V30.T_2S, V31.T_2D);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTN_asimdmisc_n, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTN, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTN V30.2S, V31.2D", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTN"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTN_asimdsame2_h_4()
    {
        Assert.Inconclusive("TODO");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTN"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTN_asimdsame2_h_5()
    {
        Assert.Inconclusive("TODO");
    }
}
