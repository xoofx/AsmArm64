// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Advsimd;

[TestClass]
public class Arm64InstructionFactoryTests_FMLAL2_Advsimd
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FMLAL2"/>.
    /// </summary>
    [TestMethod]
    public void Test_FMLAL2_asimdelem_lh_0()
    {
        
        {
            var raw = FMLAL2(V0.T_2S, V1.T_2H, V2.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdelem_lh, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V0.2S, V1.2H, V2.H[1]", asm);
        }
        
        {
            var raw = FMLAL2(V30.T_2S, V1.T_2H, V2.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdelem_lh, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V30.2S, V1.2H, V2.H[1]", asm);
        }
        
        {
            var raw = FMLAL2(V0.T_2S, V31.T_2H, V2.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdelem_lh, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V0.2S, V31.2H, V2.H[1]", asm);
        }
        
        {
            var raw = FMLAL2(V30.T_2S, V31.T_2H, V2.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdelem_lh, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V30.2S, V31.2H, V2.H[1]", asm);
        }
        
        {
            var raw = FMLAL2(V0.T_2S, V1.T_2H, V0.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdelem_lh, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V0.2S, V1.2H, V0.H[1]", asm);
        }
        
        {
            var raw = FMLAL2(V30.T_2S, V1.T_2H, V0.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdelem_lh, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V30.2S, V1.2H, V0.H[1]", asm);
        }
        
        {
            var raw = FMLAL2(V0.T_2S, V31.T_2H, V0.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdelem_lh, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V0.2S, V31.2H, V0.H[1]", asm);
        }
        
        {
            var raw = FMLAL2(V30.T_2S, V31.T_2H, V0.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdelem_lh, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V30.2S, V31.2H, V0.H[1]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FMLAL2"/>.
    /// </summary>
    [TestMethod]
    public void Test_FMLAL2_asimdelem_lh_1()
    {
        
        {
            var raw = FMLAL2(V0.T_4S, V1.T_4H, V2.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdelem_lh, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V0.4S, V1.4H, V2.H[1]", asm);
        }
        
        {
            var raw = FMLAL2(V30.T_4S, V1.T_4H, V2.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdelem_lh, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V30.4S, V1.4H, V2.H[1]", asm);
        }
        
        {
            var raw = FMLAL2(V0.T_4S, V31.T_4H, V2.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdelem_lh, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V0.4S, V31.4H, V2.H[1]", asm);
        }
        
        {
            var raw = FMLAL2(V30.T_4S, V31.T_4H, V2.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdelem_lh, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V30.4S, V31.4H, V2.H[1]", asm);
        }
        
        {
            var raw = FMLAL2(V0.T_4S, V1.T_4H, V0.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdelem_lh, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V0.4S, V1.4H, V0.H[1]", asm);
        }
        
        {
            var raw = FMLAL2(V30.T_4S, V1.T_4H, V0.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdelem_lh, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V30.4S, V1.4H, V0.H[1]", asm);
        }
        
        {
            var raw = FMLAL2(V0.T_4S, V31.T_4H, V0.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdelem_lh, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V0.4S, V31.4H, V0.H[1]", asm);
        }
        
        {
            var raw = FMLAL2(V30.T_4S, V31.T_4H, V0.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdelem_lh, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V30.4S, V31.4H, V0.H[1]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FMLAL2"/>.
    /// </summary>
    [TestMethod]
    public void Test_FMLAL2_asimdsame_f_2()
    {
        
        {
            var raw = FMLAL2(V0.T_2S, V1.T_2H, V2.T_2H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdsame_f, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V0.2S, V1.2H, V2.2H", asm);
        }
        
        {
            var raw = FMLAL2(V30.T_2S, V1.T_2H, V2.T_2H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdsame_f, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V30.2S, V1.2H, V2.2H", asm);
        }
        
        {
            var raw = FMLAL2(V0.T_2S, V31.T_2H, V2.T_2H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdsame_f, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V0.2S, V31.2H, V2.2H", asm);
        }
        
        {
            var raw = FMLAL2(V30.T_2S, V31.T_2H, V2.T_2H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdsame_f, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V30.2S, V31.2H, V2.2H", asm);
        }
        
        {
            var raw = FMLAL2(V0.T_2S, V1.T_2H, V0.T_2H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdsame_f, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V0.2S, V1.2H, V0.2H", asm);
        }
        
        {
            var raw = FMLAL2(V30.T_2S, V1.T_2H, V0.T_2H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdsame_f, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V30.2S, V1.2H, V0.2H", asm);
        }
        
        {
            var raw = FMLAL2(V0.T_2S, V31.T_2H, V0.T_2H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdsame_f, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V0.2S, V31.2H, V0.2H", asm);
        }
        
        {
            var raw = FMLAL2(V30.T_2S, V31.T_2H, V0.T_2H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdsame_f, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V30.2S, V31.2H, V0.2H", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FMLAL2"/>.
    /// </summary>
    [TestMethod]
    public void Test_FMLAL2_asimdsame_f_3()
    {
        
        {
            var raw = FMLAL2(V0.T_4S, V1.T_4H, V2.T_4H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdsame_f, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V0.4S, V1.4H, V2.4H", asm);
        }
        
        {
            var raw = FMLAL2(V30.T_4S, V1.T_4H, V2.T_4H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdsame_f, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V30.4S, V1.4H, V2.4H", asm);
        }
        
        {
            var raw = FMLAL2(V0.T_4S, V31.T_4H, V2.T_4H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdsame_f, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V0.4S, V31.4H, V2.4H", asm);
        }
        
        {
            var raw = FMLAL2(V30.T_4S, V31.T_4H, V2.T_4H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdsame_f, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V30.4S, V31.4H, V2.4H", asm);
        }
        
        {
            var raw = FMLAL2(V0.T_4S, V1.T_4H, V0.T_4H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdsame_f, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V0.4S, V1.4H, V0.4H", asm);
        }
        
        {
            var raw = FMLAL2(V30.T_4S, V1.T_4H, V0.T_4H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdsame_f, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V30.4S, V1.4H, V0.4H", asm);
        }
        
        {
            var raw = FMLAL2(V0.T_4S, V31.T_4H, V0.T_4H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdsame_f, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V0.4S, V31.4H, V0.4H", asm);
        }
        
        {
            var raw = FMLAL2(V30.T_4S, V31.T_4H, V0.T_4H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMLAL2_asimdsame_f, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMLAL2, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMLAL2 V30.4S, V31.4H, V0.4H", asm);
        }
    }
}
