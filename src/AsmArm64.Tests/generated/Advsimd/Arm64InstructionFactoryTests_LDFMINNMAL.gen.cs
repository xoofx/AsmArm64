// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Advsimd;

[TestClass]
public class Arm64InstructionFactoryTests_LDFMINNMAL_Advsimd
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDFMINNMAL"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDFMINNMAL_16_0()
    {
        
        {
            var raw = LDFMINNMAL(H0, H1, _[X3]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDFMINNMAL_16, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDFMINNMAL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDFMINNMAL H0, H1, [X3]", asm);
        }
        
        {
            var raw = LDFMINNMAL(H31, H1, _[X3]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDFMINNMAL_16, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDFMINNMAL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDFMINNMAL H31, H1, [X3]", asm);
        }
        
        {
            var raw = LDFMINNMAL(H0, H31, _[X3]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDFMINNMAL_16, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDFMINNMAL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDFMINNMAL H0, H31, [X3]", asm);
        }
        
        {
            var raw = LDFMINNMAL(H31, H31, _[X3]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDFMINNMAL_16, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDFMINNMAL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDFMINNMAL H31, H31, [X3]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDFMINNMAL"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDFMINNMAL_32_1()
    {
        
        {
            var raw = LDFMINNMAL(S0, S1, _[X3]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDFMINNMAL_32, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDFMINNMAL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDFMINNMAL S0, S1, [X3]", asm);
        }
        
        {
            var raw = LDFMINNMAL(S31, S1, _[X3]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDFMINNMAL_32, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDFMINNMAL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDFMINNMAL S31, S1, [X3]", asm);
        }
        
        {
            var raw = LDFMINNMAL(S0, S31, _[X3]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDFMINNMAL_32, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDFMINNMAL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDFMINNMAL S0, S31, [X3]", asm);
        }
        
        {
            var raw = LDFMINNMAL(S31, S31, _[X3]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDFMINNMAL_32, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDFMINNMAL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDFMINNMAL S31, S31, [X3]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDFMINNMAL"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDFMINNMAL_64_2()
    {
        
        {
            var raw = LDFMINNMAL(D0, D1, _[X3]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDFMINNMAL_64, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDFMINNMAL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDFMINNMAL D0, D1, [X3]", asm);
        }
        
        {
            var raw = LDFMINNMAL(D31, D1, _[X3]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDFMINNMAL_64, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDFMINNMAL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDFMINNMAL D31, D1, [X3]", asm);
        }
        
        {
            var raw = LDFMINNMAL(D0, D31, _[X3]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDFMINNMAL_64, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDFMINNMAL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDFMINNMAL D0, D31, [X3]", asm);
        }
        
        {
            var raw = LDFMINNMAL(D31, D31, _[X3]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDFMINNMAL_64, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDFMINNMAL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDFMINNMAL D31, D31, [X3]", asm);
        }
    }
}
