// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Advsimd;

[TestClass]
public class Arm64InstructionFactoryTests_SQABS_Advsimd : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SQABS"/>.
    /// </summary>
    [TestMethod]
    public void Test_SQABS_asisdmisc_r_0()
    {
        TestInst(SQABS(B1, B2), asm => asm.SQABS(B1, B2), Arm64InstructionId.SQABS_asisdmisc_r, Arm64Mnemonic.SQABS, "SQABS B1, B2");
        TestInst(SQABS(B31, B2), asm => asm.SQABS(B31, B2), Arm64InstructionId.SQABS_asisdmisc_r, Arm64Mnemonic.SQABS, "SQABS B31, B2");
        TestInst(SQABS(B1, B0), asm => asm.SQABS(B1, B0), Arm64InstructionId.SQABS_asisdmisc_r, Arm64Mnemonic.SQABS, "SQABS B1, B0");
        TestInst(SQABS(B31, B0), asm => asm.SQABS(B31, B0), Arm64InstructionId.SQABS_asisdmisc_r, Arm64Mnemonic.SQABS, "SQABS B31, B0");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SQABS"/>.
    /// </summary>
    [TestMethod]
    public void Test_SQABS_asisdmisc_r_1()
    {
        TestInst(SQABS(H1, H2), asm => asm.SQABS(H1, H2), Arm64InstructionId.SQABS_asisdmisc_r, Arm64Mnemonic.SQABS, "SQABS H1, H2");
        TestInst(SQABS(H31, H2), asm => asm.SQABS(H31, H2), Arm64InstructionId.SQABS_asisdmisc_r, Arm64Mnemonic.SQABS, "SQABS H31, H2");
        TestInst(SQABS(H1, H0), asm => asm.SQABS(H1, H0), Arm64InstructionId.SQABS_asisdmisc_r, Arm64Mnemonic.SQABS, "SQABS H1, H0");
        TestInst(SQABS(H31, H0), asm => asm.SQABS(H31, H0), Arm64InstructionId.SQABS_asisdmisc_r, Arm64Mnemonic.SQABS, "SQABS H31, H0");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SQABS"/>.
    /// </summary>
    [TestMethod]
    public void Test_SQABS_asisdmisc_r_2()
    {
        TestInst(SQABS(S1, S2), asm => asm.SQABS(S1, S2), Arm64InstructionId.SQABS_asisdmisc_r, Arm64Mnemonic.SQABS, "SQABS S1, S2");
        TestInst(SQABS(S31, S2), asm => asm.SQABS(S31, S2), Arm64InstructionId.SQABS_asisdmisc_r, Arm64Mnemonic.SQABS, "SQABS S31, S2");
        TestInst(SQABS(S1, S0), asm => asm.SQABS(S1, S0), Arm64InstructionId.SQABS_asisdmisc_r, Arm64Mnemonic.SQABS, "SQABS S1, S0");
        TestInst(SQABS(S31, S0), asm => asm.SQABS(S31, S0), Arm64InstructionId.SQABS_asisdmisc_r, Arm64Mnemonic.SQABS, "SQABS S31, S0");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SQABS"/>.
    /// </summary>
    [TestMethod]
    public void Test_SQABS_asisdmisc_r_3()
    {
        TestInst(SQABS(D1, D2), asm => asm.SQABS(D1, D2), Arm64InstructionId.SQABS_asisdmisc_r, Arm64Mnemonic.SQABS, "SQABS D1, D2");
        TestInst(SQABS(D31, D2), asm => asm.SQABS(D31, D2), Arm64InstructionId.SQABS_asisdmisc_r, Arm64Mnemonic.SQABS, "SQABS D31, D2");
        TestInst(SQABS(D1, D0), asm => asm.SQABS(D1, D0), Arm64InstructionId.SQABS_asisdmisc_r, Arm64Mnemonic.SQABS, "SQABS D1, D0");
        TestInst(SQABS(D31, D0), asm => asm.SQABS(D31, D0), Arm64InstructionId.SQABS_asisdmisc_r, Arm64Mnemonic.SQABS, "SQABS D31, D0");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SQABS"/>.
    /// </summary>
    [TestMethod]
    public void Test_SQABS_asimdmisc_r_4()
    {
        TestInst(SQABS(V0.T_8B, V1.T_8B), asm => asm.SQABS(V0.T_8B, V1.T_8B), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V0.8B, V1.8B");
        TestInst(SQABS(V30.T_8B, V1.T_8B), asm => asm.SQABS(V30.T_8B, V1.T_8B), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V30.8B, V1.8B");
        TestInst(SQABS(V0.T_8B, V31.T_8B), asm => asm.SQABS(V0.T_8B, V31.T_8B), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V0.8B, V31.8B");
        TestInst(SQABS(V30.T_8B, V31.T_8B), asm => asm.SQABS(V30.T_8B, V31.T_8B), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V30.8B, V31.8B");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SQABS"/>.
    /// </summary>
    [TestMethod]
    public void Test_SQABS_asimdmisc_r_5()
    {
        TestInst(SQABS(V0.T_16B, V1.T_16B), asm => asm.SQABS(V0.T_16B, V1.T_16B), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V0.16B, V1.16B");
        TestInst(SQABS(V30.T_16B, V1.T_16B), asm => asm.SQABS(V30.T_16B, V1.T_16B), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V30.16B, V1.16B");
        TestInst(SQABS(V0.T_16B, V31.T_16B), asm => asm.SQABS(V0.T_16B, V31.T_16B), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V0.16B, V31.16B");
        TestInst(SQABS(V30.T_16B, V31.T_16B), asm => asm.SQABS(V30.T_16B, V31.T_16B), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V30.16B, V31.16B");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SQABS"/>.
    /// </summary>
    [TestMethod]
    public void Test_SQABS_asimdmisc_r_6()
    {
        TestInst(SQABS(V0.T_4H, V1.T_4H), asm => asm.SQABS(V0.T_4H, V1.T_4H), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V0.4H, V1.4H");
        TestInst(SQABS(V30.T_4H, V1.T_4H), asm => asm.SQABS(V30.T_4H, V1.T_4H), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V30.4H, V1.4H");
        TestInst(SQABS(V0.T_4H, V31.T_4H), asm => asm.SQABS(V0.T_4H, V31.T_4H), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V0.4H, V31.4H");
        TestInst(SQABS(V30.T_4H, V31.T_4H), asm => asm.SQABS(V30.T_4H, V31.T_4H), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V30.4H, V31.4H");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SQABS"/>.
    /// </summary>
    [TestMethod]
    public void Test_SQABS_asimdmisc_r_7()
    {
        TestInst(SQABS(V0.T_8H, V1.T_8H), asm => asm.SQABS(V0.T_8H, V1.T_8H), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V0.8H, V1.8H");
        TestInst(SQABS(V30.T_8H, V1.T_8H), asm => asm.SQABS(V30.T_8H, V1.T_8H), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V30.8H, V1.8H");
        TestInst(SQABS(V0.T_8H, V31.T_8H), asm => asm.SQABS(V0.T_8H, V31.T_8H), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V0.8H, V31.8H");
        TestInst(SQABS(V30.T_8H, V31.T_8H), asm => asm.SQABS(V30.T_8H, V31.T_8H), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V30.8H, V31.8H");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SQABS"/>.
    /// </summary>
    [TestMethod]
    public void Test_SQABS_asimdmisc_r_8()
    {
        TestInst(SQABS(V0.T_2S, V1.T_2S), asm => asm.SQABS(V0.T_2S, V1.T_2S), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V0.2S, V1.2S");
        TestInst(SQABS(V30.T_2S, V1.T_2S), asm => asm.SQABS(V30.T_2S, V1.T_2S), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V30.2S, V1.2S");
        TestInst(SQABS(V0.T_2S, V31.T_2S), asm => asm.SQABS(V0.T_2S, V31.T_2S), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V0.2S, V31.2S");
        TestInst(SQABS(V30.T_2S, V31.T_2S), asm => asm.SQABS(V30.T_2S, V31.T_2S), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V30.2S, V31.2S");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SQABS"/>.
    /// </summary>
    [TestMethod]
    public void Test_SQABS_asimdmisc_r_9()
    {
        TestInst(SQABS(V0.T_4S, V1.T_4S), asm => asm.SQABS(V0.T_4S, V1.T_4S), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V0.4S, V1.4S");
        TestInst(SQABS(V30.T_4S, V1.T_4S), asm => asm.SQABS(V30.T_4S, V1.T_4S), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V30.4S, V1.4S");
        TestInst(SQABS(V0.T_4S, V31.T_4S), asm => asm.SQABS(V0.T_4S, V31.T_4S), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V0.4S, V31.4S");
        TestInst(SQABS(V30.T_4S, V31.T_4S), asm => asm.SQABS(V30.T_4S, V31.T_4S), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V30.4S, V31.4S");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SQABS"/>.
    /// </summary>
    [TestMethod]
    public void Test_SQABS_asimdmisc_r_10()
    {
        TestInst(SQABS(V0.T_2D, V1.T_2D), asm => asm.SQABS(V0.T_2D, V1.T_2D), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V0.2D, V1.2D");
        TestInst(SQABS(V30.T_2D, V1.T_2D), asm => asm.SQABS(V30.T_2D, V1.T_2D), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V30.2D, V1.2D");
        TestInst(SQABS(V0.T_2D, V31.T_2D), asm => asm.SQABS(V0.T_2D, V31.T_2D), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V0.2D, V31.2D");
        TestInst(SQABS(V30.T_2D, V31.T_2D), asm => asm.SQABS(V30.T_2D, V31.T_2D), Arm64InstructionId.SQABS_asimdmisc_r, Arm64Mnemonic.SQABS, "SQABS V30.2D, V31.2D");
    }
}
