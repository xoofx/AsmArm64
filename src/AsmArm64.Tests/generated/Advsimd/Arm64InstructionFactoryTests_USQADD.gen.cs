// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Advsimd;

[TestClass]
public class Arm64InstructionFactoryTests_USQADD_Advsimd
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.USQADD"/>.
    /// </summary>
    [TestMethod]
    public void Test_USQADD_asisdmisc_r_0()
    {
        
        {
            var raw = USQADD(B1, B2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD B1, B2", asm);
        }
        
        {
            var raw = USQADD(B31, B2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD B31, B2", asm);
        }
        
        {
            var raw = USQADD(B1, B0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD B1, B0", asm);
        }
        
        {
            var raw = USQADD(B31, B0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD B31, B0", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.USQADD"/>.
    /// </summary>
    [TestMethod]
    public void Test_USQADD_asisdmisc_r_1()
    {
        
        {
            var raw = USQADD(H1, H2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD H1, H2", asm);
        }
        
        {
            var raw = USQADD(H31, H2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD H31, H2", asm);
        }
        
        {
            var raw = USQADD(H1, H0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD H1, H0", asm);
        }
        
        {
            var raw = USQADD(H31, H0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD H31, H0", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.USQADD"/>.
    /// </summary>
    [TestMethod]
    public void Test_USQADD_asisdmisc_r_2()
    {
        
        {
            var raw = USQADD(S1, S2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD S1, S2", asm);
        }
        
        {
            var raw = USQADD(S31, S2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD S31, S2", asm);
        }
        
        {
            var raw = USQADD(S1, S0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD S1, S0", asm);
        }
        
        {
            var raw = USQADD(S31, S0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD S31, S0", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.USQADD"/>.
    /// </summary>
    [TestMethod]
    public void Test_USQADD_asisdmisc_r_3()
    {
        
        {
            var raw = USQADD(D1, D2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD D1, D2", asm);
        }
        
        {
            var raw = USQADD(D31, D2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD D31, D2", asm);
        }
        
        {
            var raw = USQADD(D1, D0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD D1, D0", asm);
        }
        
        {
            var raw = USQADD(D31, D0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD D31, D0", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.USQADD"/>.
    /// </summary>
    [TestMethod]
    public void Test_USQADD_asimdmisc_r_4()
    {
        
        {
            var raw = USQADD(V0.T_8B, V1.T_8B);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V0.8B, V1.8B", asm);
        }
        
        {
            var raw = USQADD(V30.T_8B, V1.T_8B);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V30.8B, V1.8B", asm);
        }
        
        {
            var raw = USQADD(V0.T_8B, V31.T_8B);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V0.8B, V31.8B", asm);
        }
        
        {
            var raw = USQADD(V30.T_8B, V31.T_8B);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V30.8B, V31.8B", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.USQADD"/>.
    /// </summary>
    [TestMethod]
    public void Test_USQADD_asimdmisc_r_5()
    {
        
        {
            var raw = USQADD(V0.T_16B, V1.T_16B);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V0.16B, V1.16B", asm);
        }
        
        {
            var raw = USQADD(V30.T_16B, V1.T_16B);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V30.16B, V1.16B", asm);
        }
        
        {
            var raw = USQADD(V0.T_16B, V31.T_16B);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V0.16B, V31.16B", asm);
        }
        
        {
            var raw = USQADD(V30.T_16B, V31.T_16B);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V30.16B, V31.16B", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.USQADD"/>.
    /// </summary>
    [TestMethod]
    public void Test_USQADD_asimdmisc_r_6()
    {
        
        {
            var raw = USQADD(V0.T_4H, V1.T_4H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V0.4H, V1.4H", asm);
        }
        
        {
            var raw = USQADD(V30.T_4H, V1.T_4H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V30.4H, V1.4H", asm);
        }
        
        {
            var raw = USQADD(V0.T_4H, V31.T_4H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V0.4H, V31.4H", asm);
        }
        
        {
            var raw = USQADD(V30.T_4H, V31.T_4H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V30.4H, V31.4H", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.USQADD"/>.
    /// </summary>
    [TestMethod]
    public void Test_USQADD_asimdmisc_r_7()
    {
        
        {
            var raw = USQADD(V0.T_8H, V1.T_8H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V0.8H, V1.8H", asm);
        }
        
        {
            var raw = USQADD(V30.T_8H, V1.T_8H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V30.8H, V1.8H", asm);
        }
        
        {
            var raw = USQADD(V0.T_8H, V31.T_8H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V0.8H, V31.8H", asm);
        }
        
        {
            var raw = USQADD(V30.T_8H, V31.T_8H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V30.8H, V31.8H", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.USQADD"/>.
    /// </summary>
    [TestMethod]
    public void Test_USQADD_asimdmisc_r_8()
    {
        
        {
            var raw = USQADD(V0.T_2S, V1.T_2S);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V0.2S, V1.2S", asm);
        }
        
        {
            var raw = USQADD(V30.T_2S, V1.T_2S);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V30.2S, V1.2S", asm);
        }
        
        {
            var raw = USQADD(V0.T_2S, V31.T_2S);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V0.2S, V31.2S", asm);
        }
        
        {
            var raw = USQADD(V30.T_2S, V31.T_2S);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V30.2S, V31.2S", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.USQADD"/>.
    /// </summary>
    [TestMethod]
    public void Test_USQADD_asimdmisc_r_9()
    {
        
        {
            var raw = USQADD(V0.T_4S, V1.T_4S);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V0.4S, V1.4S", asm);
        }
        
        {
            var raw = USQADD(V30.T_4S, V1.T_4S);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V30.4S, V1.4S", asm);
        }
        
        {
            var raw = USQADD(V0.T_4S, V31.T_4S);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V0.4S, V31.4S", asm);
        }
        
        {
            var raw = USQADD(V30.T_4S, V31.T_4S);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V30.4S, V31.4S", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.USQADD"/>.
    /// </summary>
    [TestMethod]
    public void Test_USQADD_asimdmisc_r_10()
    {
        
        {
            var raw = USQADD(V0.T_2D, V1.T_2D);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V0.2D, V1.2D", asm);
        }
        
        {
            var raw = USQADD(V30.T_2D, V1.T_2D);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V30.2D, V1.2D", asm);
        }
        
        {
            var raw = USQADD(V0.T_2D, V31.T_2D);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V0.2D, V31.2D", asm);
        }
        
        {
            var raw = USQADD(V30.T_2D, V31.T_2D);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.USQADD_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.USQADD, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("USQADD V30.2D, V31.2D", asm);
        }
    }
}
