// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Advsimd;

[TestClass]
public class Arm64InstructionFactoryTests_SHA256H_Advsimd : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SHA256H"/>.
    /// </summary>
    [TestMethod]
    public void Test_SHA256H_qqv_cryptosha3_0()
    {
        TestInst(SHA256H(Q0, Q1, V2.T_4S), asm => asm.SHA256H(Q0, Q1, V2.T_4S), Arm64InstructionId.SHA256H_qqv_cryptosha3, Arm64Mnemonic.SHA256H, "SHA256H Q0, Q1, V2.4S");
        TestInst(SHA256H(Q31, Q1, V2.T_4S), asm => asm.SHA256H(Q31, Q1, V2.T_4S), Arm64InstructionId.SHA256H_qqv_cryptosha3, Arm64Mnemonic.SHA256H, "SHA256H Q31, Q1, V2.4S");
        TestInst(SHA256H(Q0, Q31, V2.T_4S), asm => asm.SHA256H(Q0, Q31, V2.T_4S), Arm64InstructionId.SHA256H_qqv_cryptosha3, Arm64Mnemonic.SHA256H, "SHA256H Q0, Q31, V2.4S");
        TestInst(SHA256H(Q31, Q31, V2.T_4S), asm => asm.SHA256H(Q31, Q31, V2.T_4S), Arm64InstructionId.SHA256H_qqv_cryptosha3, Arm64Mnemonic.SHA256H, "SHA256H Q31, Q31, V2.4S");
        TestInst(SHA256H(Q0, Q1, V0.T_4S), asm => asm.SHA256H(Q0, Q1, V0.T_4S), Arm64InstructionId.SHA256H_qqv_cryptosha3, Arm64Mnemonic.SHA256H, "SHA256H Q0, Q1, V0.4S");
        TestInst(SHA256H(Q31, Q1, V0.T_4S), asm => asm.SHA256H(Q31, Q1, V0.T_4S), Arm64InstructionId.SHA256H_qqv_cryptosha3, Arm64Mnemonic.SHA256H, "SHA256H Q31, Q1, V0.4S");
        TestInst(SHA256H(Q0, Q31, V0.T_4S), asm => asm.SHA256H(Q0, Q31, V0.T_4S), Arm64InstructionId.SHA256H_qqv_cryptosha3, Arm64Mnemonic.SHA256H, "SHA256H Q0, Q31, V0.4S");
        TestInst(SHA256H(Q31, Q31, V0.T_4S), asm => asm.SHA256H(Q31, Q31, V0.T_4S), Arm64InstructionId.SHA256H_qqv_cryptosha3, Arm64Mnemonic.SHA256H, "SHA256H Q31, Q31, V0.4S");
    }
}
