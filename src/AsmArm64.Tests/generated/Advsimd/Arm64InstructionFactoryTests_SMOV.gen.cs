// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Advsimd;

[TestClass]
public class Arm64InstructionFactoryTests_SMOV_Advsimd
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SMOV"/>.
    /// </summary>
    [TestMethod]
    public void Test_SMOV_asimdins_w_w_0()
    {
        
        {
            var raw = SMOV(W0, V1.B[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_w_w, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV W0, V1.B[0]", asm);
        }
        
        {
            var raw = SMOV(W15, V1.B[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_w_w, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV W15, V1.B[0]", asm);
        }
        
        {
            var raw = SMOV(WZR, V1.B[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_w_w, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV WZR, V1.B[0]", asm);
        }
        
        {
            var raw = SMOV(W0, V31.B[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_w_w, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV W0, V31.B[1]", asm);
        }
        
        {
            var raw = SMOV(W15, V31.B[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_w_w, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV W15, V31.B[1]", asm);
        }
        
        {
            var raw = SMOV(WZR, V31.B[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_w_w, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV WZR, V31.B[1]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SMOV"/>.
    /// </summary>
    [TestMethod]
    public void Test_SMOV_asimdins_w_w_1()
    {
        
        {
            var raw = SMOV(W0, V1.H[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_w_w, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV W0, V1.H[0]", asm);
        }
        
        {
            var raw = SMOV(W15, V1.H[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_w_w, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV W15, V1.H[0]", asm);
        }
        
        {
            var raw = SMOV(WZR, V1.H[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_w_w, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV WZR, V1.H[0]", asm);
        }
        
        {
            var raw = SMOV(W0, V31.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_w_w, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV W0, V31.H[1]", asm);
        }
        
        {
            var raw = SMOV(W15, V31.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_w_w, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV W15, V31.H[1]", asm);
        }
        
        {
            var raw = SMOV(WZR, V31.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_w_w, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV WZR, V31.H[1]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SMOV"/>.
    /// </summary>
    [TestMethod]
    public void Test_SMOV_asimdins_x_x_2()
    {
        
        {
            var raw = SMOV(X0, V1.B[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_x_x, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV X0, V1.B[0]", asm);
        }
        
        {
            var raw = SMOV(X15, V1.B[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_x_x, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV X15, V1.B[0]", asm);
        }
        
        {
            var raw = SMOV(XZR, V1.B[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_x_x, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV XZR, V1.B[0]", asm);
        }
        
        {
            var raw = SMOV(X0, V31.B[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_x_x, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV X0, V31.B[1]", asm);
        }
        
        {
            var raw = SMOV(X15, V31.B[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_x_x, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV X15, V31.B[1]", asm);
        }
        
        {
            var raw = SMOV(XZR, V31.B[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_x_x, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV XZR, V31.B[1]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SMOV"/>.
    /// </summary>
    [TestMethod]
    public void Test_SMOV_asimdins_x_x_3()
    {
        
        {
            var raw = SMOV(X0, V1.H[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_x_x, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV X0, V1.H[0]", asm);
        }
        
        {
            var raw = SMOV(X15, V1.H[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_x_x, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV X15, V1.H[0]", asm);
        }
        
        {
            var raw = SMOV(XZR, V1.H[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_x_x, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV XZR, V1.H[0]", asm);
        }
        
        {
            var raw = SMOV(X0, V31.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_x_x, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV X0, V31.H[1]", asm);
        }
        
        {
            var raw = SMOV(X15, V31.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_x_x, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV X15, V31.H[1]", asm);
        }
        
        {
            var raw = SMOV(XZR, V31.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_x_x, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV XZR, V31.H[1]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SMOV"/>.
    /// </summary>
    [TestMethod]
    public void Test_SMOV_asimdins_x_x_4()
    {
        
        {
            var raw = SMOV(X0, V1.S[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_x_x, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV X0, V1.S[0]", asm);
        }
        
        {
            var raw = SMOV(X15, V1.S[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_x_x, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV X15, V1.S[0]", asm);
        }
        
        {
            var raw = SMOV(XZR, V1.S[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_x_x, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV XZR, V1.S[0]", asm);
        }
        
        {
            var raw = SMOV(X0, V31.S[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_x_x, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV X0, V31.S[1]", asm);
        }
        
        {
            var raw = SMOV(X15, V31.S[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_x_x, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV X15, V31.S[1]", asm);
        }
        
        {
            var raw = SMOV(XZR, V31.S[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SMOV_asimdins_x_x, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SMOV XZR, V31.S[1]", asm);
        }
    }
}
