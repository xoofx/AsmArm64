// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Advsimd;

[TestClass]
public class Arm64InstructionFactoryTests_FCVTPU_Advsimd
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTPU"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTPU_asisdmiscfp16_r_0()
    {
        
        {
            var raw = FCVTPU(H0, H1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asisdmiscfp16_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU H0, H1", asm);
        }
        
        {
            var raw = FCVTPU(H31, H1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asisdmiscfp16_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU H31, H1", asm);
        }
        
        {
            var raw = FCVTPU(H0, H31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asisdmiscfp16_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU H0, H31", asm);
        }
        
        {
            var raw = FCVTPU(H31, H31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asisdmiscfp16_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU H31, H31", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTPU"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTPU_asisdmisc_r_1()
    {
        
        {
            var raw = FCVTPU(S1, S2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU S1, S2", asm);
        }
        
        {
            var raw = FCVTPU(S31, S2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU S31, S2", asm);
        }
        
        {
            var raw = FCVTPU(S1, S0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU S1, S0", asm);
        }
        
        {
            var raw = FCVTPU(S31, S0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU S31, S0", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTPU"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTPU_asisdmisc_r_2()
    {
        
        {
            var raw = FCVTPU(D1, D2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU D1, D2", asm);
        }
        
        {
            var raw = FCVTPU(D31, D2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU D31, D2", asm);
        }
        
        {
            var raw = FCVTPU(D1, D0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU D1, D0", asm);
        }
        
        {
            var raw = FCVTPU(D31, D0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asisdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU D31, D0", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTPU"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTPU_asimdmiscfp16_r_3()
    {
        
        {
            var raw = FCVTPU(V0.T_4H, V1.T_4H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asimdmiscfp16_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU V0.4H, V1.4H", asm);
        }
        
        {
            var raw = FCVTPU(V30.T_4H, V1.T_4H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asimdmiscfp16_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU V30.4H, V1.4H", asm);
        }
        
        {
            var raw = FCVTPU(V0.T_4H, V31.T_4H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asimdmiscfp16_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU V0.4H, V31.4H", asm);
        }
        
        {
            var raw = FCVTPU(V30.T_4H, V31.T_4H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asimdmiscfp16_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU V30.4H, V31.4H", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTPU"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTPU_asimdmiscfp16_r_4()
    {
        
        {
            var raw = FCVTPU(V0.T_8H, V1.T_8H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asimdmiscfp16_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU V0.8H, V1.8H", asm);
        }
        
        {
            var raw = FCVTPU(V30.T_8H, V1.T_8H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asimdmiscfp16_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU V30.8H, V1.8H", asm);
        }
        
        {
            var raw = FCVTPU(V0.T_8H, V31.T_8H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asimdmiscfp16_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU V0.8H, V31.8H", asm);
        }
        
        {
            var raw = FCVTPU(V30.T_8H, V31.T_8H);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asimdmiscfp16_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU V30.8H, V31.8H", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTPU"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTPU_asimdmisc_r_5()
    {
        
        {
            var raw = FCVTPU(V0.T_2S, V1.T_2S);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU V0.2S, V1.2S", asm);
        }
        
        {
            var raw = FCVTPU(V30.T_2S, V1.T_2S);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU V30.2S, V1.2S", asm);
        }
        
        {
            var raw = FCVTPU(V0.T_2S, V31.T_2S);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU V0.2S, V31.2S", asm);
        }
        
        {
            var raw = FCVTPU(V30.T_2S, V31.T_2S);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU V30.2S, V31.2S", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTPU"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTPU_asimdmisc_r_6()
    {
        
        {
            var raw = FCVTPU(V0.T_4S, V1.T_4S);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU V0.4S, V1.4S", asm);
        }
        
        {
            var raw = FCVTPU(V30.T_4S, V1.T_4S);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU V30.4S, V1.4S", asm);
        }
        
        {
            var raw = FCVTPU(V0.T_4S, V31.T_4S);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU V0.4S, V31.4S", asm);
        }
        
        {
            var raw = FCVTPU(V30.T_4S, V31.T_4S);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU V30.4S, V31.4S", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTPU"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTPU_asimdmisc_r_7()
    {
        
        {
            var raw = FCVTPU(V0.T_2D, V1.T_2D);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU V0.2D, V1.2D", asm);
        }
        
        {
            var raw = FCVTPU(V30.T_2D, V1.T_2D);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU V30.2D, V1.2D", asm);
        }
        
        {
            var raw = FCVTPU(V0.T_2D, V31.T_2D);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU V0.2D, V31.2D", asm);
        }
        
        {
            var raw = FCVTPU(V30.T_2D, V31.T_2D);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTPU_asimdmisc_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTPU, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTPU V30.2D, V31.2D", asm);
        }
    }
}
