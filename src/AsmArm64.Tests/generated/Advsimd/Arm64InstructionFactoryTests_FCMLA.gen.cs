// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Advsimd;

[TestClass]
public class Arm64InstructionFactoryTests_FCMLA_Advsimd
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCMLA"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCMLA_asimdsame2_c_0()
    {
        
        {
            var raw = FCMLA(V0.T_4H, V1.T_4H, V2.T_4H, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.4H, V1.4H, V2.4H, #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_4H, V1.T_4H, V2.T_4H, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.4H, V1.4H, V2.4H, #90", asm);
        }
        
        {
            var raw = FCMLA(V0.T_4H, V31.T_4H, V2.T_4H, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.4H, V31.4H, V2.4H, #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_4H, V31.T_4H, V2.T_4H, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.4H, V31.4H, V2.4H, #90", asm);
        }
        
        {
            var raw = FCMLA(V0.T_4H, V1.T_4H, V0.T_4H, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.4H, V1.4H, V0.4H, #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_4H, V1.T_4H, V0.T_4H, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.4H, V1.4H, V0.4H, #90", asm);
        }
        
        {
            var raw = FCMLA(V0.T_4H, V31.T_4H, V0.T_4H, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.4H, V31.4H, V0.4H, #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_4H, V31.T_4H, V0.T_4H, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.4H, V31.4H, V0.4H, #90", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCMLA"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCMLA_asimdsame2_c_1()
    {
        
        {
            var raw = FCMLA(V0.T_8H, V1.T_8H, V2.T_8H, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.8H, V1.8H, V2.8H, #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_8H, V1.T_8H, V2.T_8H, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.8H, V1.8H, V2.8H, #90", asm);
        }
        
        {
            var raw = FCMLA(V0.T_8H, V31.T_8H, V2.T_8H, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.8H, V31.8H, V2.8H, #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_8H, V31.T_8H, V2.T_8H, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.8H, V31.8H, V2.8H, #90", asm);
        }
        
        {
            var raw = FCMLA(V0.T_8H, V1.T_8H, V0.T_8H, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.8H, V1.8H, V0.8H, #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_8H, V1.T_8H, V0.T_8H, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.8H, V1.8H, V0.8H, #90", asm);
        }
        
        {
            var raw = FCMLA(V0.T_8H, V31.T_8H, V0.T_8H, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.8H, V31.8H, V0.8H, #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_8H, V31.T_8H, V0.T_8H, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.8H, V31.8H, V0.8H, #90", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCMLA"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCMLA_asimdsame2_c_2()
    {
        
        {
            var raw = FCMLA(V0.T_2S, V1.T_2S, V2.T_2S, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.2S, V1.2S, V2.2S, #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_2S, V1.T_2S, V2.T_2S, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.2S, V1.2S, V2.2S, #90", asm);
        }
        
        {
            var raw = FCMLA(V0.T_2S, V31.T_2S, V2.T_2S, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.2S, V31.2S, V2.2S, #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_2S, V31.T_2S, V2.T_2S, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.2S, V31.2S, V2.2S, #90", asm);
        }
        
        {
            var raw = FCMLA(V0.T_2S, V1.T_2S, V0.T_2S, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.2S, V1.2S, V0.2S, #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_2S, V1.T_2S, V0.T_2S, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.2S, V1.2S, V0.2S, #90", asm);
        }
        
        {
            var raw = FCMLA(V0.T_2S, V31.T_2S, V0.T_2S, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.2S, V31.2S, V0.2S, #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_2S, V31.T_2S, V0.T_2S, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.2S, V31.2S, V0.2S, #90", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCMLA"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCMLA_asimdsame2_c_3()
    {
        
        {
            var raw = FCMLA(V0.T_4S, V1.T_4S, V2.T_4S, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.4S, V1.4S, V2.4S, #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_4S, V1.T_4S, V2.T_4S, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.4S, V1.4S, V2.4S, #90", asm);
        }
        
        {
            var raw = FCMLA(V0.T_4S, V31.T_4S, V2.T_4S, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.4S, V31.4S, V2.4S, #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_4S, V31.T_4S, V2.T_4S, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.4S, V31.4S, V2.4S, #90", asm);
        }
        
        {
            var raw = FCMLA(V0.T_4S, V1.T_4S, V0.T_4S, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.4S, V1.4S, V0.4S, #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_4S, V1.T_4S, V0.T_4S, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.4S, V1.4S, V0.4S, #90", asm);
        }
        
        {
            var raw = FCMLA(V0.T_4S, V31.T_4S, V0.T_4S, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.4S, V31.4S, V0.4S, #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_4S, V31.T_4S, V0.T_4S, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.4S, V31.4S, V0.4S, #90", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCMLA"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCMLA_asimdsame2_c_4()
    {
        
        {
            var raw = FCMLA(V0.T_2D, V1.T_2D, V2.T_2D, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.2D, V1.2D, V2.2D, #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_2D, V1.T_2D, V2.T_2D, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.2D, V1.2D, V2.2D, #90", asm);
        }
        
        {
            var raw = FCMLA(V0.T_2D, V31.T_2D, V2.T_2D, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.2D, V31.2D, V2.2D, #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_2D, V31.T_2D, V2.T_2D, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.2D, V31.2D, V2.2D, #90", asm);
        }
        
        {
            var raw = FCMLA(V0.T_2D, V1.T_2D, V0.T_2D, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.2D, V1.2D, V0.2D, #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_2D, V1.T_2D, V0.T_2D, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.2D, V1.2D, V0.2D, #90", asm);
        }
        
        {
            var raw = FCMLA(V0.T_2D, V31.T_2D, V0.T_2D, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.2D, V31.2D, V0.2D, #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_2D, V31.T_2D, V0.T_2D, 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_asimdsame2_c, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.2D, V31.2D, V0.2D, #90", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCMLA"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCMLA_advsimd_elt_5()
    {
        
        {
            var raw = FCMLA(V0.T_4H, V1.T_4H, V2.H[0], 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_advsimd_elt, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.4H, V1.4H, V2.H[0], #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_4H, V1.T_4H, V2.H[0], 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_advsimd_elt, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.4H, V1.4H, V2.H[0], #90", asm);
        }
        
        {
            var raw = FCMLA(V0.T_4H, V31.T_4H, V2.H[0], 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_advsimd_elt, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.4H, V31.4H, V2.H[0], #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_4H, V31.T_4H, V2.H[0], 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_advsimd_elt, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.4H, V31.4H, V2.H[0], #90", asm);
        }
        
        {
            var raw = FCMLA(V0.T_4H, V1.T_4H, V0.H[1], 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_advsimd_elt, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.4H, V1.4H, V0.H[1], #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_4H, V1.T_4H, V0.H[1], 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_advsimd_elt, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.4H, V1.4H, V0.H[1], #90", asm);
        }
        
        {
            var raw = FCMLA(V0.T_4H, V31.T_4H, V0.H[1], 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_advsimd_elt, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.4H, V31.4H, V0.H[1], #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_4H, V31.T_4H, V0.H[1], 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_advsimd_elt, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.4H, V31.4H, V0.H[1], #90", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCMLA"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCMLA_advsimd_elt_6()
    {
        
        {
            var raw = FCMLA(V0.T_8H, V1.T_8H, V2.H[0], 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_advsimd_elt, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.8H, V1.8H, V2.H[0], #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_8H, V1.T_8H, V2.H[0], 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_advsimd_elt, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.8H, V1.8H, V2.H[0], #90", asm);
        }
        
        {
            var raw = FCMLA(V0.T_8H, V31.T_8H, V2.H[0], 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_advsimd_elt, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.8H, V31.8H, V2.H[0], #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_8H, V31.T_8H, V2.H[0], 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_advsimd_elt, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.8H, V31.8H, V2.H[0], #90", asm);
        }
        
        {
            var raw = FCMLA(V0.T_8H, V1.T_8H, V0.H[1], 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_advsimd_elt, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.8H, V1.8H, V0.H[1], #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_8H, V1.T_8H, V0.H[1], 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_advsimd_elt, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.8H, V1.8H, V0.H[1], #90", asm);
        }
        
        {
            var raw = FCMLA(V0.T_8H, V31.T_8H, V0.H[1], 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_advsimd_elt, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.8H, V31.8H, V0.H[1], #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_8H, V31.T_8H, V0.H[1], 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_advsimd_elt, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.8H, V31.8H, V0.H[1], #90", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCMLA"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCMLA_advsimd_elt_7()
    {
        
        {
            var raw = FCMLA(V0.T_4S, V1.T_4S, V2.S[0], 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_advsimd_elt, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.4S, V1.4S, V2.S[0], #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_4S, V1.T_4S, V2.S[0], 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_advsimd_elt, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.4S, V1.4S, V2.S[0], #90", asm);
        }
        
        {
            var raw = FCMLA(V0.T_4S, V31.T_4S, V2.S[0], 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_advsimd_elt, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.4S, V31.4S, V2.S[0], #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_4S, V31.T_4S, V2.S[0], 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_advsimd_elt, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.4S, V31.4S, V2.S[0], #90", asm);
        }
        
        {
            var raw = FCMLA(V0.T_4S, V1.T_4S, V0.S[1], 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_advsimd_elt, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.4S, V1.4S, V0.S[1], #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_4S, V1.T_4S, V0.S[1], 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_advsimd_elt, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.4S, V1.4S, V0.S[1], #90", asm);
        }
        
        {
            var raw = FCMLA(V0.T_4S, V31.T_4S, V0.S[1], 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_advsimd_elt, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V0.4S, V31.4S, V0.S[1], #90", asm);
        }
        
        {
            var raw = FCMLA(V30.T_4S, V31.T_4S, V0.S[1], 90);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCMLA_advsimd_elt, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCMLA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCMLA V30.4S, V31.4S, V0.S[1], #90", asm);
        }
    }
}
