// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Advsimd;

[TestClass]
public class Arm64InstructionFactoryTests_DUP_Advsimd : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asisdone_only_0()
    {
        TestInst(DUP(B1, V1.B[0]), asm => asm.DUP(B1, V1.B[0]), Arm64InstructionId.MOV_dup_asisdone_only, Arm64Mnemonic.MOV, "MOV B1, V1.B[0]");
        TestInst(DUP(B31, V1.B[0]), asm => asm.DUP(B31, V1.B[0]), Arm64InstructionId.MOV_dup_asisdone_only, Arm64Mnemonic.MOV, "MOV B31, V1.B[0]");
        TestInst(DUP(B1, V31.B[1]), asm => asm.DUP(B1, V31.B[1]), Arm64InstructionId.MOV_dup_asisdone_only, Arm64Mnemonic.MOV, "MOV B1, V31.B[1]");
        TestInst(DUP(B31, V31.B[1]), asm => asm.DUP(B31, V31.B[1]), Arm64InstructionId.MOV_dup_asisdone_only, Arm64Mnemonic.MOV, "MOV B31, V31.B[1]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asisdone_only_1()
    {
        TestInst(DUP(H1, V1.H[0]), asm => asm.DUP(H1, V1.H[0]), Arm64InstructionId.MOV_dup_asisdone_only, Arm64Mnemonic.MOV, "MOV H1, V1.H[0]");
        TestInst(DUP(H31, V1.H[0]), asm => asm.DUP(H31, V1.H[0]), Arm64InstructionId.MOV_dup_asisdone_only, Arm64Mnemonic.MOV, "MOV H31, V1.H[0]");
        TestInst(DUP(H1, V31.H[1]), asm => asm.DUP(H1, V31.H[1]), Arm64InstructionId.MOV_dup_asisdone_only, Arm64Mnemonic.MOV, "MOV H1, V31.H[1]");
        TestInst(DUP(H31, V31.H[1]), asm => asm.DUP(H31, V31.H[1]), Arm64InstructionId.MOV_dup_asisdone_only, Arm64Mnemonic.MOV, "MOV H31, V31.H[1]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asisdone_only_2()
    {
        TestInst(DUP(S1, V1.S[0]), asm => asm.DUP(S1, V1.S[0]), Arm64InstructionId.MOV_dup_asisdone_only, Arm64Mnemonic.MOV, "MOV S1, V1.S[0]");
        TestInst(DUP(S31, V1.S[0]), asm => asm.DUP(S31, V1.S[0]), Arm64InstructionId.MOV_dup_asisdone_only, Arm64Mnemonic.MOV, "MOV S31, V1.S[0]");
        TestInst(DUP(S1, V31.S[1]), asm => asm.DUP(S1, V31.S[1]), Arm64InstructionId.MOV_dup_asisdone_only, Arm64Mnemonic.MOV, "MOV S1, V31.S[1]");
        TestInst(DUP(S31, V31.S[1]), asm => asm.DUP(S31, V31.S[1]), Arm64InstructionId.MOV_dup_asisdone_only, Arm64Mnemonic.MOV, "MOV S31, V31.S[1]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asisdone_only_3()
    {
        TestInst(DUP(D1, V1.D[0]), asm => asm.DUP(D1, V1.D[0]), Arm64InstructionId.MOV_dup_asisdone_only, Arm64Mnemonic.MOV, "MOV D1, V1.D[0]");
        TestInst(DUP(D31, V1.D[0]), asm => asm.DUP(D31, V1.D[0]), Arm64InstructionId.MOV_dup_asisdone_only, Arm64Mnemonic.MOV, "MOV D31, V1.D[0]");
        TestInst(DUP(D1, V31.D[1]), asm => asm.DUP(D1, V31.D[1]), Arm64InstructionId.MOV_dup_asisdone_only, Arm64Mnemonic.MOV, "MOV D1, V31.D[1]");
        TestInst(DUP(D31, V31.D[1]), asm => asm.DUP(D31, V31.D[1]), Arm64InstructionId.MOV_dup_asisdone_only, Arm64Mnemonic.MOV, "MOV D31, V31.D[1]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dv_v_4()
    {
        TestInst(DUP(V0.T_8B, V1.B[0]), asm => asm.DUP(V0.T_8B, V1.B[0]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V0.8B, V1.B[0]");
        TestInst(DUP(V30.T_8B, V1.B[0]), asm => asm.DUP(V30.T_8B, V1.B[0]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V30.8B, V1.B[0]");
        TestInst(DUP(V0.T_8B, V31.B[1]), asm => asm.DUP(V0.T_8B, V31.B[1]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V0.8B, V31.B[1]");
        TestInst(DUP(V30.T_8B, V31.B[1]), asm => asm.DUP(V30.T_8B, V31.B[1]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V30.8B, V31.B[1]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dv_v_5()
    {
        TestInst(DUP(V0.T_16B, V1.B[0]), asm => asm.DUP(V0.T_16B, V1.B[0]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V0.16B, V1.B[0]");
        TestInst(DUP(V30.T_16B, V1.B[0]), asm => asm.DUP(V30.T_16B, V1.B[0]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V30.16B, V1.B[0]");
        TestInst(DUP(V0.T_16B, V31.B[1]), asm => asm.DUP(V0.T_16B, V31.B[1]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V0.16B, V31.B[1]");
        TestInst(DUP(V30.T_16B, V31.B[1]), asm => asm.DUP(V30.T_16B, V31.B[1]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V30.16B, V31.B[1]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dv_v_6()
    {
        TestInst(DUP(V0.T_4H, V1.H[0]), asm => asm.DUP(V0.T_4H, V1.H[0]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V0.4H, V1.H[0]");
        TestInst(DUP(V30.T_4H, V1.H[0]), asm => asm.DUP(V30.T_4H, V1.H[0]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V30.4H, V1.H[0]");
        TestInst(DUP(V0.T_4H, V31.H[1]), asm => asm.DUP(V0.T_4H, V31.H[1]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V0.4H, V31.H[1]");
        TestInst(DUP(V30.T_4H, V31.H[1]), asm => asm.DUP(V30.T_4H, V31.H[1]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V30.4H, V31.H[1]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dv_v_7()
    {
        TestInst(DUP(V0.T_8H, V1.H[0]), asm => asm.DUP(V0.T_8H, V1.H[0]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V0.8H, V1.H[0]");
        TestInst(DUP(V30.T_8H, V1.H[0]), asm => asm.DUP(V30.T_8H, V1.H[0]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V30.8H, V1.H[0]");
        TestInst(DUP(V0.T_8H, V31.H[1]), asm => asm.DUP(V0.T_8H, V31.H[1]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V0.8H, V31.H[1]");
        TestInst(DUP(V30.T_8H, V31.H[1]), asm => asm.DUP(V30.T_8H, V31.H[1]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V30.8H, V31.H[1]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dv_v_8()
    {
        TestInst(DUP(V0.T_2S, V1.S[0]), asm => asm.DUP(V0.T_2S, V1.S[0]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V0.2S, V1.S[0]");
        TestInst(DUP(V30.T_2S, V1.S[0]), asm => asm.DUP(V30.T_2S, V1.S[0]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V30.2S, V1.S[0]");
        TestInst(DUP(V0.T_2S, V31.S[1]), asm => asm.DUP(V0.T_2S, V31.S[1]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V0.2S, V31.S[1]");
        TestInst(DUP(V30.T_2S, V31.S[1]), asm => asm.DUP(V30.T_2S, V31.S[1]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V30.2S, V31.S[1]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dv_v_9()
    {
        TestInst(DUP(V0.T_4S, V1.S[0]), asm => asm.DUP(V0.T_4S, V1.S[0]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V0.4S, V1.S[0]");
        TestInst(DUP(V30.T_4S, V1.S[0]), asm => asm.DUP(V30.T_4S, V1.S[0]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V30.4S, V1.S[0]");
        TestInst(DUP(V0.T_4S, V31.S[1]), asm => asm.DUP(V0.T_4S, V31.S[1]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V0.4S, V31.S[1]");
        TestInst(DUP(V30.T_4S, V31.S[1]), asm => asm.DUP(V30.T_4S, V31.S[1]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V30.4S, V31.S[1]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dv_v_10()
    {
        TestInst(DUP(V0.T_2D, V1.D[0]), asm => asm.DUP(V0.T_2D, V1.D[0]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V0.2D, V1.D[0]");
        TestInst(DUP(V30.T_2D, V1.D[0]), asm => asm.DUP(V30.T_2D, V1.D[0]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V30.2D, V1.D[0]");
        TestInst(DUP(V0.T_2D, V31.D[1]), asm => asm.DUP(V0.T_2D, V31.D[1]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V0.2D, V31.D[1]");
        TestInst(DUP(V30.T_2D, V31.D[1]), asm => asm.DUP(V30.T_2D, V31.D[1]), Arm64InstructionId.DUP_asimdins_dv_v, Arm64Mnemonic.DUP, "DUP V30.2D, V31.D[1]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dr_r_11()
    {
        TestInst(DUP(V0.T_8B, W2), asm => asm.DUP(V0.T_8B, W2), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V0.8B, W2");
        TestInst(DUP(V30.T_8B, W2), asm => asm.DUP(V30.T_8B, W2), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V30.8B, W2");
        TestInst(DUP(V0.T_8B, WZR), asm => asm.DUP(V0.T_8B, WZR), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V0.8B, WZR");
        TestInst(DUP(V30.T_8B, WZR), asm => asm.DUP(V30.T_8B, WZR), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V30.8B, WZR");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dr_r_12()
    {
        TestInst(DUP(V0.T_16B, W2), asm => asm.DUP(V0.T_16B, W2), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V0.16B, W2");
        TestInst(DUP(V30.T_16B, W2), asm => asm.DUP(V30.T_16B, W2), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V30.16B, W2");
        TestInst(DUP(V0.T_16B, WZR), asm => asm.DUP(V0.T_16B, WZR), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V0.16B, WZR");
        TestInst(DUP(V30.T_16B, WZR), asm => asm.DUP(V30.T_16B, WZR), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V30.16B, WZR");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dr_r_13()
    {
        TestInst(DUP(V0.T_4H, W2), asm => asm.DUP(V0.T_4H, W2), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V0.4H, W2");
        TestInst(DUP(V30.T_4H, W2), asm => asm.DUP(V30.T_4H, W2), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V30.4H, W2");
        TestInst(DUP(V0.T_4H, WZR), asm => asm.DUP(V0.T_4H, WZR), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V0.4H, WZR");
        TestInst(DUP(V30.T_4H, WZR), asm => asm.DUP(V30.T_4H, WZR), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V30.4H, WZR");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dr_r_14()
    {
        TestInst(DUP(V0.T_8H, W2), asm => asm.DUP(V0.T_8H, W2), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V0.8H, W2");
        TestInst(DUP(V30.T_8H, W2), asm => asm.DUP(V30.T_8H, W2), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V30.8H, W2");
        TestInst(DUP(V0.T_8H, WZR), asm => asm.DUP(V0.T_8H, WZR), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V0.8H, WZR");
        TestInst(DUP(V30.T_8H, WZR), asm => asm.DUP(V30.T_8H, WZR), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V30.8H, WZR");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dr_r_15()
    {
        TestInst(DUP(V0.T_2S, W2), asm => asm.DUP(V0.T_2S, W2), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V0.2S, W2");
        TestInst(DUP(V30.T_2S, W2), asm => asm.DUP(V30.T_2S, W2), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V30.2S, W2");
        TestInst(DUP(V0.T_2S, WZR), asm => asm.DUP(V0.T_2S, WZR), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V0.2S, WZR");
        TestInst(DUP(V30.T_2S, WZR), asm => asm.DUP(V30.T_2S, WZR), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V30.2S, WZR");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dr_r_16()
    {
        TestInst(DUP(V0.T_4S, W2), asm => asm.DUP(V0.T_4S, W2), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V0.4S, W2");
        TestInst(DUP(V30.T_4S, W2), asm => asm.DUP(V30.T_4S, W2), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V30.4S, W2");
        TestInst(DUP(V0.T_4S, WZR), asm => asm.DUP(V0.T_4S, WZR), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V0.4S, WZR");
        TestInst(DUP(V30.T_4S, WZR), asm => asm.DUP(V30.T_4S, WZR), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V30.4S, WZR");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dr_r_17()
    {
        TestInst(DUP(V0.T_2D, X2), asm => asm.DUP(V0.T_2D, X2), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V0.2D, X2");
        TestInst(DUP(V30.T_2D, X2), asm => asm.DUP(V30.T_2D, X2), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V30.2D, X2");
        TestInst(DUP(V0.T_2D, XZR), asm => asm.DUP(V0.T_2D, XZR), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V0.2D, XZR");
        TestInst(DUP(V30.T_2D, XZR), asm => asm.DUP(V30.T_2D, XZR), Arm64InstructionId.DUP_asimdins_dr_r, Arm64Mnemonic.DUP, "DUP V30.2D, XZR");
    }
}
