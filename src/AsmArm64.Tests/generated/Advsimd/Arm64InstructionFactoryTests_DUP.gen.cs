// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Advsimd;

[TestClass]
public class Arm64InstructionFactoryTests_DUP_Advsimd
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dv_v_0()
    {
        
        {
            var raw = DUP(V0.T_8B, V1.B[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.8B, V1.B[0]", asm);
        }
        
        {
            var raw = DUP(V30.T_8B, V1.B[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.8B, V1.B[0]", asm);
        }
        
        {
            var raw = DUP(V0.T_8B, V31.B[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.8B, V31.B[1]", asm);
        }
        
        {
            var raw = DUP(V30.T_8B, V31.B[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.8B, V31.B[1]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dv_v_1()
    {
        
        {
            var raw = DUP(V0.T_16B, V1.B[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.16B, V1.B[0]", asm);
        }
        
        {
            var raw = DUP(V30.T_16B, V1.B[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.16B, V1.B[0]", asm);
        }
        
        {
            var raw = DUP(V0.T_16B, V31.B[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.16B, V31.B[1]", asm);
        }
        
        {
            var raw = DUP(V30.T_16B, V31.B[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.16B, V31.B[1]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dv_v_2()
    {
        
        {
            var raw = DUP(V0.T_4H, V1.H[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.4H, V1.H[0]", asm);
        }
        
        {
            var raw = DUP(V30.T_4H, V1.H[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.4H, V1.H[0]", asm);
        }
        
        {
            var raw = DUP(V0.T_4H, V31.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.4H, V31.H[1]", asm);
        }
        
        {
            var raw = DUP(V30.T_4H, V31.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.4H, V31.H[1]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dv_v_3()
    {
        
        {
            var raw = DUP(V0.T_8H, V1.H[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.8H, V1.H[0]", asm);
        }
        
        {
            var raw = DUP(V30.T_8H, V1.H[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.8H, V1.H[0]", asm);
        }
        
        {
            var raw = DUP(V0.T_8H, V31.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.8H, V31.H[1]", asm);
        }
        
        {
            var raw = DUP(V30.T_8H, V31.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.8H, V31.H[1]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dv_v_4()
    {
        
        {
            var raw = DUP(V0.T_2S, V1.S[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.2S, V1.S[0]", asm);
        }
        
        {
            var raw = DUP(V30.T_2S, V1.S[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.2S, V1.S[0]", asm);
        }
        
        {
            var raw = DUP(V0.T_2S, V31.S[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.2S, V31.S[1]", asm);
        }
        
        {
            var raw = DUP(V30.T_2S, V31.S[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.2S, V31.S[1]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dv_v_5()
    {
        
        {
            var raw = DUP(V0.T_4S, V1.S[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.4S, V1.S[0]", asm);
        }
        
        {
            var raw = DUP(V30.T_4S, V1.S[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.4S, V1.S[0]", asm);
        }
        
        {
            var raw = DUP(V0.T_4S, V31.S[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.4S, V31.S[1]", asm);
        }
        
        {
            var raw = DUP(V30.T_4S, V31.S[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.4S, V31.S[1]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dv_v_6()
    {
        
        {
            var raw = DUP(V0.T_2D, V1.D[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.2D, V1.D[0]", asm);
        }
        
        {
            var raw = DUP(V30.T_2D, V1.D[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.2D, V1.D[0]", asm);
        }
        
        {
            var raw = DUP(V0.T_2D, V31.D[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.2D, V31.D[1]", asm);
        }
        
        {
            var raw = DUP(V30.T_2D, V31.D[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.2D, V31.D[1]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dr_r_7()
    {
        
        {
            var raw = DUP(V0.T_8B, W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.8B, W2", asm);
        }
        
        {
            var raw = DUP(V30.T_8B, W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.8B, W2", asm);
        }
        
        {
            var raw = DUP(V0.T_8B, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.8B, WZR", asm);
        }
        
        {
            var raw = DUP(V30.T_8B, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.8B, WZR", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dr_r_8()
    {
        
        {
            var raw = DUP(V0.T_16B, W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.16B, W2", asm);
        }
        
        {
            var raw = DUP(V30.T_16B, W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.16B, W2", asm);
        }
        
        {
            var raw = DUP(V0.T_16B, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.16B, WZR", asm);
        }
        
        {
            var raw = DUP(V30.T_16B, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.16B, WZR", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dr_r_9()
    {
        
        {
            var raw = DUP(V0.T_4H, W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.4H, W2", asm);
        }
        
        {
            var raw = DUP(V30.T_4H, W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.4H, W2", asm);
        }
        
        {
            var raw = DUP(V0.T_4H, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.4H, WZR", asm);
        }
        
        {
            var raw = DUP(V30.T_4H, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.4H, WZR", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dr_r_10()
    {
        
        {
            var raw = DUP(V0.T_8H, W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.8H, W2", asm);
        }
        
        {
            var raw = DUP(V30.T_8H, W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.8H, W2", asm);
        }
        
        {
            var raw = DUP(V0.T_8H, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.8H, WZR", asm);
        }
        
        {
            var raw = DUP(V30.T_8H, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.8H, WZR", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dr_r_11()
    {
        
        {
            var raw = DUP(V0.T_2S, W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.2S, W2", asm);
        }
        
        {
            var raw = DUP(V30.T_2S, W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.2S, W2", asm);
        }
        
        {
            var raw = DUP(V0.T_2S, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.2S, WZR", asm);
        }
        
        {
            var raw = DUP(V30.T_2S, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.2S, WZR", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dr_r_12()
    {
        
        {
            var raw = DUP(V0.T_4S, W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.4S, W2", asm);
        }
        
        {
            var raw = DUP(V30.T_4S, W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.4S, W2", asm);
        }
        
        {
            var raw = DUP(V0.T_4S, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.4S, WZR", asm);
        }
        
        {
            var raw = DUP(V30.T_4S, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.4S, WZR", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.DUP"/>.
    /// </summary>
    [TestMethod]
    public void Test_DUP_asimdins_dr_r_13()
    {
        
        {
            var raw = DUP(V0.T_2D, X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.2D, X2", asm);
        }
        
        {
            var raw = DUP(V30.T_2D, X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.2D, X2", asm);
        }
        
        {
            var raw = DUP(V0.T_2D, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V0.2D, XZR", asm);
        }
        
        {
            var raw = DUP(V30.T_2D, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.DUP_asimdins_dr_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.DUP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("DUP V30.2D, XZR", asm);
        }
    }
}
