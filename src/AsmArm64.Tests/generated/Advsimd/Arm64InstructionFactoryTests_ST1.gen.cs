// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Advsimd;

[TestClass]
public class Arm64InstructionFactoryTests_ST1_Advsimd
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r1_1v_0()
    {
        
        {
            var raw = ST1(V0.T_8B.Group1(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r1_1v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8B }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_8B.Group1(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r1_1v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8B }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r1_1v_1()
    {
        
        {
            var raw = ST1(V0.T_16B.Group1(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r1_1v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.16B }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_16B.Group1(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r1_1v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.16B }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r1_1v_2()
    {
        
        {
            var raw = ST1(V0.T_4H.Group1(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r1_1v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4H }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_4H.Group1(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r1_1v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4H }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r1_1v_3()
    {
        
        {
            var raw = ST1(V0.T_8H.Group1(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r1_1v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8H }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_8H.Group1(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r1_1v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8H }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r1_1v_4()
    {
        
        {
            var raw = ST1(V0.T_2S.Group1(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r1_1v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2S }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_2S.Group1(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r1_1v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2S }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r1_1v_5()
    {
        
        {
            var raw = ST1(V0.T_4S.Group1(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r1_1v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4S }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_4S.Group1(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r1_1v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4S }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r1_1v_6()
    {
        
        {
            var raw = ST1(V0.T_1D.Group1(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r1_1v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.1D }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_1D.Group1(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r1_1v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.1D }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r1_1v_7()
    {
        
        {
            var raw = ST1(V0.T_2D.Group1(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r1_1v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2D }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_2D.Group1(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r1_1v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2D }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r2_2v_8()
    {
        
        {
            var raw = ST1(V0.T_8B.Group2(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r2_2v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8B, V1.8B }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_8B.Group2(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r2_2v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8B, V31.8B }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r2_2v_9()
    {
        
        {
            var raw = ST1(V0.T_16B.Group2(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r2_2v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.16B, V1.16B }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_16B.Group2(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r2_2v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.16B, V31.16B }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r2_2v_10()
    {
        
        {
            var raw = ST1(V0.T_4H.Group2(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r2_2v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4H, V1.4H }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_4H.Group2(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r2_2v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4H, V31.4H }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r2_2v_11()
    {
        
        {
            var raw = ST1(V0.T_8H.Group2(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r2_2v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8H, V1.8H }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_8H.Group2(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r2_2v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8H, V31.8H }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r2_2v_12()
    {
        
        {
            var raw = ST1(V0.T_2S.Group2(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r2_2v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2S, V1.2S }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_2S.Group2(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r2_2v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2S, V31.2S }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r2_2v_13()
    {
        
        {
            var raw = ST1(V0.T_4S.Group2(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r2_2v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4S, V1.4S }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_4S.Group2(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r2_2v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4S, V31.4S }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r2_2v_14()
    {
        
        {
            var raw = ST1(V0.T_1D.Group2(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r2_2v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.1D, V1.1D }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_1D.Group2(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r2_2v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.1D, V31.1D }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r2_2v_15()
    {
        
        {
            var raw = ST1(V0.T_2D.Group2(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r2_2v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2D, V1.2D }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_2D.Group2(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r2_2v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2D, V31.2D }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r3_3v_16()
    {
        
        {
            var raw = ST1(V0.T_8B.Group3(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r3_3v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8B, V1.8B, V2.8B }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_8B.Group3(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r3_3v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8B, V31.8B, V0.8B }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r3_3v_17()
    {
        
        {
            var raw = ST1(V0.T_16B.Group3(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r3_3v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.16B, V1.16B, V2.16B }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_16B.Group3(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r3_3v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.16B, V31.16B, V0.16B }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r3_3v_18()
    {
        
        {
            var raw = ST1(V0.T_4H.Group3(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r3_3v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4H, V1.4H, V2.4H }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_4H.Group3(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r3_3v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4H, V31.4H, V0.4H }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r3_3v_19()
    {
        
        {
            var raw = ST1(V0.T_8H.Group3(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r3_3v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8H, V1.8H, V2.8H }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_8H.Group3(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r3_3v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8H, V31.8H, V0.8H }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r3_3v_20()
    {
        
        {
            var raw = ST1(V0.T_2S.Group3(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r3_3v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2S, V1.2S, V2.2S }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_2S.Group3(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r3_3v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2S, V31.2S, V0.2S }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r3_3v_21()
    {
        
        {
            var raw = ST1(V0.T_4S.Group3(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r3_3v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4S, V1.4S, V2.4S }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_4S.Group3(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r3_3v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4S, V31.4S, V0.4S }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r3_3v_22()
    {
        
        {
            var raw = ST1(V0.T_1D.Group3(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r3_3v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.1D, V1.1D, V2.1D }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_1D.Group3(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r3_3v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.1D, V31.1D, V0.1D }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r3_3v_23()
    {
        
        {
            var raw = ST1(V0.T_2D.Group3(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r3_3v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2D, V1.2D, V2.2D }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_2D.Group3(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r3_3v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2D, V31.2D, V0.2D }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r4_4v_24()
    {
        
        {
            var raw = ST1(V0.T_8B.Group4(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r4_4v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8B, V1.8B, V2.8B, V3.8B }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_8B.Group4(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r4_4v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8B, V31.8B, V0.8B, V1.8B }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r4_4v_25()
    {
        
        {
            var raw = ST1(V0.T_16B.Group4(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r4_4v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.16B, V1.16B, V2.16B, V3.16B }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_16B.Group4(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r4_4v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.16B, V31.16B, V0.16B, V1.16B }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r4_4v_26()
    {
        
        {
            var raw = ST1(V0.T_4H.Group4(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r4_4v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4H, V1.4H, V2.4H, V3.4H }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_4H.Group4(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r4_4v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4H, V31.4H, V0.4H, V1.4H }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r4_4v_27()
    {
        
        {
            var raw = ST1(V0.T_8H.Group4(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r4_4v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8H, V1.8H, V2.8H, V3.8H }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_8H.Group4(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r4_4v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8H, V31.8H, V0.8H, V1.8H }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r4_4v_28()
    {
        
        {
            var raw = ST1(V0.T_2S.Group4(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r4_4v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2S, V1.2S, V2.2S, V3.2S }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_2S.Group4(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r4_4v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2S, V31.2S, V0.2S, V1.2S }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r4_4v_29()
    {
        
        {
            var raw = ST1(V0.T_4S.Group4(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r4_4v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4S, V1.4S, V2.4S, V3.4S }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_4S.Group4(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r4_4v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4S, V31.4S, V0.4S, V1.4S }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r4_4v_30()
    {
        
        {
            var raw = ST1(V0.T_1D.Group4(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r4_4v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.1D, V1.1D, V2.1D, V3.1D }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_1D.Group4(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r4_4v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.1D, V31.1D, V0.1D, V1.1D }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlse_r4_4v_31()
    {
        
        {
            var raw = ST1(V0.T_2D.Group4(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r4_4v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2D, V1.2D, V2.2D, V3.2D }, [X2]", asm);
        }
        
        {
            var raw = ST1(V30.T_2D.Group4(), _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlse_r4_4v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2D, V31.2D, V0.2D, V1.2D }, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i1_i1_32()
    {
        
        {
            var raw = ST1(V0.T_8B.Group1(), _[X2], 8);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i1_i1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8B }, [X2], #8", asm);
        }
        
        {
            var raw = ST1(V30.T_8B.Group1(), _[X2], 8);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i1_i1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8B }, [X2], #8", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i1_i1_33()
    {
        
        {
            var raw = ST1(V0.T_16B.Group1(), _[X2], 16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i1_i1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.16B }, [X2], #16", asm);
        }
        
        {
            var raw = ST1(V30.T_16B.Group1(), _[X2], 16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i1_i1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.16B }, [X2], #16", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i1_i1_34()
    {
        
        {
            var raw = ST1(V0.T_4H.Group1(), _[X2], 8);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i1_i1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4H }, [X2], #8", asm);
        }
        
        {
            var raw = ST1(V30.T_4H.Group1(), _[X2], 8);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i1_i1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4H }, [X2], #8", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i1_i1_35()
    {
        
        {
            var raw = ST1(V0.T_8H.Group1(), _[X2], 16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i1_i1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8H }, [X2], #16", asm);
        }
        
        {
            var raw = ST1(V30.T_8H.Group1(), _[X2], 16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i1_i1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8H }, [X2], #16", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i1_i1_36()
    {
        
        {
            var raw = ST1(V0.T_2S.Group1(), _[X2], 8);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i1_i1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2S }, [X2], #8", asm);
        }
        
        {
            var raw = ST1(V30.T_2S.Group1(), _[X2], 8);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i1_i1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2S }, [X2], #8", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i1_i1_37()
    {
        
        {
            var raw = ST1(V0.T_4S.Group1(), _[X2], 16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i1_i1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4S }, [X2], #16", asm);
        }
        
        {
            var raw = ST1(V30.T_4S.Group1(), _[X2], 16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i1_i1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4S }, [X2], #16", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i1_i1_38()
    {
        
        {
            var raw = ST1(V0.T_1D.Group1(), _[X2], 8);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i1_i1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.1D }, [X2], #8", asm);
        }
        
        {
            var raw = ST1(V30.T_1D.Group1(), _[X2], 8);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i1_i1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.1D }, [X2], #8", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i1_i1_39()
    {
        
        {
            var raw = ST1(V0.T_2D.Group1(), _[X2], 16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i1_i1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2D }, [X2], #16", asm);
        }
        
        {
            var raw = ST1(V30.T_2D.Group1(), _[X2], 16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i1_i1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2D }, [X2], #16", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r1_r1_40()
    {
        
        {
            var raw = ST1(V0.T_8B.Group1(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8B }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_8B.Group1(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8B }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_8B.Group1(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8B }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_8B.Group1(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8B }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r1_r1_41()
    {
        
        {
            var raw = ST1(V0.T_16B.Group1(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.16B }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_16B.Group1(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.16B }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_16B.Group1(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.16B }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_16B.Group1(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.16B }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r1_r1_42()
    {
        
        {
            var raw = ST1(V0.T_4H.Group1(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4H }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_4H.Group1(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4H }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_4H.Group1(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4H }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_4H.Group1(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4H }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r1_r1_43()
    {
        
        {
            var raw = ST1(V0.T_8H.Group1(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8H }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_8H.Group1(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8H }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_8H.Group1(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8H }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_8H.Group1(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8H }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r1_r1_44()
    {
        
        {
            var raw = ST1(V0.T_2S.Group1(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2S }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_2S.Group1(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2S }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_2S.Group1(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2S }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_2S.Group1(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2S }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r1_r1_45()
    {
        
        {
            var raw = ST1(V0.T_4S.Group1(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4S }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_4S.Group1(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4S }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_4S.Group1(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4S }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_4S.Group1(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4S }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r1_r1_46()
    {
        
        {
            var raw = ST1(V0.T_1D.Group1(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.1D }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_1D.Group1(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.1D }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_1D.Group1(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.1D }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_1D.Group1(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.1D }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r1_r1_47()
    {
        
        {
            var raw = ST1(V0.T_2D.Group1(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2D }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_2D.Group1(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2D }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_2D.Group1(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2D }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_2D.Group1(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r1_r1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2D }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i2_i2_48()
    {
        
        {
            var raw = ST1(V0.T_8B.Group2(), _[X2], 16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i2_i2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8B, V1.8B }, [X2], #16", asm);
        }
        
        {
            var raw = ST1(V30.T_8B.Group2(), _[X2], 16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i2_i2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8B, V31.8B }, [X2], #16", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i2_i2_49()
    {
        
        {
            var raw = ST1(V0.T_16B.Group2(), _[X2], 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i2_i2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.16B, V1.16B }, [X2], #32", asm);
        }
        
        {
            var raw = ST1(V30.T_16B.Group2(), _[X2], 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i2_i2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.16B, V31.16B }, [X2], #32", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i2_i2_50()
    {
        
        {
            var raw = ST1(V0.T_4H.Group2(), _[X2], 16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i2_i2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4H, V1.4H }, [X2], #16", asm);
        }
        
        {
            var raw = ST1(V30.T_4H.Group2(), _[X2], 16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i2_i2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4H, V31.4H }, [X2], #16", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i2_i2_51()
    {
        
        {
            var raw = ST1(V0.T_8H.Group2(), _[X2], 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i2_i2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8H, V1.8H }, [X2], #32", asm);
        }
        
        {
            var raw = ST1(V30.T_8H.Group2(), _[X2], 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i2_i2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8H, V31.8H }, [X2], #32", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i2_i2_52()
    {
        
        {
            var raw = ST1(V0.T_2S.Group2(), _[X2], 16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i2_i2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2S, V1.2S }, [X2], #16", asm);
        }
        
        {
            var raw = ST1(V30.T_2S.Group2(), _[X2], 16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i2_i2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2S, V31.2S }, [X2], #16", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i2_i2_53()
    {
        
        {
            var raw = ST1(V0.T_4S.Group2(), _[X2], 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i2_i2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4S, V1.4S }, [X2], #32", asm);
        }
        
        {
            var raw = ST1(V30.T_4S.Group2(), _[X2], 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i2_i2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4S, V31.4S }, [X2], #32", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i2_i2_54()
    {
        
        {
            var raw = ST1(V0.T_1D.Group2(), _[X2], 16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i2_i2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.1D, V1.1D }, [X2], #16", asm);
        }
        
        {
            var raw = ST1(V30.T_1D.Group2(), _[X2], 16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i2_i2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.1D, V31.1D }, [X2], #16", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i2_i2_55()
    {
        
        {
            var raw = ST1(V0.T_2D.Group2(), _[X2], 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i2_i2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2D, V1.2D }, [X2], #32", asm);
        }
        
        {
            var raw = ST1(V30.T_2D.Group2(), _[X2], 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i2_i2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2D, V31.2D }, [X2], #32", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r2_r2_56()
    {
        
        {
            var raw = ST1(V0.T_8B.Group2(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8B, V1.8B }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_8B.Group2(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8B, V31.8B }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_8B.Group2(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8B, V1.8B }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_8B.Group2(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8B, V31.8B }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r2_r2_57()
    {
        
        {
            var raw = ST1(V0.T_16B.Group2(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.16B, V1.16B }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_16B.Group2(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.16B, V31.16B }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_16B.Group2(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.16B, V1.16B }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_16B.Group2(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.16B, V31.16B }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r2_r2_58()
    {
        
        {
            var raw = ST1(V0.T_4H.Group2(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4H, V1.4H }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_4H.Group2(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4H, V31.4H }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_4H.Group2(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4H, V1.4H }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_4H.Group2(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4H, V31.4H }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r2_r2_59()
    {
        
        {
            var raw = ST1(V0.T_8H.Group2(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8H, V1.8H }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_8H.Group2(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8H, V31.8H }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_8H.Group2(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8H, V1.8H }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_8H.Group2(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8H, V31.8H }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r2_r2_60()
    {
        
        {
            var raw = ST1(V0.T_2S.Group2(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2S, V1.2S }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_2S.Group2(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2S, V31.2S }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_2S.Group2(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2S, V1.2S }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_2S.Group2(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2S, V31.2S }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r2_r2_61()
    {
        
        {
            var raw = ST1(V0.T_4S.Group2(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4S, V1.4S }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_4S.Group2(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4S, V31.4S }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_4S.Group2(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4S, V1.4S }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_4S.Group2(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4S, V31.4S }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r2_r2_62()
    {
        
        {
            var raw = ST1(V0.T_1D.Group2(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.1D, V1.1D }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_1D.Group2(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.1D, V31.1D }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_1D.Group2(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.1D, V1.1D }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_1D.Group2(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.1D, V31.1D }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r2_r2_63()
    {
        
        {
            var raw = ST1(V0.T_2D.Group2(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2D, V1.2D }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_2D.Group2(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2D, V31.2D }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_2D.Group2(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2D, V1.2D }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_2D.Group2(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r2_r2, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2D, V31.2D }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i3_i3_64()
    {
        
        {
            var raw = ST1(V0.T_8B.Group3(), _[X2], 24);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i3_i3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8B, V1.8B, V2.8B }, [X2], #24", asm);
        }
        
        {
            var raw = ST1(V30.T_8B.Group3(), _[X2], 24);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i3_i3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8B, V31.8B, V0.8B }, [X2], #24", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i3_i3_65()
    {
        
        {
            var raw = ST1(V0.T_16B.Group3(), _[X2], 48);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i3_i3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.16B, V1.16B, V2.16B }, [X2], #48", asm);
        }
        
        {
            var raw = ST1(V30.T_16B.Group3(), _[X2], 48);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i3_i3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.16B, V31.16B, V0.16B }, [X2], #48", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i3_i3_66()
    {
        
        {
            var raw = ST1(V0.T_4H.Group3(), _[X2], 24);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i3_i3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4H, V1.4H, V2.4H }, [X2], #24", asm);
        }
        
        {
            var raw = ST1(V30.T_4H.Group3(), _[X2], 24);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i3_i3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4H, V31.4H, V0.4H }, [X2], #24", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i3_i3_67()
    {
        
        {
            var raw = ST1(V0.T_8H.Group3(), _[X2], 48);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i3_i3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8H, V1.8H, V2.8H }, [X2], #48", asm);
        }
        
        {
            var raw = ST1(V30.T_8H.Group3(), _[X2], 48);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i3_i3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8H, V31.8H, V0.8H }, [X2], #48", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i3_i3_68()
    {
        
        {
            var raw = ST1(V0.T_2S.Group3(), _[X2], 24);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i3_i3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2S, V1.2S, V2.2S }, [X2], #24", asm);
        }
        
        {
            var raw = ST1(V30.T_2S.Group3(), _[X2], 24);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i3_i3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2S, V31.2S, V0.2S }, [X2], #24", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i3_i3_69()
    {
        
        {
            var raw = ST1(V0.T_4S.Group3(), _[X2], 48);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i3_i3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4S, V1.4S, V2.4S }, [X2], #48", asm);
        }
        
        {
            var raw = ST1(V30.T_4S.Group3(), _[X2], 48);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i3_i3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4S, V31.4S, V0.4S }, [X2], #48", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i3_i3_70()
    {
        
        {
            var raw = ST1(V0.T_1D.Group3(), _[X2], 24);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i3_i3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.1D, V1.1D, V2.1D }, [X2], #24", asm);
        }
        
        {
            var raw = ST1(V30.T_1D.Group3(), _[X2], 24);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i3_i3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.1D, V31.1D, V0.1D }, [X2], #24", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i3_i3_71()
    {
        
        {
            var raw = ST1(V0.T_2D.Group3(), _[X2], 48);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i3_i3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2D, V1.2D, V2.2D }, [X2], #48", asm);
        }
        
        {
            var raw = ST1(V30.T_2D.Group3(), _[X2], 48);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i3_i3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2D, V31.2D, V0.2D }, [X2], #48", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r3_r3_72()
    {
        
        {
            var raw = ST1(V0.T_8B.Group3(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8B, V1.8B, V2.8B }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_8B.Group3(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8B, V31.8B, V0.8B }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_8B.Group3(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8B, V1.8B, V2.8B }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_8B.Group3(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8B, V31.8B, V0.8B }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r3_r3_73()
    {
        
        {
            var raw = ST1(V0.T_16B.Group3(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.16B, V1.16B, V2.16B }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_16B.Group3(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.16B, V31.16B, V0.16B }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_16B.Group3(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.16B, V1.16B, V2.16B }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_16B.Group3(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.16B, V31.16B, V0.16B }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r3_r3_74()
    {
        
        {
            var raw = ST1(V0.T_4H.Group3(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4H, V1.4H, V2.4H }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_4H.Group3(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4H, V31.4H, V0.4H }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_4H.Group3(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4H, V1.4H, V2.4H }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_4H.Group3(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4H, V31.4H, V0.4H }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r3_r3_75()
    {
        
        {
            var raw = ST1(V0.T_8H.Group3(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8H, V1.8H, V2.8H }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_8H.Group3(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8H, V31.8H, V0.8H }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_8H.Group3(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8H, V1.8H, V2.8H }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_8H.Group3(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8H, V31.8H, V0.8H }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r3_r3_76()
    {
        
        {
            var raw = ST1(V0.T_2S.Group3(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2S, V1.2S, V2.2S }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_2S.Group3(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2S, V31.2S, V0.2S }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_2S.Group3(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2S, V1.2S, V2.2S }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_2S.Group3(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2S, V31.2S, V0.2S }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r3_r3_77()
    {
        
        {
            var raw = ST1(V0.T_4S.Group3(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4S, V1.4S, V2.4S }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_4S.Group3(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4S, V31.4S, V0.4S }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_4S.Group3(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4S, V1.4S, V2.4S }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_4S.Group3(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4S, V31.4S, V0.4S }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r3_r3_78()
    {
        
        {
            var raw = ST1(V0.T_1D.Group3(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.1D, V1.1D, V2.1D }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_1D.Group3(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.1D, V31.1D, V0.1D }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_1D.Group3(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.1D, V1.1D, V2.1D }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_1D.Group3(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.1D, V31.1D, V0.1D }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r3_r3_79()
    {
        
        {
            var raw = ST1(V0.T_2D.Group3(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2D, V1.2D, V2.2D }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_2D.Group3(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2D, V31.2D, V0.2D }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_2D.Group3(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2D, V1.2D, V2.2D }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_2D.Group3(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r3_r3, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2D, V31.2D, V0.2D }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i4_i4_80()
    {
        
        {
            var raw = ST1(V0.T_8B.Group4(), _[X2], 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i4_i4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8B, V1.8B, V2.8B, V3.8B }, [X2], #32", asm);
        }
        
        {
            var raw = ST1(V30.T_8B.Group4(), _[X2], 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i4_i4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8B, V31.8B, V0.8B, V1.8B }, [X2], #32", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i4_i4_81()
    {
        
        {
            var raw = ST1(V0.T_16B.Group4(), _[X2], 64);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i4_i4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.16B, V1.16B, V2.16B, V3.16B }, [X2], #64", asm);
        }
        
        {
            var raw = ST1(V30.T_16B.Group4(), _[X2], 64);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i4_i4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.16B, V31.16B, V0.16B, V1.16B }, [X2], #64", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i4_i4_82()
    {
        
        {
            var raw = ST1(V0.T_4H.Group4(), _[X2], 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i4_i4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4H, V1.4H, V2.4H, V3.4H }, [X2], #32", asm);
        }
        
        {
            var raw = ST1(V30.T_4H.Group4(), _[X2], 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i4_i4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4H, V31.4H, V0.4H, V1.4H }, [X2], #32", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i4_i4_83()
    {
        
        {
            var raw = ST1(V0.T_8H.Group4(), _[X2], 64);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i4_i4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8H, V1.8H, V2.8H, V3.8H }, [X2], #64", asm);
        }
        
        {
            var raw = ST1(V30.T_8H.Group4(), _[X2], 64);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i4_i4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8H, V31.8H, V0.8H, V1.8H }, [X2], #64", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i4_i4_84()
    {
        
        {
            var raw = ST1(V0.T_2S.Group4(), _[X2], 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i4_i4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2S, V1.2S, V2.2S, V3.2S }, [X2], #32", asm);
        }
        
        {
            var raw = ST1(V30.T_2S.Group4(), _[X2], 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i4_i4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2S, V31.2S, V0.2S, V1.2S }, [X2], #32", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i4_i4_85()
    {
        
        {
            var raw = ST1(V0.T_4S.Group4(), _[X2], 64);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i4_i4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4S, V1.4S, V2.4S, V3.4S }, [X2], #64", asm);
        }
        
        {
            var raw = ST1(V30.T_4S.Group4(), _[X2], 64);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i4_i4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4S, V31.4S, V0.4S, V1.4S }, [X2], #64", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i4_i4_86()
    {
        
        {
            var raw = ST1(V0.T_1D.Group4(), _[X2], 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i4_i4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.1D, V1.1D, V2.1D, V3.1D }, [X2], #32", asm);
        }
        
        {
            var raw = ST1(V30.T_1D.Group4(), _[X2], 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i4_i4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.1D, V31.1D, V0.1D, V1.1D }, [X2], #32", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_i4_i4_87()
    {
        
        {
            var raw = ST1(V0.T_2D.Group4(), _[X2], 64);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i4_i4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2D, V1.2D, V2.2D, V3.2D }, [X2], #64", asm);
        }
        
        {
            var raw = ST1(V30.T_2D.Group4(), _[X2], 64);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_i4_i4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2D, V31.2D, V0.2D, V1.2D }, [X2], #64", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r4_r4_88()
    {
        
        {
            var raw = ST1(V0.T_8B.Group4(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8B, V1.8B, V2.8B, V3.8B }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_8B.Group4(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8B, V31.8B, V0.8B, V1.8B }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_8B.Group4(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8B, V1.8B, V2.8B, V3.8B }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_8B.Group4(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8B, V31.8B, V0.8B, V1.8B }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r4_r4_89()
    {
        
        {
            var raw = ST1(V0.T_16B.Group4(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.16B, V1.16B, V2.16B, V3.16B }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_16B.Group4(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.16B, V31.16B, V0.16B, V1.16B }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_16B.Group4(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.16B, V1.16B, V2.16B, V3.16B }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_16B.Group4(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.16B, V31.16B, V0.16B, V1.16B }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r4_r4_90()
    {
        
        {
            var raw = ST1(V0.T_4H.Group4(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4H, V1.4H, V2.4H, V3.4H }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_4H.Group4(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4H, V31.4H, V0.4H, V1.4H }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_4H.Group4(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4H, V1.4H, V2.4H, V3.4H }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_4H.Group4(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4H, V31.4H, V0.4H, V1.4H }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r4_r4_91()
    {
        
        {
            var raw = ST1(V0.T_8H.Group4(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8H, V1.8H, V2.8H, V3.8H }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_8H.Group4(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8H, V31.8H, V0.8H, V1.8H }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_8H.Group4(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.8H, V1.8H, V2.8H, V3.8H }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_8H.Group4(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.8H, V31.8H, V0.8H, V1.8H }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r4_r4_92()
    {
        
        {
            var raw = ST1(V0.T_2S.Group4(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2S, V1.2S, V2.2S, V3.2S }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_2S.Group4(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2S, V31.2S, V0.2S, V1.2S }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_2S.Group4(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2S, V1.2S, V2.2S, V3.2S }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_2S.Group4(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2S, V31.2S, V0.2S, V1.2S }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r4_r4_93()
    {
        
        {
            var raw = ST1(V0.T_4S.Group4(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4S, V1.4S, V2.4S, V3.4S }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_4S.Group4(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4S, V31.4S, V0.4S, V1.4S }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_4S.Group4(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.4S, V1.4S, V2.4S, V3.4S }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_4S.Group4(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.4S, V31.4S, V0.4S, V1.4S }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r4_r4_94()
    {
        
        {
            var raw = ST1(V0.T_1D.Group4(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.1D, V1.1D, V2.1D, V3.1D }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_1D.Group4(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.1D, V31.1D, V0.1D, V1.1D }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_1D.Group4(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.1D, V1.1D, V2.1D, V3.1D }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_1D.Group4(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.1D, V31.1D, V0.1D, V1.1D }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsep_r4_r4_95()
    {
        
        {
            var raw = ST1(V0.T_2D.Group4(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2D, V1.2D, V2.2D, V3.2D }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.T_2D.Group4(), _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2D, V31.2D, V0.2D, V1.2D }, [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.T_2D.Group4(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.2D, V1.2D, V2.2D, V3.2D }, [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.T_2D.Group4(), _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsep_r4_r4, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.2D, V31.2D, V0.2D, V1.2D }, [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlso_b1_1b_96()
    {
        
        {
            var raw = ST1(V0.B.Group1()[1], _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlso_b1_1b, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.B }[1], [X2]", asm);
        }
        
        {
            var raw = ST1(V30.B.Group1()[1], _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlso_b1_1b, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.B }[1], [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlso_h1_1h_97()
    {
        
        {
            var raw = ST1(V0.H.Group1()[1], _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlso_h1_1h, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.H }[1], [X2]", asm);
        }
        
        {
            var raw = ST1(V30.H.Group1()[1], _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlso_h1_1h, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.H }[1], [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlso_s1_1s_98()
    {
        
        {
            var raw = ST1(V0.S.Group1()[1], _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlso_s1_1s, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.S }[1], [X2]", asm);
        }
        
        {
            var raw = ST1(V30.S.Group1()[1], _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlso_s1_1s, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.S }[1], [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlso_d1_1d_99()
    {
        
        {
            var raw = ST1(V0.D.Group1()[1], _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlso_d1_1d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.D }[1], [X2]", asm);
        }
        
        {
            var raw = ST1(V30.D.Group1()[1], _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlso_d1_1d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.D }[1], [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsop_b1_i1b_100()
    {
        
        {
            var raw = ST1(V0.B.Group1()[1], _[X2], 1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsop_b1_i1b, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.B }[1], [X2], #1", asm);
        }
        
        {
            var raw = ST1(V30.B.Group1()[1], _[X2], 1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsop_b1_i1b, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.B }[1], [X2], #1", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsop_bx1_r1b_101()
    {
        
        {
            var raw = ST1(V0.B.Group1()[1], _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsop_bx1_r1b, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.B }[1], [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.B.Group1()[1], _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsop_bx1_r1b, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.B }[1], [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.B.Group1()[1], _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsop_bx1_r1b, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.B }[1], [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.B.Group1()[1], _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsop_bx1_r1b, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.B }[1], [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsop_h1_i1h_102()
    {
        
        {
            var raw = ST1(V0.H.Group1()[1], _[X2], 2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsop_h1_i1h, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.H }[1], [X2], #2", asm);
        }
        
        {
            var raw = ST1(V30.H.Group1()[1], _[X2], 2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsop_h1_i1h, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.H }[1], [X2], #2", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsop_hx1_r1h_103()
    {
        
        {
            var raw = ST1(V0.H.Group1()[1], _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsop_hx1_r1h, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.H }[1], [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.H.Group1()[1], _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsop_hx1_r1h, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.H }[1], [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.H.Group1()[1], _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsop_hx1_r1h, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.H }[1], [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.H.Group1()[1], _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsop_hx1_r1h, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.H }[1], [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsop_s1_i1s_104()
    {
        
        {
            var raw = ST1(V0.S.Group1()[1], _[X2], 4);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsop_s1_i1s, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.S }[1], [X2], #4", asm);
        }
        
        {
            var raw = ST1(V30.S.Group1()[1], _[X2], 4);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsop_s1_i1s, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.S }[1], [X2], #4", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsop_sx1_r1s_105()
    {
        
        {
            var raw = ST1(V0.S.Group1()[1], _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsop_sx1_r1s, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.S }[1], [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.S.Group1()[1], _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsop_sx1_r1s, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.S }[1], [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.S.Group1()[1], _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsop_sx1_r1s, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.S }[1], [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.S.Group1()[1], _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsop_sx1_r1s, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.S }[1], [X2], X17", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsop_d1_i1d_106()
    {
        
        {
            var raw = ST1(V0.D.Group1()[1], _[X2], 8);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsop_d1_i1d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.D }[1], [X2], #8", asm);
        }
        
        {
            var raw = ST1(V30.D.Group1()[1], _[X2], 8);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsop_d1_i1d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.D }[1], [X2], #8", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ST1"/>.
    /// </summary>
    [TestMethod]
    public void Test_ST1_asisdlsop_dx1_r1d_107()
    {
        
        {
            var raw = ST1(V0.D.Group1()[1], _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsop_dx1_r1d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.D }[1], [X2], X2", asm);
        }
        
        {
            var raw = ST1(V30.D.Group1()[1], _[X2], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsop_dx1_r1d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.D }[1], [X2], X2", asm);
        }
        
        {
            var raw = ST1(V0.D.Group1()[1], _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsop_dx1_r1d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V0.D }[1], [X2], X17", asm);
        }
        
        {
            var raw = ST1(V30.D.Group1()[1], _[X2], X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ST1_asisdlsop_dx1_r1d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ST1, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ST1 { V30.D }[1], [X2], X17", asm);
        }
    }
}
