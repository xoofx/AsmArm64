// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Advsimd;

[TestClass]
public class Arm64InstructionFactoryTests_STFADD_Advsimd : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STFADD"/>.
    /// </summary>
    [TestMethod]
    public void Test_STFADD_16_0()
    {
        TestInst(STFADD(H0, _[X2]), asm => asm.STFADD(H0, _[X2]), Arm64InstructionId.STFADD_16, Arm64Mnemonic.STFADD, "STFADD H0, [X2]");
        TestInst(STFADD(H31, _[X2]), asm => asm.STFADD(H31, _[X2]), Arm64InstructionId.STFADD_16, Arm64Mnemonic.STFADD, "STFADD H31, [X2]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STFADD"/>.
    /// </summary>
    [TestMethod]
    public void Test_STFADD_32_1()
    {
        TestInst(STFADD(S0, _[X2]), asm => asm.STFADD(S0, _[X2]), Arm64InstructionId.STFADD_32, Arm64Mnemonic.STFADD, "STFADD S0, [X2]");
        TestInst(STFADD(S31, _[X2]), asm => asm.STFADD(S31, _[X2]), Arm64InstructionId.STFADD_32, Arm64Mnemonic.STFADD, "STFADD S31, [X2]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STFADD"/>.
    /// </summary>
    [TestMethod]
    public void Test_STFADD_64_2()
    {
        TestInst(STFADD(D0, _[X2]), asm => asm.STFADD(D0, _[X2]), Arm64InstructionId.STFADD_64, Arm64Mnemonic.STFADD, "STFADD D0, [X2]");
        TestInst(STFADD(D31, _[X2]), asm => asm.STFADD(D31, _[X2]), Arm64InstructionId.STFADD_64, Arm64Mnemonic.STFADD, "STFADD D31, [X2]");
    }
}
