// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Advsimd;

[TestClass]
public class Arm64InstructionFactoryTests_MLA_Advsimd : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MLA"/>.
    /// </summary>
    [TestMethod]
    public void Test_MLA_asimdelem_r_0()
    {
        TestInst(MLA(V0.T_4H, V1.T_4H, V2.H[0]), asm => asm.MLA(V0.T_4H, V1.T_4H, V2.H[0]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V0.4H, V1.4H, V2.H[0]");
        TestInst(MLA(V30.T_4H, V1.T_4H, V2.H[0]), asm => asm.MLA(V30.T_4H, V1.T_4H, V2.H[0]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V30.4H, V1.4H, V2.H[0]");
        TestInst(MLA(V0.T_4H, V31.T_4H, V2.H[0]), asm => asm.MLA(V0.T_4H, V31.T_4H, V2.H[0]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V0.4H, V31.4H, V2.H[0]");
        TestInst(MLA(V30.T_4H, V31.T_4H, V2.H[0]), asm => asm.MLA(V30.T_4H, V31.T_4H, V2.H[0]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V30.4H, V31.4H, V2.H[0]");
        TestInst(MLA(V0.T_4H, V1.T_4H, V0.H[1]), asm => asm.MLA(V0.T_4H, V1.T_4H, V0.H[1]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V0.4H, V1.4H, V0.H[1]");
        TestInst(MLA(V30.T_4H, V1.T_4H, V0.H[1]), asm => asm.MLA(V30.T_4H, V1.T_4H, V0.H[1]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V30.4H, V1.4H, V0.H[1]");
        TestInst(MLA(V0.T_4H, V31.T_4H, V0.H[1]), asm => asm.MLA(V0.T_4H, V31.T_4H, V0.H[1]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V0.4H, V31.4H, V0.H[1]");
        TestInst(MLA(V30.T_4H, V31.T_4H, V0.H[1]), asm => asm.MLA(V30.T_4H, V31.T_4H, V0.H[1]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V30.4H, V31.4H, V0.H[1]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MLA"/>.
    /// </summary>
    [TestMethod]
    public void Test_MLA_asimdelem_r_1()
    {
        TestInst(MLA(V0.T_8H, V1.T_8H, V2.H[0]), asm => asm.MLA(V0.T_8H, V1.T_8H, V2.H[0]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V0.8H, V1.8H, V2.H[0]");
        TestInst(MLA(V30.T_8H, V1.T_8H, V2.H[0]), asm => asm.MLA(V30.T_8H, V1.T_8H, V2.H[0]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V30.8H, V1.8H, V2.H[0]");
        TestInst(MLA(V0.T_8H, V31.T_8H, V2.H[0]), asm => asm.MLA(V0.T_8H, V31.T_8H, V2.H[0]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V0.8H, V31.8H, V2.H[0]");
        TestInst(MLA(V30.T_8H, V31.T_8H, V2.H[0]), asm => asm.MLA(V30.T_8H, V31.T_8H, V2.H[0]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V30.8H, V31.8H, V2.H[0]");
        TestInst(MLA(V0.T_8H, V1.T_8H, V0.H[1]), asm => asm.MLA(V0.T_8H, V1.T_8H, V0.H[1]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V0.8H, V1.8H, V0.H[1]");
        TestInst(MLA(V30.T_8H, V1.T_8H, V0.H[1]), asm => asm.MLA(V30.T_8H, V1.T_8H, V0.H[1]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V30.8H, V1.8H, V0.H[1]");
        TestInst(MLA(V0.T_8H, V31.T_8H, V0.H[1]), asm => asm.MLA(V0.T_8H, V31.T_8H, V0.H[1]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V0.8H, V31.8H, V0.H[1]");
        TestInst(MLA(V30.T_8H, V31.T_8H, V0.H[1]), asm => asm.MLA(V30.T_8H, V31.T_8H, V0.H[1]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V30.8H, V31.8H, V0.H[1]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MLA"/>.
    /// </summary>
    [TestMethod]
    public void Test_MLA_asimdelem_r_2()
    {
        TestInst(MLA(V0.T_2S, V1.T_2S, V2.S[0]), asm => asm.MLA(V0.T_2S, V1.T_2S, V2.S[0]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V0.2S, V1.2S, V2.S[0]");
        TestInst(MLA(V30.T_2S, V1.T_2S, V2.S[0]), asm => asm.MLA(V30.T_2S, V1.T_2S, V2.S[0]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V30.2S, V1.2S, V2.S[0]");
        TestInst(MLA(V0.T_2S, V31.T_2S, V2.S[0]), asm => asm.MLA(V0.T_2S, V31.T_2S, V2.S[0]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V0.2S, V31.2S, V2.S[0]");
        TestInst(MLA(V30.T_2S, V31.T_2S, V2.S[0]), asm => asm.MLA(V30.T_2S, V31.T_2S, V2.S[0]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V30.2S, V31.2S, V2.S[0]");
        TestInst(MLA(V0.T_2S, V1.T_2S, V0.S[1]), asm => asm.MLA(V0.T_2S, V1.T_2S, V0.S[1]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V0.2S, V1.2S, V0.S[1]");
        TestInst(MLA(V30.T_2S, V1.T_2S, V0.S[1]), asm => asm.MLA(V30.T_2S, V1.T_2S, V0.S[1]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V30.2S, V1.2S, V0.S[1]");
        TestInst(MLA(V0.T_2S, V31.T_2S, V0.S[1]), asm => asm.MLA(V0.T_2S, V31.T_2S, V0.S[1]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V0.2S, V31.2S, V0.S[1]");
        TestInst(MLA(V30.T_2S, V31.T_2S, V0.S[1]), asm => asm.MLA(V30.T_2S, V31.T_2S, V0.S[1]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V30.2S, V31.2S, V0.S[1]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MLA"/>.
    /// </summary>
    [TestMethod]
    public void Test_MLA_asimdelem_r_3()
    {
        TestInst(MLA(V0.T_4S, V1.T_4S, V2.S[0]), asm => asm.MLA(V0.T_4S, V1.T_4S, V2.S[0]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V0.4S, V1.4S, V2.S[0]");
        TestInst(MLA(V30.T_4S, V1.T_4S, V2.S[0]), asm => asm.MLA(V30.T_4S, V1.T_4S, V2.S[0]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V30.4S, V1.4S, V2.S[0]");
        TestInst(MLA(V0.T_4S, V31.T_4S, V2.S[0]), asm => asm.MLA(V0.T_4S, V31.T_4S, V2.S[0]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V0.4S, V31.4S, V2.S[0]");
        TestInst(MLA(V30.T_4S, V31.T_4S, V2.S[0]), asm => asm.MLA(V30.T_4S, V31.T_4S, V2.S[0]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V30.4S, V31.4S, V2.S[0]");
        TestInst(MLA(V0.T_4S, V1.T_4S, V0.S[1]), asm => asm.MLA(V0.T_4S, V1.T_4S, V0.S[1]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V0.4S, V1.4S, V0.S[1]");
        TestInst(MLA(V30.T_4S, V1.T_4S, V0.S[1]), asm => asm.MLA(V30.T_4S, V1.T_4S, V0.S[1]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V30.4S, V1.4S, V0.S[1]");
        TestInst(MLA(V0.T_4S, V31.T_4S, V0.S[1]), asm => asm.MLA(V0.T_4S, V31.T_4S, V0.S[1]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V0.4S, V31.4S, V0.S[1]");
        TestInst(MLA(V30.T_4S, V31.T_4S, V0.S[1]), asm => asm.MLA(V30.T_4S, V31.T_4S, V0.S[1]), Arm64InstructionId.MLA_asimdelem_r, Arm64Mnemonic.MLA, "MLA V30.4S, V31.4S, V0.S[1]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MLA"/>.
    /// </summary>
    [TestMethod]
    public void Test_MLA_asimdsame_only_4()
    {
        TestInst(MLA(V0.T_8B, V1.T_8B, V2.T_8B), asm => asm.MLA(V0.T_8B, V1.T_8B, V2.T_8B), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V0.8B, V1.8B, V2.8B");
        TestInst(MLA(V30.T_8B, V1.T_8B, V2.T_8B), asm => asm.MLA(V30.T_8B, V1.T_8B, V2.T_8B), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V30.8B, V1.8B, V2.8B");
        TestInst(MLA(V0.T_8B, V31.T_8B, V2.T_8B), asm => asm.MLA(V0.T_8B, V31.T_8B, V2.T_8B), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V0.8B, V31.8B, V2.8B");
        TestInst(MLA(V30.T_8B, V31.T_8B, V2.T_8B), asm => asm.MLA(V30.T_8B, V31.T_8B, V2.T_8B), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V30.8B, V31.8B, V2.8B");
        TestInst(MLA(V0.T_8B, V1.T_8B, V0.T_8B), asm => asm.MLA(V0.T_8B, V1.T_8B, V0.T_8B), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V0.8B, V1.8B, V0.8B");
        TestInst(MLA(V30.T_8B, V1.T_8B, V0.T_8B), asm => asm.MLA(V30.T_8B, V1.T_8B, V0.T_8B), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V30.8B, V1.8B, V0.8B");
        TestInst(MLA(V0.T_8B, V31.T_8B, V0.T_8B), asm => asm.MLA(V0.T_8B, V31.T_8B, V0.T_8B), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V0.8B, V31.8B, V0.8B");
        TestInst(MLA(V30.T_8B, V31.T_8B, V0.T_8B), asm => asm.MLA(V30.T_8B, V31.T_8B, V0.T_8B), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V30.8B, V31.8B, V0.8B");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MLA"/>.
    /// </summary>
    [TestMethod]
    public void Test_MLA_asimdsame_only_5()
    {
        TestInst(MLA(V0.T_16B, V1.T_16B, V2.T_16B), asm => asm.MLA(V0.T_16B, V1.T_16B, V2.T_16B), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V0.16B, V1.16B, V2.16B");
        TestInst(MLA(V30.T_16B, V1.T_16B, V2.T_16B), asm => asm.MLA(V30.T_16B, V1.T_16B, V2.T_16B), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V30.16B, V1.16B, V2.16B");
        TestInst(MLA(V0.T_16B, V31.T_16B, V2.T_16B), asm => asm.MLA(V0.T_16B, V31.T_16B, V2.T_16B), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V0.16B, V31.16B, V2.16B");
        TestInst(MLA(V30.T_16B, V31.T_16B, V2.T_16B), asm => asm.MLA(V30.T_16B, V31.T_16B, V2.T_16B), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V30.16B, V31.16B, V2.16B");
        TestInst(MLA(V0.T_16B, V1.T_16B, V0.T_16B), asm => asm.MLA(V0.T_16B, V1.T_16B, V0.T_16B), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V0.16B, V1.16B, V0.16B");
        TestInst(MLA(V30.T_16B, V1.T_16B, V0.T_16B), asm => asm.MLA(V30.T_16B, V1.T_16B, V0.T_16B), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V30.16B, V1.16B, V0.16B");
        TestInst(MLA(V0.T_16B, V31.T_16B, V0.T_16B), asm => asm.MLA(V0.T_16B, V31.T_16B, V0.T_16B), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V0.16B, V31.16B, V0.16B");
        TestInst(MLA(V30.T_16B, V31.T_16B, V0.T_16B), asm => asm.MLA(V30.T_16B, V31.T_16B, V0.T_16B), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V30.16B, V31.16B, V0.16B");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MLA"/>.
    /// </summary>
    [TestMethod]
    public void Test_MLA_asimdsame_only_6()
    {
        TestInst(MLA(V0.T_4H, V1.T_4H, V2.T_4H), asm => asm.MLA(V0.T_4H, V1.T_4H, V2.T_4H), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V0.4H, V1.4H, V2.4H");
        TestInst(MLA(V30.T_4H, V1.T_4H, V2.T_4H), asm => asm.MLA(V30.T_4H, V1.T_4H, V2.T_4H), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V30.4H, V1.4H, V2.4H");
        TestInst(MLA(V0.T_4H, V31.T_4H, V2.T_4H), asm => asm.MLA(V0.T_4H, V31.T_4H, V2.T_4H), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V0.4H, V31.4H, V2.4H");
        TestInst(MLA(V30.T_4H, V31.T_4H, V2.T_4H), asm => asm.MLA(V30.T_4H, V31.T_4H, V2.T_4H), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V30.4H, V31.4H, V2.4H");
        TestInst(MLA(V0.T_4H, V1.T_4H, V0.T_4H), asm => asm.MLA(V0.T_4H, V1.T_4H, V0.T_4H), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V0.4H, V1.4H, V0.4H");
        TestInst(MLA(V30.T_4H, V1.T_4H, V0.T_4H), asm => asm.MLA(V30.T_4H, V1.T_4H, V0.T_4H), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V30.4H, V1.4H, V0.4H");
        TestInst(MLA(V0.T_4H, V31.T_4H, V0.T_4H), asm => asm.MLA(V0.T_4H, V31.T_4H, V0.T_4H), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V0.4H, V31.4H, V0.4H");
        TestInst(MLA(V30.T_4H, V31.T_4H, V0.T_4H), asm => asm.MLA(V30.T_4H, V31.T_4H, V0.T_4H), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V30.4H, V31.4H, V0.4H");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MLA"/>.
    /// </summary>
    [TestMethod]
    public void Test_MLA_asimdsame_only_7()
    {
        TestInst(MLA(V0.T_8H, V1.T_8H, V2.T_8H), asm => asm.MLA(V0.T_8H, V1.T_8H, V2.T_8H), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V0.8H, V1.8H, V2.8H");
        TestInst(MLA(V30.T_8H, V1.T_8H, V2.T_8H), asm => asm.MLA(V30.T_8H, V1.T_8H, V2.T_8H), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V30.8H, V1.8H, V2.8H");
        TestInst(MLA(V0.T_8H, V31.T_8H, V2.T_8H), asm => asm.MLA(V0.T_8H, V31.T_8H, V2.T_8H), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V0.8H, V31.8H, V2.8H");
        TestInst(MLA(V30.T_8H, V31.T_8H, V2.T_8H), asm => asm.MLA(V30.T_8H, V31.T_8H, V2.T_8H), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V30.8H, V31.8H, V2.8H");
        TestInst(MLA(V0.T_8H, V1.T_8H, V0.T_8H), asm => asm.MLA(V0.T_8H, V1.T_8H, V0.T_8H), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V0.8H, V1.8H, V0.8H");
        TestInst(MLA(V30.T_8H, V1.T_8H, V0.T_8H), asm => asm.MLA(V30.T_8H, V1.T_8H, V0.T_8H), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V30.8H, V1.8H, V0.8H");
        TestInst(MLA(V0.T_8H, V31.T_8H, V0.T_8H), asm => asm.MLA(V0.T_8H, V31.T_8H, V0.T_8H), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V0.8H, V31.8H, V0.8H");
        TestInst(MLA(V30.T_8H, V31.T_8H, V0.T_8H), asm => asm.MLA(V30.T_8H, V31.T_8H, V0.T_8H), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V30.8H, V31.8H, V0.8H");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MLA"/>.
    /// </summary>
    [TestMethod]
    public void Test_MLA_asimdsame_only_8()
    {
        TestInst(MLA(V0.T_2S, V1.T_2S, V2.T_2S), asm => asm.MLA(V0.T_2S, V1.T_2S, V2.T_2S), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V0.2S, V1.2S, V2.2S");
        TestInst(MLA(V30.T_2S, V1.T_2S, V2.T_2S), asm => asm.MLA(V30.T_2S, V1.T_2S, V2.T_2S), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V30.2S, V1.2S, V2.2S");
        TestInst(MLA(V0.T_2S, V31.T_2S, V2.T_2S), asm => asm.MLA(V0.T_2S, V31.T_2S, V2.T_2S), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V0.2S, V31.2S, V2.2S");
        TestInst(MLA(V30.T_2S, V31.T_2S, V2.T_2S), asm => asm.MLA(V30.T_2S, V31.T_2S, V2.T_2S), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V30.2S, V31.2S, V2.2S");
        TestInst(MLA(V0.T_2S, V1.T_2S, V0.T_2S), asm => asm.MLA(V0.T_2S, V1.T_2S, V0.T_2S), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V0.2S, V1.2S, V0.2S");
        TestInst(MLA(V30.T_2S, V1.T_2S, V0.T_2S), asm => asm.MLA(V30.T_2S, V1.T_2S, V0.T_2S), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V30.2S, V1.2S, V0.2S");
        TestInst(MLA(V0.T_2S, V31.T_2S, V0.T_2S), asm => asm.MLA(V0.T_2S, V31.T_2S, V0.T_2S), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V0.2S, V31.2S, V0.2S");
        TestInst(MLA(V30.T_2S, V31.T_2S, V0.T_2S), asm => asm.MLA(V30.T_2S, V31.T_2S, V0.T_2S), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V30.2S, V31.2S, V0.2S");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MLA"/>.
    /// </summary>
    [TestMethod]
    public void Test_MLA_asimdsame_only_9()
    {
        TestInst(MLA(V0.T_4S, V1.T_4S, V2.T_4S), asm => asm.MLA(V0.T_4S, V1.T_4S, V2.T_4S), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V0.4S, V1.4S, V2.4S");
        TestInst(MLA(V30.T_4S, V1.T_4S, V2.T_4S), asm => asm.MLA(V30.T_4S, V1.T_4S, V2.T_4S), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V30.4S, V1.4S, V2.4S");
        TestInst(MLA(V0.T_4S, V31.T_4S, V2.T_4S), asm => asm.MLA(V0.T_4S, V31.T_4S, V2.T_4S), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V0.4S, V31.4S, V2.4S");
        TestInst(MLA(V30.T_4S, V31.T_4S, V2.T_4S), asm => asm.MLA(V30.T_4S, V31.T_4S, V2.T_4S), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V30.4S, V31.4S, V2.4S");
        TestInst(MLA(V0.T_4S, V1.T_4S, V0.T_4S), asm => asm.MLA(V0.T_4S, V1.T_4S, V0.T_4S), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V0.4S, V1.4S, V0.4S");
        TestInst(MLA(V30.T_4S, V1.T_4S, V0.T_4S), asm => asm.MLA(V30.T_4S, V1.T_4S, V0.T_4S), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V30.4S, V1.4S, V0.4S");
        TestInst(MLA(V0.T_4S, V31.T_4S, V0.T_4S), asm => asm.MLA(V0.T_4S, V31.T_4S, V0.T_4S), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V0.4S, V31.4S, V0.4S");
        TestInst(MLA(V30.T_4S, V31.T_4S, V0.T_4S), asm => asm.MLA(V30.T_4S, V31.T_4S, V0.T_4S), Arm64InstructionId.MLA_asimdsame_only, Arm64Mnemonic.MLA, "MLA V30.4S, V31.4S, V0.4S");
    }
}
