// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Advsimd;

[TestClass]
public class Arm64InstructionFactoryTests_INS_Advsimd
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.INS"/>.
    /// </summary>
    [TestMethod]
    public void Test_INS_asimdins_iv_v_0()
    {
        
        {
            var raw = INS(V0.B[0], V1.B[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_iv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V0.B[0], V1.B[0]", asm);
        }
        
        {
            var raw = INS(V30.B[1], V1.B[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_iv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V30.B[1], V1.B[0]", asm);
        }
        
        {
            var raw = INS(V0.B[0], V31.B[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_iv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V0.B[0], V31.B[1]", asm);
        }
        
        {
            var raw = INS(V30.B[1], V31.B[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_iv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V30.B[1], V31.B[1]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.INS"/>.
    /// </summary>
    [TestMethod]
    public void Test_INS_asimdins_iv_v_1()
    {
        
        {
            var raw = INS(V0.H[0], V1.H[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_iv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V0.H[0], V1.H[0]", asm);
        }
        
        {
            var raw = INS(V30.H[1], V1.H[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_iv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V30.H[1], V1.H[0]", asm);
        }
        
        {
            var raw = INS(V0.H[0], V31.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_iv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V0.H[0], V31.H[1]", asm);
        }
        
        {
            var raw = INS(V30.H[1], V31.H[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_iv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V30.H[1], V31.H[1]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.INS"/>.
    /// </summary>
    [TestMethod]
    public void Test_INS_asimdins_iv_v_2()
    {
        
        {
            var raw = INS(V0.S[0], V1.S[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_iv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V0.S[0], V1.S[0]", asm);
        }
        
        {
            var raw = INS(V30.S[1], V1.S[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_iv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V30.S[1], V1.S[0]", asm);
        }
        
        {
            var raw = INS(V0.S[0], V31.S[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_iv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V0.S[0], V31.S[1]", asm);
        }
        
        {
            var raw = INS(V30.S[1], V31.S[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_iv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V30.S[1], V31.S[1]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.INS"/>.
    /// </summary>
    [TestMethod]
    public void Test_INS_asimdins_iv_v_3()
    {
        
        {
            var raw = INS(V0.D[0], V1.D[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_iv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V0.D[0], V1.D[0]", asm);
        }
        
        {
            var raw = INS(V30.D[1], V1.D[0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_iv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V30.D[1], V1.D[0]", asm);
        }
        
        {
            var raw = INS(V0.D[0], V31.D[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_iv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V0.D[0], V31.D[1]", asm);
        }
        
        {
            var raw = INS(V30.D[1], V31.D[1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_iv_v, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V30.D[1], V31.D[1]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.INS"/>.
    /// </summary>
    [TestMethod]
    public void Test_INS_asimdins_ir_r_4()
    {
        
        {
            var raw = INS(V0.B[0], W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_ir_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V0.B[0], W2", asm);
        }
        
        {
            var raw = INS(V30.B[1], W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_ir_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V30.B[1], W2", asm);
        }
        
        {
            var raw = INS(V0.B[0], WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_ir_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V0.B[0], WZR", asm);
        }
        
        {
            var raw = INS(V30.B[1], WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_ir_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V30.B[1], WZR", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.INS"/>.
    /// </summary>
    [TestMethod]
    public void Test_INS_asimdins_ir_r_5()
    {
        
        {
            var raw = INS(V0.H[0], W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_ir_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V0.H[0], W2", asm);
        }
        
        {
            var raw = INS(V30.H[1], W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_ir_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V30.H[1], W2", asm);
        }
        
        {
            var raw = INS(V0.H[0], WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_ir_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V0.H[0], WZR", asm);
        }
        
        {
            var raw = INS(V30.H[1], WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_ir_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V30.H[1], WZR", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.INS"/>.
    /// </summary>
    [TestMethod]
    public void Test_INS_asimdins_ir_r_6()
    {
        
        {
            var raw = INS(V0.S[0], W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_ir_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V0.S[0], W2", asm);
        }
        
        {
            var raw = INS(V30.S[1], W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_ir_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V30.S[1], W2", asm);
        }
        
        {
            var raw = INS(V0.S[0], WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_ir_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V0.S[0], WZR", asm);
        }
        
        {
            var raw = INS(V30.S[1], WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_ir_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V30.S[1], WZR", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.INS"/>.
    /// </summary>
    [TestMethod]
    public void Test_INS_asimdins_ir_r_7()
    {
        
        {
            var raw = INS(V0.D[0], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_ir_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V0.D[0], X2", asm);
        }
        
        {
            var raw = INS(V30.D[1], X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_ir_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V30.D[1], X2", asm);
        }
        
        {
            var raw = INS(V0.D[0], XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_ir_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V0.D[0], XZR", asm);
        }
        
        {
            var raw = INS(V30.D[1], XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOV_ins_asimdins_ir_r, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOV V30.D[1], XZR", asm);
        }
    }
}
