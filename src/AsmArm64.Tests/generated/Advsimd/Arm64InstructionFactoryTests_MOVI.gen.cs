// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Advsimd;

[TestClass]
public class Arm64InstructionFactoryTests_MOVI_Advsimd
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MOVI"/>.
    /// </summary>
    [TestMethod]
    public void Test_MOVI_asimdimm_n_b_0()
    {
        
        {
            var raw = MOVI(V0.T_8B, 5, _LSL, 0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOVI_asimdimm_n_b, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOVI, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOVI V0.8B, #5", asm);
        }
        
        {
            var raw = MOVI(V30.T_8B, 5, _LSL, 0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOVI_asimdimm_n_b, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOVI, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOVI V30.8B, #5", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MOVI"/>.
    /// </summary>
    [TestMethod]
    public void Test_MOVI_asimdimm_n_b_1()
    {
        
        {
            var raw = MOVI(V0.T_16B, 5, _LSL, 0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOVI_asimdimm_n_b, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOVI, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOVI V0.16B, #5", asm);
        }
        
        {
            var raw = MOVI(V30.T_16B, 5, _LSL, 0);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOVI_asimdimm_n_b, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOVI, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOVI V30.16B, #5", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MOVI"/>.
    /// </summary>
    [TestMethod]
    public void Test_MOVI_asimdimm_l_hl_2()
    {
        
        {
            var raw = MOVI(V0.T_4H, 5, _LSL, 8);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOVI_asimdimm_l_hl, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOVI, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOVI V0.4H, #5, LSL #8", asm);
        }
        
        {
            var raw = MOVI(V30.T_4H, 5, _LSL, 8);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOVI_asimdimm_l_hl, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOVI, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOVI V30.4H, #5, LSL #8", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MOVI"/>.
    /// </summary>
    [TestMethod]
    public void Test_MOVI_asimdimm_l_hl_3()
    {
        
        {
            var raw = MOVI(V0.T_8H, 5, _LSL, 8);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOVI_asimdimm_l_hl, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOVI, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOVI V0.8H, #5, LSL #8", asm);
        }
        
        {
            var raw = MOVI(V30.T_8H, 5, _LSL, 8);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOVI_asimdimm_l_hl, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOVI, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOVI V30.8H, #5, LSL #8", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MOVI"/>.
    /// </summary>
    [TestMethod]
    public void Test_MOVI_asimdimm_l_sl_4()
    {
        
        {
            var raw = MOVI(V0.T_2S, 5, _LSL, 8);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOVI_asimdimm_l_sl, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOVI, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOVI V0.2S, #5, LSL #8", asm);
        }
        
        {
            var raw = MOVI(V30.T_2S, 5, _LSL, 8);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOVI_asimdimm_l_sl, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOVI, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOVI V30.2S, #5, LSL #8", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MOVI"/>.
    /// </summary>
    [TestMethod]
    public void Test_MOVI_asimdimm_l_sl_5()
    {
        
        {
            var raw = MOVI(V0.T_4S, 5, _LSL, 8);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOVI_asimdimm_l_sl, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOVI, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOVI V0.4S, #5, LSL #8", asm);
        }
        
        {
            var raw = MOVI(V30.T_4S, 5, _LSL, 8);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOVI_asimdimm_l_sl, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOVI, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOVI V30.4S, #5, LSL #8", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MOVI"/>.
    /// </summary>
    [TestMethod]
    public void Test_MOVI_asimdimm_m_sm_6()
    {
        
        {
            var raw = MOVI(V0.T_2S, 5, _MSL, 16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOVI_asimdimm_m_sm, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOVI, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOVI V0.2S, #5, MSL #16", asm);
        }
        
        {
            var raw = MOVI(V30.T_2S, 5, _MSL, 16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOVI_asimdimm_m_sm, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOVI, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOVI V30.2S, #5, MSL #16", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MOVI"/>.
    /// </summary>
    [TestMethod]
    public void Test_MOVI_asimdimm_m_sm_7()
    {
        
        {
            var raw = MOVI(V0.T_4S, 5, _MSL, 16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOVI_asimdimm_m_sm, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOVI, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOVI V0.4S, #5, MSL #16", asm);
        }
        
        {
            var raw = MOVI(V30.T_4S, 5, _MSL, 16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOVI_asimdimm_m_sm, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOVI, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOVI V30.4S, #5, MSL #16", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MOVI"/>.
    /// </summary>
    [TestMethod]
    public void Test_MOVI_asimdimm_d_ds_8()
    {
        
        {
            var raw = MOVI(D0, 0xff00ffUL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOVI_asimdimm_d_ds, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOVI, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOVI D0, #0xff00ff", asm);
        }
        
        {
            var raw = MOVI(D31, 0xff00ffUL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOVI_asimdimm_d_ds, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOVI, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOVI D31, #0xff00ff", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MOVI"/>.
    /// </summary>
    [TestMethod]
    public void Test_MOVI_asimdimm_d2_d_9()
    {
        
        {
            var raw = MOVI(V0.T_2D, 0xff00ffUL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOVI_asimdimm_d2_d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOVI, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOVI V0.2D, #0xff00ff", asm);
        }
        
        {
            var raw = MOVI(V30.T_2D, 0xff00ffUL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.MOVI_asimdimm_d2_d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.MOVI, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("MOVI V30.2D, #0xff00ff", asm);
        }
    }
}
