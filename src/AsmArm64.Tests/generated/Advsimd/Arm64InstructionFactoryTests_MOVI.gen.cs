// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Advsimd;

[TestClass]
public class Arm64InstructionFactoryTests_MOVI_Advsimd : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MOVI"/>.
    /// </summary>
    [TestMethod]
    public void Test_MOVI_asimdimm_n_b_0()
    {
        TestInst(MOVI(V0.T_8B, 5, _LSL, 0), asm => asm.MOVI(V0.T_8B, 5, _LSL, 0), Arm64InstructionId.MOVI_asimdimm_n_b, Arm64Mnemonic.MOVI, "MOVI V0.8B, #5");
        TestInst(MOVI(V30.T_8B, 5, _LSL, 0), asm => asm.MOVI(V30.T_8B, 5, _LSL, 0), Arm64InstructionId.MOVI_asimdimm_n_b, Arm64Mnemonic.MOVI, "MOVI V30.8B, #5");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MOVI"/>.
    /// </summary>
    [TestMethod]
    public void Test_MOVI_asimdimm_n_b_1()
    {
        TestInst(MOVI(V0.T_16B, 5, _LSL, 0), asm => asm.MOVI(V0.T_16B, 5, _LSL, 0), Arm64InstructionId.MOVI_asimdimm_n_b, Arm64Mnemonic.MOVI, "MOVI V0.16B, #5");
        TestInst(MOVI(V30.T_16B, 5, _LSL, 0), asm => asm.MOVI(V30.T_16B, 5, _LSL, 0), Arm64InstructionId.MOVI_asimdimm_n_b, Arm64Mnemonic.MOVI, "MOVI V30.16B, #5");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MOVI"/>.
    /// </summary>
    [TestMethod]
    public void Test_MOVI_asimdimm_l_hl_2()
    {
        TestInst(MOVI(V0.T_4H, 5, _LSL, 8), asm => asm.MOVI(V0.T_4H, 5, _LSL, 8), Arm64InstructionId.MOVI_asimdimm_l_hl, Arm64Mnemonic.MOVI, "MOVI V0.4H, #5, LSL #8");
        TestInst(MOVI(V30.T_4H, 5, _LSL, 8), asm => asm.MOVI(V30.T_4H, 5, _LSL, 8), Arm64InstructionId.MOVI_asimdimm_l_hl, Arm64Mnemonic.MOVI, "MOVI V30.4H, #5, LSL #8");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MOVI"/>.
    /// </summary>
    [TestMethod]
    public void Test_MOVI_asimdimm_l_hl_3()
    {
        TestInst(MOVI(V0.T_8H, 5, _LSL, 8), asm => asm.MOVI(V0.T_8H, 5, _LSL, 8), Arm64InstructionId.MOVI_asimdimm_l_hl, Arm64Mnemonic.MOVI, "MOVI V0.8H, #5, LSL #8");
        TestInst(MOVI(V30.T_8H, 5, _LSL, 8), asm => asm.MOVI(V30.T_8H, 5, _LSL, 8), Arm64InstructionId.MOVI_asimdimm_l_hl, Arm64Mnemonic.MOVI, "MOVI V30.8H, #5, LSL #8");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MOVI"/>.
    /// </summary>
    [TestMethod]
    public void Test_MOVI_asimdimm_l_sl_4()
    {
        TestInst(MOVI(V0.T_2S, 5, _LSL, 8), asm => asm.MOVI(V0.T_2S, 5, _LSL, 8), Arm64InstructionId.MOVI_asimdimm_l_sl, Arm64Mnemonic.MOVI, "MOVI V0.2S, #5, LSL #8");
        TestInst(MOVI(V30.T_2S, 5, _LSL, 8), asm => asm.MOVI(V30.T_2S, 5, _LSL, 8), Arm64InstructionId.MOVI_asimdimm_l_sl, Arm64Mnemonic.MOVI, "MOVI V30.2S, #5, LSL #8");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MOVI"/>.
    /// </summary>
    [TestMethod]
    public void Test_MOVI_asimdimm_l_sl_5()
    {
        TestInst(MOVI(V0.T_4S, 5, _LSL, 8), asm => asm.MOVI(V0.T_4S, 5, _LSL, 8), Arm64InstructionId.MOVI_asimdimm_l_sl, Arm64Mnemonic.MOVI, "MOVI V0.4S, #5, LSL #8");
        TestInst(MOVI(V30.T_4S, 5, _LSL, 8), asm => asm.MOVI(V30.T_4S, 5, _LSL, 8), Arm64InstructionId.MOVI_asimdimm_l_sl, Arm64Mnemonic.MOVI, "MOVI V30.4S, #5, LSL #8");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MOVI"/>.
    /// </summary>
    [TestMethod]
    public void Test_MOVI_asimdimm_m_sm_6()
    {
        TestInst(MOVI(V0.T_2S, 5, _MSL, 16), asm => asm.MOVI(V0.T_2S, 5, _MSL, 16), Arm64InstructionId.MOVI_asimdimm_m_sm, Arm64Mnemonic.MOVI, "MOVI V0.2S, #5, MSL #16");
        TestInst(MOVI(V30.T_2S, 5, _MSL, 16), asm => asm.MOVI(V30.T_2S, 5, _MSL, 16), Arm64InstructionId.MOVI_asimdimm_m_sm, Arm64Mnemonic.MOVI, "MOVI V30.2S, #5, MSL #16");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MOVI"/>.
    /// </summary>
    [TestMethod]
    public void Test_MOVI_asimdimm_m_sm_7()
    {
        TestInst(MOVI(V0.T_4S, 5, _MSL, 16), asm => asm.MOVI(V0.T_4S, 5, _MSL, 16), Arm64InstructionId.MOVI_asimdimm_m_sm, Arm64Mnemonic.MOVI, "MOVI V0.4S, #5, MSL #16");
        TestInst(MOVI(V30.T_4S, 5, _MSL, 16), asm => asm.MOVI(V30.T_4S, 5, _MSL, 16), Arm64InstructionId.MOVI_asimdimm_m_sm, Arm64Mnemonic.MOVI, "MOVI V30.4S, #5, MSL #16");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MOVI"/>.
    /// </summary>
    [TestMethod]
    public void Test_MOVI_asimdimm_d_ds_8()
    {
        TestInst(MOVI(D0, 0xff00ffUL), asm => asm.MOVI(D0, 0xff00ffUL), Arm64InstructionId.MOVI_asimdimm_d_ds, Arm64Mnemonic.MOVI, "MOVI D0, #0xff00ff");
        TestInst(MOVI(D31, 0xff00ffUL), asm => asm.MOVI(D31, 0xff00ffUL), Arm64InstructionId.MOVI_asimdimm_d_ds, Arm64Mnemonic.MOVI, "MOVI D31, #0xff00ff");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MOVI"/>.
    /// </summary>
    [TestMethod]
    public void Test_MOVI_asimdimm_d2_d_9()
    {
        TestInst(MOVI(V0.T_2D, 0xff00ffUL), asm => asm.MOVI(V0.T_2D, 0xff00ffUL), Arm64InstructionId.MOVI_asimdimm_d2_d, Arm64Mnemonic.MOVI, "MOVI V0.2D, #0xff00ff");
        TestInst(MOVI(V30.T_2D, 0xff00ffUL), asm => asm.MOVI(V30.T_2D, 0xff00ffUL), Arm64InstructionId.MOVI_asimdimm_d2_d, Arm64Mnemonic.MOVI, "MOVI V30.2D, #0xff00ff");
    }
}
