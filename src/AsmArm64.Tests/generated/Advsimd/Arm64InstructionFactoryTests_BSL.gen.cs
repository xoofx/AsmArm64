// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Advsimd;

[TestClass]
public class Arm64InstructionFactoryTests_BSL_Advsimd : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.BSL"/>.
    /// </summary>
    [TestMethod]
    public void Test_BSL_asimdsame_only_0()
    {
        TestInst(BSL(V0.T_8B, V1.T_8B, V2.T_8B), asm => asm.BSL(V0.T_8B, V1.T_8B, V2.T_8B), Arm64InstructionId.BSL_asimdsame_only, Arm64Mnemonic.BSL, "BSL V0.8B, V1.8B, V2.8B");
        TestInst(BSL(V30.T_8B, V1.T_8B, V2.T_8B), asm => asm.BSL(V30.T_8B, V1.T_8B, V2.T_8B), Arm64InstructionId.BSL_asimdsame_only, Arm64Mnemonic.BSL, "BSL V30.8B, V1.8B, V2.8B");
        TestInst(BSL(V0.T_8B, V31.T_8B, V2.T_8B), asm => asm.BSL(V0.T_8B, V31.T_8B, V2.T_8B), Arm64InstructionId.BSL_asimdsame_only, Arm64Mnemonic.BSL, "BSL V0.8B, V31.8B, V2.8B");
        TestInst(BSL(V30.T_8B, V31.T_8B, V2.T_8B), asm => asm.BSL(V30.T_8B, V31.T_8B, V2.T_8B), Arm64InstructionId.BSL_asimdsame_only, Arm64Mnemonic.BSL, "BSL V30.8B, V31.8B, V2.8B");
        TestInst(BSL(V0.T_8B, V1.T_8B, V0.T_8B), asm => asm.BSL(V0.T_8B, V1.T_8B, V0.T_8B), Arm64InstructionId.BSL_asimdsame_only, Arm64Mnemonic.BSL, "BSL V0.8B, V1.8B, V0.8B");
        TestInst(BSL(V30.T_8B, V1.T_8B, V0.T_8B), asm => asm.BSL(V30.T_8B, V1.T_8B, V0.T_8B), Arm64InstructionId.BSL_asimdsame_only, Arm64Mnemonic.BSL, "BSL V30.8B, V1.8B, V0.8B");
        TestInst(BSL(V0.T_8B, V31.T_8B, V0.T_8B), asm => asm.BSL(V0.T_8B, V31.T_8B, V0.T_8B), Arm64InstructionId.BSL_asimdsame_only, Arm64Mnemonic.BSL, "BSL V0.8B, V31.8B, V0.8B");
        TestInst(BSL(V30.T_8B, V31.T_8B, V0.T_8B), asm => asm.BSL(V30.T_8B, V31.T_8B, V0.T_8B), Arm64InstructionId.BSL_asimdsame_only, Arm64Mnemonic.BSL, "BSL V30.8B, V31.8B, V0.8B");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.BSL"/>.
    /// </summary>
    [TestMethod]
    public void Test_BSL_asimdsame_only_1()
    {
        TestInst(BSL(V0.T_16B, V1.T_16B, V2.T_16B), asm => asm.BSL(V0.T_16B, V1.T_16B, V2.T_16B), Arm64InstructionId.BSL_asimdsame_only, Arm64Mnemonic.BSL, "BSL V0.16B, V1.16B, V2.16B");
        TestInst(BSL(V30.T_16B, V1.T_16B, V2.T_16B), asm => asm.BSL(V30.T_16B, V1.T_16B, V2.T_16B), Arm64InstructionId.BSL_asimdsame_only, Arm64Mnemonic.BSL, "BSL V30.16B, V1.16B, V2.16B");
        TestInst(BSL(V0.T_16B, V31.T_16B, V2.T_16B), asm => asm.BSL(V0.T_16B, V31.T_16B, V2.T_16B), Arm64InstructionId.BSL_asimdsame_only, Arm64Mnemonic.BSL, "BSL V0.16B, V31.16B, V2.16B");
        TestInst(BSL(V30.T_16B, V31.T_16B, V2.T_16B), asm => asm.BSL(V30.T_16B, V31.T_16B, V2.T_16B), Arm64InstructionId.BSL_asimdsame_only, Arm64Mnemonic.BSL, "BSL V30.16B, V31.16B, V2.16B");
        TestInst(BSL(V0.T_16B, V1.T_16B, V0.T_16B), asm => asm.BSL(V0.T_16B, V1.T_16B, V0.T_16B), Arm64InstructionId.BSL_asimdsame_only, Arm64Mnemonic.BSL, "BSL V0.16B, V1.16B, V0.16B");
        TestInst(BSL(V30.T_16B, V1.T_16B, V0.T_16B), asm => asm.BSL(V30.T_16B, V1.T_16B, V0.T_16B), Arm64InstructionId.BSL_asimdsame_only, Arm64Mnemonic.BSL, "BSL V30.16B, V1.16B, V0.16B");
        TestInst(BSL(V0.T_16B, V31.T_16B, V0.T_16B), asm => asm.BSL(V0.T_16B, V31.T_16B, V0.T_16B), Arm64InstructionId.BSL_asimdsame_only, Arm64Mnemonic.BSL, "BSL V0.16B, V31.16B, V0.16B");
        TestInst(BSL(V30.T_16B, V31.T_16B, V0.T_16B), asm => asm.BSL(V30.T_16B, V31.T_16B, V0.T_16B), Arm64InstructionId.BSL_asimdsame_only, Arm64Mnemonic.BSL, "BSL V30.16B, V31.16B, V0.16B");
    }
}
