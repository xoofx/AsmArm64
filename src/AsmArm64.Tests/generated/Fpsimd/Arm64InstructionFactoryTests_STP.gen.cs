// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Fpsimd;

[TestClass]
public class Arm64InstructionFactoryTests_STP_Fpsimd : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STP_s_ldstpair_post_0()
    {
        TestInst(STP(S0, S1, _[X3], 20), asm => asm.STP(S0, S1, _[X3], 20), Arm64InstructionId.STP_s_ldstpair_post, Arm64Mnemonic.STP, "STP S0, S1, [X3], #20");
        TestInst(STP(S31, S1, _[X3], 20), asm => asm.STP(S31, S1, _[X3], 20), Arm64InstructionId.STP_s_ldstpair_post, Arm64Mnemonic.STP, "STP S31, S1, [X3], #20");
        TestInst(STP(S0, S31, _[X3], 20), asm => asm.STP(S0, S31, _[X3], 20), Arm64InstructionId.STP_s_ldstpair_post, Arm64Mnemonic.STP, "STP S0, S31, [X3], #20");
        TestInst(STP(S31, S31, _[X3], 20), asm => asm.STP(S31, S31, _[X3], 20), Arm64InstructionId.STP_s_ldstpair_post, Arm64Mnemonic.STP, "STP S31, S31, [X3], #20");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STP_d_ldstpair_post_1()
    {
        TestInst(STP(D0, D1, _[X3], 40), asm => asm.STP(D0, D1, _[X3], 40), Arm64InstructionId.STP_d_ldstpair_post, Arm64Mnemonic.STP, "STP D0, D1, [X3], #40");
        TestInst(STP(D31, D1, _[X3], 40), asm => asm.STP(D31, D1, _[X3], 40), Arm64InstructionId.STP_d_ldstpair_post, Arm64Mnemonic.STP, "STP D31, D1, [X3], #40");
        TestInst(STP(D0, D31, _[X3], 40), asm => asm.STP(D0, D31, _[X3], 40), Arm64InstructionId.STP_d_ldstpair_post, Arm64Mnemonic.STP, "STP D0, D31, [X3], #40");
        TestInst(STP(D31, D31, _[X3], 40), asm => asm.STP(D31, D31, _[X3], 40), Arm64InstructionId.STP_d_ldstpair_post, Arm64Mnemonic.STP, "STP D31, D31, [X3], #40");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STP_q_ldstpair_post_2()
    {
        TestInst(STP(Q0, Q1, _[X3], 80), asm => asm.STP(Q0, Q1, _[X3], 80), Arm64InstructionId.STP_q_ldstpair_post, Arm64Mnemonic.STP, "STP Q0, Q1, [X3], #80");
        TestInst(STP(Q31, Q1, _[X3], 80), asm => asm.STP(Q31, Q1, _[X3], 80), Arm64InstructionId.STP_q_ldstpair_post, Arm64Mnemonic.STP, "STP Q31, Q1, [X3], #80");
        TestInst(STP(Q0, Q31, _[X3], 80), asm => asm.STP(Q0, Q31, _[X3], 80), Arm64InstructionId.STP_q_ldstpair_post, Arm64Mnemonic.STP, "STP Q0, Q31, [X3], #80");
        TestInst(STP(Q31, Q31, _[X3], 80), asm => asm.STP(Q31, Q31, _[X3], 80), Arm64InstructionId.STP_q_ldstpair_post, Arm64Mnemonic.STP, "STP Q31, Q31, [X3], #80");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STP_s_ldstpair_pre_3()
    {
        TestInst(STP(S0, S1, _[X3, 20].Pre), asm => asm.STP(S0, S1, _[X3, 20].Pre), Arm64InstructionId.STP_s_ldstpair_pre, Arm64Mnemonic.STP, "STP S0, S1, [X3, #20]!");
        TestInst(STP(S31, S1, _[X3, 20].Pre), asm => asm.STP(S31, S1, _[X3, 20].Pre), Arm64InstructionId.STP_s_ldstpair_pre, Arm64Mnemonic.STP, "STP S31, S1, [X3, #20]!");
        TestInst(STP(S0, S31, _[X3, 20].Pre), asm => asm.STP(S0, S31, _[X3, 20].Pre), Arm64InstructionId.STP_s_ldstpair_pre, Arm64Mnemonic.STP, "STP S0, S31, [X3, #20]!");
        TestInst(STP(S31, S31, _[X3, 20].Pre), asm => asm.STP(S31, S31, _[X3, 20].Pre), Arm64InstructionId.STP_s_ldstpair_pre, Arm64Mnemonic.STP, "STP S31, S31, [X3, #20]!");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STP_d_ldstpair_pre_4()
    {
        TestInst(STP(D0, D1, _[X3, 40].Pre), asm => asm.STP(D0, D1, _[X3, 40].Pre), Arm64InstructionId.STP_d_ldstpair_pre, Arm64Mnemonic.STP, "STP D0, D1, [X3, #40]!");
        TestInst(STP(D31, D1, _[X3, 40].Pre), asm => asm.STP(D31, D1, _[X3, 40].Pre), Arm64InstructionId.STP_d_ldstpair_pre, Arm64Mnemonic.STP, "STP D31, D1, [X3, #40]!");
        TestInst(STP(D0, D31, _[X3, 40].Pre), asm => asm.STP(D0, D31, _[X3, 40].Pre), Arm64InstructionId.STP_d_ldstpair_pre, Arm64Mnemonic.STP, "STP D0, D31, [X3, #40]!");
        TestInst(STP(D31, D31, _[X3, 40].Pre), asm => asm.STP(D31, D31, _[X3, 40].Pre), Arm64InstructionId.STP_d_ldstpair_pre, Arm64Mnemonic.STP, "STP D31, D31, [X3, #40]!");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STP_q_ldstpair_pre_5()
    {
        TestInst(STP(Q0, Q1, _[X3, 80].Pre), asm => asm.STP(Q0, Q1, _[X3, 80].Pre), Arm64InstructionId.STP_q_ldstpair_pre, Arm64Mnemonic.STP, "STP Q0, Q1, [X3, #80]!");
        TestInst(STP(Q31, Q1, _[X3, 80].Pre), asm => asm.STP(Q31, Q1, _[X3, 80].Pre), Arm64InstructionId.STP_q_ldstpair_pre, Arm64Mnemonic.STP, "STP Q31, Q1, [X3, #80]!");
        TestInst(STP(Q0, Q31, _[X3, 80].Pre), asm => asm.STP(Q0, Q31, _[X3, 80].Pre), Arm64InstructionId.STP_q_ldstpair_pre, Arm64Mnemonic.STP, "STP Q0, Q31, [X3, #80]!");
        TestInst(STP(Q31, Q31, _[X3, 80].Pre), asm => asm.STP(Q31, Q31, _[X3, 80].Pre), Arm64InstructionId.STP_q_ldstpair_pre, Arm64Mnemonic.STP, "STP Q31, Q31, [X3, #80]!");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STP_s_ldstpair_off_6()
    {
        TestInst(STP(S0, S1, _[X3, 20]), asm => asm.STP(S0, S1, _[X3, 20]), Arm64InstructionId.STP_s_ldstpair_off, Arm64Mnemonic.STP, "STP S0, S1, [X3, #20]");
        TestInst(STP(S31, S1, _[X3, 20]), asm => asm.STP(S31, S1, _[X3, 20]), Arm64InstructionId.STP_s_ldstpair_off, Arm64Mnemonic.STP, "STP S31, S1, [X3, #20]");
        TestInst(STP(S0, S31, _[X3, 20]), asm => asm.STP(S0, S31, _[X3, 20]), Arm64InstructionId.STP_s_ldstpair_off, Arm64Mnemonic.STP, "STP S0, S31, [X3, #20]");
        TestInst(STP(S31, S31, _[X3, 20]), asm => asm.STP(S31, S31, _[X3, 20]), Arm64InstructionId.STP_s_ldstpair_off, Arm64Mnemonic.STP, "STP S31, S31, [X3, #20]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STP_d_ldstpair_off_7()
    {
        TestInst(STP(D0, D1, _[X3, 40]), asm => asm.STP(D0, D1, _[X3, 40]), Arm64InstructionId.STP_d_ldstpair_off, Arm64Mnemonic.STP, "STP D0, D1, [X3, #40]");
        TestInst(STP(D31, D1, _[X3, 40]), asm => asm.STP(D31, D1, _[X3, 40]), Arm64InstructionId.STP_d_ldstpair_off, Arm64Mnemonic.STP, "STP D31, D1, [X3, #40]");
        TestInst(STP(D0, D31, _[X3, 40]), asm => asm.STP(D0, D31, _[X3, 40]), Arm64InstructionId.STP_d_ldstpair_off, Arm64Mnemonic.STP, "STP D0, D31, [X3, #40]");
        TestInst(STP(D31, D31, _[X3, 40]), asm => asm.STP(D31, D31, _[X3, 40]), Arm64InstructionId.STP_d_ldstpair_off, Arm64Mnemonic.STP, "STP D31, D31, [X3, #40]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STP_q_ldstpair_off_8()
    {
        TestInst(STP(Q0, Q1, _[X3, 80]), asm => asm.STP(Q0, Q1, _[X3, 80]), Arm64InstructionId.STP_q_ldstpair_off, Arm64Mnemonic.STP, "STP Q0, Q1, [X3, #80]");
        TestInst(STP(Q31, Q1, _[X3, 80]), asm => asm.STP(Q31, Q1, _[X3, 80]), Arm64InstructionId.STP_q_ldstpair_off, Arm64Mnemonic.STP, "STP Q31, Q1, [X3, #80]");
        TestInst(STP(Q0, Q31, _[X3, 80]), asm => asm.STP(Q0, Q31, _[X3, 80]), Arm64InstructionId.STP_q_ldstpair_off, Arm64Mnemonic.STP, "STP Q0, Q31, [X3, #80]");
        TestInst(STP(Q31, Q31, _[X3, 80]), asm => asm.STP(Q31, Q31, _[X3, 80]), Arm64InstructionId.STP_q_ldstpair_off, Arm64Mnemonic.STP, "STP Q31, Q31, [X3, #80]");
    }
}
