// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Fpsimd;

[TestClass]
public class Arm64InstructionFactoryTests_STP_Fpsimd
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STP_s_ldstpair_post_0()
    {
        
        {
            var raw = STP(S0, S1, _[X3], 20);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_s_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP S0, S1, [X3], #20", asm);
        }
        
        {
            var raw = STP(S31, S1, _[X3], 20);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_s_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP S31, S1, [X3], #20", asm);
        }
        
        {
            var raw = STP(S0, S31, _[X3], 20);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_s_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP S0, S31, [X3], #20", asm);
        }
        
        {
            var raw = STP(S31, S31, _[X3], 20);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_s_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP S31, S31, [X3], #20", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STP_d_ldstpair_post_1()
    {
        
        {
            var raw = STP(D0, D1, _[X3], 40);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_d_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP D0, D1, [X3], #40", asm);
        }
        
        {
            var raw = STP(D31, D1, _[X3], 40);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_d_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP D31, D1, [X3], #40", asm);
        }
        
        {
            var raw = STP(D0, D31, _[X3], 40);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_d_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP D0, D31, [X3], #40", asm);
        }
        
        {
            var raw = STP(D31, D31, _[X3], 40);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_d_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP D31, D31, [X3], #40", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STP_q_ldstpair_post_2()
    {
        
        {
            var raw = STP(Q0, Q1, _[X3], 80);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_q_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP Q0, Q1, [X3], #80", asm);
        }
        
        {
            var raw = STP(Q31, Q1, _[X3], 80);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_q_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP Q31, Q1, [X3], #80", asm);
        }
        
        {
            var raw = STP(Q0, Q31, _[X3], 80);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_q_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP Q0, Q31, [X3], #80", asm);
        }
        
        {
            var raw = STP(Q31, Q31, _[X3], 80);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_q_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP Q31, Q31, [X3], #80", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STP_s_ldstpair_pre_3()
    {
        
        {
            var raw = STP(S0, S1, _[X3, 20].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_s_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP S0, S1, [X3, #20]!", asm);
        }
        
        {
            var raw = STP(S31, S1, _[X3, 20].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_s_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP S31, S1, [X3, #20]!", asm);
        }
        
        {
            var raw = STP(S0, S31, _[X3, 20].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_s_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP S0, S31, [X3, #20]!", asm);
        }
        
        {
            var raw = STP(S31, S31, _[X3, 20].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_s_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP S31, S31, [X3, #20]!", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STP_d_ldstpair_pre_4()
    {
        
        {
            var raw = STP(D0, D1, _[X3, 40].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_d_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP D0, D1, [X3, #40]!", asm);
        }
        
        {
            var raw = STP(D31, D1, _[X3, 40].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_d_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP D31, D1, [X3, #40]!", asm);
        }
        
        {
            var raw = STP(D0, D31, _[X3, 40].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_d_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP D0, D31, [X3, #40]!", asm);
        }
        
        {
            var raw = STP(D31, D31, _[X3, 40].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_d_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP D31, D31, [X3, #40]!", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STP_q_ldstpair_pre_5()
    {
        
        {
            var raw = STP(Q0, Q1, _[X3, 80].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_q_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP Q0, Q1, [X3, #80]!", asm);
        }
        
        {
            var raw = STP(Q31, Q1, _[X3, 80].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_q_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP Q31, Q1, [X3, #80]!", asm);
        }
        
        {
            var raw = STP(Q0, Q31, _[X3, 80].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_q_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP Q0, Q31, [X3, #80]!", asm);
        }
        
        {
            var raw = STP(Q31, Q31, _[X3, 80].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_q_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP Q31, Q31, [X3, #80]!", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STP_s_ldstpair_off_6()
    {
        
        {
            var raw = STP(S0, S1, _[X3, 20]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_s_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP S0, S1, [X3, #20]", asm);
        }
        
        {
            var raw = STP(S31, S1, _[X3, 20]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_s_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP S31, S1, [X3, #20]", asm);
        }
        
        {
            var raw = STP(S0, S31, _[X3, 20]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_s_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP S0, S31, [X3, #20]", asm);
        }
        
        {
            var raw = STP(S31, S31, _[X3, 20]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_s_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP S31, S31, [X3, #20]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STP_d_ldstpair_off_7()
    {
        
        {
            var raw = STP(D0, D1, _[X3, 40]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_d_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP D0, D1, [X3, #40]", asm);
        }
        
        {
            var raw = STP(D31, D1, _[X3, 40]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_d_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP D31, D1, [X3, #40]", asm);
        }
        
        {
            var raw = STP(D0, D31, _[X3, 40]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_d_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP D0, D31, [X3, #40]", asm);
        }
        
        {
            var raw = STP(D31, D31, _[X3, 40]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_d_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP D31, D31, [X3, #40]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STP_q_ldstpair_off_8()
    {
        
        {
            var raw = STP(Q0, Q1, _[X3, 80]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_q_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP Q0, Q1, [X3, #80]", asm);
        }
        
        {
            var raw = STP(Q31, Q1, _[X3, 80]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_q_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP Q31, Q1, [X3, #80]", asm);
        }
        
        {
            var raw = STP(Q0, Q31, _[X3, 80]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_q_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP Q0, Q31, [X3, #80]", asm);
        }
        
        {
            var raw = STP(Q31, Q31, _[X3, 80]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_q_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP Q31, Q31, [X3, #80]", asm);
        }
    }
}
