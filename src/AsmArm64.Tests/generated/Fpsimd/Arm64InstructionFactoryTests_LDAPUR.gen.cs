// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Fpsimd;

[TestClass]
public class Arm64InstructionFactoryTests_LDAPUR_Fpsimd
{
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDAPUR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDAPUR_b_ldapstl_simd_0()
    {
        
        {
            var raw = LDAPUR(B0, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDAPUR_b_ldapstl_simd, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDAPUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDAPUR B0, [X2, #5]", asm);
        }
        
        {
            var raw = LDAPUR(B31, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDAPUR_b_ldapstl_simd, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDAPUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDAPUR B31, [X2, #5]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDAPUR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDAPUR_h_ldapstl_simd_1()
    {
        
        {
            var raw = LDAPUR(H0, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDAPUR_h_ldapstl_simd, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDAPUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDAPUR H0, [X2, #5]", asm);
        }
        
        {
            var raw = LDAPUR(H31, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDAPUR_h_ldapstl_simd, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDAPUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDAPUR H31, [X2, #5]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDAPUR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDAPUR_s_ldapstl_simd_2()
    {
        
        {
            var raw = LDAPUR(S0, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDAPUR_s_ldapstl_simd, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDAPUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDAPUR S0, [X2, #5]", asm);
        }
        
        {
            var raw = LDAPUR(S31, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDAPUR_s_ldapstl_simd, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDAPUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDAPUR S31, [X2, #5]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDAPUR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDAPUR_d_ldapstl_simd_3()
    {
        
        {
            var raw = LDAPUR(D0, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDAPUR_d_ldapstl_simd, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDAPUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDAPUR D0, [X2, #5]", asm);
        }
        
        {
            var raw = LDAPUR(D31, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDAPUR_d_ldapstl_simd, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDAPUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDAPUR D31, [X2, #5]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDAPUR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDAPUR_q_ldapstl_simd_4()
    {
        
        {
            var raw = LDAPUR(Q0, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDAPUR_q_ldapstl_simd, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDAPUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDAPUR Q0, [X2, #5]", asm);
        }
        
        {
            var raw = LDAPUR(Q31, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDAPUR_q_ldapstl_simd, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDAPUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDAPUR Q31, [X2, #5]", asm);
        }
    }
}
