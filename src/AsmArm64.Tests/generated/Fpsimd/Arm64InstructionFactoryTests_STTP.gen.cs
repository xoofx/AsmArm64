// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Fpsimd;

[TestClass]
public class Arm64InstructionFactoryTests_STTP_Fpsimd
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STTP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STTP_q_ldstpair_post_0()
    {
        
        {
            var raw = STTP(Q0, Q1, _[X3], 80);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STTP_q_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STTP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STTP Q0, Q1, [X3], #80", asm);
        }
        
        {
            var raw = STTP(Q31, Q1, _[X3], 80);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STTP_q_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STTP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STTP Q31, Q1, [X3], #80", asm);
        }
        
        {
            var raw = STTP(Q0, Q31, _[X3], 80);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STTP_q_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STTP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STTP Q0, Q31, [X3], #80", asm);
        }
        
        {
            var raw = STTP(Q31, Q31, _[X3], 80);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STTP_q_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STTP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STTP Q31, Q31, [X3], #80", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STTP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STTP_q_ldstpair_pre_1()
    {
        
        {
            var raw = STTP(Q0, Q1, _[X3, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STTP_q_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STTP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STTP Q0, Q1, [X3, #5]!", asm);
        }
        
        {
            var raw = STTP(Q31, Q1, _[X3, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STTP_q_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STTP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STTP Q31, Q1, [X3, #5]!", asm);
        }
        
        {
            var raw = STTP(Q0, Q31, _[X3, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STTP_q_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STTP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STTP Q0, Q31, [X3, #5]!", asm);
        }
        
        {
            var raw = STTP(Q31, Q31, _[X3, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STTP_q_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STTP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STTP Q31, Q31, [X3, #5]!", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STTP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STTP_q_ldstpair_off_2()
    {
        
        {
            var raw = STTP(Q0, Q1, _[X3, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STTP_q_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STTP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STTP Q0, Q1, [X3, #5]", asm);
        }
        
        {
            var raw = STTP(Q31, Q1, _[X3, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STTP_q_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STTP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STTP Q31, Q1, [X3, #5]", asm);
        }
        
        {
            var raw = STTP(Q0, Q31, _[X3, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STTP_q_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STTP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STTP Q0, Q31, [X3, #5]", asm);
        }
        
        {
            var raw = STTP(Q31, Q31, _[X3, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STTP_q_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STTP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STTP Q31, Q31, [X3, #5]", asm);
        }
    }
}
