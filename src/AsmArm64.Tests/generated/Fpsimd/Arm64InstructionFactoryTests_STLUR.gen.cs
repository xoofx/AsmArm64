// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Fpsimd;

[TestClass]
public class Arm64InstructionFactoryTests_STLUR_Fpsimd
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STLUR"/>.
    /// </summary>
    [TestMethod]
    public void Test_STLUR_b_ldapstl_simd_0()
    {
        
        {
            var raw = STLUR(B0, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STLUR_b_ldapstl_simd, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STLUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STLUR B0, [X2, #5]", asm);
        }
        
        {
            var raw = STLUR(B31, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STLUR_b_ldapstl_simd, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STLUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STLUR B31, [X2, #5]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STLUR"/>.
    /// </summary>
    [TestMethod]
    public void Test_STLUR_h_ldapstl_simd_1()
    {
        
        {
            var raw = STLUR(H0, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STLUR_h_ldapstl_simd, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STLUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STLUR H0, [X2, #5]", asm);
        }
        
        {
            var raw = STLUR(H31, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STLUR_h_ldapstl_simd, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STLUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STLUR H31, [X2, #5]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STLUR"/>.
    /// </summary>
    [TestMethod]
    public void Test_STLUR_s_ldapstl_simd_2()
    {
        
        {
            var raw = STLUR(S0, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STLUR_s_ldapstl_simd, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STLUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STLUR S0, [X2, #5]", asm);
        }
        
        {
            var raw = STLUR(S31, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STLUR_s_ldapstl_simd, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STLUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STLUR S31, [X2, #5]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STLUR"/>.
    /// </summary>
    [TestMethod]
    public void Test_STLUR_d_ldapstl_simd_3()
    {
        
        {
            var raw = STLUR(D0, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STLUR_d_ldapstl_simd, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STLUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STLUR D0, [X2, #5]", asm);
        }
        
        {
            var raw = STLUR(D31, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STLUR_d_ldapstl_simd, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STLUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STLUR D31, [X2, #5]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STLUR"/>.
    /// </summary>
    [TestMethod]
    public void Test_STLUR_q_ldapstl_simd_4()
    {
        
        {
            var raw = STLUR(Q0, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STLUR_q_ldapstl_simd, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STLUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STLUR Q0, [X2, #5]", asm);
        }
        
        {
            var raw = STLUR(Q31, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STLUR_q_ldapstl_simd, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STLUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STLUR Q31, [X2, #5]", asm);
        }
    }
}
