// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Fpsimd;

[TestClass]
public class Arm64InstructionFactoryTests_LDUR_Fpsimd
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDUR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDUR_b_ldst_unscaled_0()
    {
        
        {
            var raw = LDUR(B0, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDUR_b_ldst_unscaled, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDUR B0, [X2, #5]", asm);
        }
        
        {
            var raw = LDUR(B31, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDUR_b_ldst_unscaled, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDUR B31, [X2, #5]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDUR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDUR_h_ldst_unscaled_1()
    {
        
        {
            var raw = LDUR(H0, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDUR_h_ldst_unscaled, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDUR H0, [X2, #5]", asm);
        }
        
        {
            var raw = LDUR(H31, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDUR_h_ldst_unscaled, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDUR H31, [X2, #5]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDUR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDUR_s_ldst_unscaled_2()
    {
        
        {
            var raw = LDUR(S0, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDUR_s_ldst_unscaled, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDUR S0, [X2, #5]", asm);
        }
        
        {
            var raw = LDUR(S31, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDUR_s_ldst_unscaled, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDUR S31, [X2, #5]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDUR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDUR_d_ldst_unscaled_3()
    {
        
        {
            var raw = LDUR(D0, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDUR_d_ldst_unscaled, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDUR D0, [X2, #5]", asm);
        }
        
        {
            var raw = LDUR(D31, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDUR_d_ldst_unscaled, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDUR D31, [X2, #5]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDUR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDUR_q_ldst_unscaled_4()
    {
        
        {
            var raw = LDUR(Q0, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDUR_q_ldst_unscaled, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDUR Q0, [X2, #5]", asm);
        }
        
        {
            var raw = LDUR(Q31, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDUR_q_ldst_unscaled, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDUR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDUR Q31, [X2, #5]", asm);
        }
    }
}
