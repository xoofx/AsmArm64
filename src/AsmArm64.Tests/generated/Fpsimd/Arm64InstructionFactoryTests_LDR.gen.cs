// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Fpsimd;

[TestClass]
public class Arm64InstructionFactoryTests_LDR_Fpsimd
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_b_ldst_regoff_0()
    {
        
        {
            var raw = LDR(B0, _[X2, X3, _LSL, 0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_bl_ldst_regoff, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR B0, [X2, X3, LSL #0]", asm);
        }
        
        {
            var raw = LDR(B31, _[X2, X3, _LSL, 0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_bl_ldst_regoff, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR B31, [X2, X3, LSL #0]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_b_ldst_regoff_1()
    {
        Assert.Inconclusive("TODO");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_b_ldst_immpost_2()
    {
        
        {
            var raw = LDR(B0, _[X2], 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_b_ldst_immpost, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR B0, [X2], #5", asm);
        }
        
        {
            var raw = LDR(B31, _[X2], 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_b_ldst_immpost, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR B31, [X2], #5", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_h_ldst_immpost_3()
    {
        
        {
            var raw = LDR(H0, _[X2], 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_h_ldst_immpost, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR H0, [X2], #5", asm);
        }
        
        {
            var raw = LDR(H31, _[X2], 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_h_ldst_immpost, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR H31, [X2], #5", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_s_ldst_immpost_4()
    {
        
        {
            var raw = LDR(S0, _[X2], 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_s_ldst_immpost, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR S0, [X2], #5", asm);
        }
        
        {
            var raw = LDR(S31, _[X2], 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_s_ldst_immpost, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR S31, [X2], #5", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_d_ldst_immpost_5()
    {
        
        {
            var raw = LDR(D0, _[X2], 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_d_ldst_immpost, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR D0, [X2], #5", asm);
        }
        
        {
            var raw = LDR(D31, _[X2], 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_d_ldst_immpost, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR D31, [X2], #5", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_q_ldst_immpost_6()
    {
        
        {
            var raw = LDR(Q0, _[X2], 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_q_ldst_immpost, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR Q0, [X2], #5", asm);
        }
        
        {
            var raw = LDR(Q31, _[X2], 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_q_ldst_immpost, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR Q31, [X2], #5", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_b_ldst_immpre_7()
    {
        
        {
            var raw = LDR(B0, _[X2, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_b_ldst_immpre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR B0, [X2, #5]!", asm);
        }
        
        {
            var raw = LDR(B31, _[X2, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_b_ldst_immpre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR B31, [X2, #5]!", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_h_ldst_immpre_8()
    {
        
        {
            var raw = LDR(H0, _[X2, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_h_ldst_immpre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR H0, [X2, #5]!", asm);
        }
        
        {
            var raw = LDR(H31, _[X2, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_h_ldst_immpre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR H31, [X2, #5]!", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_s_ldst_immpre_9()
    {
        
        {
            var raw = LDR(S0, _[X2, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_s_ldst_immpre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR S0, [X2, #5]!", asm);
        }
        
        {
            var raw = LDR(S31, _[X2, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_s_ldst_immpre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR S31, [X2, #5]!", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_d_ldst_immpre_10()
    {
        
        {
            var raw = LDR(D0, _[X2, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_d_ldst_immpre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR D0, [X2, #5]!", asm);
        }
        
        {
            var raw = LDR(D31, _[X2, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_d_ldst_immpre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR D31, [X2, #5]!", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_q_ldst_immpre_11()
    {
        
        {
            var raw = LDR(Q0, _[X2, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_q_ldst_immpre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR Q0, [X2, #5]!", asm);
        }
        
        {
            var raw = LDR(Q31, _[X2, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_q_ldst_immpre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR Q31, [X2, #5]!", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_b_ldst_pos_12()
    {
        
        {
            var raw = LDR(B0, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_b_ldst_pos, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR B0, [X2, #5]", asm);
        }
        
        {
            var raw = LDR(B31, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_b_ldst_pos, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR B31, [X2, #5]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_h_ldst_pos_13()
    {
        
        {
            var raw = LDR(H0, _[X2, 10]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_h_ldst_pos, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR H0, [X2, #10]", asm);
        }
        
        {
            var raw = LDR(H31, _[X2, 10]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_h_ldst_pos, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR H31, [X2, #10]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_s_ldst_pos_14()
    {
        
        {
            var raw = LDR(S0, _[X2, 20]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_s_ldst_pos, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR S0, [X2, #20]", asm);
        }
        
        {
            var raw = LDR(S31, _[X2, 20]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_s_ldst_pos, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR S31, [X2, #20]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_d_ldst_pos_15()
    {
        
        {
            var raw = LDR(D0, _[X2, 40]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_d_ldst_pos, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR D0, [X2, #40]", asm);
        }
        
        {
            var raw = LDR(D31, _[X2, 40]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_d_ldst_pos, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR D31, [X2, #40]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_q_ldst_pos_16()
    {
        
        {
            var raw = LDR(Q0, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_q_ldst_pos, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR Q0, [X2, #5]", asm);
        }
        
        {
            var raw = LDR(Q31, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_q_ldst_pos, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR Q31, [X2, #5]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_s_loadlit_17()
    {
        Assert.Inconclusive("TODO");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_d_loadlit_18()
    {
        Assert.Inconclusive("TODO");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_q_loadlit_19()
    {
        Assert.Inconclusive("TODO");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_h_ldst_regoff_20()
    {
        
        {
            var raw = LDR(H0, _[X2, X3, _LSL, 1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_h_ldst_regoff, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR H0, [X2, X3, LSL #1]", asm);
        }
        
        {
            var raw = LDR(H31, _[X2, X3, _LSL, 1]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_h_ldst_regoff, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR H31, [X2, X3, LSL #1]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_h_ldst_regoff_21()
    {
        Assert.Inconclusive("TODO");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_s_ldst_regoff_22()
    {
        
        {
            var raw = LDR(S0, _[X2, X3, _LSL, 2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_s_ldst_regoff, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR S0, [X2, X3, LSL #2]", asm);
        }
        
        {
            var raw = LDR(S31, _[X2, X3, _LSL, 2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_s_ldst_regoff, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR S31, [X2, X3, LSL #2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_s_ldst_regoff_23()
    {
        Assert.Inconclusive("TODO");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_d_ldst_regoff_24()
    {
        
        {
            var raw = LDR(D0, _[X2, X3, _LSL, 3]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_d_ldst_regoff, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR D0, [X2, X3, LSL #3]", asm);
        }
        
        {
            var raw = LDR(D31, _[X2, X3, _LSL, 3]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_d_ldst_regoff, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR D31, [X2, X3, LSL #3]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_d_ldst_regoff_25()
    {
        Assert.Inconclusive("TODO");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_q_ldst_regoff_26()
    {
        
        {
            var raw = LDR(Q0, _[X2, X3, _LSL, 4]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_q_ldst_regoff, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR Q0, [X2, X3, LSL #4]", asm);
        }
        
        {
            var raw = LDR(Q31, _[X2, X3, _LSL, 4]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDR_q_ldst_regoff, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDR Q31, [X2, X3, LSL #4]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDR"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDR_q_ldst_regoff_27()
    {
        Assert.Inconclusive("TODO");
    }
}
