// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Float;

[TestClass]
public class Arm64InstructionFactoryTests_FCVTZU_Float : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTZU"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTZU_sisd_32h_0()
    {
        TestInst(FCVTZU(S0, H1), asm => asm.FCVTZU(S0, H1), Arm64InstructionId.FCVTZU_sisd_32h, Arm64Mnemonic.FCVTZU, "FCVTZU S0, H1");
        TestInst(FCVTZU(S31, H1), asm => asm.FCVTZU(S31, H1), Arm64InstructionId.FCVTZU_sisd_32h, Arm64Mnemonic.FCVTZU, "FCVTZU S31, H1");
        TestInst(FCVTZU(S0, H31), asm => asm.FCVTZU(S0, H31), Arm64InstructionId.FCVTZU_sisd_32h, Arm64Mnemonic.FCVTZU, "FCVTZU S0, H31");
        TestInst(FCVTZU(S31, H31), asm => asm.FCVTZU(S31, H31), Arm64InstructionId.FCVTZU_sisd_32h, Arm64Mnemonic.FCVTZU, "FCVTZU S31, H31");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTZU"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTZU_sisd_64h_1()
    {
        TestInst(FCVTZU(D0, H1), asm => asm.FCVTZU(D0, H1), Arm64InstructionId.FCVTZU_sisd_64h, Arm64Mnemonic.FCVTZU, "FCVTZU D0, H1");
        TestInst(FCVTZU(D31, H1), asm => asm.FCVTZU(D31, H1), Arm64InstructionId.FCVTZU_sisd_64h, Arm64Mnemonic.FCVTZU, "FCVTZU D31, H1");
        TestInst(FCVTZU(D0, H31), asm => asm.FCVTZU(D0, H31), Arm64InstructionId.FCVTZU_sisd_64h, Arm64Mnemonic.FCVTZU, "FCVTZU D0, H31");
        TestInst(FCVTZU(D31, H31), asm => asm.FCVTZU(D31, H31), Arm64InstructionId.FCVTZU_sisd_64h, Arm64Mnemonic.FCVTZU, "FCVTZU D31, H31");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTZU"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTZU_sisd_64s_2()
    {
        TestInst(FCVTZU(D0, S1), asm => asm.FCVTZU(D0, S1), Arm64InstructionId.FCVTZU_sisd_64s, Arm64Mnemonic.FCVTZU, "FCVTZU D0, S1");
        TestInst(FCVTZU(D31, S1), asm => asm.FCVTZU(D31, S1), Arm64InstructionId.FCVTZU_sisd_64s, Arm64Mnemonic.FCVTZU, "FCVTZU D31, S1");
        TestInst(FCVTZU(D0, S31), asm => asm.FCVTZU(D0, S31), Arm64InstructionId.FCVTZU_sisd_64s, Arm64Mnemonic.FCVTZU, "FCVTZU D0, S31");
        TestInst(FCVTZU(D31, S31), asm => asm.FCVTZU(D31, S31), Arm64InstructionId.FCVTZU_sisd_64s, Arm64Mnemonic.FCVTZU, "FCVTZU D31, S31");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTZU"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTZU_sisd_32d_3()
    {
        TestInst(FCVTZU(S0, D1), asm => asm.FCVTZU(S0, D1), Arm64InstructionId.FCVTZU_sisd_32d, Arm64Mnemonic.FCVTZU, "FCVTZU S0, D1");
        TestInst(FCVTZU(S31, D1), asm => asm.FCVTZU(S31, D1), Arm64InstructionId.FCVTZU_sisd_32d, Arm64Mnemonic.FCVTZU, "FCVTZU S31, D1");
        TestInst(FCVTZU(S0, D31), asm => asm.FCVTZU(S0, D31), Arm64InstructionId.FCVTZU_sisd_32d, Arm64Mnemonic.FCVTZU, "FCVTZU S0, D31");
        TestInst(FCVTZU(S31, D31), asm => asm.FCVTZU(S31, D31), Arm64InstructionId.FCVTZU_sisd_32d, Arm64Mnemonic.FCVTZU, "FCVTZU S31, D31");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTZU"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTZU_32h_float2fix_4()
    {
        TestInst(FCVTZU(W0, H1, 5), asm => asm.FCVTZU(W0, H1, 5), Arm64InstructionId.FCVTZU_32h_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU W0, H1, #5");
        TestInst(FCVTZU(W15, H1, 5), asm => asm.FCVTZU(W15, H1, 5), Arm64InstructionId.FCVTZU_32h_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU W15, H1, #5");
        TestInst(FCVTZU(WZR, H1, 5), asm => asm.FCVTZU(WZR, H1, 5), Arm64InstructionId.FCVTZU_32h_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU WZR, H1, #5");
        TestInst(FCVTZU(W0, H31, 5), asm => asm.FCVTZU(W0, H31, 5), Arm64InstructionId.FCVTZU_32h_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU W0, H31, #5");
        TestInst(FCVTZU(W15, H31, 5), asm => asm.FCVTZU(W15, H31, 5), Arm64InstructionId.FCVTZU_32h_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU W15, H31, #5");
        TestInst(FCVTZU(WZR, H31, 5), asm => asm.FCVTZU(WZR, H31, 5), Arm64InstructionId.FCVTZU_32h_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU WZR, H31, #5");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTZU"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTZU_64h_float2fix_5()
    {
        TestInst(FCVTZU(X0, H1, 5), asm => asm.FCVTZU(X0, H1, 5), Arm64InstructionId.FCVTZU_64h_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU X0, H1, #5");
        TestInst(FCVTZU(X15, H1, 5), asm => asm.FCVTZU(X15, H1, 5), Arm64InstructionId.FCVTZU_64h_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU X15, H1, #5");
        TestInst(FCVTZU(XZR, H1, 5), asm => asm.FCVTZU(XZR, H1, 5), Arm64InstructionId.FCVTZU_64h_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU XZR, H1, #5");
        TestInst(FCVTZU(X0, H31, 5), asm => asm.FCVTZU(X0, H31, 5), Arm64InstructionId.FCVTZU_64h_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU X0, H31, #5");
        TestInst(FCVTZU(X15, H31, 5), asm => asm.FCVTZU(X15, H31, 5), Arm64InstructionId.FCVTZU_64h_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU X15, H31, #5");
        TestInst(FCVTZU(XZR, H31, 5), asm => asm.FCVTZU(XZR, H31, 5), Arm64InstructionId.FCVTZU_64h_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU XZR, H31, #5");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTZU"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTZU_32s_float2fix_6()
    {
        TestInst(FCVTZU(W0, S1, 5), asm => asm.FCVTZU(W0, S1, 5), Arm64InstructionId.FCVTZU_32s_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU W0, S1, #5");
        TestInst(FCVTZU(W15, S1, 5), asm => asm.FCVTZU(W15, S1, 5), Arm64InstructionId.FCVTZU_32s_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU W15, S1, #5");
        TestInst(FCVTZU(WZR, S1, 5), asm => asm.FCVTZU(WZR, S1, 5), Arm64InstructionId.FCVTZU_32s_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU WZR, S1, #5");
        TestInst(FCVTZU(W0, S31, 5), asm => asm.FCVTZU(W0, S31, 5), Arm64InstructionId.FCVTZU_32s_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU W0, S31, #5");
        TestInst(FCVTZU(W15, S31, 5), asm => asm.FCVTZU(W15, S31, 5), Arm64InstructionId.FCVTZU_32s_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU W15, S31, #5");
        TestInst(FCVTZU(WZR, S31, 5), asm => asm.FCVTZU(WZR, S31, 5), Arm64InstructionId.FCVTZU_32s_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU WZR, S31, #5");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTZU"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTZU_64s_float2fix_7()
    {
        TestInst(FCVTZU(X0, S1, 5), asm => asm.FCVTZU(X0, S1, 5), Arm64InstructionId.FCVTZU_64s_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU X0, S1, #5");
        TestInst(FCVTZU(X15, S1, 5), asm => asm.FCVTZU(X15, S1, 5), Arm64InstructionId.FCVTZU_64s_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU X15, S1, #5");
        TestInst(FCVTZU(XZR, S1, 5), asm => asm.FCVTZU(XZR, S1, 5), Arm64InstructionId.FCVTZU_64s_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU XZR, S1, #5");
        TestInst(FCVTZU(X0, S31, 5), asm => asm.FCVTZU(X0, S31, 5), Arm64InstructionId.FCVTZU_64s_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU X0, S31, #5");
        TestInst(FCVTZU(X15, S31, 5), asm => asm.FCVTZU(X15, S31, 5), Arm64InstructionId.FCVTZU_64s_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU X15, S31, #5");
        TestInst(FCVTZU(XZR, S31, 5), asm => asm.FCVTZU(XZR, S31, 5), Arm64InstructionId.FCVTZU_64s_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU XZR, S31, #5");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTZU"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTZU_32d_float2fix_8()
    {
        TestInst(FCVTZU(W0, D1, 5), asm => asm.FCVTZU(W0, D1, 5), Arm64InstructionId.FCVTZU_32d_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU W0, D1, #5");
        TestInst(FCVTZU(W15, D1, 5), asm => asm.FCVTZU(W15, D1, 5), Arm64InstructionId.FCVTZU_32d_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU W15, D1, #5");
        TestInst(FCVTZU(WZR, D1, 5), asm => asm.FCVTZU(WZR, D1, 5), Arm64InstructionId.FCVTZU_32d_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU WZR, D1, #5");
        TestInst(FCVTZU(W0, D31, 5), asm => asm.FCVTZU(W0, D31, 5), Arm64InstructionId.FCVTZU_32d_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU W0, D31, #5");
        TestInst(FCVTZU(W15, D31, 5), asm => asm.FCVTZU(W15, D31, 5), Arm64InstructionId.FCVTZU_32d_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU W15, D31, #5");
        TestInst(FCVTZU(WZR, D31, 5), asm => asm.FCVTZU(WZR, D31, 5), Arm64InstructionId.FCVTZU_32d_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU WZR, D31, #5");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTZU"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTZU_64d_float2fix_9()
    {
        TestInst(FCVTZU(X0, D1, 5), asm => asm.FCVTZU(X0, D1, 5), Arm64InstructionId.FCVTZU_64d_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU X0, D1, #5");
        TestInst(FCVTZU(X15, D1, 5), asm => asm.FCVTZU(X15, D1, 5), Arm64InstructionId.FCVTZU_64d_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU X15, D1, #5");
        TestInst(FCVTZU(XZR, D1, 5), asm => asm.FCVTZU(XZR, D1, 5), Arm64InstructionId.FCVTZU_64d_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU XZR, D1, #5");
        TestInst(FCVTZU(X0, D31, 5), asm => asm.FCVTZU(X0, D31, 5), Arm64InstructionId.FCVTZU_64d_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU X0, D31, #5");
        TestInst(FCVTZU(X15, D31, 5), asm => asm.FCVTZU(X15, D31, 5), Arm64InstructionId.FCVTZU_64d_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU X15, D31, #5");
        TestInst(FCVTZU(XZR, D31, 5), asm => asm.FCVTZU(XZR, D31, 5), Arm64InstructionId.FCVTZU_64d_float2fix, Arm64Mnemonic.FCVTZU, "FCVTZU XZR, D31, #5");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTZU"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTZU_32h_float2int_10()
    {
        TestInst(FCVTZU(W0, H1), asm => asm.FCVTZU(W0, H1), Arm64InstructionId.FCVTZU_32h_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU W0, H1");
        TestInst(FCVTZU(W15, H1), asm => asm.FCVTZU(W15, H1), Arm64InstructionId.FCVTZU_32h_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU W15, H1");
        TestInst(FCVTZU(WZR, H1), asm => asm.FCVTZU(WZR, H1), Arm64InstructionId.FCVTZU_32h_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU WZR, H1");
        TestInst(FCVTZU(W0, H31), asm => asm.FCVTZU(W0, H31), Arm64InstructionId.FCVTZU_32h_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU W0, H31");
        TestInst(FCVTZU(W15, H31), asm => asm.FCVTZU(W15, H31), Arm64InstructionId.FCVTZU_32h_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU W15, H31");
        TestInst(FCVTZU(WZR, H31), asm => asm.FCVTZU(WZR, H31), Arm64InstructionId.FCVTZU_32h_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU WZR, H31");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTZU"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTZU_64h_float2int_11()
    {
        TestInst(FCVTZU(X0, H1), asm => asm.FCVTZU(X0, H1), Arm64InstructionId.FCVTZU_64h_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU X0, H1");
        TestInst(FCVTZU(X15, H1), asm => asm.FCVTZU(X15, H1), Arm64InstructionId.FCVTZU_64h_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU X15, H1");
        TestInst(FCVTZU(XZR, H1), asm => asm.FCVTZU(XZR, H1), Arm64InstructionId.FCVTZU_64h_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU XZR, H1");
        TestInst(FCVTZU(X0, H31), asm => asm.FCVTZU(X0, H31), Arm64InstructionId.FCVTZU_64h_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU X0, H31");
        TestInst(FCVTZU(X15, H31), asm => asm.FCVTZU(X15, H31), Arm64InstructionId.FCVTZU_64h_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU X15, H31");
        TestInst(FCVTZU(XZR, H31), asm => asm.FCVTZU(XZR, H31), Arm64InstructionId.FCVTZU_64h_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU XZR, H31");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTZU"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTZU_32s_float2int_12()
    {
        TestInst(FCVTZU(W0, S1), asm => asm.FCVTZU(W0, S1), Arm64InstructionId.FCVTZU_32s_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU W0, S1");
        TestInst(FCVTZU(W15, S1), asm => asm.FCVTZU(W15, S1), Arm64InstructionId.FCVTZU_32s_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU W15, S1");
        TestInst(FCVTZU(WZR, S1), asm => asm.FCVTZU(WZR, S1), Arm64InstructionId.FCVTZU_32s_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU WZR, S1");
        TestInst(FCVTZU(W0, S31), asm => asm.FCVTZU(W0, S31), Arm64InstructionId.FCVTZU_32s_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU W0, S31");
        TestInst(FCVTZU(W15, S31), asm => asm.FCVTZU(W15, S31), Arm64InstructionId.FCVTZU_32s_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU W15, S31");
        TestInst(FCVTZU(WZR, S31), asm => asm.FCVTZU(WZR, S31), Arm64InstructionId.FCVTZU_32s_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU WZR, S31");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTZU"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTZU_64s_float2int_13()
    {
        TestInst(FCVTZU(X0, S1), asm => asm.FCVTZU(X0, S1), Arm64InstructionId.FCVTZU_64s_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU X0, S1");
        TestInst(FCVTZU(X15, S1), asm => asm.FCVTZU(X15, S1), Arm64InstructionId.FCVTZU_64s_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU X15, S1");
        TestInst(FCVTZU(XZR, S1), asm => asm.FCVTZU(XZR, S1), Arm64InstructionId.FCVTZU_64s_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU XZR, S1");
        TestInst(FCVTZU(X0, S31), asm => asm.FCVTZU(X0, S31), Arm64InstructionId.FCVTZU_64s_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU X0, S31");
        TestInst(FCVTZU(X15, S31), asm => asm.FCVTZU(X15, S31), Arm64InstructionId.FCVTZU_64s_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU X15, S31");
        TestInst(FCVTZU(XZR, S31), asm => asm.FCVTZU(XZR, S31), Arm64InstructionId.FCVTZU_64s_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU XZR, S31");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTZU"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTZU_32d_float2int_14()
    {
        TestInst(FCVTZU(W0, D1), asm => asm.FCVTZU(W0, D1), Arm64InstructionId.FCVTZU_32d_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU W0, D1");
        TestInst(FCVTZU(W15, D1), asm => asm.FCVTZU(W15, D1), Arm64InstructionId.FCVTZU_32d_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU W15, D1");
        TestInst(FCVTZU(WZR, D1), asm => asm.FCVTZU(WZR, D1), Arm64InstructionId.FCVTZU_32d_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU WZR, D1");
        TestInst(FCVTZU(W0, D31), asm => asm.FCVTZU(W0, D31), Arm64InstructionId.FCVTZU_32d_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU W0, D31");
        TestInst(FCVTZU(W15, D31), asm => asm.FCVTZU(W15, D31), Arm64InstructionId.FCVTZU_32d_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU W15, D31");
        TestInst(FCVTZU(WZR, D31), asm => asm.FCVTZU(WZR, D31), Arm64InstructionId.FCVTZU_32d_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU WZR, D31");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTZU"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTZU_64d_float2int_15()
    {
        TestInst(FCVTZU(X0, D1), asm => asm.FCVTZU(X0, D1), Arm64InstructionId.FCVTZU_64d_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU X0, D1");
        TestInst(FCVTZU(X15, D1), asm => asm.FCVTZU(X15, D1), Arm64InstructionId.FCVTZU_64d_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU X15, D1");
        TestInst(FCVTZU(XZR, D1), asm => asm.FCVTZU(XZR, D1), Arm64InstructionId.FCVTZU_64d_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU XZR, D1");
        TestInst(FCVTZU(X0, D31), asm => asm.FCVTZU(X0, D31), Arm64InstructionId.FCVTZU_64d_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU X0, D31");
        TestInst(FCVTZU(X15, D31), asm => asm.FCVTZU(X15, D31), Arm64InstructionId.FCVTZU_64d_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU X15, D31");
        TestInst(FCVTZU(XZR, D31), asm => asm.FCVTZU(XZR, D31), Arm64InstructionId.FCVTZU_64d_float2int, Arm64Mnemonic.FCVTZU, "FCVTZU XZR, D31");
    }
}
