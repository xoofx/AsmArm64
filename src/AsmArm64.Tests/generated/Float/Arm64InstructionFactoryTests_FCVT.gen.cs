// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Float;

[TestClass]
public class Arm64InstructionFactoryTests_FCVT_Float : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVT"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVT_sh_floatdp1_0()
    {
        TestInst(FCVT(S0, H1), asm => asm.FCVT(S0, H1), Arm64InstructionId.FCVT_sh_floatdp1, Arm64Mnemonic.FCVT, "FCVT S0, H1");
        TestInst(FCVT(S31, H1), asm => asm.FCVT(S31, H1), Arm64InstructionId.FCVT_sh_floatdp1, Arm64Mnemonic.FCVT, "FCVT S31, H1");
        TestInst(FCVT(S0, H31), asm => asm.FCVT(S0, H31), Arm64InstructionId.FCVT_sh_floatdp1, Arm64Mnemonic.FCVT, "FCVT S0, H31");
        TestInst(FCVT(S31, H31), asm => asm.FCVT(S31, H31), Arm64InstructionId.FCVT_sh_floatdp1, Arm64Mnemonic.FCVT, "FCVT S31, H31");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVT"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVT_dh_floatdp1_1()
    {
        TestInst(FCVT(D0, H1), asm => asm.FCVT(D0, H1), Arm64InstructionId.FCVT_dh_floatdp1, Arm64Mnemonic.FCVT, "FCVT D0, H1");
        TestInst(FCVT(D31, H1), asm => asm.FCVT(D31, H1), Arm64InstructionId.FCVT_dh_floatdp1, Arm64Mnemonic.FCVT, "FCVT D31, H1");
        TestInst(FCVT(D0, H31), asm => asm.FCVT(D0, H31), Arm64InstructionId.FCVT_dh_floatdp1, Arm64Mnemonic.FCVT, "FCVT D0, H31");
        TestInst(FCVT(D31, H31), asm => asm.FCVT(D31, H31), Arm64InstructionId.FCVT_dh_floatdp1, Arm64Mnemonic.FCVT, "FCVT D31, H31");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVT"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVT_hs_floatdp1_2()
    {
        TestInst(FCVT(H0, S1), asm => asm.FCVT(H0, S1), Arm64InstructionId.FCVT_hs_floatdp1, Arm64Mnemonic.FCVT, "FCVT H0, S1");
        TestInst(FCVT(H31, S1), asm => asm.FCVT(H31, S1), Arm64InstructionId.FCVT_hs_floatdp1, Arm64Mnemonic.FCVT, "FCVT H31, S1");
        TestInst(FCVT(H0, S31), asm => asm.FCVT(H0, S31), Arm64InstructionId.FCVT_hs_floatdp1, Arm64Mnemonic.FCVT, "FCVT H0, S31");
        TestInst(FCVT(H31, S31), asm => asm.FCVT(H31, S31), Arm64InstructionId.FCVT_hs_floatdp1, Arm64Mnemonic.FCVT, "FCVT H31, S31");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVT"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVT_ds_floatdp1_3()
    {
        TestInst(FCVT(D0, S1), asm => asm.FCVT(D0, S1), Arm64InstructionId.FCVT_ds_floatdp1, Arm64Mnemonic.FCVT, "FCVT D0, S1");
        TestInst(FCVT(D31, S1), asm => asm.FCVT(D31, S1), Arm64InstructionId.FCVT_ds_floatdp1, Arm64Mnemonic.FCVT, "FCVT D31, S1");
        TestInst(FCVT(D0, S31), asm => asm.FCVT(D0, S31), Arm64InstructionId.FCVT_ds_floatdp1, Arm64Mnemonic.FCVT, "FCVT D0, S31");
        TestInst(FCVT(D31, S31), asm => asm.FCVT(D31, S31), Arm64InstructionId.FCVT_ds_floatdp1, Arm64Mnemonic.FCVT, "FCVT D31, S31");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVT"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVT_hd_floatdp1_4()
    {
        TestInst(FCVT(H0, D1), asm => asm.FCVT(H0, D1), Arm64InstructionId.FCVT_hd_floatdp1, Arm64Mnemonic.FCVT, "FCVT H0, D1");
        TestInst(FCVT(H31, D1), asm => asm.FCVT(H31, D1), Arm64InstructionId.FCVT_hd_floatdp1, Arm64Mnemonic.FCVT, "FCVT H31, D1");
        TestInst(FCVT(H0, D31), asm => asm.FCVT(H0, D31), Arm64InstructionId.FCVT_hd_floatdp1, Arm64Mnemonic.FCVT, "FCVT H0, D31");
        TestInst(FCVT(H31, D31), asm => asm.FCVT(H31, D31), Arm64InstructionId.FCVT_hd_floatdp1, Arm64Mnemonic.FCVT, "FCVT H31, D31");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVT"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVT_sd_floatdp1_5()
    {
        TestInst(FCVT(S0, D1), asm => asm.FCVT(S0, D1), Arm64InstructionId.FCVT_sd_floatdp1, Arm64Mnemonic.FCVT, "FCVT S0, D1");
        TestInst(FCVT(S31, D1), asm => asm.FCVT(S31, D1), Arm64InstructionId.FCVT_sd_floatdp1, Arm64Mnemonic.FCVT, "FCVT S31, D1");
        TestInst(FCVT(S0, D31), asm => asm.FCVT(S0, D31), Arm64InstructionId.FCVT_sd_floatdp1, Arm64Mnemonic.FCVT, "FCVT S0, D31");
        TestInst(FCVT(S31, D31), asm => asm.FCVT(S31, D31), Arm64InstructionId.FCVT_sd_floatdp1, Arm64Mnemonic.FCVT, "FCVT S31, D31");
    }
}
