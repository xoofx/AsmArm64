// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Float;

[TestClass]
public class Arm64InstructionFactoryTests_SCVTF_Float
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_SCVTF_sisd_32h_0()
    {
        
        {
            var raw = SCVTF(H0, S1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_sisd_32h, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H0, S1", asm);
        }
        
        {
            var raw = SCVTF(H31, S1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_sisd_32h, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H31, S1", asm);
        }
        
        {
            var raw = SCVTF(H0, S31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_sisd_32h, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H0, S31", asm);
        }
        
        {
            var raw = SCVTF(H31, S31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_sisd_32h, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H31, S31", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_SCVTF_sisd_32d_1()
    {
        
        {
            var raw = SCVTF(D0, S1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_sisd_32d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D0, S1", asm);
        }
        
        {
            var raw = SCVTF(D31, S1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_sisd_32d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D31, S1", asm);
        }
        
        {
            var raw = SCVTF(D0, S31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_sisd_32d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D0, S31", asm);
        }
        
        {
            var raw = SCVTF(D31, S31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_sisd_32d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D31, S31", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_SCVTF_sisd_64h_2()
    {
        
        {
            var raw = SCVTF(H0, D1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_sisd_64h, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H0, D1", asm);
        }
        
        {
            var raw = SCVTF(H31, D1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_sisd_64h, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H31, D1", asm);
        }
        
        {
            var raw = SCVTF(H0, D31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_sisd_64h, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H0, D31", asm);
        }
        
        {
            var raw = SCVTF(H31, D31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_sisd_64h, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H31, D31", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_SCVTF_sisd_64s_3()
    {
        
        {
            var raw = SCVTF(S0, D1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_sisd_64s, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S0, D1", asm);
        }
        
        {
            var raw = SCVTF(S31, D1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_sisd_64s, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S31, D1", asm);
        }
        
        {
            var raw = SCVTF(S0, D31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_sisd_64s, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S0, D31", asm);
        }
        
        {
            var raw = SCVTF(S31, D31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_sisd_64s, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S31, D31", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_SCVTF_h32_float2fix_4()
    {
        
        {
            var raw = SCVTF(H0, W1, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_h32_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H0, W1, #5", asm);
        }
        
        {
            var raw = SCVTF(H31, W1, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_h32_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H31, W1, #5", asm);
        }
        
        {
            var raw = SCVTF(H0, W16, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_h32_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H0, W16, #5", asm);
        }
        
        {
            var raw = SCVTF(H31, W16, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_h32_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H31, W16, #5", asm);
        }
        
        {
            var raw = SCVTF(H0, WZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_h32_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H0, WZR, #5", asm);
        }
        
        {
            var raw = SCVTF(H31, WZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_h32_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H31, WZR, #5", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_SCVTF_h64_float2fix_5()
    {
        
        {
            var raw = SCVTF(H0, X1, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_h64_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H0, X1, #5", asm);
        }
        
        {
            var raw = SCVTF(H31, X1, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_h64_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H31, X1, #5", asm);
        }
        
        {
            var raw = SCVTF(H0, X16, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_h64_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H0, X16, #5", asm);
        }
        
        {
            var raw = SCVTF(H31, X16, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_h64_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H31, X16, #5", asm);
        }
        
        {
            var raw = SCVTF(H0, XZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_h64_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H0, XZR, #5", asm);
        }
        
        {
            var raw = SCVTF(H31, XZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_h64_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H31, XZR, #5", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_SCVTF_s32_float2fix_6()
    {
        
        {
            var raw = SCVTF(S0, W1, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_s32_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S0, W1, #5", asm);
        }
        
        {
            var raw = SCVTF(S31, W1, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_s32_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S31, W1, #5", asm);
        }
        
        {
            var raw = SCVTF(S0, W16, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_s32_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S0, W16, #5", asm);
        }
        
        {
            var raw = SCVTF(S31, W16, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_s32_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S31, W16, #5", asm);
        }
        
        {
            var raw = SCVTF(S0, WZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_s32_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S0, WZR, #5", asm);
        }
        
        {
            var raw = SCVTF(S31, WZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_s32_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S31, WZR, #5", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_SCVTF_s64_float2fix_7()
    {
        
        {
            var raw = SCVTF(S0, X1, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_s64_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S0, X1, #5", asm);
        }
        
        {
            var raw = SCVTF(S31, X1, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_s64_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S31, X1, #5", asm);
        }
        
        {
            var raw = SCVTF(S0, X16, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_s64_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S0, X16, #5", asm);
        }
        
        {
            var raw = SCVTF(S31, X16, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_s64_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S31, X16, #5", asm);
        }
        
        {
            var raw = SCVTF(S0, XZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_s64_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S0, XZR, #5", asm);
        }
        
        {
            var raw = SCVTF(S31, XZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_s64_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S31, XZR, #5", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_SCVTF_d32_float2fix_8()
    {
        
        {
            var raw = SCVTF(D0, W1, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_d32_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D0, W1, #5", asm);
        }
        
        {
            var raw = SCVTF(D31, W1, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_d32_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D31, W1, #5", asm);
        }
        
        {
            var raw = SCVTF(D0, W16, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_d32_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D0, W16, #5", asm);
        }
        
        {
            var raw = SCVTF(D31, W16, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_d32_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D31, W16, #5", asm);
        }
        
        {
            var raw = SCVTF(D0, WZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_d32_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D0, WZR, #5", asm);
        }
        
        {
            var raw = SCVTF(D31, WZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_d32_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D31, WZR, #5", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_SCVTF_d64_float2fix_9()
    {
        
        {
            var raw = SCVTF(D0, X1, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_d64_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D0, X1, #5", asm);
        }
        
        {
            var raw = SCVTF(D31, X1, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_d64_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D31, X1, #5", asm);
        }
        
        {
            var raw = SCVTF(D0, X16, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_d64_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D0, X16, #5", asm);
        }
        
        {
            var raw = SCVTF(D31, X16, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_d64_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D31, X16, #5", asm);
        }
        
        {
            var raw = SCVTF(D0, XZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_d64_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D0, XZR, #5", asm);
        }
        
        {
            var raw = SCVTF(D31, XZR, 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_d64_float2fix, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D31, XZR, #5", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_SCVTF_h32_float2int_10()
    {
        
        {
            var raw = SCVTF(H0, W1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_h32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H0, W1", asm);
        }
        
        {
            var raw = SCVTF(H31, W1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_h32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H31, W1", asm);
        }
        
        {
            var raw = SCVTF(H0, W16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_h32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H0, W16", asm);
        }
        
        {
            var raw = SCVTF(H31, W16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_h32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H31, W16", asm);
        }
        
        {
            var raw = SCVTF(H0, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_h32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H0, WZR", asm);
        }
        
        {
            var raw = SCVTF(H31, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_h32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H31, WZR", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_SCVTF_s32_float2int_11()
    {
        
        {
            var raw = SCVTF(S0, W1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_s32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S0, W1", asm);
        }
        
        {
            var raw = SCVTF(S31, W1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_s32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S31, W1", asm);
        }
        
        {
            var raw = SCVTF(S0, W16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_s32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S0, W16", asm);
        }
        
        {
            var raw = SCVTF(S31, W16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_s32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S31, W16", asm);
        }
        
        {
            var raw = SCVTF(S0, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_s32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S0, WZR", asm);
        }
        
        {
            var raw = SCVTF(S31, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_s32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S31, WZR", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_SCVTF_d32_float2int_12()
    {
        
        {
            var raw = SCVTF(D0, W1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_d32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D0, W1", asm);
        }
        
        {
            var raw = SCVTF(D31, W1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_d32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D31, W1", asm);
        }
        
        {
            var raw = SCVTF(D0, W16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_d32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D0, W16", asm);
        }
        
        {
            var raw = SCVTF(D31, W16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_d32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D31, W16", asm);
        }
        
        {
            var raw = SCVTF(D0, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_d32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D0, WZR", asm);
        }
        
        {
            var raw = SCVTF(D31, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_d32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D31, WZR", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_SCVTF_h64_float2int_13()
    {
        
        {
            var raw = SCVTF(H0, X1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_h64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H0, X1", asm);
        }
        
        {
            var raw = SCVTF(H31, X1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_h64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H31, X1", asm);
        }
        
        {
            var raw = SCVTF(H0, X16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_h64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H0, X16", asm);
        }
        
        {
            var raw = SCVTF(H31, X16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_h64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H31, X16", asm);
        }
        
        {
            var raw = SCVTF(H0, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_h64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H0, XZR", asm);
        }
        
        {
            var raw = SCVTF(H31, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_h64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF H31, XZR", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_SCVTF_s64_float2int_14()
    {
        
        {
            var raw = SCVTF(S0, X1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_s64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S0, X1", asm);
        }
        
        {
            var raw = SCVTF(S31, X1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_s64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S31, X1", asm);
        }
        
        {
            var raw = SCVTF(S0, X16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_s64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S0, X16", asm);
        }
        
        {
            var raw = SCVTF(S31, X16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_s64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S31, X16", asm);
        }
        
        {
            var raw = SCVTF(S0, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_s64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S0, XZR", asm);
        }
        
        {
            var raw = SCVTF(S31, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_s64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF S31, XZR", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_SCVTF_d64_float2int_15()
    {
        
        {
            var raw = SCVTF(D0, X1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_d64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D0, X1", asm);
        }
        
        {
            var raw = SCVTF(D31, X1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_d64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D31, X1", asm);
        }
        
        {
            var raw = SCVTF(D0, X16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_d64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D0, X16", asm);
        }
        
        {
            var raw = SCVTF(D31, X16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_d64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D31, X16", asm);
        }
        
        {
            var raw = SCVTF(D0, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_d64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D0, XZR", asm);
        }
        
        {
            var raw = SCVTF(D31, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SCVTF_d64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SCVTF, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SCVTF D31, XZR", asm);
        }
    }
}
