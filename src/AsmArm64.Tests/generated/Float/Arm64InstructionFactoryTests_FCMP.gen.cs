// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Float;

[TestClass]
public class Arm64InstructionFactoryTests_FCMP_Float : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCMP"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCMP_h_floatcmp_0()
    {
        TestInst(FCMP(H0, H1), asm => asm.FCMP(H0, H1), Arm64InstructionId.FCMP_h_floatcmp, Arm64Mnemonic.FCMP, "FCMP H0, H1");
        TestInst(FCMP(H31, H1), asm => asm.FCMP(H31, H1), Arm64InstructionId.FCMP_h_floatcmp, Arm64Mnemonic.FCMP, "FCMP H31, H1");
        TestInst(FCMP(H0, H31), asm => asm.FCMP(H0, H31), Arm64InstructionId.FCMP_h_floatcmp, Arm64Mnemonic.FCMP, "FCMP H0, H31");
        TestInst(FCMP(H31, H31), asm => asm.FCMP(H31, H31), Arm64InstructionId.FCMP_h_floatcmp, Arm64Mnemonic.FCMP, "FCMP H31, H31");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCMP"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCMP_hz_floatcmp_1()
    {
        TestInst(FCMP(H0, 0.0f), asm => asm.FCMP(H0, 0.0f), Arm64InstructionId.FCMP_hz_floatcmp, Arm64Mnemonic.FCMP, "FCMP H0, #0.0");
        TestInst(FCMP(H31, 0.0f), asm => asm.FCMP(H31, 0.0f), Arm64InstructionId.FCMP_hz_floatcmp, Arm64Mnemonic.FCMP, "FCMP H31, #0.0");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCMP"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCMP_s_floatcmp_2()
    {
        TestInst(FCMP(S0, S1), asm => asm.FCMP(S0, S1), Arm64InstructionId.FCMP_s_floatcmp, Arm64Mnemonic.FCMP, "FCMP S0, S1");
        TestInst(FCMP(S31, S1), asm => asm.FCMP(S31, S1), Arm64InstructionId.FCMP_s_floatcmp, Arm64Mnemonic.FCMP, "FCMP S31, S1");
        TestInst(FCMP(S0, S31), asm => asm.FCMP(S0, S31), Arm64InstructionId.FCMP_s_floatcmp, Arm64Mnemonic.FCMP, "FCMP S0, S31");
        TestInst(FCMP(S31, S31), asm => asm.FCMP(S31, S31), Arm64InstructionId.FCMP_s_floatcmp, Arm64Mnemonic.FCMP, "FCMP S31, S31");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCMP"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCMP_sz_floatcmp_3()
    {
        TestInst(FCMP(S0, 0.0f), asm => asm.FCMP(S0, 0.0f), Arm64InstructionId.FCMP_sz_floatcmp, Arm64Mnemonic.FCMP, "FCMP S0, #0.0");
        TestInst(FCMP(S31, 0.0f), asm => asm.FCMP(S31, 0.0f), Arm64InstructionId.FCMP_sz_floatcmp, Arm64Mnemonic.FCMP, "FCMP S31, #0.0");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCMP"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCMP_d_floatcmp_4()
    {
        TestInst(FCMP(D0, D1), asm => asm.FCMP(D0, D1), Arm64InstructionId.FCMP_d_floatcmp, Arm64Mnemonic.FCMP, "FCMP D0, D1");
        TestInst(FCMP(D31, D1), asm => asm.FCMP(D31, D1), Arm64InstructionId.FCMP_d_floatcmp, Arm64Mnemonic.FCMP, "FCMP D31, D1");
        TestInst(FCMP(D0, D31), asm => asm.FCMP(D0, D31), Arm64InstructionId.FCMP_d_floatcmp, Arm64Mnemonic.FCMP, "FCMP D0, D31");
        TestInst(FCMP(D31, D31), asm => asm.FCMP(D31, D31), Arm64InstructionId.FCMP_d_floatcmp, Arm64Mnemonic.FCMP, "FCMP D31, D31");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCMP"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCMP_dz_floatcmp_5()
    {
        TestInst(FCMP(D0, 0.0f), asm => asm.FCMP(D0, 0.0f), Arm64InstructionId.FCMP_dz_floatcmp, Arm64Mnemonic.FCMP, "FCMP D0, #0.0");
        TestInst(FCMP(D31, 0.0f), asm => asm.FCMP(D31, 0.0f), Arm64InstructionId.FCMP_dz_floatcmp, Arm64Mnemonic.FCMP, "FCMP D31, #0.0");
    }
}
