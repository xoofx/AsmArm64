// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Float;

[TestClass]
public class Arm64InstructionFactoryTests_FCVTNS_Float
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTNS"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTNS_sisd_32h_0()
    {
        
        {
            var raw = FCVTNS(S0, H1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_sisd_32h, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS S0, H1", asm);
        }
        
        {
            var raw = FCVTNS(S31, H1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_sisd_32h, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS S31, H1", asm);
        }
        
        {
            var raw = FCVTNS(S0, H31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_sisd_32h, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS S0, H31", asm);
        }
        
        {
            var raw = FCVTNS(S31, H31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_sisd_32h, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS S31, H31", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTNS"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTNS_sisd_64h_1()
    {
        
        {
            var raw = FCVTNS(D0, H1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_sisd_64h, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS D0, H1", asm);
        }
        
        {
            var raw = FCVTNS(D31, H1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_sisd_64h, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS D31, H1", asm);
        }
        
        {
            var raw = FCVTNS(D0, H31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_sisd_64h, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS D0, H31", asm);
        }
        
        {
            var raw = FCVTNS(D31, H31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_sisd_64h, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS D31, H31", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTNS"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTNS_sisd_64s_2()
    {
        
        {
            var raw = FCVTNS(D0, S1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_sisd_64s, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS D0, S1", asm);
        }
        
        {
            var raw = FCVTNS(D31, S1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_sisd_64s, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS D31, S1", asm);
        }
        
        {
            var raw = FCVTNS(D0, S31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_sisd_64s, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS D0, S31", asm);
        }
        
        {
            var raw = FCVTNS(D31, S31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_sisd_64s, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS D31, S31", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTNS"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTNS_sisd_32d_3()
    {
        
        {
            var raw = FCVTNS(S0, D1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_sisd_32d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS S0, D1", asm);
        }
        
        {
            var raw = FCVTNS(S31, D1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_sisd_32d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS S31, D1", asm);
        }
        
        {
            var raw = FCVTNS(S0, D31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_sisd_32d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS S0, D31", asm);
        }
        
        {
            var raw = FCVTNS(S31, D31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_sisd_32d, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS S31, D31", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTNS"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTNS_32h_float2int_4()
    {
        
        {
            var raw = FCVTNS(W0, H1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_32h_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS W0, H1", asm);
        }
        
        {
            var raw = FCVTNS(W15, H1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_32h_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS W15, H1", asm);
        }
        
        {
            var raw = FCVTNS(WZR, H1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_32h_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS WZR, H1", asm);
        }
        
        {
            var raw = FCVTNS(W0, H31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_32h_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS W0, H31", asm);
        }
        
        {
            var raw = FCVTNS(W15, H31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_32h_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS W15, H31", asm);
        }
        
        {
            var raw = FCVTNS(WZR, H31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_32h_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS WZR, H31", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTNS"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTNS_64h_float2int_5()
    {
        
        {
            var raw = FCVTNS(X0, H1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_64h_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS X0, H1", asm);
        }
        
        {
            var raw = FCVTNS(X15, H1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_64h_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS X15, H1", asm);
        }
        
        {
            var raw = FCVTNS(XZR, H1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_64h_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS XZR, H1", asm);
        }
        
        {
            var raw = FCVTNS(X0, H31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_64h_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS X0, H31", asm);
        }
        
        {
            var raw = FCVTNS(X15, H31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_64h_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS X15, H31", asm);
        }
        
        {
            var raw = FCVTNS(XZR, H31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_64h_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS XZR, H31", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTNS"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTNS_32s_float2int_6()
    {
        
        {
            var raw = FCVTNS(W0, S1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_32s_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS W0, S1", asm);
        }
        
        {
            var raw = FCVTNS(W15, S1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_32s_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS W15, S1", asm);
        }
        
        {
            var raw = FCVTNS(WZR, S1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_32s_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS WZR, S1", asm);
        }
        
        {
            var raw = FCVTNS(W0, S31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_32s_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS W0, S31", asm);
        }
        
        {
            var raw = FCVTNS(W15, S31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_32s_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS W15, S31", asm);
        }
        
        {
            var raw = FCVTNS(WZR, S31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_32s_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS WZR, S31", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTNS"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTNS_64s_float2int_7()
    {
        
        {
            var raw = FCVTNS(X0, S1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_64s_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS X0, S1", asm);
        }
        
        {
            var raw = FCVTNS(X15, S1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_64s_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS X15, S1", asm);
        }
        
        {
            var raw = FCVTNS(XZR, S1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_64s_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS XZR, S1", asm);
        }
        
        {
            var raw = FCVTNS(X0, S31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_64s_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS X0, S31", asm);
        }
        
        {
            var raw = FCVTNS(X15, S31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_64s_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS X15, S31", asm);
        }
        
        {
            var raw = FCVTNS(XZR, S31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_64s_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS XZR, S31", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTNS"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTNS_32d_float2int_8()
    {
        
        {
            var raw = FCVTNS(W0, D1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_32d_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS W0, D1", asm);
        }
        
        {
            var raw = FCVTNS(W15, D1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_32d_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS W15, D1", asm);
        }
        
        {
            var raw = FCVTNS(WZR, D1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_32d_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS WZR, D1", asm);
        }
        
        {
            var raw = FCVTNS(W0, D31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_32d_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS W0, D31", asm);
        }
        
        {
            var raw = FCVTNS(W15, D31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_32d_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS W15, D31", asm);
        }
        
        {
            var raw = FCVTNS(WZR, D31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_32d_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS WZR, D31", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCVTNS"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCVTNS_64d_float2int_9()
    {
        
        {
            var raw = FCVTNS(X0, D1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_64d_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS X0, D1", asm);
        }
        
        {
            var raw = FCVTNS(X15, D1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_64d_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS X15, D1", asm);
        }
        
        {
            var raw = FCVTNS(XZR, D1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_64d_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS XZR, D1", asm);
        }
        
        {
            var raw = FCVTNS(X0, D31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_64d_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS X0, D31", asm);
        }
        
        {
            var raw = FCVTNS(X15, D31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_64d_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS X15, D31", asm);
        }
        
        {
            var raw = FCVTNS(XZR, D31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCVTNS_64d_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCVTNS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCVTNS XZR, D31", asm);
        }
    }
}
