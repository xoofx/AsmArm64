// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Float;

[TestClass]
public class Arm64InstructionFactoryTests_UCVTF_Float : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.UCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_UCVTF_sisd_32h_0()
    {
        TestInst(UCVTF(H0, S1), Arm64InstructionId.UCVTF_sisd_32h, Arm64Mnemonic.UCVTF, "UCVTF H0, S1");
        TestInst(UCVTF(H31, S1), Arm64InstructionId.UCVTF_sisd_32h, Arm64Mnemonic.UCVTF, "UCVTF H31, S1");
        TestInst(UCVTF(H0, S31), Arm64InstructionId.UCVTF_sisd_32h, Arm64Mnemonic.UCVTF, "UCVTF H0, S31");
        TestInst(UCVTF(H31, S31), Arm64InstructionId.UCVTF_sisd_32h, Arm64Mnemonic.UCVTF, "UCVTF H31, S31");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.UCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_UCVTF_sisd_32d_1()
    {
        TestInst(UCVTF(D0, S1), Arm64InstructionId.UCVTF_sisd_32d, Arm64Mnemonic.UCVTF, "UCVTF D0, S1");
        TestInst(UCVTF(D31, S1), Arm64InstructionId.UCVTF_sisd_32d, Arm64Mnemonic.UCVTF, "UCVTF D31, S1");
        TestInst(UCVTF(D0, S31), Arm64InstructionId.UCVTF_sisd_32d, Arm64Mnemonic.UCVTF, "UCVTF D0, S31");
        TestInst(UCVTF(D31, S31), Arm64InstructionId.UCVTF_sisd_32d, Arm64Mnemonic.UCVTF, "UCVTF D31, S31");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.UCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_UCVTF_sisd_64h_2()
    {
        TestInst(UCVTF(H0, D1), Arm64InstructionId.UCVTF_sisd_64h, Arm64Mnemonic.UCVTF, "UCVTF H0, D1");
        TestInst(UCVTF(H31, D1), Arm64InstructionId.UCVTF_sisd_64h, Arm64Mnemonic.UCVTF, "UCVTF H31, D1");
        TestInst(UCVTF(H0, D31), Arm64InstructionId.UCVTF_sisd_64h, Arm64Mnemonic.UCVTF, "UCVTF H0, D31");
        TestInst(UCVTF(H31, D31), Arm64InstructionId.UCVTF_sisd_64h, Arm64Mnemonic.UCVTF, "UCVTF H31, D31");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.UCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_UCVTF_sisd_64s_3()
    {
        TestInst(UCVTF(S0, D1), Arm64InstructionId.UCVTF_sisd_64s, Arm64Mnemonic.UCVTF, "UCVTF S0, D1");
        TestInst(UCVTF(S31, D1), Arm64InstructionId.UCVTF_sisd_64s, Arm64Mnemonic.UCVTF, "UCVTF S31, D1");
        TestInst(UCVTF(S0, D31), Arm64InstructionId.UCVTF_sisd_64s, Arm64Mnemonic.UCVTF, "UCVTF S0, D31");
        TestInst(UCVTF(S31, D31), Arm64InstructionId.UCVTF_sisd_64s, Arm64Mnemonic.UCVTF, "UCVTF S31, D31");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.UCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_UCVTF_h32_float2fix_4()
    {
        TestInst(UCVTF(H0, W1, 5), Arm64InstructionId.UCVTF_h32_float2fix, Arm64Mnemonic.UCVTF, "UCVTF H0, W1, #5");
        TestInst(UCVTF(H31, W1, 5), Arm64InstructionId.UCVTF_h32_float2fix, Arm64Mnemonic.UCVTF, "UCVTF H31, W1, #5");
        TestInst(UCVTF(H0, W16, 5), Arm64InstructionId.UCVTF_h32_float2fix, Arm64Mnemonic.UCVTF, "UCVTF H0, W16, #5");
        TestInst(UCVTF(H31, W16, 5), Arm64InstructionId.UCVTF_h32_float2fix, Arm64Mnemonic.UCVTF, "UCVTF H31, W16, #5");
        TestInst(UCVTF(H0, WZR, 5), Arm64InstructionId.UCVTF_h32_float2fix, Arm64Mnemonic.UCVTF, "UCVTF H0, WZR, #5");
        TestInst(UCVTF(H31, WZR, 5), Arm64InstructionId.UCVTF_h32_float2fix, Arm64Mnemonic.UCVTF, "UCVTF H31, WZR, #5");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.UCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_UCVTF_h64_float2fix_5()
    {
        TestInst(UCVTF(H0, X1, 5), Arm64InstructionId.UCVTF_h64_float2fix, Arm64Mnemonic.UCVTF, "UCVTF H0, X1, #5");
        TestInst(UCVTF(H31, X1, 5), Arm64InstructionId.UCVTF_h64_float2fix, Arm64Mnemonic.UCVTF, "UCVTF H31, X1, #5");
        TestInst(UCVTF(H0, X16, 5), Arm64InstructionId.UCVTF_h64_float2fix, Arm64Mnemonic.UCVTF, "UCVTF H0, X16, #5");
        TestInst(UCVTF(H31, X16, 5), Arm64InstructionId.UCVTF_h64_float2fix, Arm64Mnemonic.UCVTF, "UCVTF H31, X16, #5");
        TestInst(UCVTF(H0, XZR, 5), Arm64InstructionId.UCVTF_h64_float2fix, Arm64Mnemonic.UCVTF, "UCVTF H0, XZR, #5");
        TestInst(UCVTF(H31, XZR, 5), Arm64InstructionId.UCVTF_h64_float2fix, Arm64Mnemonic.UCVTF, "UCVTF H31, XZR, #5");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.UCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_UCVTF_s32_float2fix_6()
    {
        TestInst(UCVTF(S0, W1, 5), Arm64InstructionId.UCVTF_s32_float2fix, Arm64Mnemonic.UCVTF, "UCVTF S0, W1, #5");
        TestInst(UCVTF(S31, W1, 5), Arm64InstructionId.UCVTF_s32_float2fix, Arm64Mnemonic.UCVTF, "UCVTF S31, W1, #5");
        TestInst(UCVTF(S0, W16, 5), Arm64InstructionId.UCVTF_s32_float2fix, Arm64Mnemonic.UCVTF, "UCVTF S0, W16, #5");
        TestInst(UCVTF(S31, W16, 5), Arm64InstructionId.UCVTF_s32_float2fix, Arm64Mnemonic.UCVTF, "UCVTF S31, W16, #5");
        TestInst(UCVTF(S0, WZR, 5), Arm64InstructionId.UCVTF_s32_float2fix, Arm64Mnemonic.UCVTF, "UCVTF S0, WZR, #5");
        TestInst(UCVTF(S31, WZR, 5), Arm64InstructionId.UCVTF_s32_float2fix, Arm64Mnemonic.UCVTF, "UCVTF S31, WZR, #5");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.UCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_UCVTF_s64_float2fix_7()
    {
        TestInst(UCVTF(S0, X1, 5), Arm64InstructionId.UCVTF_s64_float2fix, Arm64Mnemonic.UCVTF, "UCVTF S0, X1, #5");
        TestInst(UCVTF(S31, X1, 5), Arm64InstructionId.UCVTF_s64_float2fix, Arm64Mnemonic.UCVTF, "UCVTF S31, X1, #5");
        TestInst(UCVTF(S0, X16, 5), Arm64InstructionId.UCVTF_s64_float2fix, Arm64Mnemonic.UCVTF, "UCVTF S0, X16, #5");
        TestInst(UCVTF(S31, X16, 5), Arm64InstructionId.UCVTF_s64_float2fix, Arm64Mnemonic.UCVTF, "UCVTF S31, X16, #5");
        TestInst(UCVTF(S0, XZR, 5), Arm64InstructionId.UCVTF_s64_float2fix, Arm64Mnemonic.UCVTF, "UCVTF S0, XZR, #5");
        TestInst(UCVTF(S31, XZR, 5), Arm64InstructionId.UCVTF_s64_float2fix, Arm64Mnemonic.UCVTF, "UCVTF S31, XZR, #5");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.UCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_UCVTF_d32_float2fix_8()
    {
        TestInst(UCVTF(D0, W1, 5), Arm64InstructionId.UCVTF_d32_float2fix, Arm64Mnemonic.UCVTF, "UCVTF D0, W1, #5");
        TestInst(UCVTF(D31, W1, 5), Arm64InstructionId.UCVTF_d32_float2fix, Arm64Mnemonic.UCVTF, "UCVTF D31, W1, #5");
        TestInst(UCVTF(D0, W16, 5), Arm64InstructionId.UCVTF_d32_float2fix, Arm64Mnemonic.UCVTF, "UCVTF D0, W16, #5");
        TestInst(UCVTF(D31, W16, 5), Arm64InstructionId.UCVTF_d32_float2fix, Arm64Mnemonic.UCVTF, "UCVTF D31, W16, #5");
        TestInst(UCVTF(D0, WZR, 5), Arm64InstructionId.UCVTF_d32_float2fix, Arm64Mnemonic.UCVTF, "UCVTF D0, WZR, #5");
        TestInst(UCVTF(D31, WZR, 5), Arm64InstructionId.UCVTF_d32_float2fix, Arm64Mnemonic.UCVTF, "UCVTF D31, WZR, #5");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.UCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_UCVTF_d64_float2fix_9()
    {
        TestInst(UCVTF(D0, X1, 5), Arm64InstructionId.UCVTF_d64_float2fix, Arm64Mnemonic.UCVTF, "UCVTF D0, X1, #5");
        TestInst(UCVTF(D31, X1, 5), Arm64InstructionId.UCVTF_d64_float2fix, Arm64Mnemonic.UCVTF, "UCVTF D31, X1, #5");
        TestInst(UCVTF(D0, X16, 5), Arm64InstructionId.UCVTF_d64_float2fix, Arm64Mnemonic.UCVTF, "UCVTF D0, X16, #5");
        TestInst(UCVTF(D31, X16, 5), Arm64InstructionId.UCVTF_d64_float2fix, Arm64Mnemonic.UCVTF, "UCVTF D31, X16, #5");
        TestInst(UCVTF(D0, XZR, 5), Arm64InstructionId.UCVTF_d64_float2fix, Arm64Mnemonic.UCVTF, "UCVTF D0, XZR, #5");
        TestInst(UCVTF(D31, XZR, 5), Arm64InstructionId.UCVTF_d64_float2fix, Arm64Mnemonic.UCVTF, "UCVTF D31, XZR, #5");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.UCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_UCVTF_h32_float2int_10()
    {
        TestInst(UCVTF(H0, W1), Arm64InstructionId.UCVTF_h32_float2int, Arm64Mnemonic.UCVTF, "UCVTF H0, W1");
        TestInst(UCVTF(H31, W1), Arm64InstructionId.UCVTF_h32_float2int, Arm64Mnemonic.UCVTF, "UCVTF H31, W1");
        TestInst(UCVTF(H0, W16), Arm64InstructionId.UCVTF_h32_float2int, Arm64Mnemonic.UCVTF, "UCVTF H0, W16");
        TestInst(UCVTF(H31, W16), Arm64InstructionId.UCVTF_h32_float2int, Arm64Mnemonic.UCVTF, "UCVTF H31, W16");
        TestInst(UCVTF(H0, WZR), Arm64InstructionId.UCVTF_h32_float2int, Arm64Mnemonic.UCVTF, "UCVTF H0, WZR");
        TestInst(UCVTF(H31, WZR), Arm64InstructionId.UCVTF_h32_float2int, Arm64Mnemonic.UCVTF, "UCVTF H31, WZR");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.UCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_UCVTF_s32_float2int_11()
    {
        TestInst(UCVTF(S0, W1), Arm64InstructionId.UCVTF_s32_float2int, Arm64Mnemonic.UCVTF, "UCVTF S0, W1");
        TestInst(UCVTF(S31, W1), Arm64InstructionId.UCVTF_s32_float2int, Arm64Mnemonic.UCVTF, "UCVTF S31, W1");
        TestInst(UCVTF(S0, W16), Arm64InstructionId.UCVTF_s32_float2int, Arm64Mnemonic.UCVTF, "UCVTF S0, W16");
        TestInst(UCVTF(S31, W16), Arm64InstructionId.UCVTF_s32_float2int, Arm64Mnemonic.UCVTF, "UCVTF S31, W16");
        TestInst(UCVTF(S0, WZR), Arm64InstructionId.UCVTF_s32_float2int, Arm64Mnemonic.UCVTF, "UCVTF S0, WZR");
        TestInst(UCVTF(S31, WZR), Arm64InstructionId.UCVTF_s32_float2int, Arm64Mnemonic.UCVTF, "UCVTF S31, WZR");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.UCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_UCVTF_d32_float2int_12()
    {
        TestInst(UCVTF(D0, W1), Arm64InstructionId.UCVTF_d32_float2int, Arm64Mnemonic.UCVTF, "UCVTF D0, W1");
        TestInst(UCVTF(D31, W1), Arm64InstructionId.UCVTF_d32_float2int, Arm64Mnemonic.UCVTF, "UCVTF D31, W1");
        TestInst(UCVTF(D0, W16), Arm64InstructionId.UCVTF_d32_float2int, Arm64Mnemonic.UCVTF, "UCVTF D0, W16");
        TestInst(UCVTF(D31, W16), Arm64InstructionId.UCVTF_d32_float2int, Arm64Mnemonic.UCVTF, "UCVTF D31, W16");
        TestInst(UCVTF(D0, WZR), Arm64InstructionId.UCVTF_d32_float2int, Arm64Mnemonic.UCVTF, "UCVTF D0, WZR");
        TestInst(UCVTF(D31, WZR), Arm64InstructionId.UCVTF_d32_float2int, Arm64Mnemonic.UCVTF, "UCVTF D31, WZR");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.UCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_UCVTF_h64_float2int_13()
    {
        TestInst(UCVTF(H0, X1), Arm64InstructionId.UCVTF_h64_float2int, Arm64Mnemonic.UCVTF, "UCVTF H0, X1");
        TestInst(UCVTF(H31, X1), Arm64InstructionId.UCVTF_h64_float2int, Arm64Mnemonic.UCVTF, "UCVTF H31, X1");
        TestInst(UCVTF(H0, X16), Arm64InstructionId.UCVTF_h64_float2int, Arm64Mnemonic.UCVTF, "UCVTF H0, X16");
        TestInst(UCVTF(H31, X16), Arm64InstructionId.UCVTF_h64_float2int, Arm64Mnemonic.UCVTF, "UCVTF H31, X16");
        TestInst(UCVTF(H0, XZR), Arm64InstructionId.UCVTF_h64_float2int, Arm64Mnemonic.UCVTF, "UCVTF H0, XZR");
        TestInst(UCVTF(H31, XZR), Arm64InstructionId.UCVTF_h64_float2int, Arm64Mnemonic.UCVTF, "UCVTF H31, XZR");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.UCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_UCVTF_s64_float2int_14()
    {
        TestInst(UCVTF(S0, X1), Arm64InstructionId.UCVTF_s64_float2int, Arm64Mnemonic.UCVTF, "UCVTF S0, X1");
        TestInst(UCVTF(S31, X1), Arm64InstructionId.UCVTF_s64_float2int, Arm64Mnemonic.UCVTF, "UCVTF S31, X1");
        TestInst(UCVTF(S0, X16), Arm64InstructionId.UCVTF_s64_float2int, Arm64Mnemonic.UCVTF, "UCVTF S0, X16");
        TestInst(UCVTF(S31, X16), Arm64InstructionId.UCVTF_s64_float2int, Arm64Mnemonic.UCVTF, "UCVTF S31, X16");
        TestInst(UCVTF(S0, XZR), Arm64InstructionId.UCVTF_s64_float2int, Arm64Mnemonic.UCVTF, "UCVTF S0, XZR");
        TestInst(UCVTF(S31, XZR), Arm64InstructionId.UCVTF_s64_float2int, Arm64Mnemonic.UCVTF, "UCVTF S31, XZR");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.UCVTF"/>.
    /// </summary>
    [TestMethod]
    public void Test_UCVTF_d64_float2int_15()
    {
        TestInst(UCVTF(D0, X1), Arm64InstructionId.UCVTF_d64_float2int, Arm64Mnemonic.UCVTF, "UCVTF D0, X1");
        TestInst(UCVTF(D31, X1), Arm64InstructionId.UCVTF_d64_float2int, Arm64Mnemonic.UCVTF, "UCVTF D31, X1");
        TestInst(UCVTF(D0, X16), Arm64InstructionId.UCVTF_d64_float2int, Arm64Mnemonic.UCVTF, "UCVTF D0, X16");
        TestInst(UCVTF(D31, X16), Arm64InstructionId.UCVTF_d64_float2int, Arm64Mnemonic.UCVTF, "UCVTF D31, X16");
        TestInst(UCVTF(D0, XZR), Arm64InstructionId.UCVTF_d64_float2int, Arm64Mnemonic.UCVTF, "UCVTF D0, XZR");
        TestInst(UCVTF(D31, XZR), Arm64InstructionId.UCVTF_d64_float2int, Arm64Mnemonic.UCVTF, "UCVTF D31, XZR");
    }
}
