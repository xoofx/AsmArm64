// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Float;

[TestClass]
public class Arm64InstructionFactoryTests_FCCMPE_Float
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCCMPE"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCCMPE_h_floatccmp_0()
    {
        
        {
            var raw = FCCMPE(H0, H1, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCCMPE_h_floatccmp, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCCMPE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCCMPE H0, H1, #5, NE", asm);
        }
        
        {
            var raw = FCCMPE(H31, H1, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCCMPE_h_floatccmp, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCCMPE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCCMPE H31, H1, #5, NE", asm);
        }
        
        {
            var raw = FCCMPE(H0, H31, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCCMPE_h_floatccmp, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCCMPE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCCMPE H0, H31, #5, NE", asm);
        }
        
        {
            var raw = FCCMPE(H31, H31, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCCMPE_h_floatccmp, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCCMPE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCCMPE H31, H31, #5, NE", asm);
        }
        
        {
            var raw = FCCMPE(H0, H1, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCCMPE_h_floatccmp, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCCMPE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCCMPE H0, H1, #5, AL", asm);
        }
        
        {
            var raw = FCCMPE(H31, H1, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCCMPE_h_floatccmp, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCCMPE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCCMPE H31, H1, #5, AL", asm);
        }
        
        {
            var raw = FCCMPE(H0, H31, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCCMPE_h_floatccmp, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCCMPE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCCMPE H0, H31, #5, AL", asm);
        }
        
        {
            var raw = FCCMPE(H31, H31, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCCMPE_h_floatccmp, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCCMPE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCCMPE H31, H31, #5, AL", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCCMPE"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCCMPE_s_floatccmp_1()
    {
        
        {
            var raw = FCCMPE(S0, S1, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCCMPE_s_floatccmp, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCCMPE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCCMPE S0, S1, #5, NE", asm);
        }
        
        {
            var raw = FCCMPE(S31, S1, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCCMPE_s_floatccmp, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCCMPE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCCMPE S31, S1, #5, NE", asm);
        }
        
        {
            var raw = FCCMPE(S0, S31, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCCMPE_s_floatccmp, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCCMPE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCCMPE S0, S31, #5, NE", asm);
        }
        
        {
            var raw = FCCMPE(S31, S31, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCCMPE_s_floatccmp, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCCMPE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCCMPE S31, S31, #5, NE", asm);
        }
        
        {
            var raw = FCCMPE(S0, S1, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCCMPE_s_floatccmp, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCCMPE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCCMPE S0, S1, #5, AL", asm);
        }
        
        {
            var raw = FCCMPE(S31, S1, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCCMPE_s_floatccmp, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCCMPE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCCMPE S31, S1, #5, AL", asm);
        }
        
        {
            var raw = FCCMPE(S0, S31, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCCMPE_s_floatccmp, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCCMPE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCCMPE S0, S31, #5, AL", asm);
        }
        
        {
            var raw = FCCMPE(S31, S31, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCCMPE_s_floatccmp, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCCMPE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCCMPE S31, S31, #5, AL", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCCMPE"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCCMPE_d_floatccmp_2()
    {
        
        {
            var raw = FCCMPE(D0, D1, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCCMPE_d_floatccmp, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCCMPE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCCMPE D0, D1, #5, NE", asm);
        }
        
        {
            var raw = FCCMPE(D31, D1, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCCMPE_d_floatccmp, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCCMPE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCCMPE D31, D1, #5, NE", asm);
        }
        
        {
            var raw = FCCMPE(D0, D31, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCCMPE_d_floatccmp, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCCMPE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCCMPE D0, D31, #5, NE", asm);
        }
        
        {
            var raw = FCCMPE(D31, D31, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCCMPE_d_floatccmp, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCCMPE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCCMPE D31, D31, #5, NE", asm);
        }
        
        {
            var raw = FCCMPE(D0, D1, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCCMPE_d_floatccmp, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCCMPE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCCMPE D0, D1, #5, AL", asm);
        }
        
        {
            var raw = FCCMPE(D31, D1, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCCMPE_d_floatccmp, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCCMPE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCCMPE D31, D1, #5, AL", asm);
        }
        
        {
            var raw = FCCMPE(D0, D31, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCCMPE_d_floatccmp, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCCMPE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCCMPE D0, D31, #5, AL", asm);
        }
        
        {
            var raw = FCCMPE(D31, D31, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCCMPE_d_floatccmp, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCCMPE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCCMPE D31, D31, #5, AL", asm);
        }
    }
}
