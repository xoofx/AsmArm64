// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Float;

[TestClass]
public class Arm64InstructionFactoryTests_FCSEL_Float
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCSEL"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCSEL_h_floatsel_0()
    {
        
        {
            var raw = FCSEL(H0, H1, H2, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_h_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL H0, H1, H2, NE", asm);
        }
        
        {
            var raw = FCSEL(H31, H1, H2, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_h_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL H31, H1, H2, NE", asm);
        }
        
        {
            var raw = FCSEL(H0, H31, H2, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_h_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL H0, H31, H2, NE", asm);
        }
        
        {
            var raw = FCSEL(H31, H31, H2, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_h_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL H31, H31, H2, NE", asm);
        }
        
        {
            var raw = FCSEL(H0, H1, H31, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_h_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL H0, H1, H31, NE", asm);
        }
        
        {
            var raw = FCSEL(H31, H1, H31, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_h_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL H31, H1, H31, NE", asm);
        }
        
        {
            var raw = FCSEL(H0, H31, H31, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_h_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL H0, H31, H31, NE", asm);
        }
        
        {
            var raw = FCSEL(H31, H31, H31, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_h_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL H31, H31, H31, NE", asm);
        }
        
        {
            var raw = FCSEL(H0, H1, H2, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_h_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL H0, H1, H2, AL", asm);
        }
        
        {
            var raw = FCSEL(H31, H1, H2, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_h_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL H31, H1, H2, AL", asm);
        }
        
        {
            var raw = FCSEL(H0, H31, H2, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_h_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL H0, H31, H2, AL", asm);
        }
        
        {
            var raw = FCSEL(H31, H31, H2, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_h_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL H31, H31, H2, AL", asm);
        }
        
        {
            var raw = FCSEL(H0, H1, H31, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_h_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL H0, H1, H31, AL", asm);
        }
        
        {
            var raw = FCSEL(H31, H1, H31, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_h_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL H31, H1, H31, AL", asm);
        }
        
        {
            var raw = FCSEL(H0, H31, H31, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_h_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL H0, H31, H31, AL", asm);
        }
        
        {
            var raw = FCSEL(H31, H31, H31, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_h_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL H31, H31, H31, AL", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCSEL"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCSEL_s_floatsel_1()
    {
        
        {
            var raw = FCSEL(S0, S1, S2, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_s_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL S0, S1, S2, NE", asm);
        }
        
        {
            var raw = FCSEL(S31, S1, S2, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_s_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL S31, S1, S2, NE", asm);
        }
        
        {
            var raw = FCSEL(S0, S31, S2, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_s_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL S0, S31, S2, NE", asm);
        }
        
        {
            var raw = FCSEL(S31, S31, S2, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_s_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL S31, S31, S2, NE", asm);
        }
        
        {
            var raw = FCSEL(S0, S1, S31, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_s_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL S0, S1, S31, NE", asm);
        }
        
        {
            var raw = FCSEL(S31, S1, S31, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_s_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL S31, S1, S31, NE", asm);
        }
        
        {
            var raw = FCSEL(S0, S31, S31, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_s_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL S0, S31, S31, NE", asm);
        }
        
        {
            var raw = FCSEL(S31, S31, S31, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_s_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL S31, S31, S31, NE", asm);
        }
        
        {
            var raw = FCSEL(S0, S1, S2, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_s_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL S0, S1, S2, AL", asm);
        }
        
        {
            var raw = FCSEL(S31, S1, S2, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_s_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL S31, S1, S2, AL", asm);
        }
        
        {
            var raw = FCSEL(S0, S31, S2, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_s_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL S0, S31, S2, AL", asm);
        }
        
        {
            var raw = FCSEL(S31, S31, S2, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_s_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL S31, S31, S2, AL", asm);
        }
        
        {
            var raw = FCSEL(S0, S1, S31, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_s_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL S0, S1, S31, AL", asm);
        }
        
        {
            var raw = FCSEL(S31, S1, S31, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_s_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL S31, S1, S31, AL", asm);
        }
        
        {
            var raw = FCSEL(S0, S31, S31, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_s_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL S0, S31, S31, AL", asm);
        }
        
        {
            var raw = FCSEL(S31, S31, S31, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_s_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL S31, S31, S31, AL", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCSEL"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCSEL_d_floatsel_2()
    {
        
        {
            var raw = FCSEL(D0, D1, D2, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_d_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL D0, D1, D2, NE", asm);
        }
        
        {
            var raw = FCSEL(D31, D1, D2, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_d_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL D31, D1, D2, NE", asm);
        }
        
        {
            var raw = FCSEL(D0, D31, D2, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_d_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL D0, D31, D2, NE", asm);
        }
        
        {
            var raw = FCSEL(D31, D31, D2, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_d_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL D31, D31, D2, NE", asm);
        }
        
        {
            var raw = FCSEL(D0, D1, D31, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_d_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL D0, D1, D31, NE", asm);
        }
        
        {
            var raw = FCSEL(D31, D1, D31, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_d_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL D31, D1, D31, NE", asm);
        }
        
        {
            var raw = FCSEL(D0, D31, D31, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_d_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL D0, D31, D31, NE", asm);
        }
        
        {
            var raw = FCSEL(D31, D31, D31, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_d_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL D31, D31, D31, NE", asm);
        }
        
        {
            var raw = FCSEL(D0, D1, D2, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_d_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL D0, D1, D2, AL", asm);
        }
        
        {
            var raw = FCSEL(D31, D1, D2, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_d_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL D31, D1, D2, AL", asm);
        }
        
        {
            var raw = FCSEL(D0, D31, D2, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_d_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL D0, D31, D2, AL", asm);
        }
        
        {
            var raw = FCSEL(D31, D31, D2, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_d_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL D31, D31, D2, AL", asm);
        }
        
        {
            var raw = FCSEL(D0, D1, D31, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_d_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL D0, D1, D31, AL", asm);
        }
        
        {
            var raw = FCSEL(D31, D1, D31, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_d_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL D31, D1, D31, AL", asm);
        }
        
        {
            var raw = FCSEL(D0, D31, D31, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_d_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL D0, D31, D31, AL", asm);
        }
        
        {
            var raw = FCSEL(D31, D31, D31, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FCSEL_d_floatsel, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FCSEL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FCSEL D31, D31, D31, AL", asm);
        }
    }
}
