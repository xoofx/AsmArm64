// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Float;

[TestClass]
public class Arm64InstructionFactoryTests_FCSEL_Float : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCSEL"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCSEL_h_floatsel_0()
    {
        TestInst(FCSEL(H0, H1, H2, NE), asm => asm.FCSEL(H0, H1, H2, NE), Arm64InstructionId.FCSEL_h_floatsel, Arm64Mnemonic.FCSEL, "FCSEL H0, H1, H2, NE");
        TestInst(FCSEL(H31, H1, H2, NE), asm => asm.FCSEL(H31, H1, H2, NE), Arm64InstructionId.FCSEL_h_floatsel, Arm64Mnemonic.FCSEL, "FCSEL H31, H1, H2, NE");
        TestInst(FCSEL(H0, H31, H2, NE), asm => asm.FCSEL(H0, H31, H2, NE), Arm64InstructionId.FCSEL_h_floatsel, Arm64Mnemonic.FCSEL, "FCSEL H0, H31, H2, NE");
        TestInst(FCSEL(H31, H31, H2, NE), asm => asm.FCSEL(H31, H31, H2, NE), Arm64InstructionId.FCSEL_h_floatsel, Arm64Mnemonic.FCSEL, "FCSEL H31, H31, H2, NE");
        TestInst(FCSEL(H0, H1, H31, NE), asm => asm.FCSEL(H0, H1, H31, NE), Arm64InstructionId.FCSEL_h_floatsel, Arm64Mnemonic.FCSEL, "FCSEL H0, H1, H31, NE");
        TestInst(FCSEL(H31, H1, H31, NE), asm => asm.FCSEL(H31, H1, H31, NE), Arm64InstructionId.FCSEL_h_floatsel, Arm64Mnemonic.FCSEL, "FCSEL H31, H1, H31, NE");
        TestInst(FCSEL(H0, H31, H31, NE), asm => asm.FCSEL(H0, H31, H31, NE), Arm64InstructionId.FCSEL_h_floatsel, Arm64Mnemonic.FCSEL, "FCSEL H0, H31, H31, NE");
        TestInst(FCSEL(H31, H31, H31, NE), asm => asm.FCSEL(H31, H31, H31, NE), Arm64InstructionId.FCSEL_h_floatsel, Arm64Mnemonic.FCSEL, "FCSEL H31, H31, H31, NE");
        TestInst(FCSEL(H0, H1, H2, HS), asm => asm.FCSEL(H0, H1, H2, HS), Arm64InstructionId.FCSEL_h_floatsel, Arm64Mnemonic.FCSEL, "FCSEL H0, H1, H2, HS");
        TestInst(FCSEL(H31, H1, H2, HS), asm => asm.FCSEL(H31, H1, H2, HS), Arm64InstructionId.FCSEL_h_floatsel, Arm64Mnemonic.FCSEL, "FCSEL H31, H1, H2, HS");
        TestInst(FCSEL(H0, H31, H2, HS), asm => asm.FCSEL(H0, H31, H2, HS), Arm64InstructionId.FCSEL_h_floatsel, Arm64Mnemonic.FCSEL, "FCSEL H0, H31, H2, HS");
        TestInst(FCSEL(H31, H31, H2, HS), asm => asm.FCSEL(H31, H31, H2, HS), Arm64InstructionId.FCSEL_h_floatsel, Arm64Mnemonic.FCSEL, "FCSEL H31, H31, H2, HS");
        TestInst(FCSEL(H0, H1, H31, HS), asm => asm.FCSEL(H0, H1, H31, HS), Arm64InstructionId.FCSEL_h_floatsel, Arm64Mnemonic.FCSEL, "FCSEL H0, H1, H31, HS");
        TestInst(FCSEL(H31, H1, H31, HS), asm => asm.FCSEL(H31, H1, H31, HS), Arm64InstructionId.FCSEL_h_floatsel, Arm64Mnemonic.FCSEL, "FCSEL H31, H1, H31, HS");
        TestInst(FCSEL(H0, H31, H31, HS), asm => asm.FCSEL(H0, H31, H31, HS), Arm64InstructionId.FCSEL_h_floatsel, Arm64Mnemonic.FCSEL, "FCSEL H0, H31, H31, HS");
        TestInst(FCSEL(H31, H31, H31, HS), asm => asm.FCSEL(H31, H31, H31, HS), Arm64InstructionId.FCSEL_h_floatsel, Arm64Mnemonic.FCSEL, "FCSEL H31, H31, H31, HS");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCSEL"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCSEL_s_floatsel_1()
    {
        TestInst(FCSEL(S0, S1, S2, NE), asm => asm.FCSEL(S0, S1, S2, NE), Arm64InstructionId.FCSEL_s_floatsel, Arm64Mnemonic.FCSEL, "FCSEL S0, S1, S2, NE");
        TestInst(FCSEL(S31, S1, S2, NE), asm => asm.FCSEL(S31, S1, S2, NE), Arm64InstructionId.FCSEL_s_floatsel, Arm64Mnemonic.FCSEL, "FCSEL S31, S1, S2, NE");
        TestInst(FCSEL(S0, S31, S2, NE), asm => asm.FCSEL(S0, S31, S2, NE), Arm64InstructionId.FCSEL_s_floatsel, Arm64Mnemonic.FCSEL, "FCSEL S0, S31, S2, NE");
        TestInst(FCSEL(S31, S31, S2, NE), asm => asm.FCSEL(S31, S31, S2, NE), Arm64InstructionId.FCSEL_s_floatsel, Arm64Mnemonic.FCSEL, "FCSEL S31, S31, S2, NE");
        TestInst(FCSEL(S0, S1, S31, NE), asm => asm.FCSEL(S0, S1, S31, NE), Arm64InstructionId.FCSEL_s_floatsel, Arm64Mnemonic.FCSEL, "FCSEL S0, S1, S31, NE");
        TestInst(FCSEL(S31, S1, S31, NE), asm => asm.FCSEL(S31, S1, S31, NE), Arm64InstructionId.FCSEL_s_floatsel, Arm64Mnemonic.FCSEL, "FCSEL S31, S1, S31, NE");
        TestInst(FCSEL(S0, S31, S31, NE), asm => asm.FCSEL(S0, S31, S31, NE), Arm64InstructionId.FCSEL_s_floatsel, Arm64Mnemonic.FCSEL, "FCSEL S0, S31, S31, NE");
        TestInst(FCSEL(S31, S31, S31, NE), asm => asm.FCSEL(S31, S31, S31, NE), Arm64InstructionId.FCSEL_s_floatsel, Arm64Mnemonic.FCSEL, "FCSEL S31, S31, S31, NE");
        TestInst(FCSEL(S0, S1, S2, HS), asm => asm.FCSEL(S0, S1, S2, HS), Arm64InstructionId.FCSEL_s_floatsel, Arm64Mnemonic.FCSEL, "FCSEL S0, S1, S2, HS");
        TestInst(FCSEL(S31, S1, S2, HS), asm => asm.FCSEL(S31, S1, S2, HS), Arm64InstructionId.FCSEL_s_floatsel, Arm64Mnemonic.FCSEL, "FCSEL S31, S1, S2, HS");
        TestInst(FCSEL(S0, S31, S2, HS), asm => asm.FCSEL(S0, S31, S2, HS), Arm64InstructionId.FCSEL_s_floatsel, Arm64Mnemonic.FCSEL, "FCSEL S0, S31, S2, HS");
        TestInst(FCSEL(S31, S31, S2, HS), asm => asm.FCSEL(S31, S31, S2, HS), Arm64InstructionId.FCSEL_s_floatsel, Arm64Mnemonic.FCSEL, "FCSEL S31, S31, S2, HS");
        TestInst(FCSEL(S0, S1, S31, HS), asm => asm.FCSEL(S0, S1, S31, HS), Arm64InstructionId.FCSEL_s_floatsel, Arm64Mnemonic.FCSEL, "FCSEL S0, S1, S31, HS");
        TestInst(FCSEL(S31, S1, S31, HS), asm => asm.FCSEL(S31, S1, S31, HS), Arm64InstructionId.FCSEL_s_floatsel, Arm64Mnemonic.FCSEL, "FCSEL S31, S1, S31, HS");
        TestInst(FCSEL(S0, S31, S31, HS), asm => asm.FCSEL(S0, S31, S31, HS), Arm64InstructionId.FCSEL_s_floatsel, Arm64Mnemonic.FCSEL, "FCSEL S0, S31, S31, HS");
        TestInst(FCSEL(S31, S31, S31, HS), asm => asm.FCSEL(S31, S31, S31, HS), Arm64InstructionId.FCSEL_s_floatsel, Arm64Mnemonic.FCSEL, "FCSEL S31, S31, S31, HS");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FCSEL"/>.
    /// </summary>
    [TestMethod]
    public void Test_FCSEL_d_floatsel_2()
    {
        TestInst(FCSEL(D0, D1, D2, NE), asm => asm.FCSEL(D0, D1, D2, NE), Arm64InstructionId.FCSEL_d_floatsel, Arm64Mnemonic.FCSEL, "FCSEL D0, D1, D2, NE");
        TestInst(FCSEL(D31, D1, D2, NE), asm => asm.FCSEL(D31, D1, D2, NE), Arm64InstructionId.FCSEL_d_floatsel, Arm64Mnemonic.FCSEL, "FCSEL D31, D1, D2, NE");
        TestInst(FCSEL(D0, D31, D2, NE), asm => asm.FCSEL(D0, D31, D2, NE), Arm64InstructionId.FCSEL_d_floatsel, Arm64Mnemonic.FCSEL, "FCSEL D0, D31, D2, NE");
        TestInst(FCSEL(D31, D31, D2, NE), asm => asm.FCSEL(D31, D31, D2, NE), Arm64InstructionId.FCSEL_d_floatsel, Arm64Mnemonic.FCSEL, "FCSEL D31, D31, D2, NE");
        TestInst(FCSEL(D0, D1, D31, NE), asm => asm.FCSEL(D0, D1, D31, NE), Arm64InstructionId.FCSEL_d_floatsel, Arm64Mnemonic.FCSEL, "FCSEL D0, D1, D31, NE");
        TestInst(FCSEL(D31, D1, D31, NE), asm => asm.FCSEL(D31, D1, D31, NE), Arm64InstructionId.FCSEL_d_floatsel, Arm64Mnemonic.FCSEL, "FCSEL D31, D1, D31, NE");
        TestInst(FCSEL(D0, D31, D31, NE), asm => asm.FCSEL(D0, D31, D31, NE), Arm64InstructionId.FCSEL_d_floatsel, Arm64Mnemonic.FCSEL, "FCSEL D0, D31, D31, NE");
        TestInst(FCSEL(D31, D31, D31, NE), asm => asm.FCSEL(D31, D31, D31, NE), Arm64InstructionId.FCSEL_d_floatsel, Arm64Mnemonic.FCSEL, "FCSEL D31, D31, D31, NE");
        TestInst(FCSEL(D0, D1, D2, HS), asm => asm.FCSEL(D0, D1, D2, HS), Arm64InstructionId.FCSEL_d_floatsel, Arm64Mnemonic.FCSEL, "FCSEL D0, D1, D2, HS");
        TestInst(FCSEL(D31, D1, D2, HS), asm => asm.FCSEL(D31, D1, D2, HS), Arm64InstructionId.FCSEL_d_floatsel, Arm64Mnemonic.FCSEL, "FCSEL D31, D1, D2, HS");
        TestInst(FCSEL(D0, D31, D2, HS), asm => asm.FCSEL(D0, D31, D2, HS), Arm64InstructionId.FCSEL_d_floatsel, Arm64Mnemonic.FCSEL, "FCSEL D0, D31, D2, HS");
        TestInst(FCSEL(D31, D31, D2, HS), asm => asm.FCSEL(D31, D31, D2, HS), Arm64InstructionId.FCSEL_d_floatsel, Arm64Mnemonic.FCSEL, "FCSEL D31, D31, D2, HS");
        TestInst(FCSEL(D0, D1, D31, HS), asm => asm.FCSEL(D0, D1, D31, HS), Arm64InstructionId.FCSEL_d_floatsel, Arm64Mnemonic.FCSEL, "FCSEL D0, D1, D31, HS");
        TestInst(FCSEL(D31, D1, D31, HS), asm => asm.FCSEL(D31, D1, D31, HS), Arm64InstructionId.FCSEL_d_floatsel, Arm64Mnemonic.FCSEL, "FCSEL D31, D1, D31, HS");
        TestInst(FCSEL(D0, D31, D31, HS), asm => asm.FCSEL(D0, D31, D31, HS), Arm64InstructionId.FCSEL_d_floatsel, Arm64Mnemonic.FCSEL, "FCSEL D0, D31, D31, HS");
        TestInst(FCSEL(D31, D31, D31, HS), asm => asm.FCSEL(D31, D31, D31, HS), Arm64InstructionId.FCSEL_d_floatsel, Arm64Mnemonic.FCSEL, "FCSEL D31, D31, D31, HS");
    }
}
