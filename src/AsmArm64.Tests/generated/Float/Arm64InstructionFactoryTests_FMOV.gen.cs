// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.Float;

[TestClass]
public class Arm64InstructionFactoryTests_FMOV_Float
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FMOV"/>.
    /// </summary>
    [TestMethod]
    public void Test_FMOV_32h_float2int_0()
    {
        
        {
            var raw = FMOV(W0, H1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_32h_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV W0, H1", asm);
        }
        
        {
            var raw = FMOV(W15, H1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_32h_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV W15, H1", asm);
        }
        
        {
            var raw = FMOV(WZR, H1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_32h_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV WZR, H1", asm);
        }
        
        {
            var raw = FMOV(W0, H31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_32h_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV W0, H31", asm);
        }
        
        {
            var raw = FMOV(W15, H31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_32h_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV W15, H31", asm);
        }
        
        {
            var raw = FMOV(WZR, H31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_32h_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV WZR, H31", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FMOV"/>.
    /// </summary>
    [TestMethod]
    public void Test_FMOV_64h_float2int_1()
    {
        
        {
            var raw = FMOV(X0, H1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_64h_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV X0, H1", asm);
        }
        
        {
            var raw = FMOV(X15, H1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_64h_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV X15, H1", asm);
        }
        
        {
            var raw = FMOV(XZR, H1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_64h_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV XZR, H1", asm);
        }
        
        {
            var raw = FMOV(X0, H31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_64h_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV X0, H31", asm);
        }
        
        {
            var raw = FMOV(X15, H31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_64h_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV X15, H31", asm);
        }
        
        {
            var raw = FMOV(XZR, H31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_64h_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV XZR, H31", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FMOV"/>.
    /// </summary>
    [TestMethod]
    public void Test_FMOV_h32_float2int_2()
    {
        
        {
            var raw = FMOV(H0, W1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_h32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV H0, W1", asm);
        }
        
        {
            var raw = FMOV(H31, W1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_h32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV H31, W1", asm);
        }
        
        {
            var raw = FMOV(H0, W16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_h32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV H0, W16", asm);
        }
        
        {
            var raw = FMOV(H31, W16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_h32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV H31, W16", asm);
        }
        
        {
            var raw = FMOV(H0, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_h32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV H0, WZR", asm);
        }
        
        {
            var raw = FMOV(H31, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_h32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV H31, WZR", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FMOV"/>.
    /// </summary>
    [TestMethod]
    public void Test_FMOV_s32_float2int_3()
    {
        
        {
            var raw = FMOV(S0, W1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_s32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV S0, W1", asm);
        }
        
        {
            var raw = FMOV(S31, W1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_s32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV S31, W1", asm);
        }
        
        {
            var raw = FMOV(S0, W16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_s32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV S0, W16", asm);
        }
        
        {
            var raw = FMOV(S31, W16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_s32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV S31, W16", asm);
        }
        
        {
            var raw = FMOV(S0, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_s32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV S0, WZR", asm);
        }
        
        {
            var raw = FMOV(S31, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_s32_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV S31, WZR", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FMOV"/>.
    /// </summary>
    [TestMethod]
    public void Test_FMOV_32s_float2int_4()
    {
        
        {
            var raw = FMOV(W0, S1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_32s_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV W0, S1", asm);
        }
        
        {
            var raw = FMOV(W15, S1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_32s_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV W15, S1", asm);
        }
        
        {
            var raw = FMOV(WZR, S1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_32s_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV WZR, S1", asm);
        }
        
        {
            var raw = FMOV(W0, S31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_32s_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV W0, S31", asm);
        }
        
        {
            var raw = FMOV(W15, S31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_32s_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV W15, S31", asm);
        }
        
        {
            var raw = FMOV(WZR, S31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_32s_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV WZR, S31", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FMOV"/>.
    /// </summary>
    [TestMethod]
    public void Test_FMOV_h64_float2int_5()
    {
        
        {
            var raw = FMOV(H0, X1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_h64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV H0, X1", asm);
        }
        
        {
            var raw = FMOV(H31, X1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_h64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV H31, X1", asm);
        }
        
        {
            var raw = FMOV(H0, X16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_h64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV H0, X16", asm);
        }
        
        {
            var raw = FMOV(H31, X16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_h64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV H31, X16", asm);
        }
        
        {
            var raw = FMOV(H0, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_h64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV H0, XZR", asm);
        }
        
        {
            var raw = FMOV(H31, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_h64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV H31, XZR", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FMOV"/>.
    /// </summary>
    [TestMethod]
    public void Test_FMOV_d64_float2int_6()
    {
        
        {
            var raw = FMOV(D0, X1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_d64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV D0, X1", asm);
        }
        
        {
            var raw = FMOV(D31, X1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_d64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV D31, X1", asm);
        }
        
        {
            var raw = FMOV(D0, X16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_d64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV D0, X16", asm);
        }
        
        {
            var raw = FMOV(D31, X16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_d64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV D31, X16", asm);
        }
        
        {
            var raw = FMOV(D0, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_d64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV D0, XZR", asm);
        }
        
        {
            var raw = FMOV(D31, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_d64_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV D31, XZR", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FMOV"/>.
    /// </summary>
    [TestMethod]
    public void Test_FMOV_v64i_float2int_7()
    {
        Assert.Inconclusive("TODO");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FMOV"/>.
    /// </summary>
    [TestMethod]
    public void Test_FMOV_64d_float2int_8()
    {
        
        {
            var raw = FMOV(X0, D1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_64d_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV X0, D1", asm);
        }
        
        {
            var raw = FMOV(X15, D1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_64d_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV X15, D1", asm);
        }
        
        {
            var raw = FMOV(XZR, D1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_64d_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV XZR, D1", asm);
        }
        
        {
            var raw = FMOV(X0, D31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_64d_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV X0, D31", asm);
        }
        
        {
            var raw = FMOV(X15, D31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_64d_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV X15, D31", asm);
        }
        
        {
            var raw = FMOV(XZR, D31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_64d_float2int, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV XZR, D31", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FMOV"/>.
    /// </summary>
    [TestMethod]
    public void Test_FMOV_64vx_float2int_9()
    {
        Assert.Inconclusive("TODO");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FMOV"/>.
    /// </summary>
    [TestMethod]
    public void Test_FMOV_h_floatdp1_10()
    {
        
        {
            var raw = FMOV(H0, H1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_h_floatdp1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV H0, H1", asm);
        }
        
        {
            var raw = FMOV(H31, H1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_h_floatdp1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV H31, H1", asm);
        }
        
        {
            var raw = FMOV(H0, H31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_h_floatdp1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV H0, H31", asm);
        }
        
        {
            var raw = FMOV(H31, H31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_h_floatdp1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV H31, H31", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FMOV"/>.
    /// </summary>
    [TestMethod]
    public void Test_FMOV_s_floatdp1_11()
    {
        
        {
            var raw = FMOV(S0, S1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_s_floatdp1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV S0, S1", asm);
        }
        
        {
            var raw = FMOV(S31, S1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_s_floatdp1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV S31, S1", asm);
        }
        
        {
            var raw = FMOV(S0, S31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_s_floatdp1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV S0, S31", asm);
        }
        
        {
            var raw = FMOV(S31, S31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_s_floatdp1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV S31, S31", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FMOV"/>.
    /// </summary>
    [TestMethod]
    public void Test_FMOV_d_floatdp1_12()
    {
        
        {
            var raw = FMOV(D0, D1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_d_floatdp1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV D0, D1", asm);
        }
        
        {
            var raw = FMOV(D31, D1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_d_floatdp1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV D31, D1", asm);
        }
        
        {
            var raw = FMOV(D0, D31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_d_floatdp1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV D0, D31", asm);
        }
        
        {
            var raw = FMOV(D31, D31);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.FMOV_d_floatdp1, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.FMOV, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("FMOV D31, D31", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FMOV"/>.
    /// </summary>
    [TestMethod]
    public void Test_FMOV_h_floatimm_13()
    {
        Assert.Inconclusive("TODO");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FMOV"/>.
    /// </summary>
    [TestMethod]
    public void Test_FMOV_s_floatimm_14()
    {
        Assert.Inconclusive("TODO");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.FMOV"/>.
    /// </summary>
    [TestMethod]
    public void Test_FMOV_d_floatimm_15()
    {
        Assert.Inconclusive("TODO");
    }
}
