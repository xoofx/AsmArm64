// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System;
namespace AsmArm64.Tests;

partial class McInstructionTests
{
    [TestMethod]
    [DataRow(new byte[] { 0x6a, 0x25, 0x4c, 0x5e }, "fcmeq h10, h11, h12")]
    [DataRow(new byte[] { 0x6a, 0xe5, 0x2c, 0x5e }, "fcmeq s10, s11, s12")]
    [DataRow(new byte[] { 0xb4, 0xe6, 0x76, 0x5e }, "fcmeq d20, d21, d22")]
    [DataRow(new byte[] { 0x6a, 0xd9, 0xf8, 0x5e }, "fcmeq h10, h11, #0.0")]
    [DataRow(new byte[] { 0x6a, 0xd9, 0xa0, 0x5e }, "fcmeq s10, s11, #0.0")]
    [DataRow(new byte[] { 0xb4, 0xda, 0xe0, 0x5e }, "fcmeq d20, d21, #0.0")]
    [DataRow(new byte[] { 0x6a, 0xd9, 0xf8, 0x5e }, "fcmeq h10, h11, #0.0")]
    [DataRow(new byte[] { 0x6a, 0xd9, 0xa0, 0x5e }, "fcmeq s10, s11, #0.0")]
    [DataRow(new byte[] { 0xb4, 0xda, 0xe0, 0x5e }, "fcmeq d20, d21, #0.0")]
    [DataRow(new byte[] { 0x6a, 0x25, 0x4c, 0x7e }, "fcmge h10, h11, h12")]
    [DataRow(new byte[] { 0x6a, 0xe5, 0x2c, 0x7e }, "fcmge s10, s11, s12")]
    [DataRow(new byte[] { 0xb4, 0xe6, 0x76, 0x7e }, "fcmge d20, d21, d22")]
    [DataRow(new byte[] { 0x6a, 0xc9, 0xf8, 0x7e }, "fcmge h10, h11, #0.0")]
    [DataRow(new byte[] { 0x6a, 0xc9, 0xa0, 0x7e }, "fcmge s10, s11, #0.0")]
    [DataRow(new byte[] { 0xb4, 0xca, 0xe0, 0x7e }, "fcmge d20, d21, #0.0")]
    [DataRow(new byte[] { 0x6a, 0xc9, 0xf8, 0x7e }, "fcmge h10, h11, #0.0")]
    [DataRow(new byte[] { 0x6a, 0xc9, 0xa0, 0x7e }, "fcmge s10, s11, #0.0")]
    [DataRow(new byte[] { 0xb4, 0xca, 0xe0, 0x7e }, "fcmge d20, d21, #0.0")]
    [DataRow(new byte[] { 0x6a, 0x25, 0xcc, 0x7e }, "fcmgt h10, h11, h12")]
    [DataRow(new byte[] { 0x6a, 0xe5, 0xac, 0x7e }, "fcmgt s10, s11, s12")]
    [DataRow(new byte[] { 0xb4, 0xe6, 0xf6, 0x7e }, "fcmgt d20, d21, d22")]
    [DataRow(new byte[] { 0x6a, 0xc9, 0xf8, 0x5e }, "fcmgt h10, h11, #0.0")]
    [DataRow(new byte[] { 0x6a, 0xc9, 0xa0, 0x5e }, "fcmgt s10, s11, #0.0")]
    [DataRow(new byte[] { 0xb4, 0xca, 0xe0, 0x5e }, "fcmgt d20, d21, #0.0")]
    [DataRow(new byte[] { 0x6a, 0xc9, 0xf8, 0x5e }, "fcmgt h10, h11, #0.0")]
    [DataRow(new byte[] { 0x6a, 0xc9, 0xa0, 0x5e }, "fcmgt s10, s11, #0.0")]
    [DataRow(new byte[] { 0xb4, 0xca, 0xe0, 0x5e }, "fcmgt d20, d21, #0.0")]
    [DataRow(new byte[] { 0x6a, 0xd9, 0xf8, 0x7e }, "fcmle h10, h11, #0.0")]
    [DataRow(new byte[] { 0x6a, 0xd9, 0xa0, 0x7e }, "fcmle s10, s11, #0.0")]
    [DataRow(new byte[] { 0xb4, 0xda, 0xe0, 0x7e }, "fcmle d20, d21, #0.0")]
    [DataRow(new byte[] { 0x6a, 0xd9, 0xf8, 0x7e }, "fcmle h10, h11, #0.0")]
    [DataRow(new byte[] { 0x6a, 0xd9, 0xa0, 0x7e }, "fcmle s10, s11, #0.0")]
    [DataRow(new byte[] { 0xb4, 0xda, 0xe0, 0x7e }, "fcmle d20, d21, #0.0")]
    [DataRow(new byte[] { 0x6a, 0xe9, 0xf8, 0x5e }, "fcmlt h10, h11, #0.0")]
    [DataRow(new byte[] { 0x6a, 0xe9, 0xa0, 0x5e }, "fcmlt s10, s11, #0.0")]
    [DataRow(new byte[] { 0xb4, 0xea, 0xe0, 0x5e }, "fcmlt d20, d21, #0.0")]
    [DataRow(new byte[] { 0x6a, 0xe9, 0xf8, 0x5e }, "fcmlt h10, h11, #0.0")]
    [DataRow(new byte[] { 0x6a, 0xe9, 0xa0, 0x5e }, "fcmlt s10, s11, #0.0")]
    [DataRow(new byte[] { 0xb4, 0xea, 0xe0, 0x5e }, "fcmlt d20, d21, #0.0")]
    [DataRow(new byte[] { 0x6a, 0x2d, 0x4c, 0x7e }, "facge h10, h11, h12")]
    [DataRow(new byte[] { 0x6a, 0xed, 0x2c, 0x7e }, "facge s10, s11, s12")]
    [DataRow(new byte[] { 0xb4, 0xee, 0x76, 0x7e }, "facge d20, d21, d22")]
    [DataRow(new byte[] { 0x6a, 0x2d, 0xcc, 0x7e }, "facgt h10, h11, h12")]
    [DataRow(new byte[] { 0x6a, 0xed, 0xac, 0x7e }, "facgt s10, s11, s12")]
    [DataRow(new byte[] { 0xb4, 0xee, 0xf6, 0x7e }, "facgt d20, d21, d22")]
    public void neon_scalar_fp_compare_s(byte[] code, string expectedAsm) => VerifyAsm(code, expectedAsm);
}
