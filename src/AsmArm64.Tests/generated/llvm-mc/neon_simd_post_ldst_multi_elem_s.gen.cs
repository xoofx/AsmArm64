// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System;
namespace AsmArm64.Tests;

partial class McInstructionTests
{
    [TestMethod]
    [DataRow(new byte[] { 0x00, 0x70, 0xc1, 0x4c }, "")]
    [DataRow(new byte[] { 0xef, 0x75, 0xc2, 0x4c }, "")]
    [DataRow(new byte[] { 0xff, 0x7b, 0xdf, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0x7c, 0xdf, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0x70, 0xc2, 0x0c }, "")]
    [DataRow(new byte[] { 0xef, 0x75, 0xc3, 0x0c }, "")]
    [DataRow(new byte[] { 0xff, 0x7b, 0xdf, 0x0c }, "")]
    [DataRow(new byte[] { 0x00, 0x7c, 0xdf, 0x0c }, "")]
    [DataRow(new byte[] { 0x00, 0xa0, 0xc1, 0x4c }, "")]
    [DataRow(new byte[] { 0xef, 0xa5, 0xc2, 0x4c }, "")]
    [DataRow(new byte[] { 0xff, 0xab, 0xdf, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0xac, 0xdf, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0xa0, 0xc2, 0x0c }, "")]
    [DataRow(new byte[] { 0xef, 0xa5, 0xc3, 0x0c }, "")]
    [DataRow(new byte[] { 0xff, 0xab, 0xdf, 0x0c }, "")]
    [DataRow(new byte[] { 0x00, 0xac, 0xdf, 0x0c }, "")]
    [DataRow(new byte[] { 0x00, 0x60, 0xc1, 0x4c }, "")]
    [DataRow(new byte[] { 0xef, 0x65, 0xc2, 0x4c }, "")]
    [DataRow(new byte[] { 0xff, 0x6b, 0xdf, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0x6c, 0xdf, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0x60, 0xc2, 0x0c }, "")]
    [DataRow(new byte[] { 0xef, 0x65, 0xc3, 0x0c }, "")]
    [DataRow(new byte[] { 0xff, 0x6b, 0xdf, 0x0c }, "")]
    [DataRow(new byte[] { 0x00, 0x6c, 0xdf, 0x0c }, "")]
    [DataRow(new byte[] { 0x00, 0x20, 0xc1, 0x4c }, "")]
    [DataRow(new byte[] { 0xef, 0x25, 0xc2, 0x4c }, "")]
    [DataRow(new byte[] { 0xff, 0x2b, 0xdf, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0x2c, 0xdf, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0x20, 0xc3, 0x0c }, "")]
    [DataRow(new byte[] { 0xef, 0x25, 0xc4, 0x0c }, "")]
    [DataRow(new byte[] { 0xff, 0x2b, 0xdf, 0x0c }, "")]
    [DataRow(new byte[] { 0x00, 0x2c, 0xdf, 0x0c }, "")]
    [DataRow(new byte[] { 0x00, 0x80, 0xc1, 0x4c }, "")]
    [DataRow(new byte[] { 0xef, 0x85, 0xc2, 0x4c }, "")]
    [DataRow(new byte[] { 0xff, 0x8b, 0xdf, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0x8c, 0xdf, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0x80, 0xc2, 0x0c }, "")]
    [DataRow(new byte[] { 0xef, 0x85, 0xc3, 0x0c }, "")]
    [DataRow(new byte[] { 0xff, 0x8b, 0xdf, 0x0c }, "")]
    [DataRow(new byte[] { 0x00, 0x40, 0xc1, 0x4c }, "")]
    [DataRow(new byte[] { 0xef, 0x45, 0xc2, 0x4c }, "")]
    [DataRow(new byte[] { 0xff, 0x4b, 0xdf, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0x4c, 0xdf, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0x40, 0xc2, 0x0c }, "")]
    [DataRow(new byte[] { 0xef, 0x45, 0xc3, 0x0c }, "")]
    [DataRow(new byte[] { 0xff, 0x4b, 0xdf, 0x0c }, "")]
    [DataRow(new byte[] { 0x00, 0x00, 0xc1, 0x4c }, "")]
    [DataRow(new byte[] { 0xef, 0x05, 0xc2, 0x4c }, "")]
    [DataRow(new byte[] { 0xff, 0x0b, 0xdf, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0x0c, 0xdf, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0x00, 0xc3, 0x0c }, "")]
    [DataRow(new byte[] { 0xef, 0x05, 0xc4, 0x0c }, "")]
    [DataRow(new byte[] { 0xff, 0x0b, 0xdf, 0x0c }, "")]
    [DataRow(new byte[] { 0x00, 0x70, 0x81, 0x4c }, "")]
    [DataRow(new byte[] { 0xef, 0x75, 0x82, 0x4c }, "")]
    [DataRow(new byte[] { 0xff, 0x7b, 0x9f, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0x7c, 0x9f, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0x70, 0x82, 0x0c }, "")]
    [DataRow(new byte[] { 0xef, 0x75, 0x83, 0x0c }, "")]
    [DataRow(new byte[] { 0xff, 0x7b, 0x9f, 0x0c }, "")]
    [DataRow(new byte[] { 0x00, 0x7c, 0x9f, 0x0c }, "")]
    [DataRow(new byte[] { 0x00, 0xa0, 0x81, 0x4c }, "")]
    [DataRow(new byte[] { 0xef, 0xa5, 0x82, 0x4c }, "")]
    [DataRow(new byte[] { 0xff, 0xab, 0x9f, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0xac, 0x9f, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0xa0, 0x82, 0x0c }, "")]
    [DataRow(new byte[] { 0xef, 0xa5, 0x83, 0x0c }, "")]
    [DataRow(new byte[] { 0xff, 0xab, 0x9f, 0x0c }, "")]
    [DataRow(new byte[] { 0x00, 0xac, 0x9f, 0x0c }, "")]
    [DataRow(new byte[] { 0x00, 0x60, 0x81, 0x4c }, "")]
    [DataRow(new byte[] { 0xef, 0x65, 0x82, 0x4c }, "")]
    [DataRow(new byte[] { 0xff, 0x6b, 0x9f, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0x6c, 0x9f, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0x60, 0x82, 0x0c }, "")]
    [DataRow(new byte[] { 0xef, 0x65, 0x83, 0x0c }, "")]
    [DataRow(new byte[] { 0xff, 0x6b, 0x9f, 0x0c }, "")]
    [DataRow(new byte[] { 0x00, 0x6c, 0x9f, 0x0c }, "")]
    [DataRow(new byte[] { 0x00, 0x20, 0x81, 0x4c }, "")]
    [DataRow(new byte[] { 0xef, 0x25, 0x82, 0x4c }, "")]
    [DataRow(new byte[] { 0xff, 0x2b, 0x9f, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0x2c, 0x9f, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0x20, 0x83, 0x0c }, "")]
    [DataRow(new byte[] { 0xef, 0x25, 0x84, 0x0c }, "")]
    [DataRow(new byte[] { 0xff, 0x2b, 0x9f, 0x0c }, "")]
    [DataRow(new byte[] { 0x00, 0x2c, 0x9f, 0x0c }, "")]
    [DataRow(new byte[] { 0x00, 0x80, 0x81, 0x4c }, "")]
    [DataRow(new byte[] { 0xef, 0x85, 0x82, 0x4c }, "")]
    [DataRow(new byte[] { 0xff, 0x8b, 0x9f, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0x8c, 0x9f, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0x80, 0x82, 0x0c }, "")]
    [DataRow(new byte[] { 0xef, 0x85, 0x83, 0x0c }, "")]
    [DataRow(new byte[] { 0xff, 0x8b, 0x9f, 0x0c }, "")]
    [DataRow(new byte[] { 0x00, 0x40, 0x81, 0x4c }, "")]
    [DataRow(new byte[] { 0xef, 0x45, 0x82, 0x4c }, "")]
    [DataRow(new byte[] { 0xff, 0x4b, 0x9f, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0x4c, 0x9f, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0x40, 0x82, 0x0c }, "")]
    [DataRow(new byte[] { 0xef, 0x45, 0x83, 0x0c }, "")]
    [DataRow(new byte[] { 0xff, 0x4b, 0x9f, 0x0c }, "")]
    [DataRow(new byte[] { 0x00, 0x00, 0x81, 0x4c }, "")]
    [DataRow(new byte[] { 0xef, 0x05, 0x82, 0x4c }, "")]
    [DataRow(new byte[] { 0xff, 0x0b, 0x9f, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0x0c, 0x9f, 0x4c }, "")]
    [DataRow(new byte[] { 0x00, 0x00, 0x83, 0x0c }, "")]
    [DataRow(new byte[] { 0xef, 0x05, 0x84, 0x0c }, "")]
    [DataRow(new byte[] { 0xff, 0x0b, 0x9f, 0x0c }, "")]
    public void neon_simd_post_ldst_multi_elem_s(byte[] code, string expectedAsm) => VerifyAsm(code, expectedAsm);
}
