// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System;
namespace AsmArm64.Tests;

partial class McInstructionTests
{
    [TestMethod]
    [DataRow(new byte[] { 0x04, 0xf8, 0xf8, 0x0e }, "fabs v4.4h, v0.4h")]
    [DataRow(new byte[] { 0x06, 0xf9, 0xf8, 0x4e }, "fabs v6.8h, v8.8h")]
    [DataRow(new byte[] { 0x04, 0xf8, 0xf8, 0x2e }, "fneg v4.4h, v0.4h")]
    [DataRow(new byte[] { 0x06, 0xf9, 0xf8, 0x6e }, "fneg v6.8h, v8.8h")]
    [DataRow(new byte[] { 0x04, 0x88, 0x79, 0x0e }, "frintn v4.4h, v0.4h")]
    [DataRow(new byte[] { 0x06, 0x89, 0x79, 0x4e }, "frintn v6.8h, v8.8h")]
    [DataRow(new byte[] { 0x04, 0x88, 0x79, 0x2e }, "frinta v4.4h, v0.4h")]
    [DataRow(new byte[] { 0x06, 0x89, 0x79, 0x6e }, "frinta v6.8h, v8.8h")]
    [DataRow(new byte[] { 0x04, 0x88, 0xf9, 0x0e }, "frintp v4.4h, v0.4h")]
    [DataRow(new byte[] { 0x06, 0x89, 0xf9, 0x4e }, "frintp v6.8h, v8.8h")]
    [DataRow(new byte[] { 0x04, 0x98, 0x79, 0x0e }, "frintm v4.4h, v0.4h")]
    [DataRow(new byte[] { 0x06, 0x99, 0x79, 0x4e }, "frintm v6.8h, v8.8h")]
    [DataRow(new byte[] { 0x04, 0x98, 0x79, 0x2e }, "frintx v4.4h, v0.4h")]
    [DataRow(new byte[] { 0x06, 0x99, 0x79, 0x6e }, "frintx v6.8h, v8.8h")]
    [DataRow(new byte[] { 0x04, 0x98, 0xf9, 0x0e }, "frintz v4.4h, v0.4h")]
    [DataRow(new byte[] { 0x06, 0x99, 0xf9, 0x4e }, "frintz v6.8h, v8.8h")]
    [DataRow(new byte[] { 0x04, 0x98, 0xf9, 0x2e }, "frinti v4.4h, v0.4h")]
    [DataRow(new byte[] { 0x06, 0x99, 0xf9, 0x6e }, "frinti v6.8h, v8.8h")]
    [DataRow(new byte[] { 0x04, 0xa8, 0x79, 0x0e }, "fcvtns v4.4h, v0.4h")]
    [DataRow(new byte[] { 0x06, 0xa9, 0x79, 0x4e }, "fcvtns v6.8h, v8.8h")]
    [DataRow(new byte[] { 0x04, 0xa8, 0x79, 0x2e }, "fcvtnu v4.4h, v0.4h")]
    [DataRow(new byte[] { 0x06, 0xa9, 0x79, 0x6e }, "fcvtnu v6.8h, v8.8h")]
    [DataRow(new byte[] { 0x04, 0xa8, 0xf9, 0x0e }, "fcvtps v4.4h, v0.4h")]
    [DataRow(new byte[] { 0x06, 0xa9, 0xf9, 0x4e }, "fcvtps v6.8h, v8.8h")]
    [DataRow(new byte[] { 0x04, 0xa8, 0xf9, 0x2e }, "fcvtpu v4.4h, v0.4h")]
    [DataRow(new byte[] { 0x06, 0xa9, 0xf9, 0x6e }, "fcvtpu v6.8h, v8.8h")]
    [DataRow(new byte[] { 0x04, 0xb8, 0x79, 0x0e }, "fcvtms v4.4h, v0.4h")]
    [DataRow(new byte[] { 0x06, 0xb9, 0x79, 0x4e }, "fcvtms v6.8h, v8.8h")]
    [DataRow(new byte[] { 0x04, 0xb8, 0x79, 0x2e }, "fcvtmu v4.4h, v0.4h")]
    [DataRow(new byte[] { 0x06, 0xb9, 0x79, 0x6e }, "fcvtmu v6.8h, v8.8h")]
    [DataRow(new byte[] { 0x04, 0xb8, 0xf9, 0x0e }, "fcvtzs v4.4h, v0.4h")]
    [DataRow(new byte[] { 0x06, 0xb9, 0xf9, 0x4e }, "fcvtzs v6.8h, v8.8h")]
    [DataRow(new byte[] { 0x04, 0xb8, 0xf9, 0x2e }, "fcvtzu v4.4h, v0.4h")]
    [DataRow(new byte[] { 0x06, 0xb9, 0xf9, 0x6e }, "fcvtzu v6.8h, v8.8h")]
    [DataRow(new byte[] { 0x04, 0xc8, 0x79, 0x0e }, "fcvtas v4.4h, v0.4h")]
    [DataRow(new byte[] { 0x06, 0xc9, 0x79, 0x4e }, "fcvtas v6.8h, v8.8h")]
    [DataRow(new byte[] { 0x04, 0xc8, 0x79, 0x2e }, "fcvtau v4.4h, v0.4h")]
    [DataRow(new byte[] { 0x06, 0xc9, 0x79, 0x6e }, "fcvtau v6.8h, v8.8h")]
    [DataRow(new byte[] { 0x04, 0xd8, 0x79, 0x0e }, "scvtf v4.4h, v0.4h")]
    [DataRow(new byte[] { 0x06, 0xd9, 0x79, 0x4e }, "scvtf v6.8h, v8.8h")]
    [DataRow(new byte[] { 0x04, 0xd8, 0x79, 0x2e }, "ucvtf v4.4h, v0.4h")]
    [DataRow(new byte[] { 0x06, 0xd9, 0x79, 0x6e }, "ucvtf v6.8h, v8.8h")]
    [DataRow(new byte[] { 0x04, 0xd8, 0xf9, 0x0e }, "frecpe v4.4h, v0.4h")]
    [DataRow(new byte[] { 0x06, 0xd9, 0xf9, 0x4e }, "frecpe v6.8h, v8.8h")]
    [DataRow(new byte[] { 0x04, 0xd8, 0xf9, 0x2e }, "frsqrte v4.4h, v0.4h")]
    [DataRow(new byte[] { 0x06, 0xd9, 0xf9, 0x6e }, "frsqrte v6.8h, v8.8h")]
    [DataRow(new byte[] { 0x04, 0xf8, 0xf9, 0x2e }, "fsqrt v4.4h, v0.4h")]
    [DataRow(new byte[] { 0x06, 0xf9, 0xf9, 0x6e }, "fsqrt v6.8h, v8.8h")]
    public void neon_simd_misc_s(byte[] code, string expectedAsm) => VerifyAsm(code, expectedAsm);
}
