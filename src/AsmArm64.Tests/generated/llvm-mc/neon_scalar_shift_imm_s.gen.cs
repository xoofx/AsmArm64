// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System;
namespace AsmArm64.Tests;

partial class McInstructionTests
{
    [TestMethod]
    [DataRow(new byte[] { 0x0f, 0x06, 0x74, 0x5f }, "sshr d15, d16, #12")]
    [DataRow(new byte[] { 0x2a, 0x06, 0x6e, 0x7f }, "ushr d10, d17, #18")]
    [DataRow(new byte[] { 0x53, 0x26, 0x79, 0x5f }, "srshr d19, d18, #7")]
    [DataRow(new byte[] { 0xf4, 0x26, 0x61, 0x7f }, "urshr d20, d23, #31")]
    [DataRow(new byte[] { 0x92, 0x15, 0x6b, 0x5f }, "ssra d18, d12, #21")]
    [DataRow(new byte[] { 0xb4, 0x15, 0x43, 0x7f }, "usra d20, d13, #61")]
    [DataRow(new byte[] { 0x6f, 0x35, 0x6d, 0x5f }, "srsra d15, d11, #19")]
    [DataRow(new byte[] { 0x52, 0x35, 0x73, 0x7f }, "ursra d18, d10, #13")]
    [DataRow(new byte[] { 0x47, 0x55, 0x4c, 0x5f }, "shl d7, d10, #12")]
    [DataRow(new byte[] { 0x6b, 0x76, 0x0f, 0x5f }, "sqshl b11, b19, #7")]
    [DataRow(new byte[] { 0x4d, 0x76, 0x1b, 0x5f }, "sqshl h13, h18, #11")]
    [DataRow(new byte[] { 0x2e, 0x76, 0x36, 0x5f }, "sqshl s14, s17, #22")]
    [DataRow(new byte[] { 0x0f, 0x76, 0x73, 0x5f }, "sqshl d15, d16, #51")]
    [DataRow(new byte[] { 0xf2, 0x75, 0x0e, 0x7f }, "uqshl b18, b15, #6")]
    [DataRow(new byte[] { 0x4b, 0x76, 0x17, 0x7f }, "uqshl h11, h18, #7")]
    [DataRow(new byte[] { 0x6e, 0x76, 0x32, 0x7f }, "uqshl s14, s19, #18")]
    [DataRow(new byte[] { 0x8f, 0x75, 0x53, 0x7f }, "uqshl d15, d12, #19")]
    [DataRow(new byte[] { 0x4f, 0x66, 0x0e, 0x7f }, "sqshlu b15, b18, #6")]
    [DataRow(new byte[] { 0x33, 0x66, 0x16, 0x7f }, "sqshlu h19, h17, #6")]
    [DataRow(new byte[] { 0xd0, 0x65, 0x39, 0x7f }, "sqshlu s16, s14, #25")]
    [DataRow(new byte[] { 0xab, 0x65, 0x60, 0x7f }, "sqshlu d11, d13, #32")]
    [DataRow(new byte[] { 0x8a, 0x45, 0x72, 0x7f }, "sri d10, d12, #14")]
    [DataRow(new byte[] { 0xca, 0x55, 0x4c, 0x7f }, "sli d10, d14, #12")]
    [DataRow(new byte[] { 0xea, 0x95, 0x0b, 0x5f }, "sqshrn b10, h15, #5")]
    [DataRow(new byte[] { 0x51, 0x95, 0x1c, 0x5f }, "sqshrn h17, s10, #4")]
    [DataRow(new byte[] { 0x52, 0x95, 0x21, 0x5f }, "sqshrn s18, d10, #31")]
    [DataRow(new byte[] { 0x4c, 0x95, 0x09, 0x7f }, "uqshrn b12, h10, #7")]
    [DataRow(new byte[] { 0xca, 0x95, 0x1b, 0x7f }, "uqshrn h10, s14, #5")]
    [DataRow(new byte[] { 0x8a, 0x95, 0x33, 0x7f }, "uqshrn s10, d12, #13")]
    [DataRow(new byte[] { 0xaa, 0x9d, 0x0e, 0x5f }, "sqrshrn b10, h13, #2")]
    [DataRow(new byte[] { 0x4f, 0x9d, 0x1a, 0x5f }, "sqrshrn h15, s10, #6")]
    [DataRow(new byte[] { 0x8f, 0x9d, 0x37, 0x5f }, "sqrshrn s15, d12, #9")]
    [DataRow(new byte[] { 0x8a, 0x9d, 0x0b, 0x7f }, "uqrshrn b10, h12, #5")]
    [DataRow(new byte[] { 0x4c, 0x9d, 0x12, 0x7f }, "uqrshrn h12, s10, #14")]
    [DataRow(new byte[] { 0x4a, 0x9d, 0x27, 0x7f }, "uqrshrn s10, d10, #25")]
    [DataRow(new byte[] { 0x4f, 0x85, 0x09, 0x7f }, "sqshrun b15, h10, #7")]
    [DataRow(new byte[] { 0xd4, 0x85, 0x1d, 0x7f }, "sqshrun h20, s14, #3")]
    [DataRow(new byte[] { 0xea, 0x85, 0x31, 0x7f }, "sqshrun s10, d15, #15")]
    [DataRow(new byte[] { 0x51, 0x8d, 0x0a, 0x7f }, "sqrshrun b17, h10, #6")]
    [DataRow(new byte[] { 0xaa, 0x8d, 0x11, 0x7f }, "sqrshrun h10, s13, #15")]
    [DataRow(new byte[] { 0x16, 0x8e, 0x21, 0x7f }, "sqrshrun s22, d16, #31")]
    public void neon_scalar_shift_imm_s(byte[] code, string expectedAsm) => VerifyAsm(code, expectedAsm);
}
