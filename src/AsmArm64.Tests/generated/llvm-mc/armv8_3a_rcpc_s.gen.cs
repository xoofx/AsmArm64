// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System;
namespace AsmArm64.Tests;

partial class McInstructionTests
{
    [TestMethod]
    [DataRow(new byte[] { 0x00, 0xc0, 0xbf, 0x38 }, "ldaprb w0, [x0]")]
    [DataRow(new byte[] { 0x20, 0xc2, 0xbf, 0x78 }, "ldaprh w0, [x17]")]
    [DataRow(new byte[] { 0x20, 0xc0, 0xbf, 0xb8 }, "ldapr w0, [x1]")]
    [DataRow(new byte[] { 0x00, 0xc0, 0xbf, 0xf8 }, "ldapr x0, [x0]")]
    [DataRow(new byte[] { 0x12, 0xc0, 0xbf, 0xb8 }, "ldapr w18, [x0]")]
    [DataRow(new byte[] { 0x0f, 0xc0, 0xbf, 0xf8 }, "ldapr x15, [x0]")]
    [DataRow(new byte[] { 0x00, 0xc0, 0xbf, 0x38 }, "ldaprb w0, [x0]")]
    [DataRow(new byte[] { 0x20, 0xc2, 0xbf, 0x78 }, "ldaprh w0, [x17]")]
    [DataRow(new byte[] { 0x20, 0xc0, 0xbf, 0xb8 }, "ldapr w0, [x1]")]
    [DataRow(new byte[] { 0x00, 0xc0, 0xbf, 0xf8 }, "ldapr x0, [x0]")]
    [DataRow(new byte[] { 0x12, 0xc0, 0xbf, 0xb8 }, "ldapr w18, [x0]")]
    [DataRow(new byte[] { 0x0f, 0xc0, 0xbf, 0xf8 }, "ldapr x15, [x0]")]
    [DataRow(new byte[] { 0x00, 0xc0, 0xbf, 0x38 }, "ldaprb w0, [x0]")]
    [DataRow(new byte[] { 0x20, 0xc2, 0xbf, 0x78 }, "ldaprh w0, [x17]")]
    [DataRow(new byte[] { 0x20, 0xc0, 0xbf, 0xb8 }, "ldapr w0, [x1]")]
    [DataRow(new byte[] { 0x00, 0xc0, 0xbf, 0xf8 }, "ldapr x0, [x0]")]
    [DataRow(new byte[] { 0x12, 0xc0, 0xbf, 0xb8 }, "ldapr w18, [x0]")]
    [DataRow(new byte[] { 0x0f, 0xc0, 0xbf, 0xf8 }, "ldapr x15, [x0]")]
    [DataRow(new byte[] { 0x00, 0xc0, 0xbf, 0x38 }, "ldaprb w0, [x0]")]
    [DataRow(new byte[] { 0x20, 0xc2, 0xbf, 0x78 }, "ldaprh w0, [x17]")]
    [DataRow(new byte[] { 0x20, 0xc0, 0xbf, 0xb8 }, "ldapr w0, [x1]")]
    [DataRow(new byte[] { 0x00, 0xc0, 0xbf, 0xf8 }, "ldapr x0, [x0]")]
    [DataRow(new byte[] { 0x12, 0xc0, 0xbf, 0xb8 }, "ldapr w18, [x0]")]
    [DataRow(new byte[] { 0x0f, 0xc0, 0xbf, 0xf8 }, "ldapr x15, [x0]")]
    [DataRow(new byte[] { 0x00, 0xc0, 0xbf, 0x38 }, "ldaprb w0, [x0]")]
    [DataRow(new byte[] { 0x20, 0xc2, 0xbf, 0x78 }, "ldaprh w0, [x17]")]
    [DataRow(new byte[] { 0x20, 0xc0, 0xbf, 0xb8 }, "ldapr w0, [x1]")]
    [DataRow(new byte[] { 0x00, 0xc0, 0xbf, 0xf8 }, "ldapr x0, [x0]")]
    [DataRow(new byte[] { 0x12, 0xc0, 0xbf, 0xb8 }, "ldapr w18, [x0]")]
    [DataRow(new byte[] { 0x0f, 0xc0, 0xbf, 0xf8 }, "ldapr x15, [x0]")]
    [DataRow(new byte[] { 0x00, 0xc0, 0xbf, 0x38 }, "ldaprb w0, [x0]")]
    [DataRow(new byte[] { 0x20, 0xc2, 0xbf, 0x78 }, "ldaprh w0, [x17]")]
    [DataRow(new byte[] { 0x20, 0xc0, 0xbf, 0xb8 }, "ldapr w0, [x1]")]
    [DataRow(new byte[] { 0x00, 0xc0, 0xbf, 0xf8 }, "ldapr x0, [x0]")]
    [DataRow(new byte[] { 0x12, 0xc0, 0xbf, 0xb8 }, "ldapr w18, [x0]")]
    [DataRow(new byte[] { 0x0f, 0xc0, 0xbf, 0xf8 }, "ldapr x15, [x0]")]
    [DataRow(new byte[] { 0x00, 0xc0, 0xbf, 0x38 }, "ldaprb w0, [x0]")]
    [DataRow(new byte[] { 0x20, 0xc2, 0xbf, 0x78 }, "ldaprh w0, [x17]")]
    [DataRow(new byte[] { 0x20, 0xc0, 0xbf, 0xb8 }, "ldapr w0, [x1]")]
    [DataRow(new byte[] { 0x00, 0xc0, 0xbf, 0xf8 }, "ldapr x0, [x0]")]
    [DataRow(new byte[] { 0x12, 0xc0, 0xbf, 0xb8 }, "ldapr w18, [x0]")]
    [DataRow(new byte[] { 0x0f, 0xc0, 0xbf, 0xf8 }, "ldapr x15, [x0]")]
    [DataRow(new byte[] { 0x00, 0xc0, 0xbf, 0x38 }, "ldaprb w0, [x0]")]
    [DataRow(new byte[] { 0x20, 0xc2, 0xbf, 0x78 }, "ldaprh w0, [x17]")]
    [DataRow(new byte[] { 0x20, 0xc0, 0xbf, 0xb8 }, "ldapr w0, [x1]")]
    [DataRow(new byte[] { 0x00, 0xc0, 0xbf, 0xf8 }, "ldapr x0, [x0]")]
    [DataRow(new byte[] { 0x12, 0xc0, 0xbf, 0xb8 }, "ldapr w18, [x0]")]
    [DataRow(new byte[] { 0x0f, 0xc0, 0xbf, 0xf8 }, "ldapr x15, [x0]")]
    [DataRow(new byte[] { 0x00, 0xc0, 0xbf, 0x38 }, "ldaprb w0, [x0]")]
    [DataRow(new byte[] { 0x20, 0xc2, 0xbf, 0x78 }, "ldaprh w0, [x17]")]
    [DataRow(new byte[] { 0x20, 0xc0, 0xbf, 0xb8 }, "ldapr w0, [x1]")]
    [DataRow(new byte[] { 0x00, 0xc0, 0xbf, 0xf8 }, "ldapr x0, [x0]")]
    [DataRow(new byte[] { 0x12, 0xc0, 0xbf, 0xb8 }, "ldapr w18, [x0]")]
    [DataRow(new byte[] { 0x0f, 0xc0, 0xbf, 0xf8 }, "ldapr x15, [x0]")]
    [DataRow(new byte[] { 0x00, 0xc0, 0xbf, 0x38 }, "ldaprb w0, [x0]")]
    [DataRow(new byte[] { 0x20, 0xc2, 0xbf, 0x78 }, "ldaprh w0, [x17]")]
    [DataRow(new byte[] { 0x20, 0xc0, 0xbf, 0xb8 }, "ldapr w0, [x1]")]
    [DataRow(new byte[] { 0x00, 0xc0, 0xbf, 0xf8 }, "ldapr x0, [x0]")]
    [DataRow(new byte[] { 0x12, 0xc0, 0xbf, 0xb8 }, "ldapr w18, [x0]")]
    [DataRow(new byte[] { 0x0f, 0xc0, 0xbf, 0xf8 }, "ldapr x15, [x0]")]
    [DataRow(new byte[] { 0x00, 0xc0, 0xbf, 0x38 }, "ldaprb w0, [x0]")]
    [DataRow(new byte[] { 0x20, 0xc2, 0xbf, 0x78 }, "ldaprh w0, [x17]")]
    [DataRow(new byte[] { 0x20, 0xc0, 0xbf, 0xb8 }, "ldapr w0, [x1]")]
    [DataRow(new byte[] { 0x00, 0xc0, 0xbf, 0xf8 }, "ldapr x0, [x0]")]
    [DataRow(new byte[] { 0x12, 0xc0, 0xbf, 0xb8 }, "ldapr w18, [x0]")]
    [DataRow(new byte[] { 0x0f, 0xc0, 0xbf, 0xf8 }, "ldapr x15, [x0]")]
    public void armv8_3a_rcpc_s(byte[] code, string expectedAsm) => VerifyAsm(code, expectedAsm);
}
