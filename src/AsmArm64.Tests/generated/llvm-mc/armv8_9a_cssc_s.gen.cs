// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System;
namespace AsmArm64.Tests;

partial class McInstructionTests
{
    [TestMethod]
    [DataRow(new byte[] { 0x20, 0x20, 0xc0, 0xda }, "abs x0, x1")]
    [DataRow(new byte[] { 0x20, 0x20, 0xc0, 0x5a }, "abs w0, w1")]
    [DataRow(new byte[] { 0x20, 0x1c, 0xc0, 0xda }, "cnt x0, x1")]
    [DataRow(new byte[] { 0x20, 0x1c, 0xc0, 0x5a }, "cnt w0, w1")]
    [DataRow(new byte[] { 0x20, 0x18, 0xc0, 0xda }, "ctz x0, x1")]
    [DataRow(new byte[] { 0x20, 0x18, 0xc0, 0x5a }, "ctz w0, w1")]
    [DataRow(new byte[] { 0x41, 0x60, 0xc3, 0x9a }, "smax x1, x2, x3")]
    [DataRow(new byte[] { 0x41, 0x0c, 0xc0, 0x91 }, "smax x1, x2, #3")]
    [DataRow(new byte[] { 0x41, 0x60, 0xc3, 0x1a }, "smax w1, w2, w3")]
    [DataRow(new byte[] { 0x41, 0x0c, 0xc0, 0x11 }, "smax w1, w2, #3")]
    [DataRow(new byte[] { 0x41, 0x68, 0xc3, 0x9a }, "smin x1, x2, x3")]
    [DataRow(new byte[] { 0x41, 0x0c, 0xc8, 0x91 }, "smin x1, x2, #3")]
    [DataRow(new byte[] { 0x41, 0x68, 0xc3, 0x1a }, "smin w1, w2, w3")]
    [DataRow(new byte[] { 0x41, 0x0c, 0xc8, 0x11 }, "smin w1, w2, #3")]
    [DataRow(new byte[] { 0x41, 0x64, 0xc3, 0x9a }, "umax x1, x2, x3")]
    [DataRow(new byte[] { 0x41, 0x0c, 0xc4, 0x91 }, "umax x1, x2, #3")]
    [DataRow(new byte[] { 0x41, 0x64, 0xc3, 0x1a }, "umax w1, w2, w3")]
    [DataRow(new byte[] { 0x41, 0x0c, 0xc4, 0x11 }, "umax w1, w2, #3")]
    [DataRow(new byte[] { 0x41, 0x6c, 0xc3, 0x9a }, "umin x1, x2, x3")]
    [DataRow(new byte[] { 0x41, 0x0c, 0xcc, 0x91 }, "umin x1, x2, #3")]
    [DataRow(new byte[] { 0x41, 0x6c, 0xc3, 0x1a }, "umin w1, w2, w3")]
    [DataRow(new byte[] { 0x41, 0x0c, 0xcc, 0x11 }, "umin w1, w2, #3")]
    [DataRow(new byte[] { 0xff, 0xff, 0xc7, 0x11 }, "umax wzr, wzr, #255")]
    [DataRow(new byte[] { 0xff, 0xff, 0xc7, 0x91 }, "umax xzr, xzr, #255")]
    [DataRow(new byte[] { 0xff, 0xff, 0xcf, 0x91 }, "umin xzr, xzr, #255")]
    [DataRow(new byte[] { 0xff, 0xff, 0xcf, 0x11 }, "umin wzr, wzr, #255")]
    [DataRow(new byte[] { 0xff, 0xff, 0xc3, 0x91 }, "smax xzr, xzr, #-1")]
    [DataRow(new byte[] { 0xff, 0xff, 0xc3, 0x11 }, "smax wzr, wzr, #-1")]
    [DataRow(new byte[] { 0xff, 0xff, 0xcb, 0x91 }, "smin xzr, xzr, #-1")]
    [DataRow(new byte[] { 0xff, 0xff, 0xcb, 0x11 }, "smin wzr, wzr, #-1")]
    public void armv8_9a_cssc_s(byte[] code, string expectedAsm) => VerifyAsm(code, expectedAsm);
}
