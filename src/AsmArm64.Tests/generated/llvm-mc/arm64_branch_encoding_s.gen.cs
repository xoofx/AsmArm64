// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System;
namespace AsmArm64.Tests;

partial class McInstructionTests
{
    [TestMethod]
    [DataRow(new byte[] { 0xc0, 0x03, 0x5f, 0xd6 }, "ret")]
    [DataRow(new byte[] { 0x20, 0x00, 0x5f, 0xd6 }, "ret x1")]
    [DataRow(new byte[] { 0xe0, 0x03, 0xbf, 0xd6 }, "drps")]
    [DataRow(new byte[] { 0xe0, 0x03, 0x9f, 0xd6 }, "eret")]
    [DataRow(new byte[] { 0xa0, 0x00, 0x1f, 0xd6 }, "br x5")]
    [DataRow(new byte[] { 0x20, 0x01, 0x3f, 0xd6 }, "blr x9")]
    [DataRow(new byte[] { 0xe3, 0xff, 0x7f, 0x54 }, "b.lo #1048572")]
    [DataRow(new byte[] { 0xff, 0xff, 0xff, 0x15 }, "b #134217724")]
    [DataRow(new byte[] { 0x00, 0x00, 0x00, 0x16 }, "b #-134217728")]
    [DataRow(new byte[] { 0xf4, 0xff, 0x7f, 0x34 }, "cbz w20, #1048572")]
    [DataRow(new byte[] { 0x02, 0x00, 0x80, 0xb5 }, "cbnz x2, #-1048576")]
    [DataRow(new byte[] { 0xe3, 0xff, 0x2b, 0x36 }, "tbz w3, #5, #32764")]
    [DataRow(new byte[] { 0x03, 0x00, 0x44, 0x37 }, "tbnz w3, #8, #-32768")]
    [DataRow(new byte[] { 0x20, 0x00, 0x20, 0xd4 }, "brk #1")]
    [DataRow(new byte[] { 0x41, 0x00, 0xa0, 0xd4 }, "dcps1 #2")]
    [DataRow(new byte[] { 0x62, 0x00, 0xa0, 0xd4 }, "dcps2 #3")]
    [DataRow(new byte[] { 0x83, 0x00, 0xa0, 0xd4 }, "dcps3 #4")]
    [DataRow(new byte[] { 0xa0, 0x00, 0x40, 0xd4 }, "hlt #5")]
    [DataRow(new byte[] { 0xc2, 0x00, 0x00, 0xd4 }, "hvc #6")]
    [DataRow(new byte[] { 0xe3, 0x00, 0x00, 0xd4 }, "smc #7")]
    [DataRow(new byte[] { 0x01, 0x01, 0x00, 0xd4 }, "svc #8")]
    [DataRow(new byte[] { 0x01, 0x00, 0xa0, 0xd4 }, "dcps1")]
    [DataRow(new byte[] { 0x02, 0x00, 0xa0, 0xd4 }, "dcps2")]
    [DataRow(new byte[] { 0x03, 0x00, 0xa0, 0xd4 }, "dcps3")]
    public void arm64_branch_encoding_s(byte[] code, string expectedAsm) => VerifyAsm(code, expectedAsm);
}
