// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System;
namespace AsmArm64.Tests;

partial class McInstructionTests
{
    [TestMethod]
    [DataRow(new byte[] { 0xe0, 0xa8, 0x3c, 0xd5 }, "mrs x0, MECIDR_EL2")]
    [DataRow(new byte[] { 0x00, 0xa8, 0x3c, 0xd5 }, "mrs x0, MECID_P0_EL2")]
    [DataRow(new byte[] { 0x20, 0xa8, 0x3c, 0xd5 }, "mrs x0, MECID_A0_EL2")]
    [DataRow(new byte[] { 0x40, 0xa8, 0x3c, 0xd5 }, "mrs x0, MECID_P1_EL2")]
    [DataRow(new byte[] { 0x60, 0xa8, 0x3c, 0xd5 }, "mrs x0, MECID_A1_EL2")]
    [DataRow(new byte[] { 0x00, 0xa9, 0x3c, 0xd5 }, "mrs x0, VMECID_P_EL2")]
    [DataRow(new byte[] { 0x20, 0xa9, 0x3c, 0xd5 }, "mrs x0, VMECID_A_EL2")]
    [DataRow(new byte[] { 0x20, 0xaa, 0x3e, 0xd5 }, "mrs x0, MECID_RL_A_EL3")]
    [DataRow(new byte[] { 0x00, 0xa8, 0x1c, 0xd5 }, "msr MECID_P0_EL2, x0")]
    [DataRow(new byte[] { 0x20, 0xa8, 0x1c, 0xd5 }, "msr MECID_A0_EL2, x0")]
    [DataRow(new byte[] { 0x40, 0xa8, 0x1c, 0xd5 }, "msr MECID_P1_EL2, x0")]
    [DataRow(new byte[] { 0x60, 0xa8, 0x1c, 0xd5 }, "msr MECID_A1_EL2, x0")]
    [DataRow(new byte[] { 0x00, 0xa9, 0x1c, 0xd5 }, "msr VMECID_P_EL2, x0")]
    [DataRow(new byte[] { 0x20, 0xa9, 0x1c, 0xd5 }, "msr VMECID_A_EL2, x0")]
    [DataRow(new byte[] { 0x20, 0xaa, 0x1e, 0xd5 }, "msr MECID_RL_A_EL3, x0")]
    [DataRow(new byte[] { 0xe0, 0x7e, 0x0c, 0xd5 }, "dc cigdpae, x0")]
    [DataRow(new byte[] { 0x00, 0x7e, 0x0c, 0xd5 }, "dc cipae, x0")]
    public void armv9_2a_mec_s(byte[] code, string expectedAsm) => VerifyAsm(code, expectedAsm);
}
