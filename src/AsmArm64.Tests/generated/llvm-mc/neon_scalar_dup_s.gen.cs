// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System;
namespace AsmArm64.Tests;

partial class McInstructionTests
{
    [TestMethod]
    [DataRow(new byte[] { 0x00, 0x04, 0x1f, 0x5e }, "mov b0, v0.b[15]")]
    [DataRow(new byte[] { 0x01, 0x04, 0x0f, 0x5e }, "mov b1, v0.b[7]")]
    [DataRow(new byte[] { 0x11, 0x04, 0x01, 0x5e }, "mov b17, v0.b[0]")]
    [DataRow(new byte[] { 0xe5, 0x07, 0x1e, 0x5e }, "mov h5, v31.h[7]")]
    [DataRow(new byte[] { 0x29, 0x04, 0x12, 0x5e }, "mov h9, v1.h[4]")]
    [DataRow(new byte[] { 0x2b, 0x06, 0x02, 0x5e }, "mov h11, v17.h[0]")]
    [DataRow(new byte[] { 0x42, 0x04, 0x1c, 0x5e }, "mov s2, v2.s[3]")]
    [DataRow(new byte[] { 0xa4, 0x06, 0x04, 0x5e }, "mov s4, v21.s[0]")]
    [DataRow(new byte[] { 0xbf, 0x06, 0x14, 0x5e }, "mov s31, v21.s[2]")]
    [DataRow(new byte[] { 0xa3, 0x04, 0x08, 0x5e }, "mov d3, v5.d[0]")]
    [DataRow(new byte[] { 0xa6, 0x04, 0x18, 0x5e }, "mov d6, v5.d[1]")]
    [DataRow(new byte[] { 0x00, 0x04, 0x1f, 0x5e }, "mov b0, v0.b[15]")]
    [DataRow(new byte[] { 0x01, 0x04, 0x0f, 0x5e }, "mov b1, v0.b[7]")]
    [DataRow(new byte[] { 0x11, 0x04, 0x01, 0x5e }, "mov b17, v0.b[0]")]
    [DataRow(new byte[] { 0xe5, 0x07, 0x1e, 0x5e }, "mov h5, v31.h[7]")]
    [DataRow(new byte[] { 0x29, 0x04, 0x12, 0x5e }, "mov h9, v1.h[4]")]
    [DataRow(new byte[] { 0x2b, 0x06, 0x02, 0x5e }, "mov h11, v17.h[0]")]
    [DataRow(new byte[] { 0x42, 0x04, 0x1c, 0x5e }, "mov s2, v2.s[3]")]
    [DataRow(new byte[] { 0xa4, 0x06, 0x04, 0x5e }, "mov s4, v21.s[0]")]
    [DataRow(new byte[] { 0xbf, 0x06, 0x14, 0x5e }, "mov s31, v21.s[2]")]
    [DataRow(new byte[] { 0xa3, 0x04, 0x08, 0x5e }, "mov d3, v5.d[0]")]
    [DataRow(new byte[] { 0xa6, 0x04, 0x18, 0x5e }, "mov d6, v5.d[1]")]
    public void neon_scalar_dup_s(byte[] code, string expectedAsm) => VerifyAsm(code, expectedAsm);
}
