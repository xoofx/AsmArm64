// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System;
namespace AsmArm64.Tests;

partial class McInstructionTests
{
    [TestMethod]
    [DataRow(new byte[] { 0x20, 0x48, 0x28, 0x4e }, "aese v0.16b, v1.16b")]
    [DataRow(new byte[] { 0x20, 0x58, 0x28, 0x4e }, "aesd v0.16b, v1.16b")]
    [DataRow(new byte[] { 0x20, 0x68, 0x28, 0x4e }, "aesmc v0.16b, v1.16b")]
    [DataRow(new byte[] { 0x20, 0x78, 0x28, 0x4e }, "aesimc v0.16b, v1.16b")]
    [DataRow(new byte[] { 0x20, 0x00, 0x02, 0x5e }, "sha1c q0, s1, v2.4s")]
    [DataRow(new byte[] { 0x20, 0x10, 0x02, 0x5e }, "sha1p q0, s1, v2.4s")]
    [DataRow(new byte[] { 0x20, 0x20, 0x02, 0x5e }, "sha1m q0, s1, v2.4s")]
    [DataRow(new byte[] { 0x20, 0x30, 0x02, 0x5e }, "sha1su0 v0.4s, v1.4s, v2.4s")]
    [DataRow(new byte[] { 0x20, 0x40, 0x02, 0x5e }, "sha256h q0, q1, v2.4s")]
    [DataRow(new byte[] { 0x20, 0x50, 0x02, 0x5e }, "sha256h2 q0, q1, v2.4s")]
    [DataRow(new byte[] { 0x20, 0x60, 0x02, 0x5e }, "sha256su1 v0.4s, v1.4s, v2.4s")]
    [DataRow(new byte[] { 0x20, 0x08, 0x28, 0x5e }, "sha1h s0, s1")]
    [DataRow(new byte[] { 0x20, 0x18, 0x28, 0x5e }, "sha1su1 v0.4s, v1.4s")]
    [DataRow(new byte[] { 0x20, 0x28, 0x28, 0x5e }, "sha256su0 v0.4s, v1.4s")]
    [DataRow(new byte[] { 0x62, 0x48, 0x28, 0x4e }, "aese v2.16b, v3.16b")]
    [DataRow(new byte[] { 0xe5, 0x58, 0x28, 0x4e }, "aesd v5.16b, v7.16b")]
    [DataRow(new byte[] { 0xab, 0x69, 0x28, 0x4e }, "aesmc v11.16b, v13.16b")]
    [DataRow(new byte[] { 0x71, 0x7a, 0x28, 0x4e }, "aesimc v17.16b, v19.16b")]
    [DataRow(new byte[] { 0xb7, 0x03, 0x03, 0x5e }, "sha1c q23, s29, v3.4s")]
    [DataRow(new byte[] { 0xee, 0x11, 0x09, 0x5e }, "sha1p q14, s15, v9.4s")]
    [DataRow(new byte[] { 0xc2, 0x20, 0x05, 0x5e }, "sha1m q2, s6, v5.4s")]
    [DataRow(new byte[] { 0xa3, 0x30, 0x09, 0x5e }, "sha1su0 v3.4s, v5.4s, v9.4s")]
    [DataRow(new byte[] { 0xe2, 0x40, 0x12, 0x5e }, "sha256h q2, q7, v18.4s")]
    [DataRow(new byte[] { 0x5c, 0x52, 0x1c, 0x5e }, "sha256h2 q28, q18, v28.4s")]
    [DataRow(new byte[] { 0xa4, 0x60, 0x09, 0x5e }, "sha256su1 v4.4s, v5.4s, v9.4s")]
    [DataRow(new byte[] { 0x1e, 0x08, 0x28, 0x5e }, "sha1h s30, s0")]
    [DataRow(new byte[] { 0xaa, 0x1a, 0x28, 0x5e }, "sha1su1 v10.4s, v21.4s")]
    [DataRow(new byte[] { 0xe2, 0x2b, 0x28, 0x5e }, "sha256su0 v2.4s, v31.4s")]
    public void arm64_crypto_s(byte[] code, string expectedAsm) => VerifyAsm(code, expectedAsm);
}
