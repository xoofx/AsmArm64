// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.System;

[TestClass]
public class Arm64InstructionFactoryTests_SYSL_System : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SYSL"/>.
    /// </summary>
    [TestMethod]
    public void Test_SYSL_rc_systeminstrs_0()
    {
        TestInst(SYSL(X0, 5, C2, C3, 5), asm => asm.SYSL(X0, 5, C2, C3, 5), Arm64InstructionId.SYSL_rc_systeminstrs, Arm64Mnemonic.SYSL, "SYSL X0, #5, C2, C3, #5");
        TestInst(SYSL(X15, 5, C2, C3, 5), asm => asm.SYSL(X15, 5, C2, C3, 5), Arm64InstructionId.SYSL_rc_systeminstrs, Arm64Mnemonic.SYSL, "SYSL X15, #5, C2, C3, #5");
        TestInst(SYSL(XZR, 5, C2, C3, 5), asm => asm.SYSL(XZR, 5, C2, C3, 5), Arm64InstructionId.SYSL_rc_systeminstrs, Arm64Mnemonic.SYSL, "SYSL XZR, #5, C2, C3, #5");
        TestInst(SYSL(X0, 5, C15, C3, 5), asm => asm.SYSL(X0, 5, C15, C3, 5), Arm64InstructionId.SYSL_rc_systeminstrs, Arm64Mnemonic.SYSL, "SYSL X0, #5, C15, C3, #5");
        TestInst(SYSL(X15, 5, C15, C3, 5), asm => asm.SYSL(X15, 5, C15, C3, 5), Arm64InstructionId.SYSL_rc_systeminstrs, Arm64Mnemonic.SYSL, "SYSL X15, #5, C15, C3, #5");
        TestInst(SYSL(XZR, 5, C15, C3, 5), asm => asm.SYSL(XZR, 5, C15, C3, 5), Arm64InstructionId.SYSL_rc_systeminstrs, Arm64Mnemonic.SYSL, "SYSL XZR, #5, C15, C3, #5");
        TestInst(SYSL(X0, 5, C2, C15, 5), asm => asm.SYSL(X0, 5, C2, C15, 5), Arm64InstructionId.SYSL_rc_systeminstrs, Arm64Mnemonic.SYSL, "SYSL X0, #5, C2, C15, #5");
        TestInst(SYSL(X15, 5, C2, C15, 5), asm => asm.SYSL(X15, 5, C2, C15, 5), Arm64InstructionId.SYSL_rc_systeminstrs, Arm64Mnemonic.SYSL, "SYSL X15, #5, C2, C15, #5");
        TestInst(SYSL(XZR, 5, C2, C15, 5), asm => asm.SYSL(XZR, 5, C2, C15, 5), Arm64InstructionId.SYSL_rc_systeminstrs, Arm64Mnemonic.SYSL, "SYSL XZR, #5, C2, C15, #5");
        TestInst(SYSL(X0, 5, C15, C15, 5), asm => asm.SYSL(X0, 5, C15, C15, 5), Arm64InstructionId.SYSL_rc_systeminstrs, Arm64Mnemonic.SYSL, "SYSL X0, #5, C15, C15, #5");
        TestInst(SYSL(X15, 5, C15, C15, 5), asm => asm.SYSL(X15, 5, C15, C15, 5), Arm64InstructionId.SYSL_rc_systeminstrs, Arm64Mnemonic.SYSL, "SYSL X15, #5, C15, C15, #5");
        TestInst(SYSL(XZR, 5, C15, C15, 5), asm => asm.SYSL(XZR, 5, C15, C15, 5), Arm64InstructionId.SYSL_rc_systeminstrs, Arm64Mnemonic.SYSL, "SYSL XZR, #5, C15, C15, #5");
    }
}
