// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_STP_General
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STP_32_ldstpair_post_0()
    {
        
        {
            var raw = STP(W0, W1, _[X3], 20);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP W0, W1, [X3], #20", asm);
        }
        
        {
            var raw = STP(W15, W1, _[X3], 20);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP W15, W1, [X3], #20", asm);
        }
        
        {
            var raw = STP(WZR, W1, _[X3], 20);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP WZR, W1, [X3], #20", asm);
        }
        
        {
            var raw = STP(W0, W16, _[X3], 20);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP W0, W16, [X3], #20", asm);
        }
        
        {
            var raw = STP(W15, W16, _[X3], 20);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP W15, W16, [X3], #20", asm);
        }
        
        {
            var raw = STP(WZR, W16, _[X3], 20);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP WZR, W16, [X3], #20", asm);
        }
        
        {
            var raw = STP(W0, WZR, _[X3], 20);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP W0, WZR, [X3], #20", asm);
        }
        
        {
            var raw = STP(W15, WZR, _[X3], 20);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP W15, WZR, [X3], #20", asm);
        }
        
        {
            var raw = STP(WZR, WZR, _[X3], 20);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP WZR, WZR, [X3], #20", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STP_64_ldstpair_post_1()
    {
        
        {
            var raw = STP(X0, X1, _[X3], 40);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP X0, X1, [X3], #40", asm);
        }
        
        {
            var raw = STP(X15, X1, _[X3], 40);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP X15, X1, [X3], #40", asm);
        }
        
        {
            var raw = STP(XZR, X1, _[X3], 40);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP XZR, X1, [X3], #40", asm);
        }
        
        {
            var raw = STP(X0, X16, _[X3], 40);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP X0, X16, [X3], #40", asm);
        }
        
        {
            var raw = STP(X15, X16, _[X3], 40);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP X15, X16, [X3], #40", asm);
        }
        
        {
            var raw = STP(XZR, X16, _[X3], 40);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP XZR, X16, [X3], #40", asm);
        }
        
        {
            var raw = STP(X0, XZR, _[X3], 40);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP X0, XZR, [X3], #40", asm);
        }
        
        {
            var raw = STP(X15, XZR, _[X3], 40);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP X15, XZR, [X3], #40", asm);
        }
        
        {
            var raw = STP(XZR, XZR, _[X3], 40);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_post, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP XZR, XZR, [X3], #40", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STP_32_ldstpair_pre_2()
    {
        
        {
            var raw = STP(W0, W1, _[X3, 20].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP W0, W1, [X3, #20]!", asm);
        }
        
        {
            var raw = STP(W15, W1, _[X3, 20].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP W15, W1, [X3, #20]!", asm);
        }
        
        {
            var raw = STP(WZR, W1, _[X3, 20].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP WZR, W1, [X3, #20]!", asm);
        }
        
        {
            var raw = STP(W0, W16, _[X3, 20].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP W0, W16, [X3, #20]!", asm);
        }
        
        {
            var raw = STP(W15, W16, _[X3, 20].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP W15, W16, [X3, #20]!", asm);
        }
        
        {
            var raw = STP(WZR, W16, _[X3, 20].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP WZR, W16, [X3, #20]!", asm);
        }
        
        {
            var raw = STP(W0, WZR, _[X3, 20].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP W0, WZR, [X3, #20]!", asm);
        }
        
        {
            var raw = STP(W15, WZR, _[X3, 20].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP W15, WZR, [X3, #20]!", asm);
        }
        
        {
            var raw = STP(WZR, WZR, _[X3, 20].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP WZR, WZR, [X3, #20]!", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STP_64_ldstpair_pre_3()
    {
        
        {
            var raw = STP(X0, X1, _[X3, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP X0, X1, [X3, #5]!", asm);
        }
        
        {
            var raw = STP(X15, X1, _[X3, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP X15, X1, [X3, #5]!", asm);
        }
        
        {
            var raw = STP(XZR, X1, _[X3, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP XZR, X1, [X3, #5]!", asm);
        }
        
        {
            var raw = STP(X0, X16, _[X3, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP X0, X16, [X3, #5]!", asm);
        }
        
        {
            var raw = STP(X15, X16, _[X3, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP X15, X16, [X3, #5]!", asm);
        }
        
        {
            var raw = STP(XZR, X16, _[X3, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP XZR, X16, [X3, #5]!", asm);
        }
        
        {
            var raw = STP(X0, XZR, _[X3, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP X0, XZR, [X3, #5]!", asm);
        }
        
        {
            var raw = STP(X15, XZR, _[X3, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP X15, XZR, [X3, #5]!", asm);
        }
        
        {
            var raw = STP(XZR, XZR, _[X3, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_pre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP XZR, XZR, [X3, #5]!", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STP_32_ldstpair_off_4()
    {
        
        {
            var raw = STP(W0, W1, _[X3, 20]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP W0, W1, [X3, #20]", asm);
        }
        
        {
            var raw = STP(W15, W1, _[X3, 20]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP W15, W1, [X3, #20]", asm);
        }
        
        {
            var raw = STP(WZR, W1, _[X3, 20]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP WZR, W1, [X3, #20]", asm);
        }
        
        {
            var raw = STP(W0, W16, _[X3, 20]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP W0, W16, [X3, #20]", asm);
        }
        
        {
            var raw = STP(W15, W16, _[X3, 20]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP W15, W16, [X3, #20]", asm);
        }
        
        {
            var raw = STP(WZR, W16, _[X3, 20]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP WZR, W16, [X3, #20]", asm);
        }
        
        {
            var raw = STP(W0, WZR, _[X3, 20]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP W0, WZR, [X3, #20]", asm);
        }
        
        {
            var raw = STP(W15, WZR, _[X3, 20]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP W15, WZR, [X3, #20]", asm);
        }
        
        {
            var raw = STP(WZR, WZR, _[X3, 20]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_32_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP WZR, WZR, [X3, #20]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STP_64_ldstpair_off_5()
    {
        
        {
            var raw = STP(X0, X1, _[X3, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP X0, X1, [X3, #5]", asm);
        }
        
        {
            var raw = STP(X15, X1, _[X3, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP X15, X1, [X3, #5]", asm);
        }
        
        {
            var raw = STP(XZR, X1, _[X3, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP XZR, X1, [X3, #5]", asm);
        }
        
        {
            var raw = STP(X0, X16, _[X3, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP X0, X16, [X3, #5]", asm);
        }
        
        {
            var raw = STP(X15, X16, _[X3, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP X15, X16, [X3, #5]", asm);
        }
        
        {
            var raw = STP(XZR, X16, _[X3, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP XZR, X16, [X3, #5]", asm);
        }
        
        {
            var raw = STP(X0, XZR, _[X3, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP X0, XZR, [X3, #5]", asm);
        }
        
        {
            var raw = STP(X15, XZR, _[X3, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP X15, XZR, [X3, #5]", asm);
        }
        
        {
            var raw = STP(XZR, XZR, _[X3, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STP_64_ldstpair_off, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STP XZR, XZR, [X3, #5]", asm);
        }
    }
}
