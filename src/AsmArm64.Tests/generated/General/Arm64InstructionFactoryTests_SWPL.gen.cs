// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_SWPL_General : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SWPL"/>.
    /// </summary>
    [TestMethod]
    public void Test_SWPL_32_memop_0()
    {
        TestInst(SWPL(W0, W1, _[X3]), asm => asm.SWPL(W0, W1, _[X3]), Arm64InstructionId.SWPL_32_memop, Arm64Mnemonic.SWPL, "SWPL W0, W1, [X3]");
        TestInst(SWPL(W15, W1, _[X3]), asm => asm.SWPL(W15, W1, _[X3]), Arm64InstructionId.SWPL_32_memop, Arm64Mnemonic.SWPL, "SWPL W15, W1, [X3]");
        TestInst(SWPL(WZR, W1, _[X3]), asm => asm.SWPL(WZR, W1, _[X3]), Arm64InstructionId.SWPL_32_memop, Arm64Mnemonic.SWPL, "SWPL WZR, W1, [X3]");
        TestInst(SWPL(W0, W16, _[X3]), asm => asm.SWPL(W0, W16, _[X3]), Arm64InstructionId.SWPL_32_memop, Arm64Mnemonic.SWPL, "SWPL W0, W16, [X3]");
        TestInst(SWPL(W15, W16, _[X3]), asm => asm.SWPL(W15, W16, _[X3]), Arm64InstructionId.SWPL_32_memop, Arm64Mnemonic.SWPL, "SWPL W15, W16, [X3]");
        TestInst(SWPL(WZR, W16, _[X3]), asm => asm.SWPL(WZR, W16, _[X3]), Arm64InstructionId.SWPL_32_memop, Arm64Mnemonic.SWPL, "SWPL WZR, W16, [X3]");
        TestInst(SWPL(W0, WZR, _[X3]), asm => asm.SWPL(W0, WZR, _[X3]), Arm64InstructionId.SWPL_32_memop, Arm64Mnemonic.SWPL, "SWPL W0, WZR, [X3]");
        TestInst(SWPL(W15, WZR, _[X3]), asm => asm.SWPL(W15, WZR, _[X3]), Arm64InstructionId.SWPL_32_memop, Arm64Mnemonic.SWPL, "SWPL W15, WZR, [X3]");
        TestInst(SWPL(WZR, WZR, _[X3]), asm => asm.SWPL(WZR, WZR, _[X3]), Arm64InstructionId.SWPL_32_memop, Arm64Mnemonic.SWPL, "SWPL WZR, WZR, [X3]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SWPL"/>.
    /// </summary>
    [TestMethod]
    public void Test_SWPL_64_memop_1()
    {
        TestInst(SWPL(X0, X1, _[X3]), asm => asm.SWPL(X0, X1, _[X3]), Arm64InstructionId.SWPL_64_memop, Arm64Mnemonic.SWPL, "SWPL X0, X1, [X3]");
        TestInst(SWPL(X15, X1, _[X3]), asm => asm.SWPL(X15, X1, _[X3]), Arm64InstructionId.SWPL_64_memop, Arm64Mnemonic.SWPL, "SWPL X15, X1, [X3]");
        TestInst(SWPL(XZR, X1, _[X3]), asm => asm.SWPL(XZR, X1, _[X3]), Arm64InstructionId.SWPL_64_memop, Arm64Mnemonic.SWPL, "SWPL XZR, X1, [X3]");
        TestInst(SWPL(X0, X16, _[X3]), asm => asm.SWPL(X0, X16, _[X3]), Arm64InstructionId.SWPL_64_memop, Arm64Mnemonic.SWPL, "SWPL X0, X16, [X3]");
        TestInst(SWPL(X15, X16, _[X3]), asm => asm.SWPL(X15, X16, _[X3]), Arm64InstructionId.SWPL_64_memop, Arm64Mnemonic.SWPL, "SWPL X15, X16, [X3]");
        TestInst(SWPL(XZR, X16, _[X3]), asm => asm.SWPL(XZR, X16, _[X3]), Arm64InstructionId.SWPL_64_memop, Arm64Mnemonic.SWPL, "SWPL XZR, X16, [X3]");
        TestInst(SWPL(X0, XZR, _[X3]), asm => asm.SWPL(X0, XZR, _[X3]), Arm64InstructionId.SWPL_64_memop, Arm64Mnemonic.SWPL, "SWPL X0, XZR, [X3]");
        TestInst(SWPL(X15, XZR, _[X3]), asm => asm.SWPL(X15, XZR, _[X3]), Arm64InstructionId.SWPL_64_memop, Arm64Mnemonic.SWPL, "SWPL X15, XZR, [X3]");
        TestInst(SWPL(XZR, XZR, _[X3]), asm => asm.SWPL(XZR, XZR, _[X3]), Arm64InstructionId.SWPL_64_memop, Arm64Mnemonic.SWPL, "SWPL XZR, XZR, [X3]");
    }
}
