// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_ANDS_General : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ANDS"/>.
    /// </summary>
    [TestMethod]
    public void Test_ANDS_32s_log_imm_0()
    {
        TestInst(ANDS(W0, W1, 0x3030303), asm => asm.ANDS(W0, W1, 0x3030303), Arm64InstructionId.ANDS_32s_log_imm, Arm64Mnemonic.ANDS, "ANDS W0, W1, #0x3030303");
        TestInst(ANDS(W15, W1, 0x3030303), asm => asm.ANDS(W15, W1, 0x3030303), Arm64InstructionId.ANDS_32s_log_imm, Arm64Mnemonic.ANDS, "ANDS W15, W1, #0x3030303");
        TestInst(ANDS(WZR, W1, 0x3030303), asm => asm.ANDS(WZR, W1, 0x3030303), Arm64InstructionId.TST_ands_32s_log_imm, Arm64Mnemonic.TST, "TST W1, #0x3030303");
        TestInst(ANDS(W0, W16, 0x3030303), asm => asm.ANDS(W0, W16, 0x3030303), Arm64InstructionId.ANDS_32s_log_imm, Arm64Mnemonic.ANDS, "ANDS W0, W16, #0x3030303");
        TestInst(ANDS(W15, W16, 0x3030303), asm => asm.ANDS(W15, W16, 0x3030303), Arm64InstructionId.ANDS_32s_log_imm, Arm64Mnemonic.ANDS, "ANDS W15, W16, #0x3030303");
        TestInst(ANDS(WZR, W16, 0x3030303), asm => asm.ANDS(WZR, W16, 0x3030303), Arm64InstructionId.TST_ands_32s_log_imm, Arm64Mnemonic.TST, "TST W16, #0x3030303");
        TestInst(ANDS(W0, WZR, 0x3030303), asm => asm.ANDS(W0, WZR, 0x3030303), Arm64InstructionId.ANDS_32s_log_imm, Arm64Mnemonic.ANDS, "ANDS W0, WZR, #0x3030303");
        TestInst(ANDS(W15, WZR, 0x3030303), asm => asm.ANDS(W15, WZR, 0x3030303), Arm64InstructionId.ANDS_32s_log_imm, Arm64Mnemonic.ANDS, "ANDS W15, WZR, #0x3030303");
        TestInst(ANDS(WZR, WZR, 0x3030303), asm => asm.ANDS(WZR, WZR, 0x3030303), Arm64InstructionId.TST_ands_32s_log_imm, Arm64Mnemonic.TST, "TST WZR, #0x3030303");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ANDS"/>.
    /// </summary>
    [TestMethod]
    public void Test_ANDS_64s_log_imm_1()
    {
        TestInst(ANDS(X0, X1, 0x303030303030303UL), asm => asm.ANDS(X0, X1, 0x303030303030303UL), Arm64InstructionId.ANDS_64s_log_imm, Arm64Mnemonic.ANDS, "ANDS X0, X1, #0x303030303030303");
        TestInst(ANDS(X15, X1, 0x303030303030303UL), asm => asm.ANDS(X15, X1, 0x303030303030303UL), Arm64InstructionId.ANDS_64s_log_imm, Arm64Mnemonic.ANDS, "ANDS X15, X1, #0x303030303030303");
        TestInst(ANDS(XZR, X1, 0x303030303030303UL), asm => asm.ANDS(XZR, X1, 0x303030303030303UL), Arm64InstructionId.TST_ands_64s_log_imm, Arm64Mnemonic.TST, "TST X1, #0x303030303030303");
        TestInst(ANDS(X0, X16, 0x303030303030303UL), asm => asm.ANDS(X0, X16, 0x303030303030303UL), Arm64InstructionId.ANDS_64s_log_imm, Arm64Mnemonic.ANDS, "ANDS X0, X16, #0x303030303030303");
        TestInst(ANDS(X15, X16, 0x303030303030303UL), asm => asm.ANDS(X15, X16, 0x303030303030303UL), Arm64InstructionId.ANDS_64s_log_imm, Arm64Mnemonic.ANDS, "ANDS X15, X16, #0x303030303030303");
        TestInst(ANDS(XZR, X16, 0x303030303030303UL), asm => asm.ANDS(XZR, X16, 0x303030303030303UL), Arm64InstructionId.TST_ands_64s_log_imm, Arm64Mnemonic.TST, "TST X16, #0x303030303030303");
        TestInst(ANDS(X0, XZR, 0x303030303030303UL), asm => asm.ANDS(X0, XZR, 0x303030303030303UL), Arm64InstructionId.ANDS_64s_log_imm, Arm64Mnemonic.ANDS, "ANDS X0, XZR, #0x303030303030303");
        TestInst(ANDS(X15, XZR, 0x303030303030303UL), asm => asm.ANDS(X15, XZR, 0x303030303030303UL), Arm64InstructionId.ANDS_64s_log_imm, Arm64Mnemonic.ANDS, "ANDS X15, XZR, #0x303030303030303");
        TestInst(ANDS(XZR, XZR, 0x303030303030303UL), asm => asm.ANDS(XZR, XZR, 0x303030303030303UL), Arm64InstructionId.TST_ands_64s_log_imm, Arm64Mnemonic.TST, "TST XZR, #0x303030303030303");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ANDS"/>.
    /// </summary>
    [TestMethod]
    public void Test_ANDS_32_log_shift_2()
    {
        TestInst(ANDS(W0, W1, W2, _LSL, 0), asm => asm.ANDS(W0, W1, W2, _LSL, 0), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W1, W2");
        TestInst(ANDS(W15, W1, W2, _LSL, 0), asm => asm.ANDS(W15, W1, W2, _LSL, 0), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W1, W2");
        TestInst(ANDS(WZR, W1, W2, _LSL, 0), asm => asm.ANDS(WZR, W1, W2, _LSL, 0), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W1, W2");
        TestInst(ANDS(W0, W16, W2, _LSL, 0), asm => asm.ANDS(W0, W16, W2, _LSL, 0), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W16, W2");
        TestInst(ANDS(W15, W16, W2, _LSL, 0), asm => asm.ANDS(W15, W16, W2, _LSL, 0), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W16, W2");
        TestInst(ANDS(WZR, W16, W2, _LSL, 0), asm => asm.ANDS(WZR, W16, W2, _LSL, 0), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W16, W2");
        TestInst(ANDS(W0, WZR, W2, _LSL, 0), asm => asm.ANDS(W0, WZR, W2, _LSL, 0), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, WZR, W2");
        TestInst(ANDS(W15, WZR, W2, _LSL, 0), asm => asm.ANDS(W15, WZR, W2, _LSL, 0), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, WZR, W2");
        TestInst(ANDS(WZR, WZR, W2, _LSL, 0), asm => asm.ANDS(WZR, WZR, W2, _LSL, 0), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST WZR, W2");
        TestInst(ANDS(W0, W1, W17, _LSL, 0), asm => asm.ANDS(W0, W1, W17, _LSL, 0), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W1, W17");
        TestInst(ANDS(W15, W1, W17, _LSL, 0), asm => asm.ANDS(W15, W1, W17, _LSL, 0), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W1, W17");
        TestInst(ANDS(WZR, W1, W17, _LSL, 0), asm => asm.ANDS(WZR, W1, W17, _LSL, 0), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W1, W17");
        TestInst(ANDS(W0, W16, W17, _LSL, 0), asm => asm.ANDS(W0, W16, W17, _LSL, 0), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W16, W17");
        TestInst(ANDS(W15, W16, W17, _LSL, 0), asm => asm.ANDS(W15, W16, W17, _LSL, 0), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W16, W17");
        TestInst(ANDS(WZR, W16, W17, _LSL, 0), asm => asm.ANDS(WZR, W16, W17, _LSL, 0), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W16, W17");
        TestInst(ANDS(W0, WZR, W17, _LSL, 0), asm => asm.ANDS(W0, WZR, W17, _LSL, 0), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, WZR, W17");
        TestInst(ANDS(W15, WZR, W17, _LSL, 0), asm => asm.ANDS(W15, WZR, W17, _LSL, 0), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, WZR, W17");
        TestInst(ANDS(WZR, WZR, W17, _LSL, 0), asm => asm.ANDS(WZR, WZR, W17, _LSL, 0), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST WZR, W17");
        TestInst(ANDS(W0, W1, WZR, _LSL, 0), asm => asm.ANDS(W0, W1, WZR, _LSL, 0), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W1, WZR");
        TestInst(ANDS(W15, W1, WZR, _LSL, 0), asm => asm.ANDS(W15, W1, WZR, _LSL, 0), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W1, WZR");
        TestInst(ANDS(WZR, W1, WZR, _LSL, 0), asm => asm.ANDS(WZR, W1, WZR, _LSL, 0), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W1, WZR");
        TestInst(ANDS(W0, W16, WZR, _LSL, 0), asm => asm.ANDS(W0, W16, WZR, _LSL, 0), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W16, WZR");
        TestInst(ANDS(W15, W16, WZR, _LSL, 0), asm => asm.ANDS(W15, W16, WZR, _LSL, 0), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W16, WZR");
        TestInst(ANDS(WZR, W16, WZR, _LSL, 0), asm => asm.ANDS(WZR, W16, WZR, _LSL, 0), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W16, WZR");
        TestInst(ANDS(W0, WZR, WZR, _LSL, 0), asm => asm.ANDS(W0, WZR, WZR, _LSL, 0), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, WZR, WZR");
        TestInst(ANDS(W15, WZR, WZR, _LSL, 0), asm => asm.ANDS(W15, WZR, WZR, _LSL, 0), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, WZR, WZR");
        TestInst(ANDS(WZR, WZR, WZR, _LSL, 0), asm => asm.ANDS(WZR, WZR, WZR, _LSL, 0), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST WZR, WZR");
        TestInst(ANDS(W0, W1, W2, _LSL, 1), asm => asm.ANDS(W0, W1, W2, _LSL, 1), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W1, W2, LSL #1");
        TestInst(ANDS(W15, W1, W2, _LSL, 1), asm => asm.ANDS(W15, W1, W2, _LSL, 1), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W1, W2, LSL #1");
        TestInst(ANDS(WZR, W1, W2, _LSL, 1), asm => asm.ANDS(WZR, W1, W2, _LSL, 1), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W1, W2, LSL #1");
        TestInst(ANDS(W0, W16, W2, _LSL, 1), asm => asm.ANDS(W0, W16, W2, _LSL, 1), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W16, W2, LSL #1");
        TestInst(ANDS(W15, W16, W2, _LSL, 1), asm => asm.ANDS(W15, W16, W2, _LSL, 1), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W16, W2, LSL #1");
        TestInst(ANDS(WZR, W16, W2, _LSL, 1), asm => asm.ANDS(WZR, W16, W2, _LSL, 1), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W16, W2, LSL #1");
        TestInst(ANDS(W0, WZR, W2, _LSL, 1), asm => asm.ANDS(W0, WZR, W2, _LSL, 1), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, WZR, W2, LSL #1");
        TestInst(ANDS(W15, WZR, W2, _LSL, 1), asm => asm.ANDS(W15, WZR, W2, _LSL, 1), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, WZR, W2, LSL #1");
        TestInst(ANDS(WZR, WZR, W2, _LSL, 1), asm => asm.ANDS(WZR, WZR, W2, _LSL, 1), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST WZR, W2, LSL #1");
        TestInst(ANDS(W0, W1, W17, _LSL, 1), asm => asm.ANDS(W0, W1, W17, _LSL, 1), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W1, W17, LSL #1");
        TestInst(ANDS(W15, W1, W17, _LSL, 1), asm => asm.ANDS(W15, W1, W17, _LSL, 1), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W1, W17, LSL #1");
        TestInst(ANDS(WZR, W1, W17, _LSL, 1), asm => asm.ANDS(WZR, W1, W17, _LSL, 1), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W1, W17, LSL #1");
        TestInst(ANDS(W0, W16, W17, _LSL, 1), asm => asm.ANDS(W0, W16, W17, _LSL, 1), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W16, W17, LSL #1");
        TestInst(ANDS(W15, W16, W17, _LSL, 1), asm => asm.ANDS(W15, W16, W17, _LSL, 1), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W16, W17, LSL #1");
        TestInst(ANDS(WZR, W16, W17, _LSL, 1), asm => asm.ANDS(WZR, W16, W17, _LSL, 1), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W16, W17, LSL #1");
        TestInst(ANDS(W0, WZR, W17, _LSL, 1), asm => asm.ANDS(W0, WZR, W17, _LSL, 1), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, WZR, W17, LSL #1");
        TestInst(ANDS(W15, WZR, W17, _LSL, 1), asm => asm.ANDS(W15, WZR, W17, _LSL, 1), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, WZR, W17, LSL #1");
        TestInst(ANDS(WZR, WZR, W17, _LSL, 1), asm => asm.ANDS(WZR, WZR, W17, _LSL, 1), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST WZR, W17, LSL #1");
        TestInst(ANDS(W0, W1, WZR, _LSL, 1), asm => asm.ANDS(W0, W1, WZR, _LSL, 1), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W1, WZR, LSL #1");
        TestInst(ANDS(W15, W1, WZR, _LSL, 1), asm => asm.ANDS(W15, W1, WZR, _LSL, 1), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W1, WZR, LSL #1");
        TestInst(ANDS(WZR, W1, WZR, _LSL, 1), asm => asm.ANDS(WZR, W1, WZR, _LSL, 1), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W1, WZR, LSL #1");
        TestInst(ANDS(W0, W16, WZR, _LSL, 1), asm => asm.ANDS(W0, W16, WZR, _LSL, 1), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W16, WZR, LSL #1");
        TestInst(ANDS(W15, W16, WZR, _LSL, 1), asm => asm.ANDS(W15, W16, WZR, _LSL, 1), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W16, WZR, LSL #1");
        TestInst(ANDS(WZR, W16, WZR, _LSL, 1), asm => asm.ANDS(WZR, W16, WZR, _LSL, 1), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W16, WZR, LSL #1");
        TestInst(ANDS(W0, WZR, WZR, _LSL, 1), asm => asm.ANDS(W0, WZR, WZR, _LSL, 1), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, WZR, WZR, LSL #1");
        TestInst(ANDS(W15, WZR, WZR, _LSL, 1), asm => asm.ANDS(W15, WZR, WZR, _LSL, 1), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, WZR, WZR, LSL #1");
        TestInst(ANDS(WZR, WZR, WZR, _LSL, 1), asm => asm.ANDS(WZR, WZR, WZR, _LSL, 1), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST WZR, WZR, LSL #1");
        TestInst(ANDS(W0, W1, W2, _LSR, 10), asm => asm.ANDS(W0, W1, W2, _LSR, 10), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W1, W2, LSR #10");
        TestInst(ANDS(W15, W1, W2, _LSR, 10), asm => asm.ANDS(W15, W1, W2, _LSR, 10), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W1, W2, LSR #10");
        TestInst(ANDS(WZR, W1, W2, _LSR, 10), asm => asm.ANDS(WZR, W1, W2, _LSR, 10), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W1, W2, LSR #10");
        TestInst(ANDS(W0, W16, W2, _LSR, 10), asm => asm.ANDS(W0, W16, W2, _LSR, 10), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W16, W2, LSR #10");
        TestInst(ANDS(W15, W16, W2, _LSR, 10), asm => asm.ANDS(W15, W16, W2, _LSR, 10), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W16, W2, LSR #10");
        TestInst(ANDS(WZR, W16, W2, _LSR, 10), asm => asm.ANDS(WZR, W16, W2, _LSR, 10), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W16, W2, LSR #10");
        TestInst(ANDS(W0, WZR, W2, _LSR, 10), asm => asm.ANDS(W0, WZR, W2, _LSR, 10), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, WZR, W2, LSR #10");
        TestInst(ANDS(W15, WZR, W2, _LSR, 10), asm => asm.ANDS(W15, WZR, W2, _LSR, 10), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, WZR, W2, LSR #10");
        TestInst(ANDS(WZR, WZR, W2, _LSR, 10), asm => asm.ANDS(WZR, WZR, W2, _LSR, 10), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST WZR, W2, LSR #10");
        TestInst(ANDS(W0, W1, W17, _LSR, 10), asm => asm.ANDS(W0, W1, W17, _LSR, 10), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W1, W17, LSR #10");
        TestInst(ANDS(W15, W1, W17, _LSR, 10), asm => asm.ANDS(W15, W1, W17, _LSR, 10), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W1, W17, LSR #10");
        TestInst(ANDS(WZR, W1, W17, _LSR, 10), asm => asm.ANDS(WZR, W1, W17, _LSR, 10), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W1, W17, LSR #10");
        TestInst(ANDS(W0, W16, W17, _LSR, 10), asm => asm.ANDS(W0, W16, W17, _LSR, 10), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W16, W17, LSR #10");
        TestInst(ANDS(W15, W16, W17, _LSR, 10), asm => asm.ANDS(W15, W16, W17, _LSR, 10), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W16, W17, LSR #10");
        TestInst(ANDS(WZR, W16, W17, _LSR, 10), asm => asm.ANDS(WZR, W16, W17, _LSR, 10), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W16, W17, LSR #10");
        TestInst(ANDS(W0, WZR, W17, _LSR, 10), asm => asm.ANDS(W0, WZR, W17, _LSR, 10), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, WZR, W17, LSR #10");
        TestInst(ANDS(W15, WZR, W17, _LSR, 10), asm => asm.ANDS(W15, WZR, W17, _LSR, 10), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, WZR, W17, LSR #10");
        TestInst(ANDS(WZR, WZR, W17, _LSR, 10), asm => asm.ANDS(WZR, WZR, W17, _LSR, 10), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST WZR, W17, LSR #10");
        TestInst(ANDS(W0, W1, WZR, _LSR, 10), asm => asm.ANDS(W0, W1, WZR, _LSR, 10), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W1, WZR, LSR #10");
        TestInst(ANDS(W15, W1, WZR, _LSR, 10), asm => asm.ANDS(W15, W1, WZR, _LSR, 10), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W1, WZR, LSR #10");
        TestInst(ANDS(WZR, W1, WZR, _LSR, 10), asm => asm.ANDS(WZR, W1, WZR, _LSR, 10), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W1, WZR, LSR #10");
        TestInst(ANDS(W0, W16, WZR, _LSR, 10), asm => asm.ANDS(W0, W16, WZR, _LSR, 10), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W16, WZR, LSR #10");
        TestInst(ANDS(W15, W16, WZR, _LSR, 10), asm => asm.ANDS(W15, W16, WZR, _LSR, 10), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W16, WZR, LSR #10");
        TestInst(ANDS(WZR, W16, WZR, _LSR, 10), asm => asm.ANDS(WZR, W16, WZR, _LSR, 10), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W16, WZR, LSR #10");
        TestInst(ANDS(W0, WZR, WZR, _LSR, 10), asm => asm.ANDS(W0, WZR, WZR, _LSR, 10), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, WZR, WZR, LSR #10");
        TestInst(ANDS(W15, WZR, WZR, _LSR, 10), asm => asm.ANDS(W15, WZR, WZR, _LSR, 10), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, WZR, WZR, LSR #10");
        TestInst(ANDS(WZR, WZR, WZR, _LSR, 10), asm => asm.ANDS(WZR, WZR, WZR, _LSR, 10), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST WZR, WZR, LSR #10");
        TestInst(ANDS(W0, W1, W2, _ASR, 12), asm => asm.ANDS(W0, W1, W2, _ASR, 12), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W1, W2, ASR #12");
        TestInst(ANDS(W15, W1, W2, _ASR, 12), asm => asm.ANDS(W15, W1, W2, _ASR, 12), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W1, W2, ASR #12");
        TestInst(ANDS(WZR, W1, W2, _ASR, 12), asm => asm.ANDS(WZR, W1, W2, _ASR, 12), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W1, W2, ASR #12");
        TestInst(ANDS(W0, W16, W2, _ASR, 12), asm => asm.ANDS(W0, W16, W2, _ASR, 12), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W16, W2, ASR #12");
        TestInst(ANDS(W15, W16, W2, _ASR, 12), asm => asm.ANDS(W15, W16, W2, _ASR, 12), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W16, W2, ASR #12");
        TestInst(ANDS(WZR, W16, W2, _ASR, 12), asm => asm.ANDS(WZR, W16, W2, _ASR, 12), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W16, W2, ASR #12");
        TestInst(ANDS(W0, WZR, W2, _ASR, 12), asm => asm.ANDS(W0, WZR, W2, _ASR, 12), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, WZR, W2, ASR #12");
        TestInst(ANDS(W15, WZR, W2, _ASR, 12), asm => asm.ANDS(W15, WZR, W2, _ASR, 12), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, WZR, W2, ASR #12");
        TestInst(ANDS(WZR, WZR, W2, _ASR, 12), asm => asm.ANDS(WZR, WZR, W2, _ASR, 12), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST WZR, W2, ASR #12");
        TestInst(ANDS(W0, W1, W17, _ASR, 12), asm => asm.ANDS(W0, W1, W17, _ASR, 12), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W1, W17, ASR #12");
        TestInst(ANDS(W15, W1, W17, _ASR, 12), asm => asm.ANDS(W15, W1, W17, _ASR, 12), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W1, W17, ASR #12");
        TestInst(ANDS(WZR, W1, W17, _ASR, 12), asm => asm.ANDS(WZR, W1, W17, _ASR, 12), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W1, W17, ASR #12");
        TestInst(ANDS(W0, W16, W17, _ASR, 12), asm => asm.ANDS(W0, W16, W17, _ASR, 12), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W16, W17, ASR #12");
        TestInst(ANDS(W15, W16, W17, _ASR, 12), asm => asm.ANDS(W15, W16, W17, _ASR, 12), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W16, W17, ASR #12");
        TestInst(ANDS(WZR, W16, W17, _ASR, 12), asm => asm.ANDS(WZR, W16, W17, _ASR, 12), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W16, W17, ASR #12");
        TestInst(ANDS(W0, WZR, W17, _ASR, 12), asm => asm.ANDS(W0, WZR, W17, _ASR, 12), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, WZR, W17, ASR #12");
        TestInst(ANDS(W15, WZR, W17, _ASR, 12), asm => asm.ANDS(W15, WZR, W17, _ASR, 12), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, WZR, W17, ASR #12");
        TestInst(ANDS(WZR, WZR, W17, _ASR, 12), asm => asm.ANDS(WZR, WZR, W17, _ASR, 12), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST WZR, W17, ASR #12");
        TestInst(ANDS(W0, W1, WZR, _ASR, 12), asm => asm.ANDS(W0, W1, WZR, _ASR, 12), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W1, WZR, ASR #12");
        TestInst(ANDS(W15, W1, WZR, _ASR, 12), asm => asm.ANDS(W15, W1, WZR, _ASR, 12), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W1, WZR, ASR #12");
        TestInst(ANDS(WZR, W1, WZR, _ASR, 12), asm => asm.ANDS(WZR, W1, WZR, _ASR, 12), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W1, WZR, ASR #12");
        TestInst(ANDS(W0, W16, WZR, _ASR, 12), asm => asm.ANDS(W0, W16, WZR, _ASR, 12), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W16, WZR, ASR #12");
        TestInst(ANDS(W15, W16, WZR, _ASR, 12), asm => asm.ANDS(W15, W16, WZR, _ASR, 12), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W16, WZR, ASR #12");
        TestInst(ANDS(WZR, W16, WZR, _ASR, 12), asm => asm.ANDS(WZR, W16, WZR, _ASR, 12), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W16, WZR, ASR #12");
        TestInst(ANDS(W0, WZR, WZR, _ASR, 12), asm => asm.ANDS(W0, WZR, WZR, _ASR, 12), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, WZR, WZR, ASR #12");
        TestInst(ANDS(W15, WZR, WZR, _ASR, 12), asm => asm.ANDS(W15, WZR, WZR, _ASR, 12), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, WZR, WZR, ASR #12");
        TestInst(ANDS(WZR, WZR, WZR, _ASR, 12), asm => asm.ANDS(WZR, WZR, WZR, _ASR, 12), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST WZR, WZR, ASR #12");
        TestInst(ANDS(W0, W1, W2, _ROR, 7), asm => asm.ANDS(W0, W1, W2, _ROR, 7), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W1, W2, ROR #7");
        TestInst(ANDS(W15, W1, W2, _ROR, 7), asm => asm.ANDS(W15, W1, W2, _ROR, 7), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W1, W2, ROR #7");
        TestInst(ANDS(WZR, W1, W2, _ROR, 7), asm => asm.ANDS(WZR, W1, W2, _ROR, 7), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W1, W2, ROR #7");
        TestInst(ANDS(W0, W16, W2, _ROR, 7), asm => asm.ANDS(W0, W16, W2, _ROR, 7), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W16, W2, ROR #7");
        TestInst(ANDS(W15, W16, W2, _ROR, 7), asm => asm.ANDS(W15, W16, W2, _ROR, 7), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W16, W2, ROR #7");
        TestInst(ANDS(WZR, W16, W2, _ROR, 7), asm => asm.ANDS(WZR, W16, W2, _ROR, 7), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W16, W2, ROR #7");
        TestInst(ANDS(W0, WZR, W2, _ROR, 7), asm => asm.ANDS(W0, WZR, W2, _ROR, 7), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, WZR, W2, ROR #7");
        TestInst(ANDS(W15, WZR, W2, _ROR, 7), asm => asm.ANDS(W15, WZR, W2, _ROR, 7), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, WZR, W2, ROR #7");
        TestInst(ANDS(WZR, WZR, W2, _ROR, 7), asm => asm.ANDS(WZR, WZR, W2, _ROR, 7), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST WZR, W2, ROR #7");
        TestInst(ANDS(W0, W1, W17, _ROR, 7), asm => asm.ANDS(W0, W1, W17, _ROR, 7), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W1, W17, ROR #7");
        TestInst(ANDS(W15, W1, W17, _ROR, 7), asm => asm.ANDS(W15, W1, W17, _ROR, 7), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W1, W17, ROR #7");
        TestInst(ANDS(WZR, W1, W17, _ROR, 7), asm => asm.ANDS(WZR, W1, W17, _ROR, 7), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W1, W17, ROR #7");
        TestInst(ANDS(W0, W16, W17, _ROR, 7), asm => asm.ANDS(W0, W16, W17, _ROR, 7), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W16, W17, ROR #7");
        TestInst(ANDS(W15, W16, W17, _ROR, 7), asm => asm.ANDS(W15, W16, W17, _ROR, 7), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W16, W17, ROR #7");
        TestInst(ANDS(WZR, W16, W17, _ROR, 7), asm => asm.ANDS(WZR, W16, W17, _ROR, 7), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W16, W17, ROR #7");
        TestInst(ANDS(W0, WZR, W17, _ROR, 7), asm => asm.ANDS(W0, WZR, W17, _ROR, 7), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, WZR, W17, ROR #7");
        TestInst(ANDS(W15, WZR, W17, _ROR, 7), asm => asm.ANDS(W15, WZR, W17, _ROR, 7), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, WZR, W17, ROR #7");
        TestInst(ANDS(WZR, WZR, W17, _ROR, 7), asm => asm.ANDS(WZR, WZR, W17, _ROR, 7), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST WZR, W17, ROR #7");
        TestInst(ANDS(W0, W1, WZR, _ROR, 7), asm => asm.ANDS(W0, W1, WZR, _ROR, 7), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W1, WZR, ROR #7");
        TestInst(ANDS(W15, W1, WZR, _ROR, 7), asm => asm.ANDS(W15, W1, WZR, _ROR, 7), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W1, WZR, ROR #7");
        TestInst(ANDS(WZR, W1, WZR, _ROR, 7), asm => asm.ANDS(WZR, W1, WZR, _ROR, 7), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W1, WZR, ROR #7");
        TestInst(ANDS(W0, W16, WZR, _ROR, 7), asm => asm.ANDS(W0, W16, WZR, _ROR, 7), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, W16, WZR, ROR #7");
        TestInst(ANDS(W15, W16, WZR, _ROR, 7), asm => asm.ANDS(W15, W16, WZR, _ROR, 7), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, W16, WZR, ROR #7");
        TestInst(ANDS(WZR, W16, WZR, _ROR, 7), asm => asm.ANDS(WZR, W16, WZR, _ROR, 7), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST W16, WZR, ROR #7");
        TestInst(ANDS(W0, WZR, WZR, _ROR, 7), asm => asm.ANDS(W0, WZR, WZR, _ROR, 7), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W0, WZR, WZR, ROR #7");
        TestInst(ANDS(W15, WZR, WZR, _ROR, 7), asm => asm.ANDS(W15, WZR, WZR, _ROR, 7), Arm64InstructionId.ANDS_32_log_shift, Arm64Mnemonic.ANDS, "ANDS W15, WZR, WZR, ROR #7");
        TestInst(ANDS(WZR, WZR, WZR, _ROR, 7), asm => asm.ANDS(WZR, WZR, WZR, _ROR, 7), Arm64InstructionId.TST_ands_32_log_shift, Arm64Mnemonic.TST, "TST WZR, WZR, ROR #7");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ANDS"/>.
    /// </summary>
    [TestMethod]
    public void Test_ANDS_64_log_shift_3()
    {
        TestInst(ANDS(X0, X1, X2, _LSL, 0), asm => asm.ANDS(X0, X1, X2, _LSL, 0), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X1, X2");
        TestInst(ANDS(X15, X1, X2, _LSL, 0), asm => asm.ANDS(X15, X1, X2, _LSL, 0), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X1, X2");
        TestInst(ANDS(XZR, X1, X2, _LSL, 0), asm => asm.ANDS(XZR, X1, X2, _LSL, 0), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X1, X2");
        TestInst(ANDS(X0, X16, X2, _LSL, 0), asm => asm.ANDS(X0, X16, X2, _LSL, 0), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X16, X2");
        TestInst(ANDS(X15, X16, X2, _LSL, 0), asm => asm.ANDS(X15, X16, X2, _LSL, 0), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X16, X2");
        TestInst(ANDS(XZR, X16, X2, _LSL, 0), asm => asm.ANDS(XZR, X16, X2, _LSL, 0), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X16, X2");
        TestInst(ANDS(X0, XZR, X2, _LSL, 0), asm => asm.ANDS(X0, XZR, X2, _LSL, 0), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, XZR, X2");
        TestInst(ANDS(X15, XZR, X2, _LSL, 0), asm => asm.ANDS(X15, XZR, X2, _LSL, 0), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, XZR, X2");
        TestInst(ANDS(XZR, XZR, X2, _LSL, 0), asm => asm.ANDS(XZR, XZR, X2, _LSL, 0), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST XZR, X2");
        TestInst(ANDS(X0, X1, X17, _LSL, 0), asm => asm.ANDS(X0, X1, X17, _LSL, 0), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X1, X17");
        TestInst(ANDS(X15, X1, X17, _LSL, 0), asm => asm.ANDS(X15, X1, X17, _LSL, 0), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X1, X17");
        TestInst(ANDS(XZR, X1, X17, _LSL, 0), asm => asm.ANDS(XZR, X1, X17, _LSL, 0), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X1, X17");
        TestInst(ANDS(X0, X16, X17, _LSL, 0), asm => asm.ANDS(X0, X16, X17, _LSL, 0), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X16, X17");
        TestInst(ANDS(X15, X16, X17, _LSL, 0), asm => asm.ANDS(X15, X16, X17, _LSL, 0), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X16, X17");
        TestInst(ANDS(XZR, X16, X17, _LSL, 0), asm => asm.ANDS(XZR, X16, X17, _LSL, 0), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X16, X17");
        TestInst(ANDS(X0, XZR, X17, _LSL, 0), asm => asm.ANDS(X0, XZR, X17, _LSL, 0), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, XZR, X17");
        TestInst(ANDS(X15, XZR, X17, _LSL, 0), asm => asm.ANDS(X15, XZR, X17, _LSL, 0), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, XZR, X17");
        TestInst(ANDS(XZR, XZR, X17, _LSL, 0), asm => asm.ANDS(XZR, XZR, X17, _LSL, 0), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST XZR, X17");
        TestInst(ANDS(X0, X1, XZR, _LSL, 0), asm => asm.ANDS(X0, X1, XZR, _LSL, 0), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X1, XZR");
        TestInst(ANDS(X15, X1, XZR, _LSL, 0), asm => asm.ANDS(X15, X1, XZR, _LSL, 0), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X1, XZR");
        TestInst(ANDS(XZR, X1, XZR, _LSL, 0), asm => asm.ANDS(XZR, X1, XZR, _LSL, 0), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X1, XZR");
        TestInst(ANDS(X0, X16, XZR, _LSL, 0), asm => asm.ANDS(X0, X16, XZR, _LSL, 0), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X16, XZR");
        TestInst(ANDS(X15, X16, XZR, _LSL, 0), asm => asm.ANDS(X15, X16, XZR, _LSL, 0), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X16, XZR");
        TestInst(ANDS(XZR, X16, XZR, _LSL, 0), asm => asm.ANDS(XZR, X16, XZR, _LSL, 0), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X16, XZR");
        TestInst(ANDS(X0, XZR, XZR, _LSL, 0), asm => asm.ANDS(X0, XZR, XZR, _LSL, 0), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, XZR, XZR");
        TestInst(ANDS(X15, XZR, XZR, _LSL, 0), asm => asm.ANDS(X15, XZR, XZR, _LSL, 0), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, XZR, XZR");
        TestInst(ANDS(XZR, XZR, XZR, _LSL, 0), asm => asm.ANDS(XZR, XZR, XZR, _LSL, 0), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST XZR, XZR");
        TestInst(ANDS(X0, X1, X2, _LSL, 1), asm => asm.ANDS(X0, X1, X2, _LSL, 1), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X1, X2, LSL #1");
        TestInst(ANDS(X15, X1, X2, _LSL, 1), asm => asm.ANDS(X15, X1, X2, _LSL, 1), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X1, X2, LSL #1");
        TestInst(ANDS(XZR, X1, X2, _LSL, 1), asm => asm.ANDS(XZR, X1, X2, _LSL, 1), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X1, X2, LSL #1");
        TestInst(ANDS(X0, X16, X2, _LSL, 1), asm => asm.ANDS(X0, X16, X2, _LSL, 1), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X16, X2, LSL #1");
        TestInst(ANDS(X15, X16, X2, _LSL, 1), asm => asm.ANDS(X15, X16, X2, _LSL, 1), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X16, X2, LSL #1");
        TestInst(ANDS(XZR, X16, X2, _LSL, 1), asm => asm.ANDS(XZR, X16, X2, _LSL, 1), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X16, X2, LSL #1");
        TestInst(ANDS(X0, XZR, X2, _LSL, 1), asm => asm.ANDS(X0, XZR, X2, _LSL, 1), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, XZR, X2, LSL #1");
        TestInst(ANDS(X15, XZR, X2, _LSL, 1), asm => asm.ANDS(X15, XZR, X2, _LSL, 1), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, XZR, X2, LSL #1");
        TestInst(ANDS(XZR, XZR, X2, _LSL, 1), asm => asm.ANDS(XZR, XZR, X2, _LSL, 1), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST XZR, X2, LSL #1");
        TestInst(ANDS(X0, X1, X17, _LSL, 1), asm => asm.ANDS(X0, X1, X17, _LSL, 1), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X1, X17, LSL #1");
        TestInst(ANDS(X15, X1, X17, _LSL, 1), asm => asm.ANDS(X15, X1, X17, _LSL, 1), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X1, X17, LSL #1");
        TestInst(ANDS(XZR, X1, X17, _LSL, 1), asm => asm.ANDS(XZR, X1, X17, _LSL, 1), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X1, X17, LSL #1");
        TestInst(ANDS(X0, X16, X17, _LSL, 1), asm => asm.ANDS(X0, X16, X17, _LSL, 1), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X16, X17, LSL #1");
        TestInst(ANDS(X15, X16, X17, _LSL, 1), asm => asm.ANDS(X15, X16, X17, _LSL, 1), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X16, X17, LSL #1");
        TestInst(ANDS(XZR, X16, X17, _LSL, 1), asm => asm.ANDS(XZR, X16, X17, _LSL, 1), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X16, X17, LSL #1");
        TestInst(ANDS(X0, XZR, X17, _LSL, 1), asm => asm.ANDS(X0, XZR, X17, _LSL, 1), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, XZR, X17, LSL #1");
        TestInst(ANDS(X15, XZR, X17, _LSL, 1), asm => asm.ANDS(X15, XZR, X17, _LSL, 1), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, XZR, X17, LSL #1");
        TestInst(ANDS(XZR, XZR, X17, _LSL, 1), asm => asm.ANDS(XZR, XZR, X17, _LSL, 1), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST XZR, X17, LSL #1");
        TestInst(ANDS(X0, X1, XZR, _LSL, 1), asm => asm.ANDS(X0, X1, XZR, _LSL, 1), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X1, XZR, LSL #1");
        TestInst(ANDS(X15, X1, XZR, _LSL, 1), asm => asm.ANDS(X15, X1, XZR, _LSL, 1), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X1, XZR, LSL #1");
        TestInst(ANDS(XZR, X1, XZR, _LSL, 1), asm => asm.ANDS(XZR, X1, XZR, _LSL, 1), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X1, XZR, LSL #1");
        TestInst(ANDS(X0, X16, XZR, _LSL, 1), asm => asm.ANDS(X0, X16, XZR, _LSL, 1), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X16, XZR, LSL #1");
        TestInst(ANDS(X15, X16, XZR, _LSL, 1), asm => asm.ANDS(X15, X16, XZR, _LSL, 1), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X16, XZR, LSL #1");
        TestInst(ANDS(XZR, X16, XZR, _LSL, 1), asm => asm.ANDS(XZR, X16, XZR, _LSL, 1), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X16, XZR, LSL #1");
        TestInst(ANDS(X0, XZR, XZR, _LSL, 1), asm => asm.ANDS(X0, XZR, XZR, _LSL, 1), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, XZR, XZR, LSL #1");
        TestInst(ANDS(X15, XZR, XZR, _LSL, 1), asm => asm.ANDS(X15, XZR, XZR, _LSL, 1), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, XZR, XZR, LSL #1");
        TestInst(ANDS(XZR, XZR, XZR, _LSL, 1), asm => asm.ANDS(XZR, XZR, XZR, _LSL, 1), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST XZR, XZR, LSL #1");
        TestInst(ANDS(X0, X1, X2, _LSR, 10), asm => asm.ANDS(X0, X1, X2, _LSR, 10), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X1, X2, LSR #10");
        TestInst(ANDS(X15, X1, X2, _LSR, 10), asm => asm.ANDS(X15, X1, X2, _LSR, 10), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X1, X2, LSR #10");
        TestInst(ANDS(XZR, X1, X2, _LSR, 10), asm => asm.ANDS(XZR, X1, X2, _LSR, 10), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X1, X2, LSR #10");
        TestInst(ANDS(X0, X16, X2, _LSR, 10), asm => asm.ANDS(X0, X16, X2, _LSR, 10), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X16, X2, LSR #10");
        TestInst(ANDS(X15, X16, X2, _LSR, 10), asm => asm.ANDS(X15, X16, X2, _LSR, 10), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X16, X2, LSR #10");
        TestInst(ANDS(XZR, X16, X2, _LSR, 10), asm => asm.ANDS(XZR, X16, X2, _LSR, 10), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X16, X2, LSR #10");
        TestInst(ANDS(X0, XZR, X2, _LSR, 10), asm => asm.ANDS(X0, XZR, X2, _LSR, 10), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, XZR, X2, LSR #10");
        TestInst(ANDS(X15, XZR, X2, _LSR, 10), asm => asm.ANDS(X15, XZR, X2, _LSR, 10), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, XZR, X2, LSR #10");
        TestInst(ANDS(XZR, XZR, X2, _LSR, 10), asm => asm.ANDS(XZR, XZR, X2, _LSR, 10), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST XZR, X2, LSR #10");
        TestInst(ANDS(X0, X1, X17, _LSR, 10), asm => asm.ANDS(X0, X1, X17, _LSR, 10), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X1, X17, LSR #10");
        TestInst(ANDS(X15, X1, X17, _LSR, 10), asm => asm.ANDS(X15, X1, X17, _LSR, 10), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X1, X17, LSR #10");
        TestInst(ANDS(XZR, X1, X17, _LSR, 10), asm => asm.ANDS(XZR, X1, X17, _LSR, 10), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X1, X17, LSR #10");
        TestInst(ANDS(X0, X16, X17, _LSR, 10), asm => asm.ANDS(X0, X16, X17, _LSR, 10), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X16, X17, LSR #10");
        TestInst(ANDS(X15, X16, X17, _LSR, 10), asm => asm.ANDS(X15, X16, X17, _LSR, 10), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X16, X17, LSR #10");
        TestInst(ANDS(XZR, X16, X17, _LSR, 10), asm => asm.ANDS(XZR, X16, X17, _LSR, 10), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X16, X17, LSR #10");
        TestInst(ANDS(X0, XZR, X17, _LSR, 10), asm => asm.ANDS(X0, XZR, X17, _LSR, 10), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, XZR, X17, LSR #10");
        TestInst(ANDS(X15, XZR, X17, _LSR, 10), asm => asm.ANDS(X15, XZR, X17, _LSR, 10), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, XZR, X17, LSR #10");
        TestInst(ANDS(XZR, XZR, X17, _LSR, 10), asm => asm.ANDS(XZR, XZR, X17, _LSR, 10), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST XZR, X17, LSR #10");
        TestInst(ANDS(X0, X1, XZR, _LSR, 10), asm => asm.ANDS(X0, X1, XZR, _LSR, 10), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X1, XZR, LSR #10");
        TestInst(ANDS(X15, X1, XZR, _LSR, 10), asm => asm.ANDS(X15, X1, XZR, _LSR, 10), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X1, XZR, LSR #10");
        TestInst(ANDS(XZR, X1, XZR, _LSR, 10), asm => asm.ANDS(XZR, X1, XZR, _LSR, 10), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X1, XZR, LSR #10");
        TestInst(ANDS(X0, X16, XZR, _LSR, 10), asm => asm.ANDS(X0, X16, XZR, _LSR, 10), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X16, XZR, LSR #10");
        TestInst(ANDS(X15, X16, XZR, _LSR, 10), asm => asm.ANDS(X15, X16, XZR, _LSR, 10), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X16, XZR, LSR #10");
        TestInst(ANDS(XZR, X16, XZR, _LSR, 10), asm => asm.ANDS(XZR, X16, XZR, _LSR, 10), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X16, XZR, LSR #10");
        TestInst(ANDS(X0, XZR, XZR, _LSR, 10), asm => asm.ANDS(X0, XZR, XZR, _LSR, 10), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, XZR, XZR, LSR #10");
        TestInst(ANDS(X15, XZR, XZR, _LSR, 10), asm => asm.ANDS(X15, XZR, XZR, _LSR, 10), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, XZR, XZR, LSR #10");
        TestInst(ANDS(XZR, XZR, XZR, _LSR, 10), asm => asm.ANDS(XZR, XZR, XZR, _LSR, 10), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST XZR, XZR, LSR #10");
        TestInst(ANDS(X0, X1, X2, _ASR, 12), asm => asm.ANDS(X0, X1, X2, _ASR, 12), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X1, X2, ASR #12");
        TestInst(ANDS(X15, X1, X2, _ASR, 12), asm => asm.ANDS(X15, X1, X2, _ASR, 12), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X1, X2, ASR #12");
        TestInst(ANDS(XZR, X1, X2, _ASR, 12), asm => asm.ANDS(XZR, X1, X2, _ASR, 12), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X1, X2, ASR #12");
        TestInst(ANDS(X0, X16, X2, _ASR, 12), asm => asm.ANDS(X0, X16, X2, _ASR, 12), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X16, X2, ASR #12");
        TestInst(ANDS(X15, X16, X2, _ASR, 12), asm => asm.ANDS(X15, X16, X2, _ASR, 12), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X16, X2, ASR #12");
        TestInst(ANDS(XZR, X16, X2, _ASR, 12), asm => asm.ANDS(XZR, X16, X2, _ASR, 12), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X16, X2, ASR #12");
        TestInst(ANDS(X0, XZR, X2, _ASR, 12), asm => asm.ANDS(X0, XZR, X2, _ASR, 12), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, XZR, X2, ASR #12");
        TestInst(ANDS(X15, XZR, X2, _ASR, 12), asm => asm.ANDS(X15, XZR, X2, _ASR, 12), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, XZR, X2, ASR #12");
        TestInst(ANDS(XZR, XZR, X2, _ASR, 12), asm => asm.ANDS(XZR, XZR, X2, _ASR, 12), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST XZR, X2, ASR #12");
        TestInst(ANDS(X0, X1, X17, _ASR, 12), asm => asm.ANDS(X0, X1, X17, _ASR, 12), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X1, X17, ASR #12");
        TestInst(ANDS(X15, X1, X17, _ASR, 12), asm => asm.ANDS(X15, X1, X17, _ASR, 12), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X1, X17, ASR #12");
        TestInst(ANDS(XZR, X1, X17, _ASR, 12), asm => asm.ANDS(XZR, X1, X17, _ASR, 12), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X1, X17, ASR #12");
        TestInst(ANDS(X0, X16, X17, _ASR, 12), asm => asm.ANDS(X0, X16, X17, _ASR, 12), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X16, X17, ASR #12");
        TestInst(ANDS(X15, X16, X17, _ASR, 12), asm => asm.ANDS(X15, X16, X17, _ASR, 12), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X16, X17, ASR #12");
        TestInst(ANDS(XZR, X16, X17, _ASR, 12), asm => asm.ANDS(XZR, X16, X17, _ASR, 12), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X16, X17, ASR #12");
        TestInst(ANDS(X0, XZR, X17, _ASR, 12), asm => asm.ANDS(X0, XZR, X17, _ASR, 12), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, XZR, X17, ASR #12");
        TestInst(ANDS(X15, XZR, X17, _ASR, 12), asm => asm.ANDS(X15, XZR, X17, _ASR, 12), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, XZR, X17, ASR #12");
        TestInst(ANDS(XZR, XZR, X17, _ASR, 12), asm => asm.ANDS(XZR, XZR, X17, _ASR, 12), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST XZR, X17, ASR #12");
        TestInst(ANDS(X0, X1, XZR, _ASR, 12), asm => asm.ANDS(X0, X1, XZR, _ASR, 12), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X1, XZR, ASR #12");
        TestInst(ANDS(X15, X1, XZR, _ASR, 12), asm => asm.ANDS(X15, X1, XZR, _ASR, 12), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X1, XZR, ASR #12");
        TestInst(ANDS(XZR, X1, XZR, _ASR, 12), asm => asm.ANDS(XZR, X1, XZR, _ASR, 12), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X1, XZR, ASR #12");
        TestInst(ANDS(X0, X16, XZR, _ASR, 12), asm => asm.ANDS(X0, X16, XZR, _ASR, 12), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X16, XZR, ASR #12");
        TestInst(ANDS(X15, X16, XZR, _ASR, 12), asm => asm.ANDS(X15, X16, XZR, _ASR, 12), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X16, XZR, ASR #12");
        TestInst(ANDS(XZR, X16, XZR, _ASR, 12), asm => asm.ANDS(XZR, X16, XZR, _ASR, 12), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X16, XZR, ASR #12");
        TestInst(ANDS(X0, XZR, XZR, _ASR, 12), asm => asm.ANDS(X0, XZR, XZR, _ASR, 12), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, XZR, XZR, ASR #12");
        TestInst(ANDS(X15, XZR, XZR, _ASR, 12), asm => asm.ANDS(X15, XZR, XZR, _ASR, 12), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, XZR, XZR, ASR #12");
        TestInst(ANDS(XZR, XZR, XZR, _ASR, 12), asm => asm.ANDS(XZR, XZR, XZR, _ASR, 12), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST XZR, XZR, ASR #12");
        TestInst(ANDS(X0, X1, X2, _ROR, 7), asm => asm.ANDS(X0, X1, X2, _ROR, 7), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X1, X2, ROR #7");
        TestInst(ANDS(X15, X1, X2, _ROR, 7), asm => asm.ANDS(X15, X1, X2, _ROR, 7), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X1, X2, ROR #7");
        TestInst(ANDS(XZR, X1, X2, _ROR, 7), asm => asm.ANDS(XZR, X1, X2, _ROR, 7), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X1, X2, ROR #7");
        TestInst(ANDS(X0, X16, X2, _ROR, 7), asm => asm.ANDS(X0, X16, X2, _ROR, 7), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X16, X2, ROR #7");
        TestInst(ANDS(X15, X16, X2, _ROR, 7), asm => asm.ANDS(X15, X16, X2, _ROR, 7), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X16, X2, ROR #7");
        TestInst(ANDS(XZR, X16, X2, _ROR, 7), asm => asm.ANDS(XZR, X16, X2, _ROR, 7), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X16, X2, ROR #7");
        TestInst(ANDS(X0, XZR, X2, _ROR, 7), asm => asm.ANDS(X0, XZR, X2, _ROR, 7), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, XZR, X2, ROR #7");
        TestInst(ANDS(X15, XZR, X2, _ROR, 7), asm => asm.ANDS(X15, XZR, X2, _ROR, 7), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, XZR, X2, ROR #7");
        TestInst(ANDS(XZR, XZR, X2, _ROR, 7), asm => asm.ANDS(XZR, XZR, X2, _ROR, 7), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST XZR, X2, ROR #7");
        TestInst(ANDS(X0, X1, X17, _ROR, 7), asm => asm.ANDS(X0, X1, X17, _ROR, 7), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X1, X17, ROR #7");
        TestInst(ANDS(X15, X1, X17, _ROR, 7), asm => asm.ANDS(X15, X1, X17, _ROR, 7), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X1, X17, ROR #7");
        TestInst(ANDS(XZR, X1, X17, _ROR, 7), asm => asm.ANDS(XZR, X1, X17, _ROR, 7), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X1, X17, ROR #7");
        TestInst(ANDS(X0, X16, X17, _ROR, 7), asm => asm.ANDS(X0, X16, X17, _ROR, 7), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X16, X17, ROR #7");
        TestInst(ANDS(X15, X16, X17, _ROR, 7), asm => asm.ANDS(X15, X16, X17, _ROR, 7), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X16, X17, ROR #7");
        TestInst(ANDS(XZR, X16, X17, _ROR, 7), asm => asm.ANDS(XZR, X16, X17, _ROR, 7), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X16, X17, ROR #7");
        TestInst(ANDS(X0, XZR, X17, _ROR, 7), asm => asm.ANDS(X0, XZR, X17, _ROR, 7), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, XZR, X17, ROR #7");
        TestInst(ANDS(X15, XZR, X17, _ROR, 7), asm => asm.ANDS(X15, XZR, X17, _ROR, 7), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, XZR, X17, ROR #7");
        TestInst(ANDS(XZR, XZR, X17, _ROR, 7), asm => asm.ANDS(XZR, XZR, X17, _ROR, 7), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST XZR, X17, ROR #7");
        TestInst(ANDS(X0, X1, XZR, _ROR, 7), asm => asm.ANDS(X0, X1, XZR, _ROR, 7), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X1, XZR, ROR #7");
        TestInst(ANDS(X15, X1, XZR, _ROR, 7), asm => asm.ANDS(X15, X1, XZR, _ROR, 7), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X1, XZR, ROR #7");
        TestInst(ANDS(XZR, X1, XZR, _ROR, 7), asm => asm.ANDS(XZR, X1, XZR, _ROR, 7), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X1, XZR, ROR #7");
        TestInst(ANDS(X0, X16, XZR, _ROR, 7), asm => asm.ANDS(X0, X16, XZR, _ROR, 7), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, X16, XZR, ROR #7");
        TestInst(ANDS(X15, X16, XZR, _ROR, 7), asm => asm.ANDS(X15, X16, XZR, _ROR, 7), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, X16, XZR, ROR #7");
        TestInst(ANDS(XZR, X16, XZR, _ROR, 7), asm => asm.ANDS(XZR, X16, XZR, _ROR, 7), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST X16, XZR, ROR #7");
        TestInst(ANDS(X0, XZR, XZR, _ROR, 7), asm => asm.ANDS(X0, XZR, XZR, _ROR, 7), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X0, XZR, XZR, ROR #7");
        TestInst(ANDS(X15, XZR, XZR, _ROR, 7), asm => asm.ANDS(X15, XZR, XZR, _ROR, 7), Arm64InstructionId.ANDS_64_log_shift, Arm64Mnemonic.ANDS, "ANDS X15, XZR, XZR, ROR #7");
        TestInst(ANDS(XZR, XZR, XZR, _ROR, 7), asm => asm.ANDS(XZR, XZR, XZR, _ROR, 7), Arm64InstructionId.TST_ands_64_log_shift, Arm64Mnemonic.TST, "TST XZR, XZR, ROR #7");
    }
}
