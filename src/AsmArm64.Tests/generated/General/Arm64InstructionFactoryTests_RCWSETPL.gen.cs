// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_RCWSETPL_General : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.RCWSETPL"/>.
    /// </summary>
    [TestMethod]
    public void Test_RCWSETPL_128_memop_128_0()
    {
        TestInst(RCWSETPL(X0, X1, _[X3]), asm => asm.RCWSETPL(X0, X1, _[X3]), Arm64InstructionId.RCWSETPL_128_memop_128, Arm64Mnemonic.RCWSETPL, "RCWSETPL X0, X1, [X3]");
        TestInst(RCWSETPL(X15, X1, _[X3]), asm => asm.RCWSETPL(X15, X1, _[X3]), Arm64InstructionId.RCWSETPL_128_memop_128, Arm64Mnemonic.RCWSETPL, "RCWSETPL X15, X1, [X3]");
        TestInst(RCWSETPL(XZR, X1, _[X3]), asm => asm.RCWSETPL(XZR, X1, _[X3]), Arm64InstructionId.RCWSETPL_128_memop_128, Arm64Mnemonic.RCWSETPL, "RCWSETPL XZR, X1, [X3]");
        TestInst(RCWSETPL(X0, X16, _[X3]), asm => asm.RCWSETPL(X0, X16, _[X3]), Arm64InstructionId.RCWSETPL_128_memop_128, Arm64Mnemonic.RCWSETPL, "RCWSETPL X0, X16, [X3]");
        TestInst(RCWSETPL(X15, X16, _[X3]), asm => asm.RCWSETPL(X15, X16, _[X3]), Arm64InstructionId.RCWSETPL_128_memop_128, Arm64Mnemonic.RCWSETPL, "RCWSETPL X15, X16, [X3]");
        TestInst(RCWSETPL(XZR, X16, _[X3]), asm => asm.RCWSETPL(XZR, X16, _[X3]), Arm64InstructionId.RCWSETPL_128_memop_128, Arm64Mnemonic.RCWSETPL, "RCWSETPL XZR, X16, [X3]");
        TestInst(RCWSETPL(X0, XZR, _[X3]), asm => asm.RCWSETPL(X0, XZR, _[X3]), Arm64InstructionId.RCWSETPL_128_memop_128, Arm64Mnemonic.RCWSETPL, "RCWSETPL X0, XZR, [X3]");
        TestInst(RCWSETPL(X15, XZR, _[X3]), asm => asm.RCWSETPL(X15, XZR, _[X3]), Arm64InstructionId.RCWSETPL_128_memop_128, Arm64Mnemonic.RCWSETPL, "RCWSETPL X15, XZR, [X3]");
        TestInst(RCWSETPL(XZR, XZR, _[X3]), asm => asm.RCWSETPL(XZR, XZR, _[X3]), Arm64InstructionId.RCWSETPL_128_memop_128, Arm64Mnemonic.RCWSETPL, "RCWSETPL XZR, XZR, [X3]");
    }
}
