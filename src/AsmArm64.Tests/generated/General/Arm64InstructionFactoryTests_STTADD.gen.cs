// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_STTADD_General : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STTADD"/>.
    /// </summary>
    [TestMethod]
    public void Test_STTADD_ldtadd_32_memop_unpriv_0()
    {
        TestInst(STTADD(W0, _[X2]), asm => asm.STTADD(W0, _[X2]), Arm64InstructionId.STTADD_ldtadd_32_memop_unpriv, Arm64Mnemonic.STTADD, "STTADD W0, [X2]");
        TestInst(STTADD(W15, _[X2]), asm => asm.STTADD(W15, _[X2]), Arm64InstructionId.STTADD_ldtadd_32_memop_unpriv, Arm64Mnemonic.STTADD, "STTADD W15, [X2]");
        TestInst(STTADD(WZR, _[X2]), asm => asm.STTADD(WZR, _[X2]), Arm64InstructionId.STTADD_ldtadd_32_memop_unpriv, Arm64Mnemonic.STTADD, "STTADD WZR, [X2]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STTADD"/>.
    /// </summary>
    [TestMethod]
    public void Test_STTADD_ldtadd_64_memop_unpriv_1()
    {
        TestInst(STTADD(X0, _[X2]), asm => asm.STTADD(X0, _[X2]), Arm64InstructionId.STTADD_ldtadd_64_memop_unpriv, Arm64Mnemonic.STTADD, "STTADD X0, [X2]");
        TestInst(STTADD(X15, _[X2]), asm => asm.STTADD(X15, _[X2]), Arm64InstructionId.STTADD_ldtadd_64_memop_unpriv, Arm64Mnemonic.STTADD, "STTADD X15, [X2]");
        TestInst(STTADD(XZR, _[X2]), asm => asm.STTADD(XZR, _[X2]), Arm64InstructionId.STTADD_ldtadd_64_memop_unpriv, Arm64Mnemonic.STTADD, "STTADD XZR, [X2]");
    }
}
