// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_PACGA_General
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.PACGA"/>.
    /// </summary>
    [TestMethod]
    public void Test_PACGA_64p_dp_2src_0()
    {
        
        {
            var raw = PACGA(X0, X1, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA X0, X1, X3", asm);
        }
        
        {
            var raw = PACGA(X15, X1, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA X15, X1, X3", asm);
        }
        
        {
            var raw = PACGA(XZR, X1, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA XZR, X1, X3", asm);
        }
        
        {
            var raw = PACGA(X0, X16, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA X0, X16, X3", asm);
        }
        
        {
            var raw = PACGA(X15, X16, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA X15, X16, X3", asm);
        }
        
        {
            var raw = PACGA(XZR, X16, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA XZR, X16, X3", asm);
        }
        
        {
            var raw = PACGA(X0, XZR, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA X0, XZR, X3", asm);
        }
        
        {
            var raw = PACGA(X15, XZR, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA X15, XZR, X3", asm);
        }
        
        {
            var raw = PACGA(XZR, XZR, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA XZR, XZR, X3", asm);
        }
        
        {
            var raw = PACGA(X0, X1, X19);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA X0, X1, X19", asm);
        }
        
        {
            var raw = PACGA(X15, X1, X19);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA X15, X1, X19", asm);
        }
        
        {
            var raw = PACGA(XZR, X1, X19);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA XZR, X1, X19", asm);
        }
        
        {
            var raw = PACGA(X0, X16, X19);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA X0, X16, X19", asm);
        }
        
        {
            var raw = PACGA(X15, X16, X19);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA X15, X16, X19", asm);
        }
        
        {
            var raw = PACGA(XZR, X16, X19);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA XZR, X16, X19", asm);
        }
        
        {
            var raw = PACGA(X0, XZR, X19);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA X0, XZR, X19", asm);
        }
        
        {
            var raw = PACGA(X15, XZR, X19);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA X15, XZR, X19", asm);
        }
        
        {
            var raw = PACGA(XZR, XZR, X19);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA XZR, XZR, X19", asm);
        }
        
        {
            var raw = PACGA(X0, X1, SP);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA X0, X1, SP", asm);
        }
        
        {
            var raw = PACGA(X15, X1, SP);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA X15, X1, SP", asm);
        }
        
        {
            var raw = PACGA(XZR, X1, SP);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA XZR, X1, SP", asm);
        }
        
        {
            var raw = PACGA(X0, X16, SP);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA X0, X16, SP", asm);
        }
        
        {
            var raw = PACGA(X15, X16, SP);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA X15, X16, SP", asm);
        }
        
        {
            var raw = PACGA(XZR, X16, SP);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA XZR, X16, SP", asm);
        }
        
        {
            var raw = PACGA(X0, XZR, SP);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA X0, XZR, SP", asm);
        }
        
        {
            var raw = PACGA(X15, XZR, SP);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA X15, XZR, SP", asm);
        }
        
        {
            var raw = PACGA(XZR, XZR, SP);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PACGA_64p_dp_2src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PACGA, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PACGA XZR, XZR, SP", asm);
        }
    }
}
