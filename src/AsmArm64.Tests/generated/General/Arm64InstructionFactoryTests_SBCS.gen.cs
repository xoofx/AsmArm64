// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_SBCS_General
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SBCS"/>.
    /// </summary>
    [TestMethod]
    public void Test_SBCS_32_addsub_carry_0()
    {
        
        {
            var raw = SBCS(W0, W1, W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS W0, W1, W2", asm);
        }
        
        {
            var raw = SBCS(W15, W1, W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS W15, W1, W2", asm);
        }
        
        {
            var raw = SBCS(WZR, W1, W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS WZR, W1, W2", asm);
        }
        
        {
            var raw = SBCS(W0, W16, W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS W0, W16, W2", asm);
        }
        
        {
            var raw = SBCS(W15, W16, W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS W15, W16, W2", asm);
        }
        
        {
            var raw = SBCS(WZR, W16, W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS WZR, W16, W2", asm);
        }
        
        {
            var raw = SBCS(W0, WZR, W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NGCS_sbcs_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NGCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NGCS W0, W2", asm);
        }
        
        {
            var raw = SBCS(W15, WZR, W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NGCS_sbcs_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NGCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NGCS W15, W2", asm);
        }
        
        {
            var raw = SBCS(WZR, WZR, W2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NGCS_sbcs_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NGCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NGCS WZR, W2", asm);
        }
        
        {
            var raw = SBCS(W0, W1, W17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS W0, W1, W17", asm);
        }
        
        {
            var raw = SBCS(W15, W1, W17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS W15, W1, W17", asm);
        }
        
        {
            var raw = SBCS(WZR, W1, W17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS WZR, W1, W17", asm);
        }
        
        {
            var raw = SBCS(W0, W16, W17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS W0, W16, W17", asm);
        }
        
        {
            var raw = SBCS(W15, W16, W17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS W15, W16, W17", asm);
        }
        
        {
            var raw = SBCS(WZR, W16, W17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS WZR, W16, W17", asm);
        }
        
        {
            var raw = SBCS(W0, WZR, W17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NGCS_sbcs_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NGCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NGCS W0, W17", asm);
        }
        
        {
            var raw = SBCS(W15, WZR, W17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NGCS_sbcs_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NGCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NGCS W15, W17", asm);
        }
        
        {
            var raw = SBCS(WZR, WZR, W17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NGCS_sbcs_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NGCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NGCS WZR, W17", asm);
        }
        
        {
            var raw = SBCS(W0, W1, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS W0, W1, WZR", asm);
        }
        
        {
            var raw = SBCS(W15, W1, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS W15, W1, WZR", asm);
        }
        
        {
            var raw = SBCS(WZR, W1, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS WZR, W1, WZR", asm);
        }
        
        {
            var raw = SBCS(W0, W16, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS W0, W16, WZR", asm);
        }
        
        {
            var raw = SBCS(W15, W16, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS W15, W16, WZR", asm);
        }
        
        {
            var raw = SBCS(WZR, W16, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS WZR, W16, WZR", asm);
        }
        
        {
            var raw = SBCS(W0, WZR, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NGCS_sbcs_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NGCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NGCS W0, WZR", asm);
        }
        
        {
            var raw = SBCS(W15, WZR, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NGCS_sbcs_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NGCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NGCS W15, WZR", asm);
        }
        
        {
            var raw = SBCS(WZR, WZR, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NGCS_sbcs_32_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NGCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NGCS WZR, WZR", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SBCS"/>.
    /// </summary>
    [TestMethod]
    public void Test_SBCS_64_addsub_carry_1()
    {
        
        {
            var raw = SBCS(X0, X1, X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS X0, X1, X2", asm);
        }
        
        {
            var raw = SBCS(X15, X1, X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS X15, X1, X2", asm);
        }
        
        {
            var raw = SBCS(XZR, X1, X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS XZR, X1, X2", asm);
        }
        
        {
            var raw = SBCS(X0, X16, X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS X0, X16, X2", asm);
        }
        
        {
            var raw = SBCS(X15, X16, X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS X15, X16, X2", asm);
        }
        
        {
            var raw = SBCS(XZR, X16, X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS XZR, X16, X2", asm);
        }
        
        {
            var raw = SBCS(X0, XZR, X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NGCS_sbcs_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NGCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NGCS X0, X2", asm);
        }
        
        {
            var raw = SBCS(X15, XZR, X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NGCS_sbcs_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NGCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NGCS X15, X2", asm);
        }
        
        {
            var raw = SBCS(XZR, XZR, X2);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NGCS_sbcs_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NGCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NGCS XZR, X2", asm);
        }
        
        {
            var raw = SBCS(X0, X1, X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS X0, X1, X17", asm);
        }
        
        {
            var raw = SBCS(X15, X1, X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS X15, X1, X17", asm);
        }
        
        {
            var raw = SBCS(XZR, X1, X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS XZR, X1, X17", asm);
        }
        
        {
            var raw = SBCS(X0, X16, X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS X0, X16, X17", asm);
        }
        
        {
            var raw = SBCS(X15, X16, X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS X15, X16, X17", asm);
        }
        
        {
            var raw = SBCS(XZR, X16, X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS XZR, X16, X17", asm);
        }
        
        {
            var raw = SBCS(X0, XZR, X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NGCS_sbcs_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NGCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NGCS X0, X17", asm);
        }
        
        {
            var raw = SBCS(X15, XZR, X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NGCS_sbcs_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NGCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NGCS X15, X17", asm);
        }
        
        {
            var raw = SBCS(XZR, XZR, X17);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NGCS_sbcs_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NGCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NGCS XZR, X17", asm);
        }
        
        {
            var raw = SBCS(X0, X1, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS X0, X1, XZR", asm);
        }
        
        {
            var raw = SBCS(X15, X1, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS X15, X1, XZR", asm);
        }
        
        {
            var raw = SBCS(XZR, X1, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS XZR, X1, XZR", asm);
        }
        
        {
            var raw = SBCS(X0, X16, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS X0, X16, XZR", asm);
        }
        
        {
            var raw = SBCS(X15, X16, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS X15, X16, XZR", asm);
        }
        
        {
            var raw = SBCS(XZR, X16, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.SBCS_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.SBCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("SBCS XZR, X16, XZR", asm);
        }
        
        {
            var raw = SBCS(X0, XZR, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NGCS_sbcs_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NGCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NGCS X0, XZR", asm);
        }
        
        {
            var raw = SBCS(X15, XZR, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NGCS_sbcs_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NGCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NGCS X15, XZR", asm);
        }
        
        {
            var raw = SBCS(XZR, XZR, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.NGCS_sbcs_64_addsub_carry, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.NGCS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("NGCS XZR, XZR", asm);
        }
    }
}
