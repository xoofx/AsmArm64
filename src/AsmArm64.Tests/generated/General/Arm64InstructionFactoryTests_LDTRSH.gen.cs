// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_LDTRSH_General
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDTRSH"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDTRSH_32_ldst_unpriv_0()
    {
        
        {
            var raw = LDTRSH(W0, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDTRSH_32_ldst_unpriv, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDTRSH, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDTRSH W0, [X2, #5]", asm);
        }
        
        {
            var raw = LDTRSH(W15, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDTRSH_32_ldst_unpriv, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDTRSH, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDTRSH W15, [X2, #5]", asm);
        }
        
        {
            var raw = LDTRSH(WZR, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDTRSH_32_ldst_unpriv, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDTRSH, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDTRSH WZR, [X2, #5]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDTRSH"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDTRSH_64_ldst_unpriv_1()
    {
        
        {
            var raw = LDTRSH(X0, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDTRSH_64_ldst_unpriv, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDTRSH, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDTRSH X0, [X2, #5]", asm);
        }
        
        {
            var raw = LDTRSH(X15, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDTRSH_64_ldst_unpriv, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDTRSH, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDTRSH X15, [X2, #5]", asm);
        }
        
        {
            var raw = LDTRSH(XZR, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDTRSH_64_ldst_unpriv, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDTRSH, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDTRSH XZR, [X2, #5]", asm);
        }
    }
}
