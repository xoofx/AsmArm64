// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_PRFM_General
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.PRFM"/>.
    /// </summary>
    [TestMethod]
    public void Test_PRFM_p_ldst_pos_0()
    {
        
        {
            var raw = PRFM(PLDL1KEEP, _[X2, 40]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PRFM_p_ldst_pos, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PRFM, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PRFM PLDL1KEEP, [X2, #40]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.PRFM"/>.
    /// </summary>
    [TestMethod]
    public void Test_PRFM_p_loadlit_1()
    {
        
        {
            var raw = PRFM(PLDL1KEEP, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PRFM_p_loadlit, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PRFM, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PRFM PLDL1KEEP, #32", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.PRFM"/>.
    /// </summary>
    [TestMethod]
    public void Test_PRFM_p_ldst_regoff_2()
    {
        
        {
            var raw = PRFM(PLDL1KEEP, _[X2, X3, _LSL, 3]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.PRFM_p_ldst_regoff, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.PRFM, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("PRFM PLDL1KEEP, [X2, X3, LSL #3]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.PRFM"/>.
    /// </summary>
    [TestMethod]
    public void Test_PRFM_p_ldst_regoff_3()
    {
        Assert.Inconclusive("Not handled PRFM_p_ldst_regoff - PRFM        (prfop|#imm5), [Xn|SP, (Wm|Xm){, extend, {amount}}]");
    }
}
