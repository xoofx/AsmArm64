// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_LDPSW_General : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDPSW"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDPSW_64_ldstpair_post_0()
    {
        TestInst(LDPSW(X0, X1, _[X3], 20), Arm64InstructionId.LDPSW_64_ldstpair_post, Arm64Mnemonic.LDPSW, "LDPSW X0, X1, [X3], #20");
        TestInst(LDPSW(X15, X1, _[X3], 20), Arm64InstructionId.LDPSW_64_ldstpair_post, Arm64Mnemonic.LDPSW, "LDPSW X15, X1, [X3], #20");
        TestInst(LDPSW(XZR, X1, _[X3], 20), Arm64InstructionId.LDPSW_64_ldstpair_post, Arm64Mnemonic.LDPSW, "LDPSW XZR, X1, [X3], #20");
        TestInst(LDPSW(X0, X16, _[X3], 20), Arm64InstructionId.LDPSW_64_ldstpair_post, Arm64Mnemonic.LDPSW, "LDPSW X0, X16, [X3], #20");
        TestInst(LDPSW(X15, X16, _[X3], 20), Arm64InstructionId.LDPSW_64_ldstpair_post, Arm64Mnemonic.LDPSW, "LDPSW X15, X16, [X3], #20");
        TestInst(LDPSW(XZR, X16, _[X3], 20), Arm64InstructionId.LDPSW_64_ldstpair_post, Arm64Mnemonic.LDPSW, "LDPSW XZR, X16, [X3], #20");
        TestInst(LDPSW(X0, XZR, _[X3], 20), Arm64InstructionId.LDPSW_64_ldstpair_post, Arm64Mnemonic.LDPSW, "LDPSW X0, XZR, [X3], #20");
        TestInst(LDPSW(X15, XZR, _[X3], 20), Arm64InstructionId.LDPSW_64_ldstpair_post, Arm64Mnemonic.LDPSW, "LDPSW X15, XZR, [X3], #20");
        TestInst(LDPSW(XZR, XZR, _[X3], 20), Arm64InstructionId.LDPSW_64_ldstpair_post, Arm64Mnemonic.LDPSW, "LDPSW XZR, XZR, [X3], #20");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDPSW"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDPSW_64_ldstpair_pre_1()
    {
        TestInst(LDPSW(X0, X1, _[X3, 20].Pre), Arm64InstructionId.LDPSW_64_ldstpair_pre, Arm64Mnemonic.LDPSW, "LDPSW X0, X1, [X3, #20]!");
        TestInst(LDPSW(X15, X1, _[X3, 20].Pre), Arm64InstructionId.LDPSW_64_ldstpair_pre, Arm64Mnemonic.LDPSW, "LDPSW X15, X1, [X3, #20]!");
        TestInst(LDPSW(XZR, X1, _[X3, 20].Pre), Arm64InstructionId.LDPSW_64_ldstpair_pre, Arm64Mnemonic.LDPSW, "LDPSW XZR, X1, [X3, #20]!");
        TestInst(LDPSW(X0, X16, _[X3, 20].Pre), Arm64InstructionId.LDPSW_64_ldstpair_pre, Arm64Mnemonic.LDPSW, "LDPSW X0, X16, [X3, #20]!");
        TestInst(LDPSW(X15, X16, _[X3, 20].Pre), Arm64InstructionId.LDPSW_64_ldstpair_pre, Arm64Mnemonic.LDPSW, "LDPSW X15, X16, [X3, #20]!");
        TestInst(LDPSW(XZR, X16, _[X3, 20].Pre), Arm64InstructionId.LDPSW_64_ldstpair_pre, Arm64Mnemonic.LDPSW, "LDPSW XZR, X16, [X3, #20]!");
        TestInst(LDPSW(X0, XZR, _[X3, 20].Pre), Arm64InstructionId.LDPSW_64_ldstpair_pre, Arm64Mnemonic.LDPSW, "LDPSW X0, XZR, [X3, #20]!");
        TestInst(LDPSW(X15, XZR, _[X3, 20].Pre), Arm64InstructionId.LDPSW_64_ldstpair_pre, Arm64Mnemonic.LDPSW, "LDPSW X15, XZR, [X3, #20]!");
        TestInst(LDPSW(XZR, XZR, _[X3, 20].Pre), Arm64InstructionId.LDPSW_64_ldstpair_pre, Arm64Mnemonic.LDPSW, "LDPSW XZR, XZR, [X3, #20]!");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDPSW"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDPSW_64_ldstpair_off_2()
    {
        TestInst(LDPSW(X0, X1, _[X3, 20]), Arm64InstructionId.LDPSW_64_ldstpair_off, Arm64Mnemonic.LDPSW, "LDPSW X0, X1, [X3, #20]");
        TestInst(LDPSW(X15, X1, _[X3, 20]), Arm64InstructionId.LDPSW_64_ldstpair_off, Arm64Mnemonic.LDPSW, "LDPSW X15, X1, [X3, #20]");
        TestInst(LDPSW(XZR, X1, _[X3, 20]), Arm64InstructionId.LDPSW_64_ldstpair_off, Arm64Mnemonic.LDPSW, "LDPSW XZR, X1, [X3, #20]");
        TestInst(LDPSW(X0, X16, _[X3, 20]), Arm64InstructionId.LDPSW_64_ldstpair_off, Arm64Mnemonic.LDPSW, "LDPSW X0, X16, [X3, #20]");
        TestInst(LDPSW(X15, X16, _[X3, 20]), Arm64InstructionId.LDPSW_64_ldstpair_off, Arm64Mnemonic.LDPSW, "LDPSW X15, X16, [X3, #20]");
        TestInst(LDPSW(XZR, X16, _[X3, 20]), Arm64InstructionId.LDPSW_64_ldstpair_off, Arm64Mnemonic.LDPSW, "LDPSW XZR, X16, [X3, #20]");
        TestInst(LDPSW(X0, XZR, _[X3, 20]), Arm64InstructionId.LDPSW_64_ldstpair_off, Arm64Mnemonic.LDPSW, "LDPSW X0, XZR, [X3, #20]");
        TestInst(LDPSW(X15, XZR, _[X3, 20]), Arm64InstructionId.LDPSW_64_ldstpair_off, Arm64Mnemonic.LDPSW, "LDPSW X15, XZR, [X3, #20]");
        TestInst(LDPSW(XZR, XZR, _[X3, 20]), Arm64InstructionId.LDPSW_64_ldstpair_off, Arm64Mnemonic.LDPSW, "LDPSW XZR, XZR, [X3, #20]");
    }
}
