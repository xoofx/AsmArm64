// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_LDRSB_General
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDRSB"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDRSB_32b_ldst_regoff_0()
    {
        
        {
            var raw = LDRSB(W0, _[X2, X3, _LSL, 0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDRSB_32bl_ldst_regoff, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDRSB, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDRSB W0, [X2, X3, LSL #0]", asm);
        }
        
        {
            var raw = LDRSB(W15, _[X2, X3, _LSL, 0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDRSB_32bl_ldst_regoff, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDRSB, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDRSB W15, [X2, X3, LSL #0]", asm);
        }
        
        {
            var raw = LDRSB(WZR, _[X2, X3, _LSL, 0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDRSB_32bl_ldst_regoff, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDRSB, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDRSB WZR, [X2, X3, LSL #0]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDRSB"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDRSB_32b_ldst_regoff_1()
    {
        Assert.Inconclusive("Not handled LDRSB_32b_ldst_regoff - LDRSB       Wt, [Xn|SP, (Wm|Xm), extend{, amount}]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDRSB"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDRSB_64b_ldst_regoff_2()
    {
        
        {
            var raw = LDRSB(X0, _[X2, X3, _LSL, 0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDRSB_64bl_ldst_regoff, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDRSB, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDRSB X0, [X2, X3, LSL #0]", asm);
        }
        
        {
            var raw = LDRSB(X15, _[X2, X3, _LSL, 0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDRSB_64bl_ldst_regoff, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDRSB, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDRSB X15, [X2, X3, LSL #0]", asm);
        }
        
        {
            var raw = LDRSB(XZR, _[X2, X3, _LSL, 0]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDRSB_64bl_ldst_regoff, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDRSB, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDRSB XZR, [X2, X3, LSL #0]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDRSB"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDRSB_64b_ldst_regoff_3()
    {
        Assert.Inconclusive("Not handled LDRSB_64b_ldst_regoff - LDRSB       Xt, [Xn|SP, (Wm|Xm), extend{, amount}]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDRSB"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDRSB_32_ldst_immpost_4()
    {
        
        {
            var raw = LDRSB(W0, _[X2], 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDRSB_32_ldst_immpost, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDRSB, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDRSB W0, [X2], #5", asm);
        }
        
        {
            var raw = LDRSB(W15, _[X2], 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDRSB_32_ldst_immpost, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDRSB, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDRSB W15, [X2], #5", asm);
        }
        
        {
            var raw = LDRSB(WZR, _[X2], 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDRSB_32_ldst_immpost, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDRSB, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDRSB WZR, [X2], #5", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDRSB"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDRSB_64_ldst_immpost_5()
    {
        
        {
            var raw = LDRSB(X0, _[X2], 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDRSB_64_ldst_immpost, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDRSB, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDRSB X0, [X2], #5", asm);
        }
        
        {
            var raw = LDRSB(X15, _[X2], 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDRSB_64_ldst_immpost, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDRSB, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDRSB X15, [X2], #5", asm);
        }
        
        {
            var raw = LDRSB(XZR, _[X2], 5);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDRSB_64_ldst_immpost, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDRSB, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDRSB XZR, [X2], #5", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDRSB"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDRSB_32_ldst_immpre_6()
    {
        
        {
            var raw = LDRSB(W0, _[X2, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDRSB_32_ldst_immpre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDRSB, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDRSB W0, [X2, #5]!", asm);
        }
        
        {
            var raw = LDRSB(W15, _[X2, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDRSB_32_ldst_immpre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDRSB, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDRSB W15, [X2, #5]!", asm);
        }
        
        {
            var raw = LDRSB(WZR, _[X2, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDRSB_32_ldst_immpre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDRSB, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDRSB WZR, [X2, #5]!", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDRSB"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDRSB_64_ldst_immpre_7()
    {
        
        {
            var raw = LDRSB(X0, _[X2, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDRSB_64_ldst_immpre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDRSB, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDRSB X0, [X2, #5]!", asm);
        }
        
        {
            var raw = LDRSB(X15, _[X2, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDRSB_64_ldst_immpre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDRSB, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDRSB X15, [X2, #5]!", asm);
        }
        
        {
            var raw = LDRSB(XZR, _[X2, 5].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDRSB_64_ldst_immpre, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDRSB, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDRSB XZR, [X2, #5]!", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDRSB"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDRSB_32_ldst_pos_8()
    {
        
        {
            var raw = LDRSB(W0, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDRSB_32_ldst_pos, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDRSB, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDRSB W0, [X2, #5]", asm);
        }
        
        {
            var raw = LDRSB(W15, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDRSB_32_ldst_pos, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDRSB, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDRSB W15, [X2, #5]", asm);
        }
        
        {
            var raw = LDRSB(WZR, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDRSB_32_ldst_pos, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDRSB, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDRSB WZR, [X2, #5]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDRSB"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDRSB_64_ldst_pos_9()
    {
        
        {
            var raw = LDRSB(X0, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDRSB_64_ldst_pos, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDRSB, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDRSB X0, [X2, #5]", asm);
        }
        
        {
            var raw = LDRSB(X15, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDRSB_64_ldst_pos, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDRSB, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDRSB X15, [X2, #5]", asm);
        }
        
        {
            var raw = LDRSB(XZR, _[X2, 5]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.LDRSB_64_ldst_pos, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.LDRSB, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("LDRSB XZR, [X2, #5]", asm);
        }
    }
}
