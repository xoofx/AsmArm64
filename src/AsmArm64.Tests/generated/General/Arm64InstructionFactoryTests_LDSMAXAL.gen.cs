// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_LDSMAXAL_General : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDSMAXAL"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDSMAXAL_32_memop_0()
    {
        TestInst(LDSMAXAL(W0, W1, _[X3]), asm => asm.LDSMAXAL(W0, W1, _[X3]), Arm64InstructionId.LDSMAXAL_32_memop, Arm64Mnemonic.LDSMAXAL, "LDSMAXAL W0, W1, [X3]");
        TestInst(LDSMAXAL(W15, W1, _[X3]), asm => asm.LDSMAXAL(W15, W1, _[X3]), Arm64InstructionId.LDSMAXAL_32_memop, Arm64Mnemonic.LDSMAXAL, "LDSMAXAL W15, W1, [X3]");
        TestInst(LDSMAXAL(WZR, W1, _[X3]), asm => asm.LDSMAXAL(WZR, W1, _[X3]), Arm64InstructionId.LDSMAXAL_32_memop, Arm64Mnemonic.LDSMAXAL, "LDSMAXAL WZR, W1, [X3]");
        TestInst(LDSMAXAL(W0, W16, _[X3]), asm => asm.LDSMAXAL(W0, W16, _[X3]), Arm64InstructionId.LDSMAXAL_32_memop, Arm64Mnemonic.LDSMAXAL, "LDSMAXAL W0, W16, [X3]");
        TestInst(LDSMAXAL(W15, W16, _[X3]), asm => asm.LDSMAXAL(W15, W16, _[X3]), Arm64InstructionId.LDSMAXAL_32_memop, Arm64Mnemonic.LDSMAXAL, "LDSMAXAL W15, W16, [X3]");
        TestInst(LDSMAXAL(WZR, W16, _[X3]), asm => asm.LDSMAXAL(WZR, W16, _[X3]), Arm64InstructionId.LDSMAXAL_32_memop, Arm64Mnemonic.LDSMAXAL, "LDSMAXAL WZR, W16, [X3]");
        TestInst(LDSMAXAL(W0, WZR, _[X3]), asm => asm.LDSMAXAL(W0, WZR, _[X3]), Arm64InstructionId.LDSMAXAL_32_memop, Arm64Mnemonic.LDSMAXAL, "LDSMAXAL W0, WZR, [X3]");
        TestInst(LDSMAXAL(W15, WZR, _[X3]), asm => asm.LDSMAXAL(W15, WZR, _[X3]), Arm64InstructionId.LDSMAXAL_32_memop, Arm64Mnemonic.LDSMAXAL, "LDSMAXAL W15, WZR, [X3]");
        TestInst(LDSMAXAL(WZR, WZR, _[X3]), asm => asm.LDSMAXAL(WZR, WZR, _[X3]), Arm64InstructionId.LDSMAXAL_32_memop, Arm64Mnemonic.LDSMAXAL, "LDSMAXAL WZR, WZR, [X3]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDSMAXAL"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDSMAXAL_64_memop_1()
    {
        TestInst(LDSMAXAL(X0, X1, _[X3]), asm => asm.LDSMAXAL(X0, X1, _[X3]), Arm64InstructionId.LDSMAXAL_64_memop, Arm64Mnemonic.LDSMAXAL, "LDSMAXAL X0, X1, [X3]");
        TestInst(LDSMAXAL(X15, X1, _[X3]), asm => asm.LDSMAXAL(X15, X1, _[X3]), Arm64InstructionId.LDSMAXAL_64_memop, Arm64Mnemonic.LDSMAXAL, "LDSMAXAL X15, X1, [X3]");
        TestInst(LDSMAXAL(XZR, X1, _[X3]), asm => asm.LDSMAXAL(XZR, X1, _[X3]), Arm64InstructionId.LDSMAXAL_64_memop, Arm64Mnemonic.LDSMAXAL, "LDSMAXAL XZR, X1, [X3]");
        TestInst(LDSMAXAL(X0, X16, _[X3]), asm => asm.LDSMAXAL(X0, X16, _[X3]), Arm64InstructionId.LDSMAXAL_64_memop, Arm64Mnemonic.LDSMAXAL, "LDSMAXAL X0, X16, [X3]");
        TestInst(LDSMAXAL(X15, X16, _[X3]), asm => asm.LDSMAXAL(X15, X16, _[X3]), Arm64InstructionId.LDSMAXAL_64_memop, Arm64Mnemonic.LDSMAXAL, "LDSMAXAL X15, X16, [X3]");
        TestInst(LDSMAXAL(XZR, X16, _[X3]), asm => asm.LDSMAXAL(XZR, X16, _[X3]), Arm64InstructionId.LDSMAXAL_64_memop, Arm64Mnemonic.LDSMAXAL, "LDSMAXAL XZR, X16, [X3]");
        TestInst(LDSMAXAL(X0, XZR, _[X3]), asm => asm.LDSMAXAL(X0, XZR, _[X3]), Arm64InstructionId.LDSMAXAL_64_memop, Arm64Mnemonic.LDSMAXAL, "LDSMAXAL X0, XZR, [X3]");
        TestInst(LDSMAXAL(X15, XZR, _[X3]), asm => asm.LDSMAXAL(X15, XZR, _[X3]), Arm64InstructionId.LDSMAXAL_64_memop, Arm64Mnemonic.LDSMAXAL, "LDSMAXAL X15, XZR, [X3]");
        TestInst(LDSMAXAL(XZR, XZR, _[X3]), asm => asm.LDSMAXAL(XZR, XZR, _[X3]), Arm64InstructionId.LDSMAXAL_64_memop, Arm64Mnemonic.LDSMAXAL, "LDSMAXAL XZR, XZR, [X3]");
    }
}
