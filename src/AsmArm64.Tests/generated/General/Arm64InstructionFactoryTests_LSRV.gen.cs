// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_LSRV_General : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LSRV"/>.
    /// </summary>
    [TestMethod]
    public void Test_LSRV_32_dp_2src_0()
    {
        TestInst(LSRV(W0, W1, W2), asm => asm.LSRV(W0, W1, W2), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR W0, W1, W2");
        TestInst(LSRV(W15, W1, W2), asm => asm.LSRV(W15, W1, W2), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR W15, W1, W2");
        TestInst(LSRV(WZR, W1, W2), asm => asm.LSRV(WZR, W1, W2), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR WZR, W1, W2");
        TestInst(LSRV(W0, W16, W2), asm => asm.LSRV(W0, W16, W2), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR W0, W16, W2");
        TestInst(LSRV(W15, W16, W2), asm => asm.LSRV(W15, W16, W2), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR W15, W16, W2");
        TestInst(LSRV(WZR, W16, W2), asm => asm.LSRV(WZR, W16, W2), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR WZR, W16, W2");
        TestInst(LSRV(W0, WZR, W2), asm => asm.LSRV(W0, WZR, W2), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR W0, WZR, W2");
        TestInst(LSRV(W15, WZR, W2), asm => asm.LSRV(W15, WZR, W2), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR W15, WZR, W2");
        TestInst(LSRV(WZR, WZR, W2), asm => asm.LSRV(WZR, WZR, W2), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR WZR, WZR, W2");
        TestInst(LSRV(W0, W1, W17), asm => asm.LSRV(W0, W1, W17), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR W0, W1, W17");
        TestInst(LSRV(W15, W1, W17), asm => asm.LSRV(W15, W1, W17), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR W15, W1, W17");
        TestInst(LSRV(WZR, W1, W17), asm => asm.LSRV(WZR, W1, W17), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR WZR, W1, W17");
        TestInst(LSRV(W0, W16, W17), asm => asm.LSRV(W0, W16, W17), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR W0, W16, W17");
        TestInst(LSRV(W15, W16, W17), asm => asm.LSRV(W15, W16, W17), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR W15, W16, W17");
        TestInst(LSRV(WZR, W16, W17), asm => asm.LSRV(WZR, W16, W17), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR WZR, W16, W17");
        TestInst(LSRV(W0, WZR, W17), asm => asm.LSRV(W0, WZR, W17), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR W0, WZR, W17");
        TestInst(LSRV(W15, WZR, W17), asm => asm.LSRV(W15, WZR, W17), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR W15, WZR, W17");
        TestInst(LSRV(WZR, WZR, W17), asm => asm.LSRV(WZR, WZR, W17), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR WZR, WZR, W17");
        TestInst(LSRV(W0, W1, WZR), asm => asm.LSRV(W0, W1, WZR), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR W0, W1, WZR");
        TestInst(LSRV(W15, W1, WZR), asm => asm.LSRV(W15, W1, WZR), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR W15, W1, WZR");
        TestInst(LSRV(WZR, W1, WZR), asm => asm.LSRV(WZR, W1, WZR), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR WZR, W1, WZR");
        TestInst(LSRV(W0, W16, WZR), asm => asm.LSRV(W0, W16, WZR), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR W0, W16, WZR");
        TestInst(LSRV(W15, W16, WZR), asm => asm.LSRV(W15, W16, WZR), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR W15, W16, WZR");
        TestInst(LSRV(WZR, W16, WZR), asm => asm.LSRV(WZR, W16, WZR), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR WZR, W16, WZR");
        TestInst(LSRV(W0, WZR, WZR), asm => asm.LSRV(W0, WZR, WZR), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR W0, WZR, WZR");
        TestInst(LSRV(W15, WZR, WZR), asm => asm.LSRV(W15, WZR, WZR), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR W15, WZR, WZR");
        TestInst(LSRV(WZR, WZR, WZR), asm => asm.LSRV(WZR, WZR, WZR), Arm64InstructionId.LSR_lsrv_32_dp_2src, Arm64Mnemonic.LSR, "LSR WZR, WZR, WZR");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LSRV"/>.
    /// </summary>
    [TestMethod]
    public void Test_LSRV_64_dp_2src_1()
    {
        TestInst(LSRV(X0, X1, X2), asm => asm.LSRV(X0, X1, X2), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR X0, X1, X2");
        TestInst(LSRV(X15, X1, X2), asm => asm.LSRV(X15, X1, X2), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR X15, X1, X2");
        TestInst(LSRV(XZR, X1, X2), asm => asm.LSRV(XZR, X1, X2), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR XZR, X1, X2");
        TestInst(LSRV(X0, X16, X2), asm => asm.LSRV(X0, X16, X2), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR X0, X16, X2");
        TestInst(LSRV(X15, X16, X2), asm => asm.LSRV(X15, X16, X2), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR X15, X16, X2");
        TestInst(LSRV(XZR, X16, X2), asm => asm.LSRV(XZR, X16, X2), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR XZR, X16, X2");
        TestInst(LSRV(X0, XZR, X2), asm => asm.LSRV(X0, XZR, X2), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR X0, XZR, X2");
        TestInst(LSRV(X15, XZR, X2), asm => asm.LSRV(X15, XZR, X2), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR X15, XZR, X2");
        TestInst(LSRV(XZR, XZR, X2), asm => asm.LSRV(XZR, XZR, X2), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR XZR, XZR, X2");
        TestInst(LSRV(X0, X1, X17), asm => asm.LSRV(X0, X1, X17), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR X0, X1, X17");
        TestInst(LSRV(X15, X1, X17), asm => asm.LSRV(X15, X1, X17), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR X15, X1, X17");
        TestInst(LSRV(XZR, X1, X17), asm => asm.LSRV(XZR, X1, X17), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR XZR, X1, X17");
        TestInst(LSRV(X0, X16, X17), asm => asm.LSRV(X0, X16, X17), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR X0, X16, X17");
        TestInst(LSRV(X15, X16, X17), asm => asm.LSRV(X15, X16, X17), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR X15, X16, X17");
        TestInst(LSRV(XZR, X16, X17), asm => asm.LSRV(XZR, X16, X17), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR XZR, X16, X17");
        TestInst(LSRV(X0, XZR, X17), asm => asm.LSRV(X0, XZR, X17), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR X0, XZR, X17");
        TestInst(LSRV(X15, XZR, X17), asm => asm.LSRV(X15, XZR, X17), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR X15, XZR, X17");
        TestInst(LSRV(XZR, XZR, X17), asm => asm.LSRV(XZR, XZR, X17), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR XZR, XZR, X17");
        TestInst(LSRV(X0, X1, XZR), asm => asm.LSRV(X0, X1, XZR), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR X0, X1, XZR");
        TestInst(LSRV(X15, X1, XZR), asm => asm.LSRV(X15, X1, XZR), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR X15, X1, XZR");
        TestInst(LSRV(XZR, X1, XZR), asm => asm.LSRV(XZR, X1, XZR), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR XZR, X1, XZR");
        TestInst(LSRV(X0, X16, XZR), asm => asm.LSRV(X0, X16, XZR), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR X0, X16, XZR");
        TestInst(LSRV(X15, X16, XZR), asm => asm.LSRV(X15, X16, XZR), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR X15, X16, XZR");
        TestInst(LSRV(XZR, X16, XZR), asm => asm.LSRV(XZR, X16, XZR), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR XZR, X16, XZR");
        TestInst(LSRV(X0, XZR, XZR), asm => asm.LSRV(X0, XZR, XZR), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR X0, XZR, XZR");
        TestInst(LSRV(X15, XZR, XZR), asm => asm.LSRV(X15, XZR, XZR), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR X15, XZR, XZR");
        TestInst(LSRV(XZR, XZR, XZR), asm => asm.LSRV(XZR, XZR, XZR), Arm64InstructionId.LSR_lsrv_64_dp_2src, Arm64Mnemonic.LSR, "LSR XZR, XZR, XZR");
    }
}
