// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_STGP_General : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STGP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STGP_64_ldstpair_post_0()
    {
        TestInst(STGP(X0, X1, _[X3], 80), Arm64InstructionId.STGP_64_ldstpair_post, Arm64Mnemonic.STGP, "STGP X0, X1, [X3], #80");
        TestInst(STGP(X15, X1, _[X3], 80), Arm64InstructionId.STGP_64_ldstpair_post, Arm64Mnemonic.STGP, "STGP X15, X1, [X3], #80");
        TestInst(STGP(XZR, X1, _[X3], 80), Arm64InstructionId.STGP_64_ldstpair_post, Arm64Mnemonic.STGP, "STGP XZR, X1, [X3], #80");
        TestInst(STGP(X0, X16, _[X3], 80), Arm64InstructionId.STGP_64_ldstpair_post, Arm64Mnemonic.STGP, "STGP X0, X16, [X3], #80");
        TestInst(STGP(X15, X16, _[X3], 80), Arm64InstructionId.STGP_64_ldstpair_post, Arm64Mnemonic.STGP, "STGP X15, X16, [X3], #80");
        TestInst(STGP(XZR, X16, _[X3], 80), Arm64InstructionId.STGP_64_ldstpair_post, Arm64Mnemonic.STGP, "STGP XZR, X16, [X3], #80");
        TestInst(STGP(X0, XZR, _[X3], 80), Arm64InstructionId.STGP_64_ldstpair_post, Arm64Mnemonic.STGP, "STGP X0, XZR, [X3], #80");
        TestInst(STGP(X15, XZR, _[X3], 80), Arm64InstructionId.STGP_64_ldstpair_post, Arm64Mnemonic.STGP, "STGP X15, XZR, [X3], #80");
        TestInst(STGP(XZR, XZR, _[X3], 80), Arm64InstructionId.STGP_64_ldstpair_post, Arm64Mnemonic.STGP, "STGP XZR, XZR, [X3], #80");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STGP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STGP_64_ldstpair_pre_1()
    {
        TestInst(STGP(X0, X1, _[X3, 80].Pre), Arm64InstructionId.STGP_64_ldstpair_pre, Arm64Mnemonic.STGP, "STGP X0, X1, [X3, #80]!");
        TestInst(STGP(X15, X1, _[X3, 80].Pre), Arm64InstructionId.STGP_64_ldstpair_pre, Arm64Mnemonic.STGP, "STGP X15, X1, [X3, #80]!");
        TestInst(STGP(XZR, X1, _[X3, 80].Pre), Arm64InstructionId.STGP_64_ldstpair_pre, Arm64Mnemonic.STGP, "STGP XZR, X1, [X3, #80]!");
        TestInst(STGP(X0, X16, _[X3, 80].Pre), Arm64InstructionId.STGP_64_ldstpair_pre, Arm64Mnemonic.STGP, "STGP X0, X16, [X3, #80]!");
        TestInst(STGP(X15, X16, _[X3, 80].Pre), Arm64InstructionId.STGP_64_ldstpair_pre, Arm64Mnemonic.STGP, "STGP X15, X16, [X3, #80]!");
        TestInst(STGP(XZR, X16, _[X3, 80].Pre), Arm64InstructionId.STGP_64_ldstpair_pre, Arm64Mnemonic.STGP, "STGP XZR, X16, [X3, #80]!");
        TestInst(STGP(X0, XZR, _[X3, 80].Pre), Arm64InstructionId.STGP_64_ldstpair_pre, Arm64Mnemonic.STGP, "STGP X0, XZR, [X3, #80]!");
        TestInst(STGP(X15, XZR, _[X3, 80].Pre), Arm64InstructionId.STGP_64_ldstpair_pre, Arm64Mnemonic.STGP, "STGP X15, XZR, [X3, #80]!");
        TestInst(STGP(XZR, XZR, _[X3, 80].Pre), Arm64InstructionId.STGP_64_ldstpair_pre, Arm64Mnemonic.STGP, "STGP XZR, XZR, [X3, #80]!");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STGP"/>.
    /// </summary>
    [TestMethod]
    public void Test_STGP_64_ldstpair_off_2()
    {
        TestInst(STGP(X0, X1, _[X3, 80]), Arm64InstructionId.STGP_64_ldstpair_off, Arm64Mnemonic.STGP, "STGP X0, X1, [X3, #80]");
        TestInst(STGP(X15, X1, _[X3, 80]), Arm64InstructionId.STGP_64_ldstpair_off, Arm64Mnemonic.STGP, "STGP X15, X1, [X3, #80]");
        TestInst(STGP(XZR, X1, _[X3, 80]), Arm64InstructionId.STGP_64_ldstpair_off, Arm64Mnemonic.STGP, "STGP XZR, X1, [X3, #80]");
        TestInst(STGP(X0, X16, _[X3, 80]), Arm64InstructionId.STGP_64_ldstpair_off, Arm64Mnemonic.STGP, "STGP X0, X16, [X3, #80]");
        TestInst(STGP(X15, X16, _[X3, 80]), Arm64InstructionId.STGP_64_ldstpair_off, Arm64Mnemonic.STGP, "STGP X15, X16, [X3, #80]");
        TestInst(STGP(XZR, X16, _[X3, 80]), Arm64InstructionId.STGP_64_ldstpair_off, Arm64Mnemonic.STGP, "STGP XZR, X16, [X3, #80]");
        TestInst(STGP(X0, XZR, _[X3, 80]), Arm64InstructionId.STGP_64_ldstpair_off, Arm64Mnemonic.STGP, "STGP X0, XZR, [X3, #80]");
        TestInst(STGP(X15, XZR, _[X3, 80]), Arm64InstructionId.STGP_64_ldstpair_off, Arm64Mnemonic.STGP, "STGP X15, XZR, [X3, #80]");
        TestInst(STGP(XZR, XZR, _[X3, 80]), Arm64InstructionId.STGP_64_ldstpair_off, Arm64Mnemonic.STGP, "STGP XZR, XZR, [X3, #80]");
    }
}
