// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_ABS_General
{
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ABS"/>.
    /// </summary>
    [TestMethod]
    public void Test_ABS_32_dp_1src_0()
    {
        
        {
            var raw = ABS(W0, W1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ABS_32_dp_1src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ABS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ABS W0, W1", asm);
        }
        
        {
            var raw = ABS(W15, W1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ABS_32_dp_1src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ABS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ABS W15, W1", asm);
        }
        
        {
            var raw = ABS(WZR, W1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ABS_32_dp_1src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ABS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ABS WZR, W1", asm);
        }
        
        {
            var raw = ABS(W0, W16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ABS_32_dp_1src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ABS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ABS W0, W16", asm);
        }
        
        {
            var raw = ABS(W15, W16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ABS_32_dp_1src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ABS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ABS W15, W16", asm);
        }
        
        {
            var raw = ABS(WZR, W16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ABS_32_dp_1src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ABS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ABS WZR, W16", asm);
        }
        
        {
            var raw = ABS(W0, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ABS_32_dp_1src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ABS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ABS W0, WZR", asm);
        }
        
        {
            var raw = ABS(W15, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ABS_32_dp_1src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ABS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ABS W15, WZR", asm);
        }
        
        {
            var raw = ABS(WZR, WZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ABS_32_dp_1src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ABS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ABS WZR, WZR", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ABS"/>.
    /// </summary>
    [TestMethod]
    public void Test_ABS_64_dp_1src_1()
    {
        
        {
            var raw = ABS(X0, X1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ABS_64_dp_1src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ABS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ABS X0, X1", asm);
        }
        
        {
            var raw = ABS(X15, X1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ABS_64_dp_1src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ABS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ABS X15, X1", asm);
        }
        
        {
            var raw = ABS(XZR, X1);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ABS_64_dp_1src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ABS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ABS XZR, X1", asm);
        }
        
        {
            var raw = ABS(X0, X16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ABS_64_dp_1src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ABS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ABS X0, X16", asm);
        }
        
        {
            var raw = ABS(X15, X16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ABS_64_dp_1src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ABS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ABS X15, X16", asm);
        }
        
        {
            var raw = ABS(XZR, X16);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ABS_64_dp_1src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ABS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ABS XZR, X16", asm);
        }
        
        {
            var raw = ABS(X0, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ABS_64_dp_1src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ABS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ABS X0, XZR", asm);
        }
        
        {
            var raw = ABS(X15, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ABS_64_dp_1src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ABS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ABS X15, XZR", asm);
        }
        
        {
            var raw = ABS(XZR, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.ABS_64_dp_1src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.ABS, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("ABS XZR, XZR", asm);
        }
    }
}
