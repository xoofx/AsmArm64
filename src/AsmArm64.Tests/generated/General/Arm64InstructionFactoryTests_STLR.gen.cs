// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_STLR_General
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STLR"/>.
    /// </summary>
    [TestMethod]
    public void Test_STLR_sl32_ldstord_0()
    {
        
        {
            var raw = STLR(W0, _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STLR_sl32_ldstord, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STLR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STLR W0, [X2]", asm);
        }
        
        {
            var raw = STLR(W15, _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STLR_sl32_ldstord, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STLR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STLR W15, [X2]", asm);
        }
        
        {
            var raw = STLR(WZR, _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STLR_sl32_ldstord, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STLR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STLR WZR, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STLR"/>.
    /// </summary>
    [TestMethod]
    public void Test_STLR_sl64_ldstord_1()
    {
        
        {
            var raw = STLR(X0, _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STLR_sl64_ldstord, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STLR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STLR X0, [X2]", asm);
        }
        
        {
            var raw = STLR(X15, _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STLR_sl64_ldstord, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STLR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STLR X15, [X2]", asm);
        }
        
        {
            var raw = STLR(XZR, _[X2]);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STLR_sl64_ldstord, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STLR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STLR XZR, [X2]", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STLR"/>.
    /// </summary>
    [TestMethod]
    public void Test_STLR_32s_ldapstl_writeback_2()
    {
        
        {
            var raw = STLR(W0, _[X2, -4].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STLR_32s_ldapstl_writeback, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STLR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STLR W0, [X2, #-4]!", asm);
        }
        
        {
            var raw = STLR(W15, _[X2, -4].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STLR_32s_ldapstl_writeback, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STLR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STLR W15, [X2, #-4]!", asm);
        }
        
        {
            var raw = STLR(WZR, _[X2, -4].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STLR_32s_ldapstl_writeback, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STLR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STLR WZR, [X2, #-4]!", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STLR"/>.
    /// </summary>
    [TestMethod]
    public void Test_STLR_64s_ldapstl_writeback_3()
    {
        
        {
            var raw = STLR(X0, _[X2, -8].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STLR_64s_ldapstl_writeback, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STLR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STLR X0, [X2, #-8]!", asm);
        }
        
        {
            var raw = STLR(X15, _[X2, -8].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STLR_64s_ldapstl_writeback, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STLR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STLR X15, [X2, #-8]!", asm);
        }
        
        {
            var raw = STLR(XZR, _[X2, -8].Pre);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.STLR_64s_ldapstl_writeback, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.STLR, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("STLR XZR, [X2, #-8]!", asm);
        }
    }
}
