// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_MADDPT_General : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.MADDPT"/>.
    /// </summary>
    [TestMethod]
    public void Test_MADDPT_64a_dp_3src_0()
    {
        TestInst(MADDPT(X0, X1, X2, X3), asm => asm.MADDPT(X0, X1, X2, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, X1, X2, X3");
        TestInst(MADDPT(X15, X1, X2, X3), asm => asm.MADDPT(X15, X1, X2, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, X1, X2, X3");
        TestInst(MADDPT(XZR, X1, X2, X3), asm => asm.MADDPT(XZR, X1, X2, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, X1, X2, X3");
        TestInst(MADDPT(X0, X16, X2, X3), asm => asm.MADDPT(X0, X16, X2, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, X16, X2, X3");
        TestInst(MADDPT(X15, X16, X2, X3), asm => asm.MADDPT(X15, X16, X2, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, X16, X2, X3");
        TestInst(MADDPT(XZR, X16, X2, X3), asm => asm.MADDPT(XZR, X16, X2, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, X16, X2, X3");
        TestInst(MADDPT(X0, XZR, X2, X3), asm => asm.MADDPT(X0, XZR, X2, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, XZR, X2, X3");
        TestInst(MADDPT(X15, XZR, X2, X3), asm => asm.MADDPT(X15, XZR, X2, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, XZR, X2, X3");
        TestInst(MADDPT(XZR, XZR, X2, X3), asm => asm.MADDPT(XZR, XZR, X2, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, XZR, X2, X3");
        TestInst(MADDPT(X0, X1, X17, X3), asm => asm.MADDPT(X0, X1, X17, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, X1, X17, X3");
        TestInst(MADDPT(X15, X1, X17, X3), asm => asm.MADDPT(X15, X1, X17, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, X1, X17, X3");
        TestInst(MADDPT(XZR, X1, X17, X3), asm => asm.MADDPT(XZR, X1, X17, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, X1, X17, X3");
        TestInst(MADDPT(X0, X16, X17, X3), asm => asm.MADDPT(X0, X16, X17, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, X16, X17, X3");
        TestInst(MADDPT(X15, X16, X17, X3), asm => asm.MADDPT(X15, X16, X17, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, X16, X17, X3");
        TestInst(MADDPT(XZR, X16, X17, X3), asm => asm.MADDPT(XZR, X16, X17, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, X16, X17, X3");
        TestInst(MADDPT(X0, XZR, X17, X3), asm => asm.MADDPT(X0, XZR, X17, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, XZR, X17, X3");
        TestInst(MADDPT(X15, XZR, X17, X3), asm => asm.MADDPT(X15, XZR, X17, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, XZR, X17, X3");
        TestInst(MADDPT(XZR, XZR, X17, X3), asm => asm.MADDPT(XZR, XZR, X17, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, XZR, X17, X3");
        TestInst(MADDPT(X0, X1, XZR, X3), asm => asm.MADDPT(X0, X1, XZR, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, X1, XZR, X3");
        TestInst(MADDPT(X15, X1, XZR, X3), asm => asm.MADDPT(X15, X1, XZR, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, X1, XZR, X3");
        TestInst(MADDPT(XZR, X1, XZR, X3), asm => asm.MADDPT(XZR, X1, XZR, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, X1, XZR, X3");
        TestInst(MADDPT(X0, X16, XZR, X3), asm => asm.MADDPT(X0, X16, XZR, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, X16, XZR, X3");
        TestInst(MADDPT(X15, X16, XZR, X3), asm => asm.MADDPT(X15, X16, XZR, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, X16, XZR, X3");
        TestInst(MADDPT(XZR, X16, XZR, X3), asm => asm.MADDPT(XZR, X16, XZR, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, X16, XZR, X3");
        TestInst(MADDPT(X0, XZR, XZR, X3), asm => asm.MADDPT(X0, XZR, XZR, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, XZR, XZR, X3");
        TestInst(MADDPT(X15, XZR, XZR, X3), asm => asm.MADDPT(X15, XZR, XZR, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, XZR, XZR, X3");
        TestInst(MADDPT(XZR, XZR, XZR, X3), asm => asm.MADDPT(XZR, XZR, XZR, X3), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, XZR, XZR, X3");
        TestInst(MADDPT(X0, X1, X2, X18), asm => asm.MADDPT(X0, X1, X2, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, X1, X2, X18");
        TestInst(MADDPT(X15, X1, X2, X18), asm => asm.MADDPT(X15, X1, X2, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, X1, X2, X18");
        TestInst(MADDPT(XZR, X1, X2, X18), asm => asm.MADDPT(XZR, X1, X2, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, X1, X2, X18");
        TestInst(MADDPT(X0, X16, X2, X18), asm => asm.MADDPT(X0, X16, X2, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, X16, X2, X18");
        TestInst(MADDPT(X15, X16, X2, X18), asm => asm.MADDPT(X15, X16, X2, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, X16, X2, X18");
        TestInst(MADDPT(XZR, X16, X2, X18), asm => asm.MADDPT(XZR, X16, X2, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, X16, X2, X18");
        TestInst(MADDPT(X0, XZR, X2, X18), asm => asm.MADDPT(X0, XZR, X2, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, XZR, X2, X18");
        TestInst(MADDPT(X15, XZR, X2, X18), asm => asm.MADDPT(X15, XZR, X2, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, XZR, X2, X18");
        TestInst(MADDPT(XZR, XZR, X2, X18), asm => asm.MADDPT(XZR, XZR, X2, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, XZR, X2, X18");
        TestInst(MADDPT(X0, X1, X17, X18), asm => asm.MADDPT(X0, X1, X17, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, X1, X17, X18");
        TestInst(MADDPT(X15, X1, X17, X18), asm => asm.MADDPT(X15, X1, X17, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, X1, X17, X18");
        TestInst(MADDPT(XZR, X1, X17, X18), asm => asm.MADDPT(XZR, X1, X17, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, X1, X17, X18");
        TestInst(MADDPT(X0, X16, X17, X18), asm => asm.MADDPT(X0, X16, X17, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, X16, X17, X18");
        TestInst(MADDPT(X15, X16, X17, X18), asm => asm.MADDPT(X15, X16, X17, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, X16, X17, X18");
        TestInst(MADDPT(XZR, X16, X17, X18), asm => asm.MADDPT(XZR, X16, X17, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, X16, X17, X18");
        TestInst(MADDPT(X0, XZR, X17, X18), asm => asm.MADDPT(X0, XZR, X17, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, XZR, X17, X18");
        TestInst(MADDPT(X15, XZR, X17, X18), asm => asm.MADDPT(X15, XZR, X17, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, XZR, X17, X18");
        TestInst(MADDPT(XZR, XZR, X17, X18), asm => asm.MADDPT(XZR, XZR, X17, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, XZR, X17, X18");
        TestInst(MADDPT(X0, X1, XZR, X18), asm => asm.MADDPT(X0, X1, XZR, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, X1, XZR, X18");
        TestInst(MADDPT(X15, X1, XZR, X18), asm => asm.MADDPT(X15, X1, XZR, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, X1, XZR, X18");
        TestInst(MADDPT(XZR, X1, XZR, X18), asm => asm.MADDPT(XZR, X1, XZR, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, X1, XZR, X18");
        TestInst(MADDPT(X0, X16, XZR, X18), asm => asm.MADDPT(X0, X16, XZR, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, X16, XZR, X18");
        TestInst(MADDPT(X15, X16, XZR, X18), asm => asm.MADDPT(X15, X16, XZR, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, X16, XZR, X18");
        TestInst(MADDPT(XZR, X16, XZR, X18), asm => asm.MADDPT(XZR, X16, XZR, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, X16, XZR, X18");
        TestInst(MADDPT(X0, XZR, XZR, X18), asm => asm.MADDPT(X0, XZR, XZR, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, XZR, XZR, X18");
        TestInst(MADDPT(X15, XZR, XZR, X18), asm => asm.MADDPT(X15, XZR, XZR, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, XZR, XZR, X18");
        TestInst(MADDPT(XZR, XZR, XZR, X18), asm => asm.MADDPT(XZR, XZR, XZR, X18), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, XZR, XZR, X18");
        TestInst(MADDPT(X0, X1, X2, XZR), asm => asm.MADDPT(X0, X1, X2, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, X1, X2, XZR");
        TestInst(MADDPT(X15, X1, X2, XZR), asm => asm.MADDPT(X15, X1, X2, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, X1, X2, XZR");
        TestInst(MADDPT(XZR, X1, X2, XZR), asm => asm.MADDPT(XZR, X1, X2, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, X1, X2, XZR");
        TestInst(MADDPT(X0, X16, X2, XZR), asm => asm.MADDPT(X0, X16, X2, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, X16, X2, XZR");
        TestInst(MADDPT(X15, X16, X2, XZR), asm => asm.MADDPT(X15, X16, X2, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, X16, X2, XZR");
        TestInst(MADDPT(XZR, X16, X2, XZR), asm => asm.MADDPT(XZR, X16, X2, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, X16, X2, XZR");
        TestInst(MADDPT(X0, XZR, X2, XZR), asm => asm.MADDPT(X0, XZR, X2, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, XZR, X2, XZR");
        TestInst(MADDPT(X15, XZR, X2, XZR), asm => asm.MADDPT(X15, XZR, X2, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, XZR, X2, XZR");
        TestInst(MADDPT(XZR, XZR, X2, XZR), asm => asm.MADDPT(XZR, XZR, X2, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, XZR, X2, XZR");
        TestInst(MADDPT(X0, X1, X17, XZR), asm => asm.MADDPT(X0, X1, X17, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, X1, X17, XZR");
        TestInst(MADDPT(X15, X1, X17, XZR), asm => asm.MADDPT(X15, X1, X17, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, X1, X17, XZR");
        TestInst(MADDPT(XZR, X1, X17, XZR), asm => asm.MADDPT(XZR, X1, X17, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, X1, X17, XZR");
        TestInst(MADDPT(X0, X16, X17, XZR), asm => asm.MADDPT(X0, X16, X17, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, X16, X17, XZR");
        TestInst(MADDPT(X15, X16, X17, XZR), asm => asm.MADDPT(X15, X16, X17, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, X16, X17, XZR");
        TestInst(MADDPT(XZR, X16, X17, XZR), asm => asm.MADDPT(XZR, X16, X17, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, X16, X17, XZR");
        TestInst(MADDPT(X0, XZR, X17, XZR), asm => asm.MADDPT(X0, XZR, X17, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, XZR, X17, XZR");
        TestInst(MADDPT(X15, XZR, X17, XZR), asm => asm.MADDPT(X15, XZR, X17, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, XZR, X17, XZR");
        TestInst(MADDPT(XZR, XZR, X17, XZR), asm => asm.MADDPT(XZR, XZR, X17, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, XZR, X17, XZR");
        TestInst(MADDPT(X0, X1, XZR, XZR), asm => asm.MADDPT(X0, X1, XZR, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, X1, XZR, XZR");
        TestInst(MADDPT(X15, X1, XZR, XZR), asm => asm.MADDPT(X15, X1, XZR, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, X1, XZR, XZR");
        TestInst(MADDPT(XZR, X1, XZR, XZR), asm => asm.MADDPT(XZR, X1, XZR, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, X1, XZR, XZR");
        TestInst(MADDPT(X0, X16, XZR, XZR), asm => asm.MADDPT(X0, X16, XZR, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, X16, XZR, XZR");
        TestInst(MADDPT(X15, X16, XZR, XZR), asm => asm.MADDPT(X15, X16, XZR, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, X16, XZR, XZR");
        TestInst(MADDPT(XZR, X16, XZR, XZR), asm => asm.MADDPT(XZR, X16, XZR, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, X16, XZR, XZR");
        TestInst(MADDPT(X0, XZR, XZR, XZR), asm => asm.MADDPT(X0, XZR, XZR, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X0, XZR, XZR, XZR");
        TestInst(MADDPT(X15, XZR, XZR, XZR), asm => asm.MADDPT(X15, XZR, XZR, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT X15, XZR, XZR, XZR");
        TestInst(MADDPT(XZR, XZR, XZR, XZR), asm => asm.MADDPT(XZR, XZR, XZR, XZR), Arm64InstructionId.MADDPT_64a_dp_3src, Arm64Mnemonic.MADDPT, "MADDPT XZR, XZR, XZR, XZR");
    }
}
