// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_CBNE_General
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.CBNE"/>.
    /// </summary>
    [TestMethod]
    public void Test_CBNE_32_imm_0()
    {
        
        {
            var raw = CBNE(W0, 5, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CBNE_32_imm, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CBNE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CBNE W0, #5, #32", asm);
        }
        
        {
            var raw = CBNE(W15, 5, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CBNE_32_imm, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CBNE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CBNE W15, #5, #32", asm);
        }
        
        {
            var raw = CBNE(WZR, 5, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CBNE_32_imm, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CBNE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CBNE WZR, #5, #32", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.CBNE"/>.
    /// </summary>
    [TestMethod]
    public void Test_CBNE_64_imm_1()
    {
        
        {
            var raw = CBNE(X0, 5, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CBNE_64_imm, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CBNE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CBNE X0, #5, #32", asm);
        }
        
        {
            var raw = CBNE(X15, 5, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CBNE_64_imm, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CBNE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CBNE X15, #5, #32", asm);
        }
        
        {
            var raw = CBNE(XZR, 5, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CBNE_64_imm, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CBNE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CBNE XZR, #5, #32", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.CBNE"/>.
    /// </summary>
    [TestMethod]
    public void Test_CBNE_32_regs_2()
    {
        
        {
            var raw = CBNE(W0, W1, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CBNE_32_regs, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CBNE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CBNE W0, W1, #32", asm);
        }
        
        {
            var raw = CBNE(W15, W1, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CBNE_32_regs, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CBNE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CBNE W15, W1, #32", asm);
        }
        
        {
            var raw = CBNE(WZR, W1, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CBNE_32_regs, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CBNE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CBNE WZR, W1, #32", asm);
        }
        
        {
            var raw = CBNE(W0, W16, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CBNE_32_regs, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CBNE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CBNE W0, W16, #32", asm);
        }
        
        {
            var raw = CBNE(W15, W16, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CBNE_32_regs, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CBNE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CBNE W15, W16, #32", asm);
        }
        
        {
            var raw = CBNE(WZR, W16, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CBNE_32_regs, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CBNE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CBNE WZR, W16, #32", asm);
        }
        
        {
            var raw = CBNE(W0, WZR, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CBNE_32_regs, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CBNE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CBNE W0, WZR, #32", asm);
        }
        
        {
            var raw = CBNE(W15, WZR, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CBNE_32_regs, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CBNE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CBNE W15, WZR, #32", asm);
        }
        
        {
            var raw = CBNE(WZR, WZR, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CBNE_32_regs, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CBNE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CBNE WZR, WZR, #32", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.CBNE"/>.
    /// </summary>
    [TestMethod]
    public void Test_CBNE_64_regs_3()
    {
        
        {
            var raw = CBNE(X0, X1, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CBNE_64_regs, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CBNE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CBNE X0, X1, #32", asm);
        }
        
        {
            var raw = CBNE(X15, X1, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CBNE_64_regs, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CBNE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CBNE X15, X1, #32", asm);
        }
        
        {
            var raw = CBNE(XZR, X1, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CBNE_64_regs, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CBNE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CBNE XZR, X1, #32", asm);
        }
        
        {
            var raw = CBNE(X0, X16, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CBNE_64_regs, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CBNE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CBNE X0, X16, #32", asm);
        }
        
        {
            var raw = CBNE(X15, X16, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CBNE_64_regs, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CBNE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CBNE X15, X16, #32", asm);
        }
        
        {
            var raw = CBNE(XZR, X16, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CBNE_64_regs, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CBNE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CBNE XZR, X16, #32", asm);
        }
        
        {
            var raw = CBNE(X0, XZR, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CBNE_64_regs, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CBNE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CBNE X0, XZR, #32", asm);
        }
        
        {
            var raw = CBNE(X15, XZR, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CBNE_64_regs, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CBNE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CBNE X15, XZR, #32", asm);
        }
        
        {
            var raw = CBNE(XZR, XZR, 32);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CBNE_64_regs, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CBNE, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CBNE XZR, XZR, #32", asm);
        }
    }
}
