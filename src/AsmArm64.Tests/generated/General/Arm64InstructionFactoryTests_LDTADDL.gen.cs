// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_LDTADDL_General : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDTADDL"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDTADDL_32_memop_unpriv_0()
    {
        TestInst(LDTADDL(W0, W1, _[X3]), asm => asm.LDTADDL(W0, W1, _[X3]), Arm64InstructionId.LDTADDL_32_memop_unpriv, Arm64Mnemonic.LDTADDL, "LDTADDL W0, W1, [X3]");
        TestInst(LDTADDL(W15, W1, _[X3]), asm => asm.LDTADDL(W15, W1, _[X3]), Arm64InstructionId.LDTADDL_32_memop_unpriv, Arm64Mnemonic.LDTADDL, "LDTADDL W15, W1, [X3]");
        TestInst(LDTADDL(WZR, W1, _[X3]), asm => asm.LDTADDL(WZR, W1, _[X3]), Arm64InstructionId.LDTADDL_32_memop_unpriv, Arm64Mnemonic.LDTADDL, "LDTADDL WZR, W1, [X3]");
        TestInst(LDTADDL(W0, W16, _[X3]), asm => asm.LDTADDL(W0, W16, _[X3]), Arm64InstructionId.LDTADDL_32_memop_unpriv, Arm64Mnemonic.LDTADDL, "LDTADDL W0, W16, [X3]");
        TestInst(LDTADDL(W15, W16, _[X3]), asm => asm.LDTADDL(W15, W16, _[X3]), Arm64InstructionId.LDTADDL_32_memop_unpriv, Arm64Mnemonic.LDTADDL, "LDTADDL W15, W16, [X3]");
        TestInst(LDTADDL(WZR, W16, _[X3]), asm => asm.LDTADDL(WZR, W16, _[X3]), Arm64InstructionId.LDTADDL_32_memop_unpriv, Arm64Mnemonic.LDTADDL, "LDTADDL WZR, W16, [X3]");
        TestInst(LDTADDL(W0, WZR, _[X3]), asm => asm.LDTADDL(W0, WZR, _[X3]), Arm64InstructionId.STTADDL_ldtaddl_32_memop_unpriv, Arm64Mnemonic.STTADDL, "STTADDL W0, [X3]");
        TestInst(LDTADDL(W15, WZR, _[X3]), asm => asm.LDTADDL(W15, WZR, _[X3]), Arm64InstructionId.STTADDL_ldtaddl_32_memop_unpriv, Arm64Mnemonic.STTADDL, "STTADDL W15, [X3]");
        TestInst(LDTADDL(WZR, WZR, _[X3]), asm => asm.LDTADDL(WZR, WZR, _[X3]), Arm64InstructionId.STTADDL_ldtaddl_32_memop_unpriv, Arm64Mnemonic.STTADDL, "STTADDL WZR, [X3]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDTADDL"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDTADDL_64_memop_unpriv_1()
    {
        TestInst(LDTADDL(X0, X1, _[X3]), asm => asm.LDTADDL(X0, X1, _[X3]), Arm64InstructionId.LDTADDL_64_memop_unpriv, Arm64Mnemonic.LDTADDL, "LDTADDL X0, X1, [X3]");
        TestInst(LDTADDL(X15, X1, _[X3]), asm => asm.LDTADDL(X15, X1, _[X3]), Arm64InstructionId.LDTADDL_64_memop_unpriv, Arm64Mnemonic.LDTADDL, "LDTADDL X15, X1, [X3]");
        TestInst(LDTADDL(XZR, X1, _[X3]), asm => asm.LDTADDL(XZR, X1, _[X3]), Arm64InstructionId.LDTADDL_64_memop_unpriv, Arm64Mnemonic.LDTADDL, "LDTADDL XZR, X1, [X3]");
        TestInst(LDTADDL(X0, X16, _[X3]), asm => asm.LDTADDL(X0, X16, _[X3]), Arm64InstructionId.LDTADDL_64_memop_unpriv, Arm64Mnemonic.LDTADDL, "LDTADDL X0, X16, [X3]");
        TestInst(LDTADDL(X15, X16, _[X3]), asm => asm.LDTADDL(X15, X16, _[X3]), Arm64InstructionId.LDTADDL_64_memop_unpriv, Arm64Mnemonic.LDTADDL, "LDTADDL X15, X16, [X3]");
        TestInst(LDTADDL(XZR, X16, _[X3]), asm => asm.LDTADDL(XZR, X16, _[X3]), Arm64InstructionId.LDTADDL_64_memop_unpriv, Arm64Mnemonic.LDTADDL, "LDTADDL XZR, X16, [X3]");
        TestInst(LDTADDL(X0, XZR, _[X3]), asm => asm.LDTADDL(X0, XZR, _[X3]), Arm64InstructionId.STTADDL_ldtaddl_64_memop_unpriv, Arm64Mnemonic.STTADDL, "STTADDL X0, [X3]");
        TestInst(LDTADDL(X15, XZR, _[X3]), asm => asm.LDTADDL(X15, XZR, _[X3]), Arm64InstructionId.STTADDL_ldtaddl_64_memop_unpriv, Arm64Mnemonic.STTADDL, "STTADDL X15, [X3]");
        TestInst(LDTADDL(XZR, XZR, _[X3]), asm => asm.LDTADDL(XZR, XZR, _[X3]), Arm64InstructionId.STTADDL_ldtaddl_64_memop_unpriv, Arm64Mnemonic.STTADDL, "STTADDL XZR, [X3]");
    }
}
