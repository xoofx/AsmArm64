// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_LDTSET_General : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDTSET"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDTSET_32_memop_unpriv_0()
    {
        TestInst(LDTSET(W0, W1, _[X3]), Arm64InstructionId.LDTSET_32_memop_unpriv, Arm64Mnemonic.LDTSET, "LDTSET W0, W1, [X3]");
        TestInst(LDTSET(W15, W1, _[X3]), Arm64InstructionId.LDTSET_32_memop_unpriv, Arm64Mnemonic.LDTSET, "LDTSET W15, W1, [X3]");
        TestInst(LDTSET(WZR, W1, _[X3]), Arm64InstructionId.LDTSET_32_memop_unpriv, Arm64Mnemonic.LDTSET, "LDTSET WZR, W1, [X3]");
        TestInst(LDTSET(W0, W16, _[X3]), Arm64InstructionId.LDTSET_32_memop_unpriv, Arm64Mnemonic.LDTSET, "LDTSET W0, W16, [X3]");
        TestInst(LDTSET(W15, W16, _[X3]), Arm64InstructionId.LDTSET_32_memop_unpriv, Arm64Mnemonic.LDTSET, "LDTSET W15, W16, [X3]");
        TestInst(LDTSET(WZR, W16, _[X3]), Arm64InstructionId.LDTSET_32_memop_unpriv, Arm64Mnemonic.LDTSET, "LDTSET WZR, W16, [X3]");
        TestInst(LDTSET(W0, WZR, _[X3]), Arm64InstructionId.STTSET_ldtset_32_memop_unpriv, Arm64Mnemonic.STTSET, "STTSET W0, [X3]");
        TestInst(LDTSET(W15, WZR, _[X3]), Arm64InstructionId.STTSET_ldtset_32_memop_unpriv, Arm64Mnemonic.STTSET, "STTSET W15, [X3]");
        TestInst(LDTSET(WZR, WZR, _[X3]), Arm64InstructionId.STTSET_ldtset_32_memop_unpriv, Arm64Mnemonic.STTSET, "STTSET WZR, [X3]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.LDTSET"/>.
    /// </summary>
    [TestMethod]
    public void Test_LDTSET_64_memop_unpriv_1()
    {
        TestInst(LDTSET(X0, X1, _[X3]), Arm64InstructionId.LDTSET_64_memop_unpriv, Arm64Mnemonic.LDTSET, "LDTSET X0, X1, [X3]");
        TestInst(LDTSET(X15, X1, _[X3]), Arm64InstructionId.LDTSET_64_memop_unpriv, Arm64Mnemonic.LDTSET, "LDTSET X15, X1, [X3]");
        TestInst(LDTSET(XZR, X1, _[X3]), Arm64InstructionId.LDTSET_64_memop_unpriv, Arm64Mnemonic.LDTSET, "LDTSET XZR, X1, [X3]");
        TestInst(LDTSET(X0, X16, _[X3]), Arm64InstructionId.LDTSET_64_memop_unpriv, Arm64Mnemonic.LDTSET, "LDTSET X0, X16, [X3]");
        TestInst(LDTSET(X15, X16, _[X3]), Arm64InstructionId.LDTSET_64_memop_unpriv, Arm64Mnemonic.LDTSET, "LDTSET X15, X16, [X3]");
        TestInst(LDTSET(XZR, X16, _[X3]), Arm64InstructionId.LDTSET_64_memop_unpriv, Arm64Mnemonic.LDTSET, "LDTSET XZR, X16, [X3]");
        TestInst(LDTSET(X0, XZR, _[X3]), Arm64InstructionId.STTSET_ldtset_64_memop_unpriv, Arm64Mnemonic.STTSET, "STTSET X0, [X3]");
        TestInst(LDTSET(X15, XZR, _[X3]), Arm64InstructionId.STTSET_ldtset_64_memop_unpriv, Arm64Mnemonic.STTSET, "STTSET X15, [X3]");
        TestInst(LDTSET(XZR, XZR, _[X3]), Arm64InstructionId.STTSET_ldtset_64_memop_unpriv, Arm64Mnemonic.STTSET, "STTSET XZR, [X3]");
    }
}
