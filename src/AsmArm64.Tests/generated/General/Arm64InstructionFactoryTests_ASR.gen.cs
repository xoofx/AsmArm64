// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_ASR_General : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ASR"/>.
    /// </summary>
    [TestMethod]
    public void Test_ASR_sbfm_32m_bitfield_0()
    {
        TestInst(ASR(W0, W1, 5), Arm64InstructionId.ASR_sbfm_32m_bitfield, Arm64Mnemonic.ASR, "ASR W0, W1, #5");
        TestInst(ASR(W15, W1, 5), Arm64InstructionId.ASR_sbfm_32m_bitfield, Arm64Mnemonic.ASR, "ASR W15, W1, #5");
        TestInst(ASR(WZR, W1, 5), Arm64InstructionId.ASR_sbfm_32m_bitfield, Arm64Mnemonic.ASR, "ASR WZR, W1, #5");
        TestInst(ASR(W0, W16, 5), Arm64InstructionId.ASR_sbfm_32m_bitfield, Arm64Mnemonic.ASR, "ASR W0, W16, #5");
        TestInst(ASR(W15, W16, 5), Arm64InstructionId.ASR_sbfm_32m_bitfield, Arm64Mnemonic.ASR, "ASR W15, W16, #5");
        TestInst(ASR(WZR, W16, 5), Arm64InstructionId.ASR_sbfm_32m_bitfield, Arm64Mnemonic.ASR, "ASR WZR, W16, #5");
        TestInst(ASR(W0, WZR, 5), Arm64InstructionId.ASR_sbfm_32m_bitfield, Arm64Mnemonic.ASR, "ASR W0, WZR, #5");
        TestInst(ASR(W15, WZR, 5), Arm64InstructionId.ASR_sbfm_32m_bitfield, Arm64Mnemonic.ASR, "ASR W15, WZR, #5");
        TestInst(ASR(WZR, WZR, 5), Arm64InstructionId.ASR_sbfm_32m_bitfield, Arm64Mnemonic.ASR, "ASR WZR, WZR, #5");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ASR"/>.
    /// </summary>
    [TestMethod]
    public void Test_ASR_sbfm_64m_bitfield_1()
    {
        TestInst(ASR(X0, X1, 5), Arm64InstructionId.ASR_sbfm_64m_bitfield, Arm64Mnemonic.ASR, "ASR X0, X1, #5");
        TestInst(ASR(X15, X1, 5), Arm64InstructionId.ASR_sbfm_64m_bitfield, Arm64Mnemonic.ASR, "ASR X15, X1, #5");
        TestInst(ASR(XZR, X1, 5), Arm64InstructionId.ASR_sbfm_64m_bitfield, Arm64Mnemonic.ASR, "ASR XZR, X1, #5");
        TestInst(ASR(X0, X16, 5), Arm64InstructionId.ASR_sbfm_64m_bitfield, Arm64Mnemonic.ASR, "ASR X0, X16, #5");
        TestInst(ASR(X15, X16, 5), Arm64InstructionId.ASR_sbfm_64m_bitfield, Arm64Mnemonic.ASR, "ASR X15, X16, #5");
        TestInst(ASR(XZR, X16, 5), Arm64InstructionId.ASR_sbfm_64m_bitfield, Arm64Mnemonic.ASR, "ASR XZR, X16, #5");
        TestInst(ASR(X0, XZR, 5), Arm64InstructionId.ASR_sbfm_64m_bitfield, Arm64Mnemonic.ASR, "ASR X0, XZR, #5");
        TestInst(ASR(X15, XZR, 5), Arm64InstructionId.ASR_sbfm_64m_bitfield, Arm64Mnemonic.ASR, "ASR X15, XZR, #5");
        TestInst(ASR(XZR, XZR, 5), Arm64InstructionId.ASR_sbfm_64m_bitfield, Arm64Mnemonic.ASR, "ASR XZR, XZR, #5");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ASR"/>.
    /// </summary>
    [TestMethod]
    public void Test_ASR_asrv_32_dp_2src_2()
    {
        TestInst(ASR(W0, W1, W2), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR W0, W1, W2");
        TestInst(ASR(W15, W1, W2), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR W15, W1, W2");
        TestInst(ASR(WZR, W1, W2), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR WZR, W1, W2");
        TestInst(ASR(W0, W16, W2), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR W0, W16, W2");
        TestInst(ASR(W15, W16, W2), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR W15, W16, W2");
        TestInst(ASR(WZR, W16, W2), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR WZR, W16, W2");
        TestInst(ASR(W0, WZR, W2), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR W0, WZR, W2");
        TestInst(ASR(W15, WZR, W2), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR W15, WZR, W2");
        TestInst(ASR(WZR, WZR, W2), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR WZR, WZR, W2");
        TestInst(ASR(W0, W1, W17), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR W0, W1, W17");
        TestInst(ASR(W15, W1, W17), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR W15, W1, W17");
        TestInst(ASR(WZR, W1, W17), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR WZR, W1, W17");
        TestInst(ASR(W0, W16, W17), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR W0, W16, W17");
        TestInst(ASR(W15, W16, W17), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR W15, W16, W17");
        TestInst(ASR(WZR, W16, W17), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR WZR, W16, W17");
        TestInst(ASR(W0, WZR, W17), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR W0, WZR, W17");
        TestInst(ASR(W15, WZR, W17), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR W15, WZR, W17");
        TestInst(ASR(WZR, WZR, W17), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR WZR, WZR, W17");
        TestInst(ASR(W0, W1, WZR), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR W0, W1, WZR");
        TestInst(ASR(W15, W1, WZR), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR W15, W1, WZR");
        TestInst(ASR(WZR, W1, WZR), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR WZR, W1, WZR");
        TestInst(ASR(W0, W16, WZR), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR W0, W16, WZR");
        TestInst(ASR(W15, W16, WZR), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR W15, W16, WZR");
        TestInst(ASR(WZR, W16, WZR), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR WZR, W16, WZR");
        TestInst(ASR(W0, WZR, WZR), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR W0, WZR, WZR");
        TestInst(ASR(W15, WZR, WZR), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR W15, WZR, WZR");
        TestInst(ASR(WZR, WZR, WZR), Arm64InstructionId.ASR_asrv_32_dp_2src, Arm64Mnemonic.ASR, "ASR WZR, WZR, WZR");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.ASR"/>.
    /// </summary>
    [TestMethod]
    public void Test_ASR_asrv_64_dp_2src_3()
    {
        TestInst(ASR(X0, X1, X2), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR X0, X1, X2");
        TestInst(ASR(X15, X1, X2), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR X15, X1, X2");
        TestInst(ASR(XZR, X1, X2), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR XZR, X1, X2");
        TestInst(ASR(X0, X16, X2), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR X0, X16, X2");
        TestInst(ASR(X15, X16, X2), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR X15, X16, X2");
        TestInst(ASR(XZR, X16, X2), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR XZR, X16, X2");
        TestInst(ASR(X0, XZR, X2), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR X0, XZR, X2");
        TestInst(ASR(X15, XZR, X2), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR X15, XZR, X2");
        TestInst(ASR(XZR, XZR, X2), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR XZR, XZR, X2");
        TestInst(ASR(X0, X1, X17), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR X0, X1, X17");
        TestInst(ASR(X15, X1, X17), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR X15, X1, X17");
        TestInst(ASR(XZR, X1, X17), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR XZR, X1, X17");
        TestInst(ASR(X0, X16, X17), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR X0, X16, X17");
        TestInst(ASR(X15, X16, X17), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR X15, X16, X17");
        TestInst(ASR(XZR, X16, X17), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR XZR, X16, X17");
        TestInst(ASR(X0, XZR, X17), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR X0, XZR, X17");
        TestInst(ASR(X15, XZR, X17), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR X15, XZR, X17");
        TestInst(ASR(XZR, XZR, X17), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR XZR, XZR, X17");
        TestInst(ASR(X0, X1, XZR), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR X0, X1, XZR");
        TestInst(ASR(X15, X1, XZR), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR X15, X1, XZR");
        TestInst(ASR(XZR, X1, XZR), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR XZR, X1, XZR");
        TestInst(ASR(X0, X16, XZR), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR X0, X16, XZR");
        TestInst(ASR(X15, X16, XZR), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR X15, X16, XZR");
        TestInst(ASR(XZR, X16, XZR), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR XZR, X16, XZR");
        TestInst(ASR(X0, XZR, XZR), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR X0, XZR, XZR");
        TestInst(ASR(X15, XZR, XZR), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR X15, XZR, XZR");
        TestInst(ASR(XZR, XZR, XZR), Arm64InstructionId.ASR_asrv_64_dp_2src, Arm64Mnemonic.ASR, "ASR XZR, XZR, XZR");
    }
}
