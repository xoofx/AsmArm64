// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_CASLT_General : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.CASLT"/>.
    /// </summary>
    [TestMethod]
    public void Test_CASLT_c64_comswap_unpriv_0()
    {
        TestInst(CASLT(X0, X1, _[X3]), Arm64InstructionId.CASLT_c64_comswap_unpriv, Arm64Mnemonic.CASLT, "CASLT X0, X1, [X3]");
        TestInst(CASLT(X15, X1, _[X3]), Arm64InstructionId.CASLT_c64_comswap_unpriv, Arm64Mnemonic.CASLT, "CASLT X15, X1, [X3]");
        TestInst(CASLT(XZR, X1, _[X3]), Arm64InstructionId.CASLT_c64_comswap_unpriv, Arm64Mnemonic.CASLT, "CASLT XZR, X1, [X3]");
        TestInst(CASLT(X0, X16, _[X3]), Arm64InstructionId.CASLT_c64_comswap_unpriv, Arm64Mnemonic.CASLT, "CASLT X0, X16, [X3]");
        TestInst(CASLT(X15, X16, _[X3]), Arm64InstructionId.CASLT_c64_comswap_unpriv, Arm64Mnemonic.CASLT, "CASLT X15, X16, [X3]");
        TestInst(CASLT(XZR, X16, _[X3]), Arm64InstructionId.CASLT_c64_comswap_unpriv, Arm64Mnemonic.CASLT, "CASLT XZR, X16, [X3]");
        TestInst(CASLT(X0, XZR, _[X3]), Arm64InstructionId.CASLT_c64_comswap_unpriv, Arm64Mnemonic.CASLT, "CASLT X0, XZR, [X3]");
        TestInst(CASLT(X15, XZR, _[X3]), Arm64InstructionId.CASLT_c64_comswap_unpriv, Arm64Mnemonic.CASLT, "CASLT X15, XZR, [X3]");
        TestInst(CASLT(XZR, XZR, _[X3]), Arm64InstructionId.CASLT_c64_comswap_unpriv, Arm64Mnemonic.CASLT, "CASLT XZR, XZR, [X3]");
    }
}
