// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_RBIT_General : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.RBIT"/>.
    /// </summary>
    [TestMethod]
    public void Test_RBIT_32_dp_1src_0()
    {
        TestInst(RBIT(W0, W1), Arm64InstructionId.RBIT_32_dp_1src, Arm64Mnemonic.RBIT, "RBIT W0, W1");
        TestInst(RBIT(W15, W1), Arm64InstructionId.RBIT_32_dp_1src, Arm64Mnemonic.RBIT, "RBIT W15, W1");
        TestInst(RBIT(WZR, W1), Arm64InstructionId.RBIT_32_dp_1src, Arm64Mnemonic.RBIT, "RBIT WZR, W1");
        TestInst(RBIT(W0, W16), Arm64InstructionId.RBIT_32_dp_1src, Arm64Mnemonic.RBIT, "RBIT W0, W16");
        TestInst(RBIT(W15, W16), Arm64InstructionId.RBIT_32_dp_1src, Arm64Mnemonic.RBIT, "RBIT W15, W16");
        TestInst(RBIT(WZR, W16), Arm64InstructionId.RBIT_32_dp_1src, Arm64Mnemonic.RBIT, "RBIT WZR, W16");
        TestInst(RBIT(W0, WZR), Arm64InstructionId.RBIT_32_dp_1src, Arm64Mnemonic.RBIT, "RBIT W0, WZR");
        TestInst(RBIT(W15, WZR), Arm64InstructionId.RBIT_32_dp_1src, Arm64Mnemonic.RBIT, "RBIT W15, WZR");
        TestInst(RBIT(WZR, WZR), Arm64InstructionId.RBIT_32_dp_1src, Arm64Mnemonic.RBIT, "RBIT WZR, WZR");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.RBIT"/>.
    /// </summary>
    [TestMethod]
    public void Test_RBIT_64_dp_1src_1()
    {
        TestInst(RBIT(X0, X1), Arm64InstructionId.RBIT_64_dp_1src, Arm64Mnemonic.RBIT, "RBIT X0, X1");
        TestInst(RBIT(X15, X1), Arm64InstructionId.RBIT_64_dp_1src, Arm64Mnemonic.RBIT, "RBIT X15, X1");
        TestInst(RBIT(XZR, X1), Arm64InstructionId.RBIT_64_dp_1src, Arm64Mnemonic.RBIT, "RBIT XZR, X1");
        TestInst(RBIT(X0, X16), Arm64InstructionId.RBIT_64_dp_1src, Arm64Mnemonic.RBIT, "RBIT X0, X16");
        TestInst(RBIT(X15, X16), Arm64InstructionId.RBIT_64_dp_1src, Arm64Mnemonic.RBIT, "RBIT X15, X16");
        TestInst(RBIT(XZR, X16), Arm64InstructionId.RBIT_64_dp_1src, Arm64Mnemonic.RBIT, "RBIT XZR, X16");
        TestInst(RBIT(X0, XZR), Arm64InstructionId.RBIT_64_dp_1src, Arm64Mnemonic.RBIT, "RBIT X0, XZR");
        TestInst(RBIT(X15, XZR), Arm64InstructionId.RBIT_64_dp_1src, Arm64Mnemonic.RBIT, "RBIT X15, XZR");
        TestInst(RBIT(XZR, XZR), Arm64InstructionId.RBIT_64_dp_1src, Arm64Mnemonic.RBIT, "RBIT XZR, XZR");
    }
}
