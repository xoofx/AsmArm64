// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_CCMP_General : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.CCMP"/>.
    /// </summary>
    [TestMethod]
    public void Test_CCMP_32_condcmp_imm_0()
    {
        TestInst(CCMP(W0, 5, 5, NE), Arm64InstructionId.CCMP_32_condcmp_imm, Arm64Mnemonic.CCMP, "CCMP W0, #5, #5, NE");
        TestInst(CCMP(W15, 5, 5, NE), Arm64InstructionId.CCMP_32_condcmp_imm, Arm64Mnemonic.CCMP, "CCMP W15, #5, #5, NE");
        TestInst(CCMP(WZR, 5, 5, NE), Arm64InstructionId.CCMP_32_condcmp_imm, Arm64Mnemonic.CCMP, "CCMP WZR, #5, #5, NE");
        TestInst(CCMP(W0, 5, 5, HS), Arm64InstructionId.CCMP_32_condcmp_imm, Arm64Mnemonic.CCMP, "CCMP W0, #5, #5, HS");
        TestInst(CCMP(W15, 5, 5, HS), Arm64InstructionId.CCMP_32_condcmp_imm, Arm64Mnemonic.CCMP, "CCMP W15, #5, #5, HS");
        TestInst(CCMP(WZR, 5, 5, HS), Arm64InstructionId.CCMP_32_condcmp_imm, Arm64Mnemonic.CCMP, "CCMP WZR, #5, #5, HS");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.CCMP"/>.
    /// </summary>
    [TestMethod]
    public void Test_CCMP_64_condcmp_imm_1()
    {
        TestInst(CCMP(X0, 5, 5, NE), Arm64InstructionId.CCMP_64_condcmp_imm, Arm64Mnemonic.CCMP, "CCMP X0, #5, #5, NE");
        TestInst(CCMP(X15, 5, 5, NE), Arm64InstructionId.CCMP_64_condcmp_imm, Arm64Mnemonic.CCMP, "CCMP X15, #5, #5, NE");
        TestInst(CCMP(XZR, 5, 5, NE), Arm64InstructionId.CCMP_64_condcmp_imm, Arm64Mnemonic.CCMP, "CCMP XZR, #5, #5, NE");
        TestInst(CCMP(X0, 5, 5, HS), Arm64InstructionId.CCMP_64_condcmp_imm, Arm64Mnemonic.CCMP, "CCMP X0, #5, #5, HS");
        TestInst(CCMP(X15, 5, 5, HS), Arm64InstructionId.CCMP_64_condcmp_imm, Arm64Mnemonic.CCMP, "CCMP X15, #5, #5, HS");
        TestInst(CCMP(XZR, 5, 5, HS), Arm64InstructionId.CCMP_64_condcmp_imm, Arm64Mnemonic.CCMP, "CCMP XZR, #5, #5, HS");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.CCMP"/>.
    /// </summary>
    [TestMethod]
    public void Test_CCMP_32_condcmp_reg_2()
    {
        TestInst(CCMP(W0, W1, 5, NE), Arm64InstructionId.CCMP_32_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP W0, W1, #5, NE");
        TestInst(CCMP(W15, W1, 5, NE), Arm64InstructionId.CCMP_32_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP W15, W1, #5, NE");
        TestInst(CCMP(WZR, W1, 5, NE), Arm64InstructionId.CCMP_32_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP WZR, W1, #5, NE");
        TestInst(CCMP(W0, W16, 5, NE), Arm64InstructionId.CCMP_32_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP W0, W16, #5, NE");
        TestInst(CCMP(W15, W16, 5, NE), Arm64InstructionId.CCMP_32_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP W15, W16, #5, NE");
        TestInst(CCMP(WZR, W16, 5, NE), Arm64InstructionId.CCMP_32_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP WZR, W16, #5, NE");
        TestInst(CCMP(W0, WZR, 5, NE), Arm64InstructionId.CCMP_32_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP W0, WZR, #5, NE");
        TestInst(CCMP(W15, WZR, 5, NE), Arm64InstructionId.CCMP_32_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP W15, WZR, #5, NE");
        TestInst(CCMP(WZR, WZR, 5, NE), Arm64InstructionId.CCMP_32_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP WZR, WZR, #5, NE");
        TestInst(CCMP(W0, W1, 5, HS), Arm64InstructionId.CCMP_32_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP W0, W1, #5, HS");
        TestInst(CCMP(W15, W1, 5, HS), Arm64InstructionId.CCMP_32_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP W15, W1, #5, HS");
        TestInst(CCMP(WZR, W1, 5, HS), Arm64InstructionId.CCMP_32_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP WZR, W1, #5, HS");
        TestInst(CCMP(W0, W16, 5, HS), Arm64InstructionId.CCMP_32_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP W0, W16, #5, HS");
        TestInst(CCMP(W15, W16, 5, HS), Arm64InstructionId.CCMP_32_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP W15, W16, #5, HS");
        TestInst(CCMP(WZR, W16, 5, HS), Arm64InstructionId.CCMP_32_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP WZR, W16, #5, HS");
        TestInst(CCMP(W0, WZR, 5, HS), Arm64InstructionId.CCMP_32_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP W0, WZR, #5, HS");
        TestInst(CCMP(W15, WZR, 5, HS), Arm64InstructionId.CCMP_32_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP W15, WZR, #5, HS");
        TestInst(CCMP(WZR, WZR, 5, HS), Arm64InstructionId.CCMP_32_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP WZR, WZR, #5, HS");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.CCMP"/>.
    /// </summary>
    [TestMethod]
    public void Test_CCMP_64_condcmp_reg_3()
    {
        TestInst(CCMP(X0, X1, 5, NE), Arm64InstructionId.CCMP_64_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP X0, X1, #5, NE");
        TestInst(CCMP(X15, X1, 5, NE), Arm64InstructionId.CCMP_64_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP X15, X1, #5, NE");
        TestInst(CCMP(XZR, X1, 5, NE), Arm64InstructionId.CCMP_64_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP XZR, X1, #5, NE");
        TestInst(CCMP(X0, X16, 5, NE), Arm64InstructionId.CCMP_64_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP X0, X16, #5, NE");
        TestInst(CCMP(X15, X16, 5, NE), Arm64InstructionId.CCMP_64_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP X15, X16, #5, NE");
        TestInst(CCMP(XZR, X16, 5, NE), Arm64InstructionId.CCMP_64_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP XZR, X16, #5, NE");
        TestInst(CCMP(X0, XZR, 5, NE), Arm64InstructionId.CCMP_64_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP X0, XZR, #5, NE");
        TestInst(CCMP(X15, XZR, 5, NE), Arm64InstructionId.CCMP_64_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP X15, XZR, #5, NE");
        TestInst(CCMP(XZR, XZR, 5, NE), Arm64InstructionId.CCMP_64_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP XZR, XZR, #5, NE");
        TestInst(CCMP(X0, X1, 5, HS), Arm64InstructionId.CCMP_64_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP X0, X1, #5, HS");
        TestInst(CCMP(X15, X1, 5, HS), Arm64InstructionId.CCMP_64_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP X15, X1, #5, HS");
        TestInst(CCMP(XZR, X1, 5, HS), Arm64InstructionId.CCMP_64_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP XZR, X1, #5, HS");
        TestInst(CCMP(X0, X16, 5, HS), Arm64InstructionId.CCMP_64_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP X0, X16, #5, HS");
        TestInst(CCMP(X15, X16, 5, HS), Arm64InstructionId.CCMP_64_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP X15, X16, #5, HS");
        TestInst(CCMP(XZR, X16, 5, HS), Arm64InstructionId.CCMP_64_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP XZR, X16, #5, HS");
        TestInst(CCMP(X0, XZR, 5, HS), Arm64InstructionId.CCMP_64_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP X0, XZR, #5, HS");
        TestInst(CCMP(X15, XZR, 5, HS), Arm64InstructionId.CCMP_64_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP X15, XZR, #5, HS");
        TestInst(CCMP(XZR, XZR, 5, HS), Arm64InstructionId.CCMP_64_condcmp_reg, Arm64Mnemonic.CCMP, "CCMP XZR, XZR, #5, HS");
    }
}
