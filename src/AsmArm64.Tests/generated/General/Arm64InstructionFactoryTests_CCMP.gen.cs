// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_CCMP_General
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.CCMP"/>.
    /// </summary>
    [TestMethod]
    public void Test_CCMP_32_condcmp_imm_0()
    {
        
        {
            var raw = CCMP(W0, 5, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_32_condcmp_imm, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP W0, #5, #5, NE", asm);
        }
        
        {
            var raw = CCMP(W15, 5, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_32_condcmp_imm, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP W15, #5, #5, NE", asm);
        }
        
        {
            var raw = CCMP(WZR, 5, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_32_condcmp_imm, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP WZR, #5, #5, NE", asm);
        }
        
        {
            var raw = CCMP(W0, 5, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_32_condcmp_imm, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP W0, #5, #5, AL", asm);
        }
        
        {
            var raw = CCMP(W15, 5, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_32_condcmp_imm, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP W15, #5, #5, AL", asm);
        }
        
        {
            var raw = CCMP(WZR, 5, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_32_condcmp_imm, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP WZR, #5, #5, AL", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.CCMP"/>.
    /// </summary>
    [TestMethod]
    public void Test_CCMP_64_condcmp_imm_1()
    {
        
        {
            var raw = CCMP(X0, 5, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_64_condcmp_imm, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP X0, #5, #5, NE", asm);
        }
        
        {
            var raw = CCMP(X15, 5, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_64_condcmp_imm, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP X15, #5, #5, NE", asm);
        }
        
        {
            var raw = CCMP(XZR, 5, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_64_condcmp_imm, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP XZR, #5, #5, NE", asm);
        }
        
        {
            var raw = CCMP(X0, 5, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_64_condcmp_imm, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP X0, #5, #5, AL", asm);
        }
        
        {
            var raw = CCMP(X15, 5, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_64_condcmp_imm, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP X15, #5, #5, AL", asm);
        }
        
        {
            var raw = CCMP(XZR, 5, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_64_condcmp_imm, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP XZR, #5, #5, AL", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.CCMP"/>.
    /// </summary>
    [TestMethod]
    public void Test_CCMP_32_condcmp_reg_2()
    {
        
        {
            var raw = CCMP(W0, W1, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_32_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP W0, W1, #5, NE", asm);
        }
        
        {
            var raw = CCMP(W15, W1, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_32_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP W15, W1, #5, NE", asm);
        }
        
        {
            var raw = CCMP(WZR, W1, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_32_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP WZR, W1, #5, NE", asm);
        }
        
        {
            var raw = CCMP(W0, W16, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_32_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP W0, W16, #5, NE", asm);
        }
        
        {
            var raw = CCMP(W15, W16, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_32_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP W15, W16, #5, NE", asm);
        }
        
        {
            var raw = CCMP(WZR, W16, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_32_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP WZR, W16, #5, NE", asm);
        }
        
        {
            var raw = CCMP(W0, WZR, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_32_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP W0, WZR, #5, NE", asm);
        }
        
        {
            var raw = CCMP(W15, WZR, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_32_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP W15, WZR, #5, NE", asm);
        }
        
        {
            var raw = CCMP(WZR, WZR, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_32_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP WZR, WZR, #5, NE", asm);
        }
        
        {
            var raw = CCMP(W0, W1, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_32_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP W0, W1, #5, AL", asm);
        }
        
        {
            var raw = CCMP(W15, W1, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_32_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP W15, W1, #5, AL", asm);
        }
        
        {
            var raw = CCMP(WZR, W1, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_32_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP WZR, W1, #5, AL", asm);
        }
        
        {
            var raw = CCMP(W0, W16, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_32_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP W0, W16, #5, AL", asm);
        }
        
        {
            var raw = CCMP(W15, W16, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_32_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP W15, W16, #5, AL", asm);
        }
        
        {
            var raw = CCMP(WZR, W16, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_32_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP WZR, W16, #5, AL", asm);
        }
        
        {
            var raw = CCMP(W0, WZR, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_32_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP W0, WZR, #5, AL", asm);
        }
        
        {
            var raw = CCMP(W15, WZR, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_32_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP W15, WZR, #5, AL", asm);
        }
        
        {
            var raw = CCMP(WZR, WZR, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_32_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP WZR, WZR, #5, AL", asm);
        }
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.CCMP"/>.
    /// </summary>
    [TestMethod]
    public void Test_CCMP_64_condcmp_reg_3()
    {
        
        {
            var raw = CCMP(X0, X1, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_64_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP X0, X1, #5, NE", asm);
        }
        
        {
            var raw = CCMP(X15, X1, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_64_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP X15, X1, #5, NE", asm);
        }
        
        {
            var raw = CCMP(XZR, X1, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_64_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP XZR, X1, #5, NE", asm);
        }
        
        {
            var raw = CCMP(X0, X16, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_64_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP X0, X16, #5, NE", asm);
        }
        
        {
            var raw = CCMP(X15, X16, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_64_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP X15, X16, #5, NE", asm);
        }
        
        {
            var raw = CCMP(XZR, X16, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_64_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP XZR, X16, #5, NE", asm);
        }
        
        {
            var raw = CCMP(X0, XZR, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_64_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP X0, XZR, #5, NE", asm);
        }
        
        {
            var raw = CCMP(X15, XZR, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_64_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP X15, XZR, #5, NE", asm);
        }
        
        {
            var raw = CCMP(XZR, XZR, 5, NE);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_64_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP XZR, XZR, #5, NE", asm);
        }
        
        {
            var raw = CCMP(X0, X1, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_64_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP X0, X1, #5, AL", asm);
        }
        
        {
            var raw = CCMP(X15, X1, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_64_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP X15, X1, #5, AL", asm);
        }
        
        {
            var raw = CCMP(XZR, X1, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_64_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP XZR, X1, #5, AL", asm);
        }
        
        {
            var raw = CCMP(X0, X16, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_64_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP X0, X16, #5, AL", asm);
        }
        
        {
            var raw = CCMP(X15, X16, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_64_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP X15, X16, #5, AL", asm);
        }
        
        {
            var raw = CCMP(XZR, X16, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_64_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP XZR, X16, #5, AL", asm);
        }
        
        {
            var raw = CCMP(X0, XZR, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_64_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP X0, XZR, #5, AL", asm);
        }
        
        {
            var raw = CCMP(X15, XZR, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_64_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP X15, XZR, #5, AL", asm);
        }
        
        {
            var raw = CCMP(XZR, XZR, 5, AL);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.CCMP_64_condcmp_reg, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.CCMP, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("CCMP XZR, XZR, #5, AL", asm);
        }
    }
}
