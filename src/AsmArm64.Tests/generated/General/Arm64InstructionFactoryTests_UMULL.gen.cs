// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_UMULL_General : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.UMULL"/>.
    /// </summary>
    [TestMethod]
    public void Test_UMULL_umaddl_64wa_dp_3src_0()
    {
        TestInst(UMULL(X0, W1, W2), asm => asm.UMULL(X0, W1, W2), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL X0, W1, W2");
        TestInst(UMULL(X15, W1, W2), asm => asm.UMULL(X15, W1, W2), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL X15, W1, W2");
        TestInst(UMULL(XZR, W1, W2), asm => asm.UMULL(XZR, W1, W2), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL XZR, W1, W2");
        TestInst(UMULL(X0, W16, W2), asm => asm.UMULL(X0, W16, W2), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL X0, W16, W2");
        TestInst(UMULL(X15, W16, W2), asm => asm.UMULL(X15, W16, W2), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL X15, W16, W2");
        TestInst(UMULL(XZR, W16, W2), asm => asm.UMULL(XZR, W16, W2), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL XZR, W16, W2");
        TestInst(UMULL(X0, WZR, W2), asm => asm.UMULL(X0, WZR, W2), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL X0, WZR, W2");
        TestInst(UMULL(X15, WZR, W2), asm => asm.UMULL(X15, WZR, W2), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL X15, WZR, W2");
        TestInst(UMULL(XZR, WZR, W2), asm => asm.UMULL(XZR, WZR, W2), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL XZR, WZR, W2");
        TestInst(UMULL(X0, W1, W17), asm => asm.UMULL(X0, W1, W17), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL X0, W1, W17");
        TestInst(UMULL(X15, W1, W17), asm => asm.UMULL(X15, W1, W17), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL X15, W1, W17");
        TestInst(UMULL(XZR, W1, W17), asm => asm.UMULL(XZR, W1, W17), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL XZR, W1, W17");
        TestInst(UMULL(X0, W16, W17), asm => asm.UMULL(X0, W16, W17), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL X0, W16, W17");
        TestInst(UMULL(X15, W16, W17), asm => asm.UMULL(X15, W16, W17), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL X15, W16, W17");
        TestInst(UMULL(XZR, W16, W17), asm => asm.UMULL(XZR, W16, W17), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL XZR, W16, W17");
        TestInst(UMULL(X0, WZR, W17), asm => asm.UMULL(X0, WZR, W17), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL X0, WZR, W17");
        TestInst(UMULL(X15, WZR, W17), asm => asm.UMULL(X15, WZR, W17), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL X15, WZR, W17");
        TestInst(UMULL(XZR, WZR, W17), asm => asm.UMULL(XZR, WZR, W17), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL XZR, WZR, W17");
        TestInst(UMULL(X0, W1, WZR), asm => asm.UMULL(X0, W1, WZR), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL X0, W1, WZR");
        TestInst(UMULL(X15, W1, WZR), asm => asm.UMULL(X15, W1, WZR), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL X15, W1, WZR");
        TestInst(UMULL(XZR, W1, WZR), asm => asm.UMULL(XZR, W1, WZR), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL XZR, W1, WZR");
        TestInst(UMULL(X0, W16, WZR), asm => asm.UMULL(X0, W16, WZR), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL X0, W16, WZR");
        TestInst(UMULL(X15, W16, WZR), asm => asm.UMULL(X15, W16, WZR), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL X15, W16, WZR");
        TestInst(UMULL(XZR, W16, WZR), asm => asm.UMULL(XZR, W16, WZR), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL XZR, W16, WZR");
        TestInst(UMULL(X0, WZR, WZR), asm => asm.UMULL(X0, WZR, WZR), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL X0, WZR, WZR");
        TestInst(UMULL(X15, WZR, WZR), asm => asm.UMULL(X15, WZR, WZR), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL X15, WZR, WZR");
        TestInst(UMULL(XZR, WZR, WZR), asm => asm.UMULL(XZR, WZR, WZR), Arm64InstructionId.UMULL_umaddl_64wa_dp_3src, Arm64Mnemonic.UMULL, "UMULL XZR, WZR, WZR");
    }
}
