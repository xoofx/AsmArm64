// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_UMSUBL_General
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.UMSUBL"/>.
    /// </summary>
    [TestMethod]
    public void Test_UMSUBL_64wa_dp_3src_0()
    {
        
        {
            var raw = UMSUBL(X0, W1, W2, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X0, W1, W2, X3", asm);
        }
        
        {
            var raw = UMSUBL(X15, W1, W2, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X15, W1, W2, X3", asm);
        }
        
        {
            var raw = UMSUBL(XZR, W1, W2, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL XZR, W1, W2, X3", asm);
        }
        
        {
            var raw = UMSUBL(X0, W16, W2, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X0, W16, W2, X3", asm);
        }
        
        {
            var raw = UMSUBL(X15, W16, W2, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X15, W16, W2, X3", asm);
        }
        
        {
            var raw = UMSUBL(XZR, W16, W2, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL XZR, W16, W2, X3", asm);
        }
        
        {
            var raw = UMSUBL(X0, WZR, W2, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X0, WZR, W2, X3", asm);
        }
        
        {
            var raw = UMSUBL(X15, WZR, W2, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X15, WZR, W2, X3", asm);
        }
        
        {
            var raw = UMSUBL(XZR, WZR, W2, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL XZR, WZR, W2, X3", asm);
        }
        
        {
            var raw = UMSUBL(X0, W1, W17, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X0, W1, W17, X3", asm);
        }
        
        {
            var raw = UMSUBL(X15, W1, W17, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X15, W1, W17, X3", asm);
        }
        
        {
            var raw = UMSUBL(XZR, W1, W17, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL XZR, W1, W17, X3", asm);
        }
        
        {
            var raw = UMSUBL(X0, W16, W17, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X0, W16, W17, X3", asm);
        }
        
        {
            var raw = UMSUBL(X15, W16, W17, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X15, W16, W17, X3", asm);
        }
        
        {
            var raw = UMSUBL(XZR, W16, W17, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL XZR, W16, W17, X3", asm);
        }
        
        {
            var raw = UMSUBL(X0, WZR, W17, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X0, WZR, W17, X3", asm);
        }
        
        {
            var raw = UMSUBL(X15, WZR, W17, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X15, WZR, W17, X3", asm);
        }
        
        {
            var raw = UMSUBL(XZR, WZR, W17, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL XZR, WZR, W17, X3", asm);
        }
        
        {
            var raw = UMSUBL(X0, W1, WZR, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X0, W1, WZR, X3", asm);
        }
        
        {
            var raw = UMSUBL(X15, W1, WZR, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X15, W1, WZR, X3", asm);
        }
        
        {
            var raw = UMSUBL(XZR, W1, WZR, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL XZR, W1, WZR, X3", asm);
        }
        
        {
            var raw = UMSUBL(X0, W16, WZR, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X0, W16, WZR, X3", asm);
        }
        
        {
            var raw = UMSUBL(X15, W16, WZR, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X15, W16, WZR, X3", asm);
        }
        
        {
            var raw = UMSUBL(XZR, W16, WZR, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL XZR, W16, WZR, X3", asm);
        }
        
        {
            var raw = UMSUBL(X0, WZR, WZR, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X0, WZR, WZR, X3", asm);
        }
        
        {
            var raw = UMSUBL(X15, WZR, WZR, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X15, WZR, WZR, X3", asm);
        }
        
        {
            var raw = UMSUBL(XZR, WZR, WZR, X3);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL XZR, WZR, WZR, X3", asm);
        }
        
        {
            var raw = UMSUBL(X0, W1, W2, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X0, W1, W2, X18", asm);
        }
        
        {
            var raw = UMSUBL(X15, W1, W2, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X15, W1, W2, X18", asm);
        }
        
        {
            var raw = UMSUBL(XZR, W1, W2, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL XZR, W1, W2, X18", asm);
        }
        
        {
            var raw = UMSUBL(X0, W16, W2, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X0, W16, W2, X18", asm);
        }
        
        {
            var raw = UMSUBL(X15, W16, W2, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X15, W16, W2, X18", asm);
        }
        
        {
            var raw = UMSUBL(XZR, W16, W2, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL XZR, W16, W2, X18", asm);
        }
        
        {
            var raw = UMSUBL(X0, WZR, W2, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X0, WZR, W2, X18", asm);
        }
        
        {
            var raw = UMSUBL(X15, WZR, W2, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X15, WZR, W2, X18", asm);
        }
        
        {
            var raw = UMSUBL(XZR, WZR, W2, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL XZR, WZR, W2, X18", asm);
        }
        
        {
            var raw = UMSUBL(X0, W1, W17, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X0, W1, W17, X18", asm);
        }
        
        {
            var raw = UMSUBL(X15, W1, W17, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X15, W1, W17, X18", asm);
        }
        
        {
            var raw = UMSUBL(XZR, W1, W17, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL XZR, W1, W17, X18", asm);
        }
        
        {
            var raw = UMSUBL(X0, W16, W17, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X0, W16, W17, X18", asm);
        }
        
        {
            var raw = UMSUBL(X15, W16, W17, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X15, W16, W17, X18", asm);
        }
        
        {
            var raw = UMSUBL(XZR, W16, W17, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL XZR, W16, W17, X18", asm);
        }
        
        {
            var raw = UMSUBL(X0, WZR, W17, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X0, WZR, W17, X18", asm);
        }
        
        {
            var raw = UMSUBL(X15, WZR, W17, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X15, WZR, W17, X18", asm);
        }
        
        {
            var raw = UMSUBL(XZR, WZR, W17, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL XZR, WZR, W17, X18", asm);
        }
        
        {
            var raw = UMSUBL(X0, W1, WZR, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X0, W1, WZR, X18", asm);
        }
        
        {
            var raw = UMSUBL(X15, W1, WZR, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X15, W1, WZR, X18", asm);
        }
        
        {
            var raw = UMSUBL(XZR, W1, WZR, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL XZR, W1, WZR, X18", asm);
        }
        
        {
            var raw = UMSUBL(X0, W16, WZR, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X0, W16, WZR, X18", asm);
        }
        
        {
            var raw = UMSUBL(X15, W16, WZR, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X15, W16, WZR, X18", asm);
        }
        
        {
            var raw = UMSUBL(XZR, W16, WZR, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL XZR, W16, WZR, X18", asm);
        }
        
        {
            var raw = UMSUBL(X0, WZR, WZR, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X0, WZR, WZR, X18", asm);
        }
        
        {
            var raw = UMSUBL(X15, WZR, WZR, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL X15, WZR, WZR, X18", asm);
        }
        
        {
            var raw = UMSUBL(XZR, WZR, WZR, X18);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMSUBL_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMSUBL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMSUBL XZR, WZR, WZR, X18", asm);
        }
        
        {
            var raw = UMSUBL(X0, W1, W2, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL X0, W1, W2", asm);
        }
        
        {
            var raw = UMSUBL(X15, W1, W2, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL X15, W1, W2", asm);
        }
        
        {
            var raw = UMSUBL(XZR, W1, W2, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL XZR, W1, W2", asm);
        }
        
        {
            var raw = UMSUBL(X0, W16, W2, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL X0, W16, W2", asm);
        }
        
        {
            var raw = UMSUBL(X15, W16, W2, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL X15, W16, W2", asm);
        }
        
        {
            var raw = UMSUBL(XZR, W16, W2, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL XZR, W16, W2", asm);
        }
        
        {
            var raw = UMSUBL(X0, WZR, W2, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL X0, WZR, W2", asm);
        }
        
        {
            var raw = UMSUBL(X15, WZR, W2, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL X15, WZR, W2", asm);
        }
        
        {
            var raw = UMSUBL(XZR, WZR, W2, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL XZR, WZR, W2", asm);
        }
        
        {
            var raw = UMSUBL(X0, W1, W17, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL X0, W1, W17", asm);
        }
        
        {
            var raw = UMSUBL(X15, W1, W17, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL X15, W1, W17", asm);
        }
        
        {
            var raw = UMSUBL(XZR, W1, W17, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL XZR, W1, W17", asm);
        }
        
        {
            var raw = UMSUBL(X0, W16, W17, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL X0, W16, W17", asm);
        }
        
        {
            var raw = UMSUBL(X15, W16, W17, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL X15, W16, W17", asm);
        }
        
        {
            var raw = UMSUBL(XZR, W16, W17, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL XZR, W16, W17", asm);
        }
        
        {
            var raw = UMSUBL(X0, WZR, W17, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL X0, WZR, W17", asm);
        }
        
        {
            var raw = UMSUBL(X15, WZR, W17, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL X15, WZR, W17", asm);
        }
        
        {
            var raw = UMSUBL(XZR, WZR, W17, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL XZR, WZR, W17", asm);
        }
        
        {
            var raw = UMSUBL(X0, W1, WZR, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL X0, W1, WZR", asm);
        }
        
        {
            var raw = UMSUBL(X15, W1, WZR, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL X15, W1, WZR", asm);
        }
        
        {
            var raw = UMSUBL(XZR, W1, WZR, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL XZR, W1, WZR", asm);
        }
        
        {
            var raw = UMSUBL(X0, W16, WZR, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL X0, W16, WZR", asm);
        }
        
        {
            var raw = UMSUBL(X15, W16, WZR, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL X15, W16, WZR", asm);
        }
        
        {
            var raw = UMSUBL(XZR, W16, WZR, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL XZR, W16, WZR", asm);
        }
        
        {
            var raw = UMSUBL(X0, WZR, WZR, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL X0, WZR, WZR", asm);
        }
        
        {
            var raw = UMSUBL(X15, WZR, WZR, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL X15, WZR, WZR", asm);
        }
        
        {
            var raw = UMSUBL(XZR, WZR, WZR, XZR);
            var instruction = Arm64Instruction.Decode(raw);
            Assert.AreEqual(Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, instruction.Id);
            Assert.AreEqual(Arm64Mnemonic.UMNEGL, instruction.Mnemonic);
            var asm = instruction.ToString("H", null);
            Assert.AreEqual("UMNEGL XZR, WZR, WZR", asm);
        }
    }
}
