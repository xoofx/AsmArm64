// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_AUTIB_General : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.AUTIB"/>.
    /// </summary>
    [TestMethod]
    public void Test_AUTIB_64p_dp_1src_0()
    {
        TestInst(AUTIB(X0, X2), asm => asm.AUTIB(X0, X2), Arm64InstructionId.AUTIB_64p_dp_1src, Arm64Mnemonic.AUTIB, "AUTIB X0, X2");
        TestInst(AUTIB(X15, X2), asm => asm.AUTIB(X15, X2), Arm64InstructionId.AUTIB_64p_dp_1src, Arm64Mnemonic.AUTIB, "AUTIB X15, X2");
        TestInst(AUTIB(XZR, X2), asm => asm.AUTIB(XZR, X2), Arm64InstructionId.AUTIB_64p_dp_1src, Arm64Mnemonic.AUTIB, "AUTIB XZR, X2");
        TestInst(AUTIB(X0, X18), asm => asm.AUTIB(X0, X18), Arm64InstructionId.AUTIB_64p_dp_1src, Arm64Mnemonic.AUTIB, "AUTIB X0, X18");
        TestInst(AUTIB(X15, X18), asm => asm.AUTIB(X15, X18), Arm64InstructionId.AUTIB_64p_dp_1src, Arm64Mnemonic.AUTIB, "AUTIB X15, X18");
        TestInst(AUTIB(XZR, X18), asm => asm.AUTIB(XZR, X18), Arm64InstructionId.AUTIB_64p_dp_1src, Arm64Mnemonic.AUTIB, "AUTIB XZR, X18");
        TestInst(AUTIB(X0, SP), asm => asm.AUTIB(X0, SP), Arm64InstructionId.AUTIB_64p_dp_1src, Arm64Mnemonic.AUTIB, "AUTIB X0, SP");
        TestInst(AUTIB(X15, SP), asm => asm.AUTIB(X15, SP), Arm64InstructionId.AUTIB_64p_dp_1src, Arm64Mnemonic.AUTIB, "AUTIB X15, SP");
        TestInst(AUTIB(XZR, SP), asm => asm.AUTIB(XZR, SP), Arm64InstructionId.AUTIB_64p_dp_1src, Arm64Mnemonic.AUTIB, "AUTIB XZR, SP");
    }
}
