// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_STR_General : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STR"/>.
    /// </summary>
    [TestMethod]
    public void Test_STR_32_ldst_immpost_0()
    {
        TestInst(STR(W0, _[X2], 5), asm => asm.STR(W0, _[X2], 5), Arm64InstructionId.STR_32_ldst_immpost, Arm64Mnemonic.STR, "STR W0, [X2], #5");
        TestInst(STR(W15, _[X2], 5), asm => asm.STR(W15, _[X2], 5), Arm64InstructionId.STR_32_ldst_immpost, Arm64Mnemonic.STR, "STR W15, [X2], #5");
        TestInst(STR(WZR, _[X2], 5), asm => asm.STR(WZR, _[X2], 5), Arm64InstructionId.STR_32_ldst_immpost, Arm64Mnemonic.STR, "STR WZR, [X2], #5");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STR"/>.
    /// </summary>
    [TestMethod]
    public void Test_STR_64_ldst_immpost_1()
    {
        TestInst(STR(X0, _[X2], 5), asm => asm.STR(X0, _[X2], 5), Arm64InstructionId.STR_64_ldst_immpost, Arm64Mnemonic.STR, "STR X0, [X2], #5");
        TestInst(STR(X15, _[X2], 5), asm => asm.STR(X15, _[X2], 5), Arm64InstructionId.STR_64_ldst_immpost, Arm64Mnemonic.STR, "STR X15, [X2], #5");
        TestInst(STR(XZR, _[X2], 5), asm => asm.STR(XZR, _[X2], 5), Arm64InstructionId.STR_64_ldst_immpost, Arm64Mnemonic.STR, "STR XZR, [X2], #5");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STR"/>.
    /// </summary>
    [TestMethod]
    public void Test_STR_32_ldst_immpre_2()
    {
        TestInst(STR(W0, _[X2, 5].Pre), asm => asm.STR(W0, _[X2, 5].Pre), Arm64InstructionId.STR_32_ldst_immpre, Arm64Mnemonic.STR, "STR W0, [X2, #5]!");
        TestInst(STR(W15, _[X2, 5].Pre), asm => asm.STR(W15, _[X2, 5].Pre), Arm64InstructionId.STR_32_ldst_immpre, Arm64Mnemonic.STR, "STR W15, [X2, #5]!");
        TestInst(STR(WZR, _[X2, 5].Pre), asm => asm.STR(WZR, _[X2, 5].Pre), Arm64InstructionId.STR_32_ldst_immpre, Arm64Mnemonic.STR, "STR WZR, [X2, #5]!");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STR"/>.
    /// </summary>
    [TestMethod]
    public void Test_STR_64_ldst_immpre_3()
    {
        TestInst(STR(X0, _[X2, 5].Pre), asm => asm.STR(X0, _[X2, 5].Pre), Arm64InstructionId.STR_64_ldst_immpre, Arm64Mnemonic.STR, "STR X0, [X2, #5]!");
        TestInst(STR(X15, _[X2, 5].Pre), asm => asm.STR(X15, _[X2, 5].Pre), Arm64InstructionId.STR_64_ldst_immpre, Arm64Mnemonic.STR, "STR X15, [X2, #5]!");
        TestInst(STR(XZR, _[X2, 5].Pre), asm => asm.STR(XZR, _[X2, 5].Pre), Arm64InstructionId.STR_64_ldst_immpre, Arm64Mnemonic.STR, "STR XZR, [X2, #5]!");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STR"/>.
    /// </summary>
    [TestMethod]
    public void Test_STR_32_ldst_pos_4()
    {
        TestInst(STR(W0, _[X2, 20]), asm => asm.STR(W0, _[X2, 20]), Arm64InstructionId.STR_32_ldst_pos, Arm64Mnemonic.STR, "STR W0, [X2, #20]");
        TestInst(STR(W15, _[X2, 20]), asm => asm.STR(W15, _[X2, 20]), Arm64InstructionId.STR_32_ldst_pos, Arm64Mnemonic.STR, "STR W15, [X2, #20]");
        TestInst(STR(WZR, _[X2, 20]), asm => asm.STR(WZR, _[X2, 20]), Arm64InstructionId.STR_32_ldst_pos, Arm64Mnemonic.STR, "STR WZR, [X2, #20]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STR"/>.
    /// </summary>
    [TestMethod]
    public void Test_STR_64_ldst_pos_5()
    {
        TestInst(STR(X0, _[X2, 5]), asm => asm.STR(X0, _[X2, 5]), Arm64InstructionId.STR_64_ldst_pos, Arm64Mnemonic.STR, "STR X0, [X2, #5]");
        TestInst(STR(X15, _[X2, 5]), asm => asm.STR(X15, _[X2, 5]), Arm64InstructionId.STR_64_ldst_pos, Arm64Mnemonic.STR, "STR X15, [X2, #5]");
        TestInst(STR(XZR, _[X2, 5]), asm => asm.STR(XZR, _[X2, 5]), Arm64InstructionId.STR_64_ldst_pos, Arm64Mnemonic.STR, "STR XZR, [X2, #5]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STR"/>.
    /// </summary>
    [TestMethod]
    public void Test_STR_32_ldst_regoff_6()
    {
        TestInst(STR(W0, _[X2, X3, _LSL, 2]), asm => asm.STR(W0, _[X2, X3, _LSL, 2]), Arm64InstructionId.STR_32_ldst_regoff, Arm64Mnemonic.STR, "STR W0, [X2, X3, LSL #2]");
        TestInst(STR(W15, _[X2, X3, _LSL, 2]), asm => asm.STR(W15, _[X2, X3, _LSL, 2]), Arm64InstructionId.STR_32_ldst_regoff, Arm64Mnemonic.STR, "STR W15, [X2, X3, LSL #2]");
        TestInst(STR(WZR, _[X2, X3, _LSL, 2]), asm => asm.STR(WZR, _[X2, X3, _LSL, 2]), Arm64InstructionId.STR_32_ldst_regoff, Arm64Mnemonic.STR, "STR WZR, [X2, X3, LSL #2]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STR"/>.
    /// </summary>
    [TestMethod]
    public void Test_STR_32_ldst_regoff_7()
    {
        TestInst(STR(W0, _[X2, W3, _UXTW, 2]), asm => asm.STR(W0, _[X2, W3, _UXTW, 2]), Arm64InstructionId.STR_32_ldst_regoff, Arm64Mnemonic.STR, "STR W0, [X2, W3, UXTW #2]");
        TestInst(STR(W15, _[X2, W3, _UXTW, 2]), asm => asm.STR(W15, _[X2, W3, _UXTW, 2]), Arm64InstructionId.STR_32_ldst_regoff, Arm64Mnemonic.STR, "STR W15, [X2, W3, UXTW #2]");
        TestInst(STR(WZR, _[X2, W3, _UXTW, 2]), asm => asm.STR(WZR, _[X2, W3, _UXTW, 2]), Arm64InstructionId.STR_32_ldst_regoff, Arm64Mnemonic.STR, "STR WZR, [X2, W3, UXTW #2]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STR"/>.
    /// </summary>
    [TestMethod]
    public void Test_STR_64_ldst_regoff_8()
    {
        TestInst(STR(X0, _[X2, X3, _LSL, 3]), asm => asm.STR(X0, _[X2, X3, _LSL, 3]), Arm64InstructionId.STR_64_ldst_regoff, Arm64Mnemonic.STR, "STR X0, [X2, X3, LSL #3]");
        TestInst(STR(X15, _[X2, X3, _LSL, 3]), asm => asm.STR(X15, _[X2, X3, _LSL, 3]), Arm64InstructionId.STR_64_ldst_regoff, Arm64Mnemonic.STR, "STR X15, [X2, X3, LSL #3]");
        TestInst(STR(XZR, _[X2, X3, _LSL, 3]), asm => asm.STR(XZR, _[X2, X3, _LSL, 3]), Arm64InstructionId.STR_64_ldst_regoff, Arm64Mnemonic.STR, "STR XZR, [X2, X3, LSL #3]");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.STR"/>.
    /// </summary>
    [TestMethod]
    public void Test_STR_64_ldst_regoff_9()
    {
        TestInst(STR(X0, _[X2, W3, _UXTW, 3]), asm => asm.STR(X0, _[X2, W3, _UXTW, 3]), Arm64InstructionId.STR_64_ldst_regoff, Arm64Mnemonic.STR, "STR X0, [X2, W3, UXTW #3]");
        TestInst(STR(X15, _[X2, W3, _UXTW, 3]), asm => asm.STR(X15, _[X2, W3, _UXTW, 3]), Arm64InstructionId.STR_64_ldst_regoff, Arm64Mnemonic.STR, "STR X15, [X2, W3, UXTW #3]");
        TestInst(STR(XZR, _[X2, W3, _UXTW, 3]), asm => asm.STR(XZR, _[X2, W3, _UXTW, 3]), Arm64InstructionId.STR_64_ldst_regoff, Arm64Mnemonic.STR, "STR XZR, [X2, W3, UXTW #3]");
    }
}
