// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_UMNEGL_General : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.UMNEGL"/>.
    /// </summary>
    [TestMethod]
    public void Test_UMNEGL_umsubl_64wa_dp_3src_0()
    {
        TestInst(UMNEGL(X0, W1, W2), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL X0, W1, W2");
        TestInst(UMNEGL(X15, W1, W2), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL X15, W1, W2");
        TestInst(UMNEGL(XZR, W1, W2), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL XZR, W1, W2");
        TestInst(UMNEGL(X0, W16, W2), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL X0, W16, W2");
        TestInst(UMNEGL(X15, W16, W2), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL X15, W16, W2");
        TestInst(UMNEGL(XZR, W16, W2), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL XZR, W16, W2");
        TestInst(UMNEGL(X0, WZR, W2), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL X0, WZR, W2");
        TestInst(UMNEGL(X15, WZR, W2), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL X15, WZR, W2");
        TestInst(UMNEGL(XZR, WZR, W2), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL XZR, WZR, W2");
        TestInst(UMNEGL(X0, W1, W17), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL X0, W1, W17");
        TestInst(UMNEGL(X15, W1, W17), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL X15, W1, W17");
        TestInst(UMNEGL(XZR, W1, W17), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL XZR, W1, W17");
        TestInst(UMNEGL(X0, W16, W17), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL X0, W16, W17");
        TestInst(UMNEGL(X15, W16, W17), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL X15, W16, W17");
        TestInst(UMNEGL(XZR, W16, W17), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL XZR, W16, W17");
        TestInst(UMNEGL(X0, WZR, W17), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL X0, WZR, W17");
        TestInst(UMNEGL(X15, WZR, W17), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL X15, WZR, W17");
        TestInst(UMNEGL(XZR, WZR, W17), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL XZR, WZR, W17");
        TestInst(UMNEGL(X0, W1, WZR), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL X0, W1, WZR");
        TestInst(UMNEGL(X15, W1, WZR), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL X15, W1, WZR");
        TestInst(UMNEGL(XZR, W1, WZR), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL XZR, W1, WZR");
        TestInst(UMNEGL(X0, W16, WZR), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL X0, W16, WZR");
        TestInst(UMNEGL(X15, W16, WZR), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL X15, W16, WZR");
        TestInst(UMNEGL(XZR, W16, WZR), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL XZR, W16, WZR");
        TestInst(UMNEGL(X0, WZR, WZR), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL X0, WZR, WZR");
        TestInst(UMNEGL(X15, WZR, WZR), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL X15, WZR, WZR");
        TestInst(UMNEGL(XZR, WZR, WZR), Arm64InstructionId.UMNEGL_umsubl_64wa_dp_3src, Arm64Mnemonic.UMNEGL, "UMNEGL XZR, WZR, WZR");
    }
}
