// Copyright (c) Alexandre Mutel. All rights reserved.
// Licensed under the BSD-Clause 2 license.
// See license.txt file in the project root for full license information.
// ------------------------------------------------------------------------------
// This code was generated by AsmArm64.CodeGen.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// ------------------------------------------------------------------------------
// ReSharper disable All
// ------------------------------------------------------------------------------
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
using static AsmArm64.Arm64InstructionFactory;
using static AsmArm64.Arm64Factory;
namespace AsmArm64.Tests.General;

[TestClass]
public class Arm64InstructionFactoryTests_SXTH_General : Arm64InstructionFactoryTests
{
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SXTH"/>.
    /// </summary>
    [TestMethod]
    public void Test_SXTH_sbfm_32m_bitfield_0()
    {
        TestInst(SXTH(W0, W1), asm => asm.SXTH(W0, W1), Arm64InstructionId.SXTH_sbfm_32m_bitfield, Arm64Mnemonic.SXTH, "SXTH W0, W1");
        TestInst(SXTH(W15, W1), asm => asm.SXTH(W15, W1), Arm64InstructionId.SXTH_sbfm_32m_bitfield, Arm64Mnemonic.SXTH, "SXTH W15, W1");
        TestInst(SXTH(WZR, W1), asm => asm.SXTH(WZR, W1), Arm64InstructionId.SXTH_sbfm_32m_bitfield, Arm64Mnemonic.SXTH, "SXTH WZR, W1");
        TestInst(SXTH(W0, W16), asm => asm.SXTH(W0, W16), Arm64InstructionId.SXTH_sbfm_32m_bitfield, Arm64Mnemonic.SXTH, "SXTH W0, W16");
        TestInst(SXTH(W15, W16), asm => asm.SXTH(W15, W16), Arm64InstructionId.SXTH_sbfm_32m_bitfield, Arm64Mnemonic.SXTH, "SXTH W15, W16");
        TestInst(SXTH(WZR, W16), asm => asm.SXTH(WZR, W16), Arm64InstructionId.SXTH_sbfm_32m_bitfield, Arm64Mnemonic.SXTH, "SXTH WZR, W16");
        TestInst(SXTH(W0, WZR), asm => asm.SXTH(W0, WZR), Arm64InstructionId.SXTH_sbfm_32m_bitfield, Arm64Mnemonic.SXTH, "SXTH W0, WZR");
        TestInst(SXTH(W15, WZR), asm => asm.SXTH(W15, WZR), Arm64InstructionId.SXTH_sbfm_32m_bitfield, Arm64Mnemonic.SXTH, "SXTH W15, WZR");
        TestInst(SXTH(WZR, WZR), asm => asm.SXTH(WZR, WZR), Arm64InstructionId.SXTH_sbfm_32m_bitfield, Arm64Mnemonic.SXTH, "SXTH WZR, WZR");
    }
    
    /// <summary>
    /// Test of <see cref="Arm64InstructionFactory.SXTH"/>.
    /// </summary>
    [TestMethod]
    public void Test_SXTH_sbfm_64m_bitfield_1()
    {
        TestInst(SXTH(X0, W1), asm => asm.SXTH(X0, W1), Arm64InstructionId.SXTH_sbfm_64m_bitfield, Arm64Mnemonic.SXTH, "SXTH X0, W1");
        TestInst(SXTH(X15, W1), asm => asm.SXTH(X15, W1), Arm64InstructionId.SXTH_sbfm_64m_bitfield, Arm64Mnemonic.SXTH, "SXTH X15, W1");
        TestInst(SXTH(XZR, W1), asm => asm.SXTH(XZR, W1), Arm64InstructionId.SXTH_sbfm_64m_bitfield, Arm64Mnemonic.SXTH, "SXTH XZR, W1");
        TestInst(SXTH(X0, W16), asm => asm.SXTH(X0, W16), Arm64InstructionId.SXTH_sbfm_64m_bitfield, Arm64Mnemonic.SXTH, "SXTH X0, W16");
        TestInst(SXTH(X15, W16), asm => asm.SXTH(X15, W16), Arm64InstructionId.SXTH_sbfm_64m_bitfield, Arm64Mnemonic.SXTH, "SXTH X15, W16");
        TestInst(SXTH(XZR, W16), asm => asm.SXTH(XZR, W16), Arm64InstructionId.SXTH_sbfm_64m_bitfield, Arm64Mnemonic.SXTH, "SXTH XZR, W16");
        TestInst(SXTH(X0, WZR), asm => asm.SXTH(X0, WZR), Arm64InstructionId.SXTH_sbfm_64m_bitfield, Arm64Mnemonic.SXTH, "SXTH X0, WZR");
        TestInst(SXTH(X15, WZR), asm => asm.SXTH(X15, WZR), Arm64InstructionId.SXTH_sbfm_64m_bitfield, Arm64Mnemonic.SXTH, "SXTH X15, WZR");
        TestInst(SXTH(XZR, WZR), asm => asm.SXTH(XZR, WZR), Arm64InstructionId.SXTH_sbfm_64m_bitfield, Arm64Mnemonic.SXTH, "SXTH XZR, WZR");
    }
}
